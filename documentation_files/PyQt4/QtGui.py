class QPaintDevice():
    """"""
    PdmWidth = int() # QPaintDevice.PaintDeviceMetric enum
    PdmHeight = int() # QPaintDevice.PaintDeviceMetric enum
    PdmWidthMM = int() # QPaintDevice.PaintDeviceMetric enum
    PdmHeightMM = int() # QPaintDevice.PaintDeviceMetric enum
    PdmNumColors = int() # QPaintDevice.PaintDeviceMetric enum
    PdmDepth = int() # QPaintDevice.PaintDeviceMetric enum
    PdmDpiX = int() # QPaintDevice.PaintDeviceMetric enum
    PdmDpiY = int() # QPaintDevice.PaintDeviceMetric enum
    PdmPhysicalDpiX = int() # QPaintDevice.PaintDeviceMetric enum
    PdmPhysicalDpiY = int() # QPaintDevice.PaintDeviceMetric enum

    def __init__():
        """None QPaintDevice.__init__()"""
        return None
    def metric(_metric):
        """int QPaintDevice.metric(QPaintDevice.PaintDeviceMetric _metric)"""
        return int()
    def colorCount():
        """int QPaintDevice.colorCount()"""
        return int()
    def paintingActive():
        """bool QPaintDevice.paintingActive()"""
        return bool()
    def depth():
        """int QPaintDevice.depth()"""
        return int()
    def numColors():
        """int QPaintDevice.numColors()"""
        return int()
    def physicalDpiY():
        """int QPaintDevice.physicalDpiY()"""
        return int()
    def physicalDpiX():
        """int QPaintDevice.physicalDpiX()"""
        return int()
    def logicalDpiY():
        """int QPaintDevice.logicalDpiY()"""
        return int()
    def logicalDpiX():
        """int QPaintDevice.logicalDpiX()"""
        return int()
    def heightMM():
        """int QPaintDevice.heightMM()"""
        return int()
    def widthMM():
        """int QPaintDevice.widthMM()"""
        return int()
    def height():
        """int QPaintDevice.height()"""
        return int()
    def width():
        """int QPaintDevice.width()"""
        return int()
    def paintEngine():
        """abstract QPaintEngine QPaintDevice.paintEngine()"""
        return QPaintEngine()


class QWidget(QObject, QPaintDevice):
    """"""
    DrawWindowBackground = int() # QWidget.RenderFlag enum
    DrawChildren = int() # QWidget.RenderFlag enum
    IgnoreMask = int() # QWidget.RenderFlag enum

    def __init__(_parent, _flags):
        """None QWidget.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def setInputMethodHints(_hints):
        """None QWidget.setInputMethodHints(Qt.InputMethodHints _hints)"""
        return None
    def inputMethodHints():
        """Qt.InputMethodHints QWidget.inputMethodHints()"""
        return Qt.InputMethodHints()
    def previousInFocusChain():
        """QWidget QWidget.previousInFocusChain()"""
        return QWidget()
    def contentsMargins():
        """QMargins QWidget.contentsMargins()"""
        return QMargins()
    def ungrabGesture(_type):
        """None QWidget.ungrabGesture(Qt.GestureType _type)"""
        return None
    def grabGesture(_type, _flags):
        """None QWidget.grabGesture(Qt.GestureType _type, Qt.GestureFlags _flags)"""
        return None
    def setGraphicsEffect(_effect):
        """None QWidget.setGraphicsEffect(QGraphicsEffect _effect)"""
        return None
    def graphicsEffect():
        """QGraphicsEffect QWidget.graphicsEffect()"""
        return QGraphicsEffect()
    def graphicsProxyWidget():
        """QGraphicsProxyWidget QWidget.graphicsProxyWidget()"""
        return QGraphicsProxyWidget()
    def windowFilePath():
        """QString QWidget.windowFilePath()"""
        return QString()
    def setWindowFilePath(_filePath):
        """None QWidget.setWindowFilePath(QString _filePath)"""
        return None
    def nativeParentWidget():
        """QWidget QWidget.nativeParentWidget()"""
        return QWidget()
    def effectiveWinId():
        """int QWidget.effectiveWinId()"""
        return int()
    def unsetLocale():
        """None QWidget.unsetLocale()"""
        return None
    def locale():
        """QLocale QWidget.locale()"""
        return QLocale()
    def setLocale(_locale):
        """None QWidget.setLocale(QLocale _locale)"""
        return None
    def render(_target, _targetOffset, _sourceRegion, _flags):
        """None QWidget.render(QPaintDevice _target, QPoint _targetOffset, QRegion _sourceRegion, QWidget.RenderFlags _flags)"""
        return None
    def render(_painter, _targetOffset, _sourceRegion, _flags):
        """None QWidget.render(QPainter _painter, QPoint _targetOffset, QRegion _sourceRegion, QWidget.RenderFlags _flags)"""
        return None
    def restoreGeometry(_geometry):
        """bool QWidget.restoreGeometry(QByteArray _geometry)"""
        return bool()
    def saveGeometry():
        """QByteArray QWidget.saveGeometry()"""
        return QByteArray()
    def setShortcutAutoRepeat(_id, _enabled):
        """None QWidget.setShortcutAutoRepeat(int _id, bool _enabled)"""
        return None
    def styleSheet():
        """QString QWidget.styleSheet()"""
        return QString()
    def setStyleSheet(_styleSheet):
        """None QWidget.setStyleSheet(QString _styleSheet)"""
        return None
    def setAutoFillBackground(_enabled):
        """None QWidget.setAutoFillBackground(bool _enabled)"""
        return None
    def autoFillBackground():
        """bool QWidget.autoFillBackground()"""
        return bool()
    def setWindowModality(_windowModality):
        """None QWidget.setWindowModality(Qt.WindowModality _windowModality)"""
        return None
    def windowModality():
        """Qt.WindowModality QWidget.windowModality()"""
        return Qt.WindowModality()
    def testAttribute(_attribute):
        """bool QWidget.testAttribute(Qt.WidgetAttribute _attribute)"""
        return bool()
    def parentWidget():
        """QWidget QWidget.parentWidget()"""
        return QWidget()
    def height():
        """int QWidget.height()"""
        return int()
    def width():
        """int QWidget.width()"""
        return int()
    def size():
        """QSize QWidget.size()"""
        return QSize()
    def geometry():
        """QRect QWidget.geometry()"""
        return QRect()
    def rect():
        """QRect QWidget.rect()"""
        return QRect()
    def isHidden():
        """bool QWidget.isHidden()"""
        return bool()
    def isVisible():
        """bool QWidget.isVisible()"""
        return bool()
    def updatesEnabled():
        """bool QWidget.updatesEnabled()"""
        return bool()
    def underMouse():
        """bool QWidget.underMouse()"""
        return bool()
    def hasMouseTracking():
        """bool QWidget.hasMouseTracking()"""
        return bool()
    def setMouseTracking(_enable):
        """None QWidget.setMouseTracking(bool _enable)"""
        return None
    def fontInfo():
        """QFontInfo QWidget.fontInfo()"""
        return QFontInfo()
    def fontMetrics():
        """QFontMetrics QWidget.fontMetrics()"""
        return QFontMetrics()
    def font():
        """QFont QWidget.font()"""
        return QFont()
    def maximumHeight():
        """int QWidget.maximumHeight()"""
        return int()
    def maximumWidth():
        """int QWidget.maximumWidth()"""
        return int()
    def minimumHeight():
        """int QWidget.minimumHeight()"""
        return int()
    def minimumWidth():
        """int QWidget.minimumWidth()"""
        return int()
    def isEnabledToTLW():
        """bool QWidget.isEnabledToTLW()"""
        return bool()
    def isModal():
        """bool QWidget.isModal()"""
        return bool()
    def isEnabled():
        """bool QWidget.isEnabled()"""
        return bool()
    def isWindow():
        """bool QWidget.isWindow()"""
        return bool()
    def isTopLevel():
        """bool QWidget.isTopLevel()"""
        return bool()
    def winId():
        """int QWidget.winId()"""
        return int()
    def windowFlags():
        """Qt.WindowFlags QWidget.windowFlags()"""
        return Qt.WindowFlags()
    def windowType():
        """Qt.WindowType QWidget.windowType()"""
        return Qt.WindowType()
    def languageChange():
        """None QWidget.languageChange()"""
        return None
    def windowActivationChange():
        """bool QWidget.windowActivationChange()"""
        return bool()
    def fontChange():
        """QFont QWidget.fontChange()"""
        return QFont()
    def paletteChange():
        """QPalette QWidget.paletteChange()"""
        return QPalette()
    def enabledChange():
        """bool QWidget.enabledChange()"""
        return bool()
    def focusPreviousChild():
        """bool QWidget.focusPreviousChild()"""
        return bool()
    def focusNextChild():
        """bool QWidget.focusNextChild()"""
        return bool()
    def focusNextPrevChild(_next):
        """bool QWidget.focusNextPrevChild(bool _next)"""
        return bool()
    def destroy(_destroyWindow, _destroySubWindows):
        """None QWidget.destroy(bool _destroyWindow, bool _destroySubWindows)"""
        return None
    def create(_window, _initializeWindow, _destroyOldWindow):
        """None QWidget.create(int _window, bool _initializeWindow, bool _destroyOldWindow)"""
        return None
    def updateMicroFocus():
        """None QWidget.updateMicroFocus()"""
        return None
    def resetInputContext():
        """None QWidget.resetInputContext()"""
        return None
    def inputMethodQuery():
        """Qt.InputMethodQuery QWidget.inputMethodQuery()"""
        return Qt.InputMethodQuery()
    def inputMethodEvent():
        """QInputMethodEvent QWidget.inputMethodEvent()"""
        return QInputMethodEvent()
    def metric():
        """QPaintDevice.PaintDeviceMetric QWidget.metric()"""
        return QPaintDevice.PaintDeviceMetric()
    def changeEvent():
        """QEvent QWidget.changeEvent()"""
        return QEvent()
    def hideEvent():
        """QHideEvent QWidget.hideEvent()"""
        return QHideEvent()
    def showEvent():
        """QShowEvent QWidget.showEvent()"""
        return QShowEvent()
    def dropEvent():
        """QDropEvent QWidget.dropEvent()"""
        return QDropEvent()
    def dragLeaveEvent():
        """QDragLeaveEvent QWidget.dragLeaveEvent()"""
        return QDragLeaveEvent()
    def dragMoveEvent():
        """QDragMoveEvent QWidget.dragMoveEvent()"""
        return QDragMoveEvent()
    def dragEnterEvent():
        """QDragEnterEvent QWidget.dragEnterEvent()"""
        return QDragEnterEvent()
    def actionEvent():
        """QActionEvent QWidget.actionEvent()"""
        return QActionEvent()
    def tabletEvent():
        """QTabletEvent QWidget.tabletEvent()"""
        return QTabletEvent()
    def contextMenuEvent():
        """QContextMenuEvent QWidget.contextMenuEvent()"""
        return QContextMenuEvent()
    def closeEvent():
        """QCloseEvent QWidget.closeEvent()"""
        return QCloseEvent()
    def resizeEvent():
        """QResizeEvent QWidget.resizeEvent()"""
        return QResizeEvent()
    def moveEvent():
        """QMoveEvent QWidget.moveEvent()"""
        return QMoveEvent()
    def paintEvent():
        """QPaintEvent QWidget.paintEvent()"""
        return QPaintEvent()
    def leaveEvent():
        """QEvent QWidget.leaveEvent()"""
        return QEvent()
    def enterEvent():
        """QEvent QWidget.enterEvent()"""
        return QEvent()
    def focusOutEvent():
        """QFocusEvent QWidget.focusOutEvent()"""
        return QFocusEvent()
    def focusInEvent():
        """QFocusEvent QWidget.focusInEvent()"""
        return QFocusEvent()
    def keyReleaseEvent():
        """QKeyEvent QWidget.keyReleaseEvent()"""
        return QKeyEvent()
    def keyPressEvent():
        """QKeyEvent QWidget.keyPressEvent()"""
        return QKeyEvent()
    def wheelEvent():
        """QWheelEvent QWidget.wheelEvent()"""
        return QWheelEvent()
    def mouseMoveEvent():
        """QMouseEvent QWidget.mouseMoveEvent()"""
        return QMouseEvent()
    def mouseDoubleClickEvent():
        """QMouseEvent QWidget.mouseDoubleClickEvent()"""
        return QMouseEvent()
    def mouseReleaseEvent():
        """QMouseEvent QWidget.mouseReleaseEvent()"""
        return QMouseEvent()
    def mousePressEvent():
        """QMouseEvent QWidget.mousePressEvent()"""
        return QMouseEvent()
    def event():
        """QEvent QWidget.event()"""
        return QEvent()
    def isAncestorOf(_child):
        """bool QWidget.isAncestorOf(QWidget _child)"""
        return bool()
    def setInputContext():
        """QInputContext QWidget.setInputContext()"""
        return QInputContext()
    def inputContext():
        """QInputContext QWidget.inputContext()"""
        return QInputContext()
    def ensurePolished():
        """None QWidget.ensurePolished()"""
        return None
    def paintEngine():
        """QPaintEngine QWidget.paintEngine()"""
        return QPaintEngine()
    def setAttribute(_attribute, _on):
        """None QWidget.setAttribute(Qt.WidgetAttribute _attribute, bool _on)"""
        return None
    def handle():
        """int QWidget.handle()"""
        return int()
    def x11PictureHandle():
        """int QWidget.x11PictureHandle()"""
        return int()
    def x11Info():
        """QX11Info QWidget.x11Info()"""
        return QX11Info()
    def childAt(_p):
        """QWidget QWidget.childAt(QPoint _p)"""
        return QWidget()
    def childAt(_ax, _ay):
        """QWidget QWidget.childAt(int _ax, int _ay)"""
        return QWidget()
    def find():
        """int QWidget.find()"""
        return int()
    def overrideWindowFlags(_type):
        """None QWidget.overrideWindowFlags(Qt.WindowFlags _type)"""
        return None
    def setWindowFlags(_type):
        """None QWidget.setWindowFlags(Qt.WindowFlags _type)"""
        return None
    def actions():
        """list-of-QAction QWidget.actions()"""
        return [QAction()]
    def removeAction(_action):
        """None QWidget.removeAction(QAction _action)"""
        return None
    def insertActions(_before, _actions):
        """None QWidget.insertActions(QAction _before, list-of-QAction _actions)"""
        return None
    def insertAction(_before, _action):
        """None QWidget.insertAction(QAction _before, QAction _action)"""
        return None
    def addActions(_actions):
        """None QWidget.addActions(list-of-QAction _actions)"""
        return None
    def addAction(_action):
        """None QWidget.addAction(QAction _action)"""
        return None
    def setAcceptDrops(_on):
        """None QWidget.setAcceptDrops(bool _on)"""
        return None
    def acceptDrops():
        """bool QWidget.acceptDrops()"""
        return bool()
    def nextInFocusChain():
        """QWidget QWidget.nextInFocusChain()"""
        return QWidget()
    def focusWidget():
        """QWidget QWidget.focusWidget()"""
        return QWidget()
    def scroll(_dx, _dy):
        """None QWidget.scroll(int _dx, int _dy)"""
        return None
    def scroll(_dx, _dy):
        """QRect QWidget.scroll(int _dx, int _dy)"""
        return QRect()
    def setParent(_parent):
        """None QWidget.setParent(QWidget _parent)"""
        return None
    def setParent(_parent, _f):
        """None QWidget.setParent(QWidget _parent, Qt.WindowFlags _f)"""
        return None
    def updateGeometry():
        """None QWidget.updateGeometry()"""
        return None
    def setLayout():
        """QLayout QWidget.setLayout()"""
        return QLayout()
    def layout():
        """QLayout QWidget.layout()"""
        return QLayout()
    def contentsRect():
        """QRect QWidget.contentsRect()"""
        return QRect()
    def getContentsMargins(_left, _top, _right, _bottom):
        """None QWidget.getContentsMargins(int _left, int _top, int _right, int _bottom)"""
        return None
    def setContentsMargins(_left, _top, _right, _bottom):
        """None QWidget.setContentsMargins(int _left, int _top, int _right, int _bottom)"""
        return None
    def setContentsMargins(_margins):
        """None QWidget.setContentsMargins(QMargins _margins)"""
        return None
    def visibleRegion():
        """QRegion QWidget.visibleRegion()"""
        return QRegion()
    def heightForWidth():
        """int QWidget.heightForWidth()"""
        return int()
    def setSizePolicy():
        """QSizePolicy QWidget.setSizePolicy()"""
        return QSizePolicy()
    def setSizePolicy(_hor, _ver):
        """None QWidget.setSizePolicy(QSizePolicy.Policy _hor, QSizePolicy.Policy _ver)"""
        return None
    def sizePolicy():
        """QSizePolicy QWidget.sizePolicy()"""
        return QSizePolicy()
    def minimumSizeHint():
        """QSize QWidget.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QWidget.sizeHint()"""
        return QSize()
    def overrideWindowState(_state):
        """None QWidget.overrideWindowState(Qt.WindowStates _state)"""
        return None
    def setWindowState(_state):
        """None QWidget.setWindowState(Qt.WindowStates _state)"""
        return None
    def windowState():
        """Qt.WindowStates QWidget.windowState()"""
        return Qt.WindowStates()
    def isFullScreen():
        """bool QWidget.isFullScreen()"""
        return bool()
    def isMaximized():
        """bool QWidget.isMaximized()"""
        return bool()
    def isMinimized():
        """bool QWidget.isMinimized()"""
        return bool()
    def isVisibleTo():
        """QWidget QWidget.isVisibleTo()"""
        return QWidget()
    def adjustSize():
        """None QWidget.adjustSize()"""
        return None
    def setGeometry():
        """QRect QWidget.setGeometry()"""
        return QRect()
    def setGeometry(_ax, _ay, _aw, _ah):
        """None QWidget.setGeometry(int _ax, int _ay, int _aw, int _ah)"""
        return None
    def resize():
        """QSize QWidget.resize()"""
        return QSize()
    def resize(_w, _h):
        """None QWidget.resize(int _w, int _h)"""
        return None
    def move():
        """QPoint QWidget.move()"""
        return QPoint()
    def move(_ax, _ay):
        """None QWidget.move(int _ax, int _ay)"""
        return None
    def stackUnder():
        """QWidget QWidget.stackUnder()"""
        return QWidget()
    def lower():
        """None QWidget.lower()"""
        return None
    def raise_():
        """None QWidget.raise_()"""
        return None
    def close():
        """bool QWidget.close()"""
        return bool()
    def showNormal():
        """None QWidget.showNormal()"""
        return None
    def showFullScreen():
        """None QWidget.showFullScreen()"""
        return None
    def showMaximized():
        """None QWidget.showMaximized()"""
        return None
    def showMinimized():
        """None QWidget.showMinimized()"""
        return None
    def setShown(_shown):
        """None QWidget.setShown(bool _shown)"""
        return None
    def hide():
        """None QWidget.hide()"""
        return None
    def show():
        """None QWidget.show()"""
        return None
    def setHidden(_hidden):
        """None QWidget.setHidden(bool _hidden)"""
        return None
    def setVisible(_visible):
        """None QWidget.setVisible(bool _visible)"""
        return None
    def repaint():
        """None QWidget.repaint()"""
        return None
    def repaint(_x, _y, _w, _h):
        """None QWidget.repaint(int _x, int _y, int _w, int _h)"""
        return None
    def repaint():
        """QRect QWidget.repaint()"""
        return QRect()
    def repaint():
        """QRegion QWidget.repaint()"""
        return QRegion()
    def update():
        """None QWidget.update()"""
        return None
    def update():
        """QRect QWidget.update()"""
        return QRect()
    def update():
        """QRegion QWidget.update()"""
        return QRegion()
    def update(_ax, _ay, _aw, _ah):
        """None QWidget.update(int _ax, int _ay, int _aw, int _ah)"""
        return None
    def setUpdatesEnabled(_enable):
        """None QWidget.setUpdatesEnabled(bool _enable)"""
        return None
    def keyboardGrabber():
        """QWidget QWidget.keyboardGrabber()"""
        return QWidget()
    def mouseGrabber():
        """QWidget QWidget.mouseGrabber()"""
        return QWidget()
    def setShortcutEnabled(_id, _enabled):
        """None QWidget.setShortcutEnabled(int _id, bool _enabled)"""
        return None
    def releaseShortcut(_id):
        """None QWidget.releaseShortcut(int _id)"""
        return None
    def grabShortcut(_key, _context):
        """int QWidget.grabShortcut(QKeySequence _key, Qt.ShortcutContext _context)"""
        return int()
    def releaseKeyboard():
        """None QWidget.releaseKeyboard()"""
        return None
    def grabKeyboard():
        """None QWidget.grabKeyboard()"""
        return None
    def releaseMouse():
        """None QWidget.releaseMouse()"""
        return None
    def grabMouse():
        """None QWidget.grabMouse()"""
        return None
    def grabMouse():
        """QCursor QWidget.grabMouse()"""
        return QCursor()
    def setContextMenuPolicy(_policy):
        """None QWidget.setContextMenuPolicy(Qt.ContextMenuPolicy _policy)"""
        return None
    def contextMenuPolicy():
        """Qt.ContextMenuPolicy QWidget.contextMenuPolicy()"""
        return Qt.ContextMenuPolicy()
    def focusProxy():
        """QWidget QWidget.focusProxy()"""
        return QWidget()
    def setFocusProxy():
        """QWidget QWidget.setFocusProxy()"""
        return QWidget()
    def setTabOrder():
        """QWidget QWidget.setTabOrder()"""
        return QWidget()
    def hasFocus():
        """bool QWidget.hasFocus()"""
        return bool()
    def setFocusPolicy(_policy):
        """None QWidget.setFocusPolicy(Qt.FocusPolicy _policy)"""
        return None
    def focusPolicy():
        """Qt.FocusPolicy QWidget.focusPolicy()"""
        return Qt.FocusPolicy()
    def clearFocus():
        """None QWidget.clearFocus()"""
        return None
    def activateWindow():
        """None QWidget.activateWindow()"""
        return None
    def isActiveWindow():
        """bool QWidget.isActiveWindow()"""
        return bool()
    def setFocus():
        """None QWidget.setFocus()"""
        return None
    def setFocus(_reason):
        """None QWidget.setFocus(Qt.FocusReason _reason)"""
        return None
    def isLeftToRight():
        """bool QWidget.isLeftToRight()"""
        return bool()
    def isRightToLeft():
        """bool QWidget.isRightToLeft()"""
        return bool()
    def unsetLayoutDirection():
        """None QWidget.unsetLayoutDirection()"""
        return None
    def layoutDirection():
        """Qt.LayoutDirection QWidget.layoutDirection()"""
        return Qt.LayoutDirection()
    def setLayoutDirection(_direction):
        """None QWidget.setLayoutDirection(Qt.LayoutDirection _direction)"""
        return None
    def setAccessibleDescription(_description):
        """None QWidget.setAccessibleDescription(QString _description)"""
        return None
    def accessibleDescription():
        """QString QWidget.accessibleDescription()"""
        return QString()
    def setAccessibleName(_name):
        """None QWidget.setAccessibleName(QString _name)"""
        return None
    def accessibleName():
        """QString QWidget.accessibleName()"""
        return QString()
    def whatsThis():
        """QString QWidget.whatsThis()"""
        return QString()
    def setWhatsThis():
        """QString QWidget.setWhatsThis()"""
        return QString()
    def statusTip():
        """QString QWidget.statusTip()"""
        return QString()
    def setStatusTip():
        """QString QWidget.setStatusTip()"""
        return QString()
    def toolTip():
        """QString QWidget.toolTip()"""
        return QString()
    def setToolTip():
        """QString QWidget.setToolTip()"""
        return QString()
    def isWindowModified():
        """bool QWidget.isWindowModified()"""
        return bool()
    def windowOpacity():
        """float QWidget.windowOpacity()"""
        return float()
    def setWindowOpacity(_level):
        """None QWidget.setWindowOpacity(float _level)"""
        return None
    def windowRole():
        """QString QWidget.windowRole()"""
        return QString()
    def setWindowRole():
        """QString QWidget.setWindowRole()"""
        return QString()
    def windowIconText():
        """QString QWidget.windowIconText()"""
        return QString()
    def setWindowIconText():
        """QString QWidget.setWindowIconText()"""
        return QString()
    def windowIcon():
        """QIcon QWidget.windowIcon()"""
        return QIcon()
    def setWindowIcon(_icon):
        """None QWidget.setWindowIcon(QIcon _icon)"""
        return None
    def windowTitle():
        """QString QWidget.windowTitle()"""
        return QString()
    def setWindowTitle():
        """QString QWidget.setWindowTitle()"""
        return QString()
    def clearMask():
        """None QWidget.clearMask()"""
        return None
    def mask():
        """QRegion QWidget.mask()"""
        return QRegion()
    def setMask():
        """QBitmap QWidget.setMask()"""
        return QBitmap()
    def setMask():
        """QRegion QWidget.setMask()"""
        return QRegion()
    def unsetCursor():
        """None QWidget.unsetCursor()"""
        return None
    def setCursor():
        """QCursor QWidget.setCursor()"""
        return QCursor()
    def cursor():
        """QCursor QWidget.cursor()"""
        return QCursor()
    def setFont():
        """QFont QWidget.setFont()"""
        return QFont()
    def foregroundRole():
        """QPalette.ColorRole QWidget.foregroundRole()"""
        return QPalette.ColorRole()
    def setForegroundRole():
        """QPalette.ColorRole QWidget.setForegroundRole()"""
        return QPalette.ColorRole()
    def backgroundRole():
        """QPalette.ColorRole QWidget.backgroundRole()"""
        return QPalette.ColorRole()
    def setBackgroundRole():
        """QPalette.ColorRole QWidget.setBackgroundRole()"""
        return QPalette.ColorRole()
    def setPalette():
        """QPalette QWidget.setPalette()"""
        return QPalette()
    def palette():
        """QPalette QWidget.palette()"""
        return QPalette()
    def topLevelWidget():
        """QWidget QWidget.topLevelWidget()"""
        return QWidget()
    def window():
        """QWidget QWidget.window()"""
        return QWidget()
    def mapFrom():
        """QPoint QWidget.mapFrom()"""
        return QPoint()
    def mapTo():
        """QPoint QWidget.mapTo()"""
        return QPoint()
    def mapFromParent():
        """QPoint QWidget.mapFromParent()"""
        return QPoint()
    def mapToParent():
        """QPoint QWidget.mapToParent()"""
        return QPoint()
    def mapFromGlobal():
        """QPoint QWidget.mapFromGlobal()"""
        return QPoint()
    def mapToGlobal():
        """QPoint QWidget.mapToGlobal()"""
        return QPoint()
    def setFixedHeight(_h):
        """None QWidget.setFixedHeight(int _h)"""
        return None
    def setFixedWidth(_w):
        """None QWidget.setFixedWidth(int _w)"""
        return None
    def setFixedSize():
        """QSize QWidget.setFixedSize()"""
        return QSize()
    def setFixedSize(_w, _h):
        """None QWidget.setFixedSize(int _w, int _h)"""
        return None
    def setBaseSize(_basew, _baseh):
        """None QWidget.setBaseSize(int _basew, int _baseh)"""
        return None
    def setBaseSize(_s):
        """None QWidget.setBaseSize(QSize _s)"""
        return None
    def baseSize():
        """QSize QWidget.baseSize()"""
        return QSize()
    def setSizeIncrement(_w, _h):
        """None QWidget.setSizeIncrement(int _w, int _h)"""
        return None
    def setSizeIncrement(_s):
        """None QWidget.setSizeIncrement(QSize _s)"""
        return None
    def sizeIncrement():
        """QSize QWidget.sizeIncrement()"""
        return QSize()
    def setMaximumHeight(_maxh):
        """None QWidget.setMaximumHeight(int _maxh)"""
        return None
    def setMaximumWidth(_maxw):
        """None QWidget.setMaximumWidth(int _maxw)"""
        return None
    def setMinimumHeight(_minh):
        """None QWidget.setMinimumHeight(int _minh)"""
        return None
    def setMinimumWidth(_minw):
        """None QWidget.setMinimumWidth(int _minw)"""
        return None
    def setMaximumSize(_maxw, _maxh):
        """None QWidget.setMaximumSize(int _maxw, int _maxh)"""
        return None
    def setMaximumSize(_s):
        """None QWidget.setMaximumSize(QSize _s)"""
        return None
    def setMinimumSize(_minw, _minh):
        """None QWidget.setMinimumSize(int _minw, int _minh)"""
        return None
    def setMinimumSize(_s):
        """None QWidget.setMinimumSize(QSize _s)"""
        return None
    def maximumSize():
        """QSize QWidget.maximumSize()"""
        return QSize()
    def minimumSize():
        """QSize QWidget.minimumSize()"""
        return QSize()
    def childrenRegion():
        """QRegion QWidget.childrenRegion()"""
        return QRegion()
    def childrenRect():
        """QRect QWidget.childrenRect()"""
        return QRect()
    def frameSize():
        """QSize QWidget.frameSize()"""
        return QSize()
    def pos():
        """QPoint QWidget.pos()"""
        return QPoint()
    def y():
        """int QWidget.y()"""
        return int()
    def x():
        """int QWidget.x()"""
        return int()
    def normalGeometry():
        """QRect QWidget.normalGeometry()"""
        return QRect()
    def frameGeometry():
        """QRect QWidget.frameGeometry()"""
        return QRect()
    def setWindowModified():
        """bool QWidget.setWindowModified()"""
        return bool()
    def setDisabled():
        """bool QWidget.setDisabled()"""
        return bool()
    def setEnabled():
        """bool QWidget.setEnabled()"""
        return bool()
    def isEnabledTo():
        """QWidget QWidget.isEnabledTo()"""
        return QWidget()
    def setStyle():
        """QStyle QWidget.setStyle()"""
        return QStyle()
    def style():
        """QStyle QWidget.style()"""
        return QStyle()
    def devType():
        """int QWidget.devType()"""
        return int()


class QAbstractButton(QWidget):
    """"""
    def __init__(_parent):
        """None QAbstractButton.__init__(QWidget _parent)"""
        return None
    def timerEvent(_e):
        """None QAbstractButton.timerEvent(QTimerEvent _e)"""
        return None
    def changeEvent(_e):
        """None QAbstractButton.changeEvent(QEvent _e)"""
        return None
    def focusOutEvent(_e):
        """None QAbstractButton.focusOutEvent(QFocusEvent _e)"""
        return None
    def focusInEvent(_e):
        """None QAbstractButton.focusInEvent(QFocusEvent _e)"""
        return None
    def mouseMoveEvent(_e):
        """None QAbstractButton.mouseMoveEvent(QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(_e):
        """None QAbstractButton.mouseReleaseEvent(QMouseEvent _e)"""
        return None
    def mousePressEvent(_e):
        """None QAbstractButton.mousePressEvent(QMouseEvent _e)"""
        return None
    def keyReleaseEvent(_e):
        """None QAbstractButton.keyReleaseEvent(QKeyEvent _e)"""
        return None
    def keyPressEvent(_e):
        """None QAbstractButton.keyPressEvent(QKeyEvent _e)"""
        return None
    def event(_e):
        """bool QAbstractButton.event(QEvent _e)"""
        return bool()
    def nextCheckState():
        """None QAbstractButton.nextCheckState()"""
        return None
    def checkStateSet():
        """None QAbstractButton.checkStateSet()"""
        return None
    def hitButton(_pos):
        """bool QAbstractButton.hitButton(QPoint _pos)"""
        return bool()
    def paintEvent(_e):
        """abstract None QAbstractButton.paintEvent(QPaintEvent _e)"""
        return None
    def setChecked():
        """bool QAbstractButton.setChecked()"""
        return bool()
    def toggle():
        """None QAbstractButton.toggle()"""
        return None
    def click():
        """None QAbstractButton.click()"""
        return None
    def animateClick(_msecs):
        """None QAbstractButton.animateClick(int _msecs)"""
        return None
    def setIconSize(_size):
        """None QAbstractButton.setIconSize(QSize _size)"""
        return None
    def group():
        """QButtonGroup QAbstractButton.group()"""
        return QButtonGroup()
    def autoExclusive():
        """bool QAbstractButton.autoExclusive()"""
        return bool()
    def setAutoExclusive():
        """bool QAbstractButton.setAutoExclusive()"""
        return bool()
    def autoRepeat():
        """bool QAbstractButton.autoRepeat()"""
        return bool()
    def setAutoRepeat():
        """bool QAbstractButton.setAutoRepeat()"""
        return bool()
    def isDown():
        """bool QAbstractButton.isDown()"""
        return bool()
    def setDown():
        """bool QAbstractButton.setDown()"""
        return bool()
    def isChecked():
        """bool QAbstractButton.isChecked()"""
        return bool()
    def isCheckable():
        """bool QAbstractButton.isCheckable()"""
        return bool()
    def setCheckable():
        """bool QAbstractButton.setCheckable()"""
        return bool()
    def shortcut():
        """QKeySequence QAbstractButton.shortcut()"""
        return QKeySequence()
    def setShortcut(_key):
        """None QAbstractButton.setShortcut(QKeySequence _key)"""
        return None
    def iconSize():
        """QSize QAbstractButton.iconSize()"""
        return QSize()
    def icon():
        """QIcon QAbstractButton.icon()"""
        return QIcon()
    def setIcon(_icon):
        """None QAbstractButton.setIcon(QIcon _icon)"""
        return None
    def text():
        """QString QAbstractButton.text()"""
        return QString()
    def setText(_text):
        """None QAbstractButton.setText(QString _text)"""
        return None
    def autoRepeatInterval():
        """int QAbstractButton.autoRepeatInterval()"""
        return int()
    def setAutoRepeatInterval():
        """int QAbstractButton.setAutoRepeatInterval()"""
        return int()
    def autoRepeatDelay():
        """int QAbstractButton.autoRepeatDelay()"""
        return int()
    def setAutoRepeatDelay():
        """int QAbstractButton.setAutoRepeatDelay()"""
        return int()


class QAbstractItemDelegate(QObject):
    """"""
    NoHint = int() # QAbstractItemDelegate.EndEditHint enum
    EditNextItem = int() # QAbstractItemDelegate.EndEditHint enum
    EditPreviousItem = int() # QAbstractItemDelegate.EndEditHint enum
    SubmitModelCache = int() # QAbstractItemDelegate.EndEditHint enum
    RevertModelCache = int() # QAbstractItemDelegate.EndEditHint enum

    def __init__(_parent):
        """None QAbstractItemDelegate.__init__(QObject _parent)"""
        return None
    def helpEvent(_event, _view, _option, _index):
        """bool QAbstractItemDelegate.helpEvent(QHelpEvent _event, QAbstractItemView _view, QStyleOptionViewItem _option, QModelIndex _index)"""
        return bool()
    def elidedText(_fontMetrics, _width, _mode, _text):
        """QString QAbstractItemDelegate.elidedText(QFontMetrics _fontMetrics, int _width, Qt.TextElideMode _mode, QString _text)"""
        return QString()
    def editorEvent(_event, _model, _option, _index):
        """bool QAbstractItemDelegate.editorEvent(QEvent _event, QAbstractItemModel _model, QStyleOptionViewItem _option, QModelIndex _index)"""
        return bool()
    def updateEditorGeometry(_editor, _option, _index):
        """None QAbstractItemDelegate.updateEditorGeometry(QWidget _editor, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None
    def setModelData(_editor, _model, _index):
        """None QAbstractItemDelegate.setModelData(QWidget _editor, QAbstractItemModel _model, QModelIndex _index)"""
        return None
    def setEditorData(_editor, _index):
        """None QAbstractItemDelegate.setEditorData(QWidget _editor, QModelIndex _index)"""
        return None
    def createEditor(_parent, _option, _index):
        """QWidget QAbstractItemDelegate.createEditor(QWidget _parent, QStyleOptionViewItem _option, QModelIndex _index)"""
        return QWidget()
    def sizeHint(_option, _index):
        """abstract QSize QAbstractItemDelegate.sizeHint(QStyleOptionViewItem _option, QModelIndex _index)"""
        return QSize()
    def paint(_painter, _option, _index):
        """abstract None QAbstractItemDelegate.paint(QPainter _painter, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None


class QFrame(QWidget):
    """"""
    Shadow_Mask = int() # QFrame.StyleMask enum
    Shape_Mask = int() # QFrame.StyleMask enum

    NoFrame = int() # QFrame.Shape enum
    Box = int() # QFrame.Shape enum
    Panel = int() # QFrame.Shape enum
    WinPanel = int() # QFrame.Shape enum
    HLine = int() # QFrame.Shape enum
    VLine = int() # QFrame.Shape enum
    StyledPanel = int() # QFrame.Shape enum

    Plain = int() # QFrame.Shadow enum
    Raised = int() # QFrame.Shadow enum
    Sunken = int() # QFrame.Shadow enum

    def __init__(_parent, _flags):
        """None QFrame.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def drawFrame():
        """QPainter QFrame.drawFrame()"""
        return QPainter()
    def changeEvent():
        """QEvent QFrame.changeEvent()"""
        return QEvent()
    def paintEvent():
        """QPaintEvent QFrame.paintEvent()"""
        return QPaintEvent()
    def event(_e):
        """bool QFrame.event(QEvent _e)"""
        return bool()
    def setFrameRect():
        """QRect QFrame.setFrameRect()"""
        return QRect()
    def frameRect():
        """QRect QFrame.frameRect()"""
        return QRect()
    def setMidLineWidth():
        """int QFrame.setMidLineWidth()"""
        return int()
    def midLineWidth():
        """int QFrame.midLineWidth()"""
        return int()
    def setLineWidth():
        """int QFrame.setLineWidth()"""
        return int()
    def lineWidth():
        """int QFrame.lineWidth()"""
        return int()
    def setFrameShadow():
        """QFrame.Shadow QFrame.setFrameShadow()"""
        return QFrame.Shadow()
    def frameShadow():
        """QFrame.Shadow QFrame.frameShadow()"""
        return QFrame.Shadow()
    def setFrameShape():
        """QFrame.Shape QFrame.setFrameShape()"""
        return QFrame.Shape()
    def frameShape():
        """QFrame.Shape QFrame.frameShape()"""
        return QFrame.Shape()
    def sizeHint():
        """QSize QFrame.sizeHint()"""
        return QSize()
    def frameWidth():
        """int QFrame.frameWidth()"""
        return int()
    def setFrameStyle():
        """int QFrame.setFrameStyle()"""
        return int()
    def frameStyle():
        """int QFrame.frameStyle()"""
        return int()


class QAbstractScrollArea(QFrame):
    """"""
    def __init__(_parent):
        """None QAbstractScrollArea.__init__(QWidget _parent)"""
        return None
    def setupViewport(_viewport):
        """None QAbstractScrollArea.setupViewport(QWidget _viewport)"""
        return None
    def setViewport(_widget):
        """None QAbstractScrollArea.setViewport(QWidget _widget)"""
        return None
    def scrollBarWidgets(_alignment):
        """list-of-QWidget QAbstractScrollArea.scrollBarWidgets(Qt.Alignment _alignment)"""
        return [QWidget()]
    def addScrollBarWidget(_widget, _alignment):
        """None QAbstractScrollArea.addScrollBarWidget(QWidget _widget, Qt.Alignment _alignment)"""
        return None
    def setCornerWidget(_widget):
        """None QAbstractScrollArea.setCornerWidget(QWidget _widget)"""
        return None
    def cornerWidget():
        """QWidget QAbstractScrollArea.cornerWidget()"""
        return QWidget()
    def setHorizontalScrollBar(_scrollbar):
        """None QAbstractScrollArea.setHorizontalScrollBar(QScrollBar _scrollbar)"""
        return None
    def setVerticalScrollBar(_scrollbar):
        """None QAbstractScrollArea.setVerticalScrollBar(QScrollBar _scrollbar)"""
        return None
    def scrollContentsBy(_dx, _dy):
        """None QAbstractScrollArea.scrollContentsBy(int _dx, int _dy)"""
        return None
    def keyPressEvent():
        """QKeyEvent QAbstractScrollArea.keyPressEvent()"""
        return QKeyEvent()
    def dropEvent():
        """QDropEvent QAbstractScrollArea.dropEvent()"""
        return QDropEvent()
    def dragLeaveEvent():
        """QDragLeaveEvent QAbstractScrollArea.dragLeaveEvent()"""
        return QDragLeaveEvent()
    def dragMoveEvent():
        """QDragMoveEvent QAbstractScrollArea.dragMoveEvent()"""
        return QDragMoveEvent()
    def dragEnterEvent():
        """QDragEnterEvent QAbstractScrollArea.dragEnterEvent()"""
        return QDragEnterEvent()
    def contextMenuEvent():
        """QContextMenuEvent QAbstractScrollArea.contextMenuEvent()"""
        return QContextMenuEvent()
    def wheelEvent():
        """QWheelEvent QAbstractScrollArea.wheelEvent()"""
        return QWheelEvent()
    def mouseMoveEvent():
        """QMouseEvent QAbstractScrollArea.mouseMoveEvent()"""
        return QMouseEvent()
    def mouseDoubleClickEvent():
        """QMouseEvent QAbstractScrollArea.mouseDoubleClickEvent()"""
        return QMouseEvent()
    def mouseReleaseEvent():
        """QMouseEvent QAbstractScrollArea.mouseReleaseEvent()"""
        return QMouseEvent()
    def mousePressEvent():
        """QMouseEvent QAbstractScrollArea.mousePressEvent()"""
        return QMouseEvent()
    def paintEvent():
        """QPaintEvent QAbstractScrollArea.paintEvent()"""
        return QPaintEvent()
    def resizeEvent():
        """QResizeEvent QAbstractScrollArea.resizeEvent()"""
        return QResizeEvent()
    def viewportEvent():
        """QEvent QAbstractScrollArea.viewportEvent()"""
        return QEvent()
    def event():
        """QEvent QAbstractScrollArea.event()"""
        return QEvent()
    def setViewportMargins(_left, _top, _right, _bottom):
        """None QAbstractScrollArea.setViewportMargins(int _left, int _top, int _right, int _bottom)"""
        return None
    def setViewportMargins(_margins):
        """None QAbstractScrollArea.setViewportMargins(QMargins _margins)"""
        return None
    def sizeHint():
        """QSize QAbstractScrollArea.sizeHint()"""
        return QSize()
    def minimumSizeHint():
        """QSize QAbstractScrollArea.minimumSizeHint()"""
        return QSize()
    def maximumViewportSize():
        """QSize QAbstractScrollArea.maximumViewportSize()"""
        return QSize()
    def viewport():
        """QWidget QAbstractScrollArea.viewport()"""
        return QWidget()
    def horizontalScrollBar():
        """QScrollBar QAbstractScrollArea.horizontalScrollBar()"""
        return QScrollBar()
    def setHorizontalScrollBarPolicy():
        """Qt.ScrollBarPolicy QAbstractScrollArea.setHorizontalScrollBarPolicy()"""
        return Qt.ScrollBarPolicy()
    def horizontalScrollBarPolicy():
        """Qt.ScrollBarPolicy QAbstractScrollArea.horizontalScrollBarPolicy()"""
        return Qt.ScrollBarPolicy()
    def verticalScrollBar():
        """QScrollBar QAbstractScrollArea.verticalScrollBar()"""
        return QScrollBar()
    def setVerticalScrollBarPolicy():
        """Qt.ScrollBarPolicy QAbstractScrollArea.setVerticalScrollBarPolicy()"""
        return Qt.ScrollBarPolicy()
    def verticalScrollBarPolicy():
        """Qt.ScrollBarPolicy QAbstractScrollArea.verticalScrollBarPolicy()"""
        return Qt.ScrollBarPolicy()


class QAbstractItemView(QAbstractScrollArea):
    """"""
    OnItem = int() # QAbstractItemView.DropIndicatorPosition enum
    AboveItem = int() # QAbstractItemView.DropIndicatorPosition enum
    BelowItem = int() # QAbstractItemView.DropIndicatorPosition enum
    OnViewport = int() # QAbstractItemView.DropIndicatorPosition enum

    NoState = int() # QAbstractItemView.State enum
    DraggingState = int() # QAbstractItemView.State enum
    DragSelectingState = int() # QAbstractItemView.State enum
    EditingState = int() # QAbstractItemView.State enum
    ExpandingState = int() # QAbstractItemView.State enum
    CollapsingState = int() # QAbstractItemView.State enum
    AnimatingState = int() # QAbstractItemView.State enum

    MoveUp = int() # QAbstractItemView.CursorAction enum
    MoveDown = int() # QAbstractItemView.CursorAction enum
    MoveLeft = int() # QAbstractItemView.CursorAction enum
    MoveRight = int() # QAbstractItemView.CursorAction enum
    MoveHome = int() # QAbstractItemView.CursorAction enum
    MoveEnd = int() # QAbstractItemView.CursorAction enum
    MovePageUp = int() # QAbstractItemView.CursorAction enum
    MovePageDown = int() # QAbstractItemView.CursorAction enum
    MoveNext = int() # QAbstractItemView.CursorAction enum
    MovePrevious = int() # QAbstractItemView.CursorAction enum

    NoSelection = int() # QAbstractItemView.SelectionMode enum
    SingleSelection = int() # QAbstractItemView.SelectionMode enum
    MultiSelection = int() # QAbstractItemView.SelectionMode enum
    ExtendedSelection = int() # QAbstractItemView.SelectionMode enum
    ContiguousSelection = int() # QAbstractItemView.SelectionMode enum

    SelectItems = int() # QAbstractItemView.SelectionBehavior enum
    SelectRows = int() # QAbstractItemView.SelectionBehavior enum
    SelectColumns = int() # QAbstractItemView.SelectionBehavior enum

    ScrollPerItem = int() # QAbstractItemView.ScrollMode enum
    ScrollPerPixel = int() # QAbstractItemView.ScrollMode enum

    EnsureVisible = int() # QAbstractItemView.ScrollHint enum
    PositionAtTop = int() # QAbstractItemView.ScrollHint enum
    PositionAtBottom = int() # QAbstractItemView.ScrollHint enum
    PositionAtCenter = int() # QAbstractItemView.ScrollHint enum

    NoEditTriggers = int() # QAbstractItemView.EditTrigger enum
    CurrentChanged = int() # QAbstractItemView.EditTrigger enum
    DoubleClicked = int() # QAbstractItemView.EditTrigger enum
    SelectedClicked = int() # QAbstractItemView.EditTrigger enum
    EditKeyPressed = int() # QAbstractItemView.EditTrigger enum
    AnyKeyPressed = int() # QAbstractItemView.EditTrigger enum
    AllEditTriggers = int() # QAbstractItemView.EditTrigger enum

    NoDragDrop = int() # QAbstractItemView.DragDropMode enum
    DragOnly = int() # QAbstractItemView.DragDropMode enum
    DropOnly = int() # QAbstractItemView.DragDropMode enum
    DragDrop = int() # QAbstractItemView.DragDropMode enum
    InternalMove = int() # QAbstractItemView.DragDropMode enum

    def __init__(_parent):
        """None QAbstractItemView.__init__(QWidget _parent)"""
        return None
    def defaultDropAction():
        """Qt.DropAction QAbstractItemView.defaultDropAction()"""
        return Qt.DropAction()
    def setDefaultDropAction(_dropAction):
        """None QAbstractItemView.setDefaultDropAction(Qt.DropAction _dropAction)"""
        return None
    def inputMethodEvent(_event):
        """None QAbstractItemView.inputMethodEvent(QInputMethodEvent _event)"""
        return None
    def focusNextPrevChild(_next):
        """bool QAbstractItemView.focusNextPrevChild(bool _next)"""
        return bool()
    def autoScrollMargin():
        """int QAbstractItemView.autoScrollMargin()"""
        return int()
    def setAutoScrollMargin(_margin):
        """None QAbstractItemView.setAutoScrollMargin(int _margin)"""
        return None
    def inputMethodQuery(_query):
        """QVariant QAbstractItemView.inputMethodQuery(Qt.InputMethodQuery _query)"""
        return QVariant()
    def itemDelegateForColumn(_column):
        """QAbstractItemDelegate QAbstractItemView.itemDelegateForColumn(int _column)"""
        return QAbstractItemDelegate()
    def setItemDelegateForColumn(_column, _delegate):
        """None QAbstractItemView.setItemDelegateForColumn(int _column, QAbstractItemDelegate _delegate)"""
        return None
    def itemDelegateForRow(_row):
        """QAbstractItemDelegate QAbstractItemView.itemDelegateForRow(int _row)"""
        return QAbstractItemDelegate()
    def setItemDelegateForRow(_row, _delegate):
        """None QAbstractItemView.setItemDelegateForRow(int _row, QAbstractItemDelegate _delegate)"""
        return None
    def dragDropMode():
        """QAbstractItemView.DragDropMode QAbstractItemView.dragDropMode()"""
        return QAbstractItemView.DragDropMode()
    def setDragDropMode(_behavior):
        """None QAbstractItemView.setDragDropMode(QAbstractItemView.DragDropMode _behavior)"""
        return None
    def dragDropOverwriteMode():
        """bool QAbstractItemView.dragDropOverwriteMode()"""
        return bool()
    def setDragDropOverwriteMode(_overwrite):
        """None QAbstractItemView.setDragDropOverwriteMode(bool _overwrite)"""
        return None
    def horizontalScrollMode():
        """QAbstractItemView.ScrollMode QAbstractItemView.horizontalScrollMode()"""
        return QAbstractItemView.ScrollMode()
    def setHorizontalScrollMode(_mode):
        """None QAbstractItemView.setHorizontalScrollMode(QAbstractItemView.ScrollMode _mode)"""
        return None
    def verticalScrollMode():
        """QAbstractItemView.ScrollMode QAbstractItemView.verticalScrollMode()"""
        return QAbstractItemView.ScrollMode()
    def setVerticalScrollMode(_mode):
        """None QAbstractItemView.setVerticalScrollMode(QAbstractItemView.ScrollMode _mode)"""
        return None
    def dropIndicatorPosition():
        """QAbstractItemView.DropIndicatorPosition QAbstractItemView.dropIndicatorPosition()"""
        return QAbstractItemView.DropIndicatorPosition()
    def timerEvent(_e):
        """None QAbstractItemView.timerEvent(QTimerEvent _e)"""
        return None
    def resizeEvent(_e):
        """None QAbstractItemView.resizeEvent(QResizeEvent _e)"""
        return None
    def keyPressEvent(_e):
        """None QAbstractItemView.keyPressEvent(QKeyEvent _e)"""
        return None
    def focusOutEvent(_e):
        """None QAbstractItemView.focusOutEvent(QFocusEvent _e)"""
        return None
    def focusInEvent(_e):
        """None QAbstractItemView.focusInEvent(QFocusEvent _e)"""
        return None
    def dropEvent(_e):
        """None QAbstractItemView.dropEvent(QDropEvent _e)"""
        return None
    def dragLeaveEvent(_e):
        """None QAbstractItemView.dragLeaveEvent(QDragLeaveEvent _e)"""
        return None
    def dragMoveEvent(_e):
        """None QAbstractItemView.dragMoveEvent(QDragMoveEvent _e)"""
        return None
    def dragEnterEvent(_e):
        """None QAbstractItemView.dragEnterEvent(QDragEnterEvent _e)"""
        return None
    def mouseDoubleClickEvent(_e):
        """None QAbstractItemView.mouseDoubleClickEvent(QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(_e):
        """None QAbstractItemView.mouseReleaseEvent(QMouseEvent _e)"""
        return None
    def mouseMoveEvent(_e):
        """None QAbstractItemView.mouseMoveEvent(QMouseEvent _e)"""
        return None
    def mousePressEvent(_e):
        """None QAbstractItemView.mousePressEvent(QMouseEvent _e)"""
        return None
    def viewportEvent(_e):
        """bool QAbstractItemView.viewportEvent(QEvent _e)"""
        return bool()
    def event(_event):
        """bool QAbstractItemView.event(QEvent _event)"""
        return bool()
    def dirtyRegionOffset():
        """QPoint QAbstractItemView.dirtyRegionOffset()"""
        return QPoint()
    def setDirtyRegion(_region):
        """None QAbstractItemView.setDirtyRegion(QRegion _region)"""
        return None
    def scrollDirtyRegion(_dx, _dy):
        """None QAbstractItemView.scrollDirtyRegion(int _dx, int _dy)"""
        return None
    def executeDelayedItemsLayout():
        """None QAbstractItemView.executeDelayedItemsLayout()"""
        return None
    def scheduleDelayedItemsLayout():
        """None QAbstractItemView.scheduleDelayedItemsLayout()"""
        return None
    def setState(_state):
        """None QAbstractItemView.setState(QAbstractItemView.State _state)"""
        return None
    def state():
        """QAbstractItemView.State QAbstractItemView.state()"""
        return QAbstractItemView.State()
    def viewOptions():
        """QStyleOptionViewItem QAbstractItemView.viewOptions()"""
        return QStyleOptionViewItem()
    def startDrag(_supportedActions):
        """None QAbstractItemView.startDrag(Qt.DropActions _supportedActions)"""
        return None
    def selectionCommand(_index, _event):
        """QItemSelectionModel.SelectionFlags QAbstractItemView.selectionCommand(QModelIndex _index, QEvent _event)"""
        return QItemSelectionModel.SelectionFlags()
    def selectedIndexes():
        """list-of-QModelIndex QAbstractItemView.selectedIndexes()"""
        return [QModelIndex()]
    def visualRegionForSelection(_selection):
        """abstract QRegion QAbstractItemView.visualRegionForSelection(QItemSelection _selection)"""
        return QRegion()
    def setSelection(_rect, _command):
        """abstract None QAbstractItemView.setSelection(QRect _rect, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def isIndexHidden(_index):
        """abstract bool QAbstractItemView.isIndexHidden(QModelIndex _index)"""
        return bool()
    def verticalOffset():
        """abstract int QAbstractItemView.verticalOffset()"""
        return int()
    def horizontalOffset():
        """abstract int QAbstractItemView.horizontalOffset()"""
        return int()
    def moveCursor(_cursorAction, _modifiers):
        """abstract QModelIndex QAbstractItemView.moveCursor(QAbstractItemView.CursorAction _cursorAction, Qt.KeyboardModifiers _modifiers)"""
        return QModelIndex()
    def verticalStepsPerItem():
        """int QAbstractItemView.verticalStepsPerItem()"""
        return int()
    def setVerticalStepsPerItem(_steps):
        """None QAbstractItemView.setVerticalStepsPerItem(int _steps)"""
        return None
    def horizontalStepsPerItem():
        """int QAbstractItemView.horizontalStepsPerItem()"""
        return int()
    def setHorizontalStepsPerItem(_steps):
        """None QAbstractItemView.setHorizontalStepsPerItem(int _steps)"""
        return None
    def editorDestroyed(_editor):
        """None QAbstractItemView.editorDestroyed(QObject _editor)"""
        return None
    def commitData(_editor):
        """None QAbstractItemView.commitData(QWidget _editor)"""
        return None
    def closeEditor(_editor, _hint):
        """None QAbstractItemView.closeEditor(QWidget _editor, QAbstractItemDelegate.EndEditHint _hint)"""
        return None
    def horizontalScrollbarValueChanged(_value):
        """None QAbstractItemView.horizontalScrollbarValueChanged(int _value)"""
        return None
    def verticalScrollbarValueChanged(_value):
        """None QAbstractItemView.verticalScrollbarValueChanged(int _value)"""
        return None
    def horizontalScrollbarAction(_action):
        """None QAbstractItemView.horizontalScrollbarAction(int _action)"""
        return None
    def verticalScrollbarAction(_action):
        """None QAbstractItemView.verticalScrollbarAction(int _action)"""
        return None
    def updateGeometries():
        """None QAbstractItemView.updateGeometries()"""
        return None
    def updateEditorGeometries():
        """None QAbstractItemView.updateEditorGeometries()"""
        return None
    def updateEditorData():
        """None QAbstractItemView.updateEditorData()"""
        return None
    def currentChanged(_current, _previous):
        """None QAbstractItemView.currentChanged(QModelIndex _current, QModelIndex _previous)"""
        return None
    def selectionChanged(_selected, _deselected):
        """None QAbstractItemView.selectionChanged(QItemSelection _selected, QItemSelection _deselected)"""
        return None
    def rowsAboutToBeRemoved(_parent, _start, _end):
        """None QAbstractItemView.rowsAboutToBeRemoved(QModelIndex _parent, int _start, int _end)"""
        return None
    def rowsInserted(_parent, _start, _end):
        """None QAbstractItemView.rowsInserted(QModelIndex _parent, int _start, int _end)"""
        return None
    def dataChanged(_topLeft, _bottomRight):
        """None QAbstractItemView.dataChanged(QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None
    def update():
        """None QAbstractItemView.update()"""
        return None
    def update(_index):
        """None QAbstractItemView.update(QModelIndex _index)"""
        return None
    def scrollToBottom():
        """None QAbstractItemView.scrollToBottom()"""
        return None
    def scrollToTop():
        """None QAbstractItemView.scrollToTop()"""
        return None
    def setCurrentIndex(_index):
        """None QAbstractItemView.setCurrentIndex(QModelIndex _index)"""
        return None
    def clearSelection():
        """None QAbstractItemView.clearSelection()"""
        return None
    def edit(_index):
        """None QAbstractItemView.edit(QModelIndex _index)"""
        return None
    def edit(_index, _trigger, _event):
        """bool QAbstractItemView.edit(QModelIndex _index, QAbstractItemView.EditTrigger _trigger, QEvent _event)"""
        return bool()
    def selectAll():
        """None QAbstractItemView.selectAll()"""
        return None
    def doItemsLayout():
        """None QAbstractItemView.doItemsLayout()"""
        return None
    def setRootIndex(_index):
        """None QAbstractItemView.setRootIndex(QModelIndex _index)"""
        return None
    def reset():
        """None QAbstractItemView.reset()"""
        return None
    def indexWidget(_index):
        """QWidget QAbstractItemView.indexWidget(QModelIndex _index)"""
        return QWidget()
    def setIndexWidget(_index, _widget):
        """None QAbstractItemView.setIndexWidget(QModelIndex _index, QWidget _widget)"""
        return None
    def closePersistentEditor(_index):
        """None QAbstractItemView.closePersistentEditor(QModelIndex _index)"""
        return None
    def openPersistentEditor(_index):
        """None QAbstractItemView.openPersistentEditor(QModelIndex _index)"""
        return None
    def sizeHintForColumn(_column):
        """int QAbstractItemView.sizeHintForColumn(int _column)"""
        return int()
    def sizeHintForRow(_row):
        """int QAbstractItemView.sizeHintForRow(int _row)"""
        return int()
    def sizeHintForIndex(_index):
        """QSize QAbstractItemView.sizeHintForIndex(QModelIndex _index)"""
        return QSize()
    def indexAt(_p):
        """abstract QModelIndex QAbstractItemView.indexAt(QPoint _p)"""
        return QModelIndex()
    def scrollTo(_index, _hint):
        """abstract None QAbstractItemView.scrollTo(QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def visualRect(_index):
        """abstract QRect QAbstractItemView.visualRect(QModelIndex _index)"""
        return QRect()
    def keyboardSearch(_search):
        """None QAbstractItemView.keyboardSearch(QString _search)"""
        return None
    def textElideMode():
        """Qt.TextElideMode QAbstractItemView.textElideMode()"""
        return Qt.TextElideMode()
    def setTextElideMode(_mode):
        """None QAbstractItemView.setTextElideMode(Qt.TextElideMode _mode)"""
        return None
    def iconSize():
        """QSize QAbstractItemView.iconSize()"""
        return QSize()
    def setIconSize(_size):
        """None QAbstractItemView.setIconSize(QSize _size)"""
        return None
    def alternatingRowColors():
        """bool QAbstractItemView.alternatingRowColors()"""
        return bool()
    def setAlternatingRowColors(_enable):
        """None QAbstractItemView.setAlternatingRowColors(bool _enable)"""
        return None
    def dragEnabled():
        """bool QAbstractItemView.dragEnabled()"""
        return bool()
    def setDragEnabled(_enable):
        """None QAbstractItemView.setDragEnabled(bool _enable)"""
        return None
    def showDropIndicator():
        """bool QAbstractItemView.showDropIndicator()"""
        return bool()
    def setDropIndicatorShown(_enable):
        """None QAbstractItemView.setDropIndicatorShown(bool _enable)"""
        return None
    def tabKeyNavigation():
        """bool QAbstractItemView.tabKeyNavigation()"""
        return bool()
    def setTabKeyNavigation(_enable):
        """None QAbstractItemView.setTabKeyNavigation(bool _enable)"""
        return None
    def hasAutoScroll():
        """bool QAbstractItemView.hasAutoScroll()"""
        return bool()
    def setAutoScroll(_enable):
        """None QAbstractItemView.setAutoScroll(bool _enable)"""
        return None
    def editTriggers():
        """QAbstractItemView.EditTriggers QAbstractItemView.editTriggers()"""
        return QAbstractItemView.EditTriggers()
    def setEditTriggers(_triggers):
        """None QAbstractItemView.setEditTriggers(QAbstractItemView.EditTriggers _triggers)"""
        return None
    def rootIndex():
        """QModelIndex QAbstractItemView.rootIndex()"""
        return QModelIndex()
    def currentIndex():
        """QModelIndex QAbstractItemView.currentIndex()"""
        return QModelIndex()
    def selectionBehavior():
        """QAbstractItemView.SelectionBehavior QAbstractItemView.selectionBehavior()"""
        return QAbstractItemView.SelectionBehavior()
    def setSelectionBehavior(_behavior):
        """None QAbstractItemView.setSelectionBehavior(QAbstractItemView.SelectionBehavior _behavior)"""
        return None
    def selectionMode():
        """QAbstractItemView.SelectionMode QAbstractItemView.selectionMode()"""
        return QAbstractItemView.SelectionMode()
    def setSelectionMode(_mode):
        """None QAbstractItemView.setSelectionMode(QAbstractItemView.SelectionMode _mode)"""
        return None
    def itemDelegate():
        """QAbstractItemDelegate QAbstractItemView.itemDelegate()"""
        return QAbstractItemDelegate()
    def itemDelegate(_index):
        """QAbstractItemDelegate QAbstractItemView.itemDelegate(QModelIndex _index)"""
        return QAbstractItemDelegate()
    def setItemDelegate(_delegate):
        """None QAbstractItemView.setItemDelegate(QAbstractItemDelegate _delegate)"""
        return None
    def selectionModel():
        """QItemSelectionModel QAbstractItemView.selectionModel()"""
        return QItemSelectionModel()
    def setSelectionModel(_selectionModel):
        """None QAbstractItemView.setSelectionModel(QItemSelectionModel _selectionModel)"""
        return None
    def model():
        """QAbstractItemModel QAbstractItemView.model()"""
        return QAbstractItemModel()
    def setModel(_model):
        """None QAbstractItemView.setModel(QAbstractItemModel _model)"""
        return None


class QDialog(QWidget):
    """"""
    Rejected = int() # QDialog.DialogCode enum
    Accepted = int() # QDialog.DialogCode enum

    def __init__(_parent, _flags):
        """None QDialog.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def eventFilter():
        """QEvent QDialog.eventFilter()"""
        return QEvent()
    def contextMenuEvent():
        """QContextMenuEvent QDialog.contextMenuEvent()"""
        return QContextMenuEvent()
    def resizeEvent():
        """QResizeEvent QDialog.resizeEvent()"""
        return QResizeEvent()
    def showEvent():
        """QShowEvent QDialog.showEvent()"""
        return QShowEvent()
    def closeEvent():
        """QCloseEvent QDialog.closeEvent()"""
        return QCloseEvent()
    def keyPressEvent():
        """QKeyEvent QDialog.keyPressEvent()"""
        return QKeyEvent()
    def open():
        """None QDialog.open()"""
        return None
    def showExtension():
        """bool QDialog.showExtension()"""
        return bool()
    def reject():
        """None QDialog.reject()"""
        return None
    def accept():
        """None QDialog.accept()"""
        return None
    def done():
        """int QDialog.done()"""
        return int()
    def exec_():
        """int QDialog.exec_()"""
        return int()
    def setResult(_r):
        """None QDialog.setResult(int _r)"""
        return None
    def setModal(_modal):
        """None QDialog.setModal(bool _modal)"""
        return None
    def isSizeGripEnabled():
        """bool QDialog.isSizeGripEnabled()"""
        return bool()
    def setSizeGripEnabled():
        """bool QDialog.setSizeGripEnabled()"""
        return bool()
    def minimumSizeHint():
        """QSize QDialog.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QDialog.sizeHint()"""
        return QSize()
    def extension():
        """QWidget QDialog.extension()"""
        return QWidget()
    def setExtension(_extension):
        """None QDialog.setExtension(QWidget _extension)"""
        return None
    def orientation():
        """Qt.Orientation QDialog.orientation()"""
        return Qt.Orientation()
    def setOrientation(_orientation):
        """None QDialog.setOrientation(Qt.Orientation _orientation)"""
        return None
    def setVisible(_visible):
        """None QDialog.setVisible(bool _visible)"""
        return None
    def result():
        """int QDialog.result()"""
        return int()


class QAbstractPrintDialog(QDialog):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintToFile = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintSelection = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintPageRange = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintCollateCopies = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintShowPageSize = int() # QAbstractPrintDialog.PrintDialogOption enum
    DontUseSheet = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintCurrentPage = int() # QAbstractPrintDialog.PrintDialogOption enum

    AllPages = int() # QAbstractPrintDialog.PrintRange enum
    Selection = int() # QAbstractPrintDialog.PrintRange enum
    PageRange = int() # QAbstractPrintDialog.PrintRange enum
    CurrentPage = int() # QAbstractPrintDialog.PrintRange enum

    def __init__(_printer, _parent):
        """None QAbstractPrintDialog.__init__(QPrinter _printer, QWidget _parent)"""
        return None
    def setOptionTabs(_tabs):
        """None QAbstractPrintDialog.setOptionTabs(list-of-QWidget _tabs)"""
        return None
    def printer():
        """QPrinter QAbstractPrintDialog.printer()"""
        return QPrinter()
    def toPage():
        """int QAbstractPrintDialog.toPage()"""
        return int()
    def fromPage():
        """int QAbstractPrintDialog.fromPage()"""
        return int()
    def setFromTo(_fromPage, _toPage):
        """None QAbstractPrintDialog.setFromTo(int _fromPage, int _toPage)"""
        return None
    def maxPage():
        """int QAbstractPrintDialog.maxPage()"""
        return int()
    def minPage():
        """int QAbstractPrintDialog.minPage()"""
        return int()
    def setMinMax(_min, _max):
        """None QAbstractPrintDialog.setMinMax(int _min, int _max)"""
        return None
    def printRange():
        """QAbstractPrintDialog.PrintRange QAbstractPrintDialog.printRange()"""
        return QAbstractPrintDialog.PrintRange()
    def setPrintRange(_range):
        """None QAbstractPrintDialog.setPrintRange(QAbstractPrintDialog.PrintRange _range)"""
        return None
    def isOptionEnabled(_option):
        """bool QAbstractPrintDialog.isOptionEnabled(QAbstractPrintDialog.PrintDialogOption _option)"""
        return bool()
    def enabledOptions():
        """QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.enabledOptions()"""
        return QAbstractPrintDialog.PrintDialogOptions()
    def setEnabledOptions(_options):
        """None QAbstractPrintDialog.setEnabledOptions(QAbstractPrintDialog.PrintDialogOptions _options)"""
        return None
    def addEnabledOption(_option):
        """None QAbstractPrintDialog.addEnabledOption(QAbstractPrintDialog.PrintDialogOption _option)"""
        return None
    def exec_():
        """abstract int QAbstractPrintDialog.exec_()"""
        return int()


class QAbstractProxyModel(QAbstractItemModel):
    """"""
    def __init__(_parent):
        """None QAbstractProxyModel.__init__(QObject _parent)"""
        return None
    def flags(_index):
        """Qt.ItemFlags QAbstractProxyModel.flags(QModelIndex _index)"""
        return Qt.ItemFlags()
    def itemData(_index):
        """dict-of-int-QVariant QAbstractProxyModel.itemData(QModelIndex _index)"""
        return dict-of-int-QVariant()
    def setHeaderData(_section, _orientation, _value, _role):
        """bool QAbstractProxyModel.setHeaderData(int _section, Qt.Orientation _orientation, QVariant _value, int _role)"""
        return bool()
    def headerData(_section, _orientation, _role):
        """QVariant QAbstractProxyModel.headerData(int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(_index, _value, _role):
        """bool QAbstractProxyModel.setData(QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def data(_proxyIndex, _role):
        """QVariant QAbstractProxyModel.data(QModelIndex _proxyIndex, int _role)"""
        return QVariant()
    def revert():
        """None QAbstractProxyModel.revert()"""
        return None
    def submit():
        """bool QAbstractProxyModel.submit()"""
        return bool()
    def mapSelectionFromSource(_selection):
        """QItemSelection QAbstractProxyModel.mapSelectionFromSource(QItemSelection _selection)"""
        return QItemSelection()
    def mapSelectionToSource(_selection):
        """QItemSelection QAbstractProxyModel.mapSelectionToSource(QItemSelection _selection)"""
        return QItemSelection()
    def mapFromSource(_sourceIndex):
        """abstract QModelIndex QAbstractProxyModel.mapFromSource(QModelIndex _sourceIndex)"""
        return QModelIndex()
    def mapToSource(_proxyIndex):
        """abstract QModelIndex QAbstractProxyModel.mapToSource(QModelIndex _proxyIndex)"""
        return QModelIndex()
    def sourceModel():
        """QAbstractItemModel QAbstractProxyModel.sourceModel()"""
        return QAbstractItemModel()
    def setSourceModel(_sourceModel):
        """None QAbstractProxyModel.setSourceModel(QAbstractItemModel _sourceModel)"""
        return None


class QAbstractSpinBox(QWidget):
    """"""
    CorrectToPreviousValue = int() # QAbstractSpinBox.CorrectionMode enum
    CorrectToNearestValue = int() # QAbstractSpinBox.CorrectionMode enum

    UpDownArrows = int() # QAbstractSpinBox.ButtonSymbols enum
    PlusMinus = int() # QAbstractSpinBox.ButtonSymbols enum
    NoButtons = int() # QAbstractSpinBox.ButtonSymbols enum

    StepNone = int() # QAbstractSpinBox.StepEnabledFlag enum
    StepUpEnabled = int() # QAbstractSpinBox.StepEnabledFlag enum
    StepDownEnabled = int() # QAbstractSpinBox.StepEnabledFlag enum

    def __init__(_parent):
        """None QAbstractSpinBox.__init__(QWidget _parent)"""
        return None
    def inputMethodQuery():
        """Qt.InputMethodQuery QAbstractSpinBox.inputMethodQuery()"""
        return Qt.InputMethodQuery()
    def initStyleOption(_option):
        """None QAbstractSpinBox.initStyleOption(QStyleOptionSpinBox _option)"""
        return None
    def keyboardTracking():
        """bool QAbstractSpinBox.keyboardTracking()"""
        return bool()
    def setKeyboardTracking(_kt):
        """None QAbstractSpinBox.setKeyboardTracking(bool _kt)"""
        return None
    def isAccelerated():
        """bool QAbstractSpinBox.isAccelerated()"""
        return bool()
    def setAccelerated(_on):
        """None QAbstractSpinBox.setAccelerated(bool _on)"""
        return None
    def hasAcceptableInput():
        """bool QAbstractSpinBox.hasAcceptableInput()"""
        return bool()
    def correctionMode():
        """QAbstractSpinBox.CorrectionMode QAbstractSpinBox.correctionMode()"""
        return QAbstractSpinBox.CorrectionMode()
    def setCorrectionMode(_cm):
        """None QAbstractSpinBox.setCorrectionMode(QAbstractSpinBox.CorrectionMode _cm)"""
        return None
    def stepEnabled():
        """QAbstractSpinBox.StepEnabled QAbstractSpinBox.stepEnabled()"""
        return QAbstractSpinBox.StepEnabled()
    def setLineEdit(_e):
        """None QAbstractSpinBox.setLineEdit(QLineEdit _e)"""
        return None
    def lineEdit():
        """QLineEdit QAbstractSpinBox.lineEdit()"""
        return QLineEdit()
    def showEvent(_e):
        """None QAbstractSpinBox.showEvent(QShowEvent _e)"""
        return None
    def paintEvent(_e):
        """None QAbstractSpinBox.paintEvent(QPaintEvent _e)"""
        return None
    def timerEvent(_e):
        """None QAbstractSpinBox.timerEvent(QTimerEvent _e)"""
        return None
    def mouseMoveEvent(_e):
        """None QAbstractSpinBox.mouseMoveEvent(QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(_e):
        """None QAbstractSpinBox.mouseReleaseEvent(QMouseEvent _e)"""
        return None
    def mousePressEvent(_e):
        """None QAbstractSpinBox.mousePressEvent(QMouseEvent _e)"""
        return None
    def hideEvent(_e):
        """None QAbstractSpinBox.hideEvent(QHideEvent _e)"""
        return None
    def closeEvent(_e):
        """None QAbstractSpinBox.closeEvent(QCloseEvent _e)"""
        return None
    def changeEvent(_e):
        """None QAbstractSpinBox.changeEvent(QEvent _e)"""
        return None
    def contextMenuEvent(_e):
        """None QAbstractSpinBox.contextMenuEvent(QContextMenuEvent _e)"""
        return None
    def focusOutEvent(_e):
        """None QAbstractSpinBox.focusOutEvent(QFocusEvent _e)"""
        return None
    def focusInEvent(_e):
        """None QAbstractSpinBox.focusInEvent(QFocusEvent _e)"""
        return None
    def wheelEvent(_e):
        """None QAbstractSpinBox.wheelEvent(QWheelEvent _e)"""
        return None
    def keyReleaseEvent(_e):
        """None QAbstractSpinBox.keyReleaseEvent(QKeyEvent _e)"""
        return None
    def keyPressEvent(_e):
        """None QAbstractSpinBox.keyPressEvent(QKeyEvent _e)"""
        return None
    def resizeEvent(_e):
        """None QAbstractSpinBox.resizeEvent(QResizeEvent _e)"""
        return None
    def clear():
        """None QAbstractSpinBox.clear()"""
        return None
    def selectAll():
        """None QAbstractSpinBox.selectAll()"""
        return None
    def stepDown():
        """None QAbstractSpinBox.stepDown()"""
        return None
    def stepUp():
        """None QAbstractSpinBox.stepUp()"""
        return None
    def stepBy(_steps):
        """None QAbstractSpinBox.stepBy(int _steps)"""
        return None
    def fixup(_input):
        """None QAbstractSpinBox.fixup(QString _input)"""
        return None
    def fixup(_input):
        """None QAbstractSpinBox.fixup(QString _input)"""
        return None
    def validate(_input, _pos):
        """QValidator.State QAbstractSpinBox.validate(QString _input, int _pos)"""
        return QValidator.State()
    def validate(_input, _pos):
        """QValidator.State QAbstractSpinBox.validate(QString _input, int _pos)"""
        return QValidator.State()
    def event(_event):
        """bool QAbstractSpinBox.event(QEvent _event)"""
        return bool()
    def interpretText():
        """None QAbstractSpinBox.interpretText()"""
        return None
    def minimumSizeHint():
        """QSize QAbstractSpinBox.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QAbstractSpinBox.sizeHint()"""
        return QSize()
    def hasFrame():
        """bool QAbstractSpinBox.hasFrame()"""
        return bool()
    def setFrame():
        """bool QAbstractSpinBox.setFrame()"""
        return bool()
    def alignment():
        """Qt.Alignment QAbstractSpinBox.alignment()"""
        return Qt.Alignment()
    def setAlignment(_flag):
        """None QAbstractSpinBox.setAlignment(Qt.Alignment _flag)"""
        return None
    def isReadOnly():
        """bool QAbstractSpinBox.isReadOnly()"""
        return bool()
    def setReadOnly(_r):
        """None QAbstractSpinBox.setReadOnly(bool _r)"""
        return None
    def setWrapping(_w):
        """None QAbstractSpinBox.setWrapping(bool _w)"""
        return None
    def wrapping():
        """bool QAbstractSpinBox.wrapping()"""
        return bool()
    def setSpecialValueText(_s):
        """None QAbstractSpinBox.setSpecialValueText(QString _s)"""
        return None
    def specialValueText():
        """QString QAbstractSpinBox.specialValueText()"""
        return QString()
    def text():
        """QString QAbstractSpinBox.text()"""
        return QString()
    def setButtonSymbols(_bs):
        """None QAbstractSpinBox.setButtonSymbols(QAbstractSpinBox.ButtonSymbols _bs)"""
        return None
    def buttonSymbols():
        """QAbstractSpinBox.ButtonSymbols QAbstractSpinBox.buttonSymbols()"""
        return QAbstractSpinBox.ButtonSymbols()


class QAbstractSlider(QWidget):
    """"""
    SliderRangeChange = int() # QAbstractSlider.SliderChange enum
    SliderOrientationChange = int() # QAbstractSlider.SliderChange enum
    SliderStepsChange = int() # QAbstractSlider.SliderChange enum
    SliderValueChange = int() # QAbstractSlider.SliderChange enum

    SliderNoAction = int() # QAbstractSlider.SliderAction enum
    SliderSingleStepAdd = int() # QAbstractSlider.SliderAction enum
    SliderSingleStepSub = int() # QAbstractSlider.SliderAction enum
    SliderPageStepAdd = int() # QAbstractSlider.SliderAction enum
    SliderPageStepSub = int() # QAbstractSlider.SliderAction enum
    SliderToMinimum = int() # QAbstractSlider.SliderAction enum
    SliderToMaximum = int() # QAbstractSlider.SliderAction enum
    SliderMove = int() # QAbstractSlider.SliderAction enum

    def __init__(_parent):
        """None QAbstractSlider.__init__(QWidget _parent)"""
        return None
    def changeEvent(_e):
        """None QAbstractSlider.changeEvent(QEvent _e)"""
        return None
    def wheelEvent(_e):
        """None QAbstractSlider.wheelEvent(QWheelEvent _e)"""
        return None
    def timerEvent():
        """QTimerEvent QAbstractSlider.timerEvent()"""
        return QTimerEvent()
    def keyPressEvent(_ev):
        """None QAbstractSlider.keyPressEvent(QKeyEvent _ev)"""
        return None
    def event(_e):
        """bool QAbstractSlider.event(QEvent _e)"""
        return bool()
    def sliderChange(_change):
        """None QAbstractSlider.sliderChange(QAbstractSlider.SliderChange _change)"""
        return None
    def repeatAction():
        """QAbstractSlider.SliderAction QAbstractSlider.repeatAction()"""
        return QAbstractSlider.SliderAction()
    def setRepeatAction(_action, _thresholdTime, _repeatTime):
        """None QAbstractSlider.setRepeatAction(QAbstractSlider.SliderAction _action, int _thresholdTime, int _repeatTime)"""
        return None
    def setOrientation():
        """Qt.Orientation QAbstractSlider.setOrientation()"""
        return Qt.Orientation()
    def setValue():
        """int QAbstractSlider.setValue()"""
        return int()
    def triggerAction(_action):
        """None QAbstractSlider.triggerAction(QAbstractSlider.SliderAction _action)"""
        return None
    def value():
        """int QAbstractSlider.value()"""
        return int()
    def invertedControls():
        """bool QAbstractSlider.invertedControls()"""
        return bool()
    def setInvertedControls():
        """bool QAbstractSlider.setInvertedControls()"""
        return bool()
    def invertedAppearance():
        """bool QAbstractSlider.invertedAppearance()"""
        return bool()
    def setInvertedAppearance():
        """bool QAbstractSlider.setInvertedAppearance()"""
        return bool()
    def sliderPosition():
        """int QAbstractSlider.sliderPosition()"""
        return int()
    def setSliderPosition():
        """int QAbstractSlider.setSliderPosition()"""
        return int()
    def isSliderDown():
        """bool QAbstractSlider.isSliderDown()"""
        return bool()
    def setSliderDown():
        """bool QAbstractSlider.setSliderDown()"""
        return bool()
    def hasTracking():
        """bool QAbstractSlider.hasTracking()"""
        return bool()
    def setTracking(_enable):
        """None QAbstractSlider.setTracking(bool _enable)"""
        return None
    def pageStep():
        """int QAbstractSlider.pageStep()"""
        return int()
    def setPageStep():
        """int QAbstractSlider.setPageStep()"""
        return int()
    def singleStep():
        """int QAbstractSlider.singleStep()"""
        return int()
    def setSingleStep():
        """int QAbstractSlider.setSingleStep()"""
        return int()
    def setRange(_min, _max):
        """None QAbstractSlider.setRange(int _min, int _max)"""
        return None
    def maximum():
        """int QAbstractSlider.maximum()"""
        return int()
    def setMaximum():
        """int QAbstractSlider.setMaximum()"""
        return int()
    def minimum():
        """int QAbstractSlider.minimum()"""
        return int()
    def setMinimum():
        """int QAbstractSlider.setMinimum()"""
        return int()
    def orientation():
        """Qt.Orientation QAbstractSlider.orientation()"""
        return Qt.Orientation()


class QAbstractTextDocumentLayout(QObject):
    """"""
    def __init__(_doc):
        """None QAbstractTextDocumentLayout.__init__(QTextDocument _doc)"""
        return None
    def format(_pos):
        """QTextCharFormat QAbstractTextDocumentLayout.format(int _pos)"""
        return QTextCharFormat()
    def drawInlineObject(_painter, _rect, _object, _posInDocument, _format):
        """None QAbstractTextDocumentLayout.drawInlineObject(QPainter _painter, QRectF _rect, QTextInlineObject _object, int _posInDocument, QTextFormat _format)"""
        return None
    def positionInlineObject(_item, _posInDocument, _format):
        """None QAbstractTextDocumentLayout.positionInlineObject(QTextInlineObject _item, int _posInDocument, QTextFormat _format)"""
        return None
    def resizeInlineObject(_item, _posInDocument, _format):
        """None QAbstractTextDocumentLayout.resizeInlineObject(QTextInlineObject _item, int _posInDocument, QTextFormat _format)"""
        return None
    def documentChanged(_from, _charsRemoved, _charsAdded):
        """abstract None QAbstractTextDocumentLayout.documentChanged(int _from, int _charsRemoved, int _charsAdded)"""
        return None
    def handlerForObject(_objectType):
        """QTextObjectInterface QAbstractTextDocumentLayout.handlerForObject(int _objectType)"""
        return QTextObjectInterface()
    def registerHandler(_objectType, _component):
        """None QAbstractTextDocumentLayout.registerHandler(int _objectType, QObject _component)"""
        return None
    def document():
        """QTextDocument QAbstractTextDocumentLayout.document()"""
        return QTextDocument()
    def paintDevice():
        """QPaintDevice QAbstractTextDocumentLayout.paintDevice()"""
        return QPaintDevice()
    def setPaintDevice(_device):
        """None QAbstractTextDocumentLayout.setPaintDevice(QPaintDevice _device)"""
        return None
    def blockBoundingRect(_block):
        """abstract QRectF QAbstractTextDocumentLayout.blockBoundingRect(QTextBlock _block)"""
        return QRectF()
    def frameBoundingRect(_frame):
        """abstract QRectF QAbstractTextDocumentLayout.frameBoundingRect(QTextFrame _frame)"""
        return QRectF()
    def documentSize():
        """abstract QSizeF QAbstractTextDocumentLayout.documentSize()"""
        return QSizeF()
    def pageCount():
        """abstract int QAbstractTextDocumentLayout.pageCount()"""
        return int()
    def anchorAt(_pos):
        """QString QAbstractTextDocumentLayout.anchorAt(QPointF _pos)"""
        return QString()
    def hitTest(_point, _accuracy):
        """abstract int QAbstractTextDocumentLayout.hitTest(QPointF _point, Qt.HitTestAccuracy _accuracy)"""
        return int()
    def draw(_painter, _context):
        """abstract None QAbstractTextDocumentLayout.draw(QPainter _painter, QAbstractTextDocumentLayout.PaintContext _context)"""
        return None


class QTextObjectInterface():
    """"""
    def __init__():
        """None QTextObjectInterface.__init__()"""
        return None
    def __init__():
        """QTextObjectInterface QTextObjectInterface.__init__()"""
        return QTextObjectInterface()
    def drawObject(_painter, _rect, _doc, _posInDocument, _format):
        """abstract None QTextObjectInterface.drawObject(QPainter _painter, QRectF _rect, QTextDocument _doc, int _posInDocument, QTextFormat _format)"""
        return None
    def intrinsicSize(_doc, _posInDocument, _format):
        """abstract QSizeF QTextObjectInterface.intrinsicSize(QTextDocument _doc, int _posInDocument, QTextFormat _format)"""
        return QSizeF()


class QAction(QObject):
    """"""
    LowPriority = int() # QAction.Priority enum
    NormalPriority = int() # QAction.Priority enum
    HighPriority = int() # QAction.Priority enum

    NoSoftKey = int() # QAction.SoftKeyRole enum
    PositiveSoftKey = int() # QAction.SoftKeyRole enum
    NegativeSoftKey = int() # QAction.SoftKeyRole enum
    SelectSoftKey = int() # QAction.SoftKeyRole enum

    NoRole = int() # QAction.MenuRole enum
    TextHeuristicRole = int() # QAction.MenuRole enum
    ApplicationSpecificRole = int() # QAction.MenuRole enum
    AboutQtRole = int() # QAction.MenuRole enum
    AboutRole = int() # QAction.MenuRole enum
    PreferencesRole = int() # QAction.MenuRole enum
    QuitRole = int() # QAction.MenuRole enum

    Trigger = int() # QAction.ActionEvent enum
    Hover = int() # QAction.ActionEvent enum

    def __init__(_parent):
        """None QAction.__init__(QObject _parent)"""
        return None
    def __init__(_text, _parent):
        """None QAction.__init__(QString _text, QObject _parent)"""
        return None
    def __init__(_icon, _text, _parent):
        """None QAction.__init__(QIcon _icon, QString _text, QObject _parent)"""
        return None
    def softKeyRole():
        """QAction.SoftKeyRole QAction.softKeyRole()"""
        return QAction.SoftKeyRole()
    def setSoftKeyRole(_softKeyRole):
        """None QAction.setSoftKeyRole(QAction.SoftKeyRole _softKeyRole)"""
        return None
    def priority():
        """QAction.Priority QAction.priority()"""
        return QAction.Priority()
    def setPriority(_priority):
        """None QAction.setPriority(QAction.Priority _priority)"""
        return None
    def isIconVisibleInMenu():
        """bool QAction.isIconVisibleInMenu()"""
        return bool()
    def setIconVisibleInMenu(_visible):
        """None QAction.setIconVisibleInMenu(bool _visible)"""
        return None
    def associatedGraphicsWidgets():
        """list-of-QGraphicsWidget QAction.associatedGraphicsWidgets()"""
        return [QGraphicsWidget()]
    def associatedWidgets():
        """list-of-QWidget QAction.associatedWidgets()"""
        return [QWidget()]
    def menuRole():
        """QAction.MenuRole QAction.menuRole()"""
        return QAction.MenuRole()
    def setMenuRole(_menuRole):
        """None QAction.setMenuRole(QAction.MenuRole _menuRole)"""
        return None
    def autoRepeat():
        """bool QAction.autoRepeat()"""
        return bool()
    def setAutoRepeat():
        """bool QAction.setAutoRepeat()"""
        return bool()
    def shortcuts():
        """list-of-QKeySequence QAction.shortcuts()"""
        return [QKeySequence()]
    def setShortcuts(_shortcuts):
        """None QAction.setShortcuts(list-of-QKeySequence _shortcuts)"""
        return None
    def setShortcuts():
        """QKeySequence.StandardKey QAction.setShortcuts()"""
        return QKeySequence.StandardKey()
    def setVisible():
        """bool QAction.setVisible()"""
        return bool()
    def setDisabled(_b):
        """None QAction.setDisabled(bool _b)"""
        return None
    def setEnabled():
        """bool QAction.setEnabled()"""
        return bool()
    def toggle():
        """None QAction.toggle()"""
        return None
    def setChecked():
        """bool QAction.setChecked()"""
        return bool()
    def hover():
        """None QAction.hover()"""
        return None
    def trigger():
        """None QAction.trigger()"""
        return None
    def event():
        """QEvent QAction.event()"""
        return QEvent()
    def parentWidget():
        """QWidget QAction.parentWidget()"""
        return QWidget()
    def showStatusText(_widget):
        """bool QAction.showStatusText(QWidget _widget)"""
        return bool()
    def activate(_event):
        """None QAction.activate(QAction.ActionEvent _event)"""
        return None
    def isVisible():
        """bool QAction.isVisible()"""
        return bool()
    def isEnabled():
        """bool QAction.isEnabled()"""
        return bool()
    def isChecked():
        """bool QAction.isChecked()"""
        return bool()
    def setData(_var):
        """None QAction.setData(QVariant _var)"""
        return None
    def data():
        """QVariant QAction.data()"""
        return QVariant()
    def isCheckable():
        """bool QAction.isCheckable()"""
        return bool()
    def setCheckable():
        """bool QAction.setCheckable()"""
        return bool()
    def font():
        """QFont QAction.font()"""
        return QFont()
    def setFont(_font):
        """None QAction.setFont(QFont _font)"""
        return None
    def shortcutContext():
        """Qt.ShortcutContext QAction.shortcutContext()"""
        return Qt.ShortcutContext()
    def setShortcutContext(_context):
        """None QAction.setShortcutContext(Qt.ShortcutContext _context)"""
        return None
    def shortcut():
        """QKeySequence QAction.shortcut()"""
        return QKeySequence()
    def setShortcut(_shortcut):
        """None QAction.setShortcut(QKeySequence _shortcut)"""
        return None
    def isSeparator():
        """bool QAction.isSeparator()"""
        return bool()
    def setSeparator(_b):
        """None QAction.setSeparator(bool _b)"""
        return None
    def setMenu(_menu):
        """None QAction.setMenu(QMenu _menu)"""
        return None
    def menu():
        """QMenu QAction.menu()"""
        return QMenu()
    def whatsThis():
        """QString QAction.whatsThis()"""
        return QString()
    def setWhatsThis(_what):
        """None QAction.setWhatsThis(QString _what)"""
        return None
    def statusTip():
        """QString QAction.statusTip()"""
        return QString()
    def setStatusTip(_statusTip):
        """None QAction.setStatusTip(QString _statusTip)"""
        return None
    def toolTip():
        """QString QAction.toolTip()"""
        return QString()
    def setToolTip(_tip):
        """None QAction.setToolTip(QString _tip)"""
        return None
    def iconText():
        """QString QAction.iconText()"""
        return QString()
    def setIconText(_text):
        """None QAction.setIconText(QString _text)"""
        return None
    def text():
        """QString QAction.text()"""
        return QString()
    def setText(_text):
        """None QAction.setText(QString _text)"""
        return None
    def icon():
        """QIcon QAction.icon()"""
        return QIcon()
    def setIcon(_icon):
        """None QAction.setIcon(QIcon _icon)"""
        return None
    def actionGroup():
        """QActionGroup QAction.actionGroup()"""
        return QActionGroup()
    def setActionGroup(_group):
        """None QAction.setActionGroup(QActionGroup _group)"""
        return None


class QActionGroup(QObject):
    """"""
    def __init__(_parent):
        """None QActionGroup.__init__(QObject _parent)"""
        return None
    def setExclusive():
        """bool QActionGroup.setExclusive()"""
        return bool()
    def setVisible():
        """bool QActionGroup.setVisible()"""
        return bool()
    def setDisabled(_b):
        """None QActionGroup.setDisabled(bool _b)"""
        return None
    def setEnabled():
        """bool QActionGroup.setEnabled()"""
        return bool()
    def isVisible():
        """bool QActionGroup.isVisible()"""
        return bool()
    def isEnabled():
        """bool QActionGroup.isEnabled()"""
        return bool()
    def isExclusive():
        """bool QActionGroup.isExclusive()"""
        return bool()
    def checkedAction():
        """QAction QActionGroup.checkedAction()"""
        return QAction()
    def actions():
        """list-of-QAction QActionGroup.actions()"""
        return [QAction()]
    def removeAction(_a):
        """None QActionGroup.removeAction(QAction _a)"""
        return None
    def addAction(_a):
        """QAction QActionGroup.addAction(QAction _a)"""
        return QAction()
    def addAction(_text):
        """QAction QActionGroup.addAction(QString _text)"""
        return QAction()
    def addAction(_icon, _text):
        """QAction QActionGroup.addAction(QIcon _icon, QString _text)"""
        return QAction()


class QApplication(QCoreApplication):
    """"""
    NormalColor = int() # QApplication.ColorSpec enum
    CustomColor = int() # QApplication.ColorSpec enum
    ManyColor = int() # QApplication.ColorSpec enum

    Tty = int() # QApplication.Type enum
    GuiClient = int() # QApplication.Type enum
    GuiServer = int() # QApplication.Type enum

    def __init__(_argv):
        """None QApplication.__init__(list-of-str _argv)"""
        return None
    def __init__(_argv, _GUIenabled):
        """None QApplication.__init__(list-of-str _argv, bool _GUIenabled)"""
        return None
    def __init__(_argv):
        """QApplication.Type QApplication.__init__(list-of-str _argv)"""
        return QApplication.Type()
    def __init__(_display, _visual, _colormap):
        """None QApplication.__init__(Display _display, int _visual, int _colormap)"""
        return None
    def __init__(_dpy, _argv, _visual, _cmap):
        """None QApplication.__init__(Display _dpy, list-of-str _argv, int _visual, int _cmap)"""
        return None
    def autoSipEnabled():
        """bool QApplication.autoSipEnabled()"""
        return bool()
    def setAutoSipEnabled(_enabled):
        """None QApplication.setAutoSipEnabled(bool _enabled)"""
        return None
    def setGraphicsSystem():
        """QString QApplication.setGraphicsSystem()"""
        return QString()
    def alert(_widget, _msecs):
        """None QApplication.alert(QWidget _widget, int _msecs)"""
        return None
    def styleSheet():
        """QString QApplication.styleSheet()"""
        return QString()
    def keyboardInputDirection():
        """Qt.LayoutDirection QApplication.keyboardInputDirection()"""
        return Qt.LayoutDirection()
    def keyboardInputLocale():
        """QLocale QApplication.keyboardInputLocale()"""
        return QLocale()
    def font():
        """QFont QApplication.font()"""
        return QFont()
    def font():
        """QWidget QApplication.font()"""
        return QWidget()
    def font(_className):
        """QFont QApplication.font(str _className)"""
        return QFont()
    def event():
        """QEvent QApplication.event()"""
        return QEvent()
    def setStyleSheet(_sheet):
        """None QApplication.setStyleSheet(QString _sheet)"""
        return None
    def closeAllWindows():
        """None QApplication.closeAllWindows()"""
        return None
    def aboutQt():
        """None QApplication.aboutQt()"""
        return None
    def quitOnLastWindowClosed():
        """bool QApplication.quitOnLastWindowClosed()"""
        return bool()
    def setQuitOnLastWindowClosed(_quit):
        """None QApplication.setQuitOnLastWindowClosed(bool _quit)"""
        return None
    def notify():
        """QEvent QApplication.notify()"""
        return QEvent()
    def exec_():
        """int QApplication.exec_()"""
        return int()
    def inputContext():
        """QInputContext QApplication.inputContext()"""
        return QInputContext()
    def setInputContext():
        """QInputContext QApplication.setInputContext()"""
        return QInputContext()
    def saveState(_sm):
        """None QApplication.saveState(QSessionManager _sm)"""
        return None
    def commitData(_sm):
        """None QApplication.commitData(QSessionManager _sm)"""
        return None
    def sessionKey():
        """QString QApplication.sessionKey()"""
        return QString()
    def sessionId():
        """QString QApplication.sessionId()"""
        return QString()
    def isSessionRestored():
        """bool QApplication.isSessionRestored()"""
        return bool()
    def x11ProcessEvent():
        """sip.voidptr QApplication.x11ProcessEvent()"""
        return sip.voidptr()
    def x11EventFilter():
        """sip.voidptr QApplication.x11EventFilter()"""
        return sip.voidptr()
    def setEffectEnabled(_effect, _enabled):
        """None QApplication.setEffectEnabled(Qt.UIEffect _effect, bool _enabled)"""
        return None
    def isEffectEnabled():
        """Qt.UIEffect QApplication.isEffectEnabled()"""
        return Qt.UIEffect()
    def isLeftToRight():
        """bool QApplication.isLeftToRight()"""
        return bool()
    def isRightToLeft():
        """bool QApplication.isRightToLeft()"""
        return bool()
    def layoutDirection():
        """Qt.LayoutDirection QApplication.layoutDirection()"""
        return Qt.LayoutDirection()
    def setLayoutDirection(_direction):
        """None QApplication.setLayoutDirection(Qt.LayoutDirection _direction)"""
        return None
    def startDragDistance():
        """int QApplication.startDragDistance()"""
        return int()
    def setStartDragDistance(_l):
        """None QApplication.setStartDragDistance(int _l)"""
        return None
    def startDragTime():
        """int QApplication.startDragTime()"""
        return int()
    def setStartDragTime(_ms):
        """None QApplication.setStartDragTime(int _ms)"""
        return None
    def globalStrut():
        """QSize QApplication.globalStrut()"""
        return QSize()
    def setGlobalStrut():
        """QSize QApplication.setGlobalStrut()"""
        return QSize()
    def wheelScrollLines():
        """int QApplication.wheelScrollLines()"""
        return int()
    def setWheelScrollLines():
        """int QApplication.setWheelScrollLines()"""
        return int()
    def keyboardInputInterval():
        """int QApplication.keyboardInputInterval()"""
        return int()
    def setKeyboardInputInterval():
        """int QApplication.setKeyboardInputInterval()"""
        return int()
    def doubleClickInterval():
        """int QApplication.doubleClickInterval()"""
        return int()
    def setDoubleClickInterval():
        """int QApplication.setDoubleClickInterval()"""
        return int()
    def cursorFlashTime():
        """int QApplication.cursorFlashTime()"""
        return int()
    def setCursorFlashTime():
        """int QApplication.setCursorFlashTime()"""
        return int()
    def desktopSettingsAware():
        """bool QApplication.desktopSettingsAware()"""
        return bool()
    def setDesktopSettingsAware():
        """bool QApplication.setDesktopSettingsAware()"""
        return bool()
    def mouseButtons():
        """Qt.MouseButtons QApplication.mouseButtons()"""
        return Qt.MouseButtons()
    def keyboardModifiers():
        """Qt.KeyboardModifiers QApplication.keyboardModifiers()"""
        return Qt.KeyboardModifiers()
    def beep():
        """None QApplication.beep()"""
        return None
    def syncX():
        """None QApplication.syncX()"""
        return None
    def topLevelAt(_p):
        """QWidget QApplication.topLevelAt(QPoint _p)"""
        return QWidget()
    def topLevelAt(_x, _y):
        """QWidget QApplication.topLevelAt(int _x, int _y)"""
        return QWidget()
    def widgetAt(_p):
        """QWidget QApplication.widgetAt(QPoint _p)"""
        return QWidget()
    def widgetAt(_x, _y):
        """QWidget QApplication.widgetAt(int _x, int _y)"""
        return QWidget()
    def setActiveWindow(_act):
        """None QApplication.setActiveWindow(QWidget _act)"""
        return None
    def activeWindow():
        """QWidget QApplication.activeWindow()"""
        return QWidget()
    def focusWidget():
        """QWidget QApplication.focusWidget()"""
        return QWidget()
    def clipboard():
        """QClipboard QApplication.clipboard()"""
        return QClipboard()
    def activeModalWidget():
        """QWidget QApplication.activeModalWidget()"""
        return QWidget()
    def activePopupWidget():
        """QWidget QApplication.activePopupWidget()"""
        return QWidget()
    def desktop():
        """QDesktopWidget QApplication.desktop()"""
        return QDesktopWidget()
    def topLevelWidgets():
        """list-of-QWidget QApplication.topLevelWidgets()"""
        return [QWidget()]
    def allWidgets():
        """list-of-QWidget QApplication.allWidgets()"""
        return [QWidget()]
    def windowIcon():
        """QIcon QApplication.windowIcon()"""
        return QIcon()
    def setWindowIcon(_icon):
        """None QApplication.setWindowIcon(QIcon _icon)"""
        return None
    def fontMetrics():
        """QFontMetrics QApplication.fontMetrics()"""
        return QFontMetrics()
    def setFont(_font, _className):
        """None QApplication.setFont(QFont _font, str _className)"""
        return None
    def setPalette(_palette, _className):
        """None QApplication.setPalette(QPalette _palette, str _className)"""
        return None
    def palette():
        """QPalette QApplication.palette()"""
        return QPalette()
    def palette():
        """QWidget QApplication.palette()"""
        return QWidget()
    def palette(_className):
        """QPalette QApplication.palette(str _className)"""
        return QPalette()
    def restoreOverrideCursor():
        """None QApplication.restoreOverrideCursor()"""
        return None
    def changeOverrideCursor():
        """QCursor QApplication.changeOverrideCursor()"""
        return QCursor()
    def setOverrideCursor():
        """QCursor QApplication.setOverrideCursor()"""
        return QCursor()
    def overrideCursor():
        """QCursor QApplication.overrideCursor()"""
        return QCursor()
    def setColorSpec():
        """int QApplication.setColorSpec()"""
        return int()
    def colorSpec():
        """int QApplication.colorSpec()"""
        return int()
    def setStyle():
        """QStyle QApplication.setStyle()"""
        return QStyle()
    def setStyle():
        """QString QApplication.setStyle()"""
        return QString()
    def style():
        """QStyle QApplication.style()"""
        return QStyle()
    def type():
        """QApplication.Type QApplication.type()"""
        return QApplication.Type()


class QPixmap(QPaintDevice):
    """"""
    ImplicitlyShared = int() # QPixmap.ShareMode enum
    ExplicitlyShared = int() # QPixmap.ShareMode enum

    def __init__():
        """None QPixmap.__init__()"""
        return None
    def __init__(_w, _h):
        """None QPixmap.__init__(int _w, int _h)"""
        return None
    def __init__():
        """QSize QPixmap.__init__()"""
        return QSize()
    def __init__(_fileName, _format, _flags):
        """None QPixmap.__init__(QString _fileName, str _format, Qt.ImageConversionFlags _flags)"""
        return None
    def __init__(_xpm):
        """None QPixmap.__init__(list-of-str _xpm)"""
        return None
    def __init__():
        """QPixmap QPixmap.__init__()"""
        return QPixmap()
    def __init__(_variant):
        """None QPixmap.__init__(QVariant _variant)"""
        return None
    def scroll(_dx, _dy, _rect, _exposed):
        """None QPixmap.scroll(int _dx, int _dy, QRect _rect, QRegion _exposed)"""
        return None
    def scroll(_dx, _dy, _x, _y, _width, _height, _exposed):
        """None QPixmap.scroll(int _dx, int _dy, int _x, int _y, int _width, int _height, QRegion _exposed)"""
        return None
    def fromX11Pixmap(_pixmap, _mode):
        """QPixmap QPixmap.fromX11Pixmap(int _pixmap, QPixmap.ShareMode _mode)"""
        return QPixmap()
    def cacheKey():
        """int QPixmap.cacheKey()"""
        return int()
    def metric():
        """QPaintDevice.PaintDeviceMetric QPixmap.metric()"""
        return QPaintDevice.PaintDeviceMetric()
    def paintEngine():
        """QPaintEngine QPixmap.paintEngine()"""
        return QPaintEngine()
    def handle():
        """int QPixmap.handle()"""
        return int()
    def x11Info():
        """QX11Info QPixmap.x11Info()"""
        return QX11Info()
    def isQBitmap():
        """bool QPixmap.isQBitmap()"""
        return bool()
    def x11PictureHandle():
        """int QPixmap.x11PictureHandle()"""
        return int()
    def detach():
        """None QPixmap.detach()"""
        return None
    def serialNumber():
        """int QPixmap.serialNumber()"""
        return int()
    def copy(_rect):
        """QPixmap QPixmap.copy(QRect _rect)"""
        return QPixmap()
    def copy(_ax, _ay, _awidth, _aheight):
        """QPixmap QPixmap.copy(int _ax, int _ay, int _awidth, int _aheight)"""
        return QPixmap()
    def save(_fileName, _format, _quality):
        """bool QPixmap.save(QString _fileName, str _format, int _quality)"""
        return bool()
    def save(_device, _format, _quality):
        """bool QPixmap.save(QIODevice _device, str _format, int _quality)"""
        return bool()
    def loadFromData(_buf, _format, _flags):
        """bool QPixmap.loadFromData(str _buf, str _format, Qt.ImageConversionFlags _flags)"""
        return bool()
    def loadFromData(_buf, _format, _flags):
        """bool QPixmap.loadFromData(QByteArray _buf, str _format, Qt.ImageConversionFlags _flags)"""
        return bool()
    def load(_fileName, _format, _flags):
        """bool QPixmap.load(QString _fileName, str _format, Qt.ImageConversionFlags _flags)"""
        return bool()
    def convertFromImage(_img, _flags):
        """bool QPixmap.convertFromImage(QImage _img, Qt.ImageConversionFlags _flags)"""
        return bool()
    def fromImageReader(_imageReader, _flags):
        """QPixmap QPixmap.fromImageReader(QImageReader _imageReader, Qt.ImageConversionFlags _flags)"""
        return QPixmap()
    def fromImage(_image, _flags):
        """QPixmap QPixmap.fromImage(QImage _image, Qt.ImageConversionFlags _flags)"""
        return QPixmap()
    def toImage():
        """QImage QPixmap.toImage()"""
        return QImage()
    def trueMatrix(_m, _w, _h):
        """QMatrix QPixmap.trueMatrix(QMatrix _m, int _w, int _h)"""
        return QMatrix()
    def trueMatrix(_m, _w, _h):
        """QTransform QPixmap.trueMatrix(QTransform _m, int _w, int _h)"""
        return QTransform()
    def transformed(_matrix, _mode):
        """QPixmap QPixmap.transformed(QMatrix _matrix, Qt.TransformationMode _mode)"""
        return QPixmap()
    def transformed(_transform, _mode):
        """QPixmap QPixmap.transformed(QTransform _transform, Qt.TransformationMode _mode)"""
        return QPixmap()
    def scaledToHeight(_height, _mode):
        """QPixmap QPixmap.scaledToHeight(int _height, Qt.TransformationMode _mode)"""
        return QPixmap()
    def scaledToWidth(_width, _mode):
        """QPixmap QPixmap.scaledToWidth(int _width, Qt.TransformationMode _mode)"""
        return QPixmap()
    def scaled(_width, _height, _aspectRatioMode, _transformMode):
        """QPixmap QPixmap.scaled(int _width, int _height, Qt.AspectRatioMode _aspectRatioMode, Qt.TransformationMode _transformMode)"""
        return QPixmap()
    def scaled(_size, _aspectRatioMode, _transformMode):
        """QPixmap QPixmap.scaled(QSize _size, Qt.AspectRatioMode _aspectRatioMode, Qt.TransformationMode _transformMode)"""
        return QPixmap()
    def grabWidget(_widget, _rect):
        """QPixmap QPixmap.grabWidget(QWidget _widget, QRect _rect)"""
        return QPixmap()
    def grabWidget(_widget, _x, _y, _width, _height):
        """QPixmap QPixmap.grabWidget(QWidget _widget, int _x, int _y, int _width, int _height)"""
        return QPixmap()
    def grabWindow(_window, _x, _y, _width, _height):
        """QPixmap QPixmap.grabWindow(int _window, int _x, int _y, int _width, int _height)"""
        return QPixmap()
    def createMaskFromColor(_maskColor, _mode):
        """QBitmap QPixmap.createMaskFromColor(QColor _maskColor, Qt.MaskMode _mode)"""
        return QBitmap()
    def createMaskFromColor(_maskColor):
        """QBitmap QPixmap.createMaskFromColor(QColor _maskColor)"""
        return QBitmap()
    def createHeuristicMask(_clipTight):
        """QBitmap QPixmap.createHeuristicMask(bool _clipTight)"""
        return QBitmap()
    def hasAlphaChannel():
        """bool QPixmap.hasAlphaChannel()"""
        return bool()
    def hasAlpha():
        """bool QPixmap.hasAlpha()"""
        return bool()
    def setAlphaChannel():
        """QPixmap QPixmap.setAlphaChannel()"""
        return QPixmap()
    def alphaChannel():
        """QPixmap QPixmap.alphaChannel()"""
        return QPixmap()
    def setMask():
        """QBitmap QPixmap.setMask()"""
        return QBitmap()
    def mask():
        """QBitmap QPixmap.mask()"""
        return QBitmap()
    def fill(_color):
        """None QPixmap.fill(QColor _color)"""
        return None
    def fill(_widget, _ofs):
        """None QPixmap.fill(QWidget _widget, QPoint _ofs)"""
        return None
    def fill(_widget, _xofs, _yofs):
        """None QPixmap.fill(QWidget _widget, int _xofs, int _yofs)"""
        return None
    def defaultDepth():
        """int QPixmap.defaultDepth()"""
        return int()
    def depth():
        """int QPixmap.depth()"""
        return int()
    def rect():
        """QRect QPixmap.rect()"""
        return QRect()
    def size():
        """QSize QPixmap.size()"""
        return QSize()
    def height():
        """int QPixmap.height()"""
        return int()
    def width():
        """int QPixmap.width()"""
        return int()
    def devType():
        """int QPixmap.devType()"""
        return int()
    def isNull():
        """bool QPixmap.isNull()"""
        return bool()


class QBitmap(QPixmap):
    """"""
    def __init__():
        """None QBitmap.__init__()"""
        return None
    def __init__():
        """QPixmap QBitmap.__init__()"""
        return QPixmap()
    def __init__(_w, _h):
        """None QBitmap.__init__(int _w, int _h)"""
        return None
    def __init__():
        """QSize QBitmap.__init__()"""
        return QSize()
    def __init__(_fileName, _format):
        """None QBitmap.__init__(QString _fileName, str _format)"""
        return None
    def __init__(_variant):
        """None QBitmap.__init__(QVariant _variant)"""
        return None
    def __init__():
        """QBitmap QBitmap.__init__()"""
        return QBitmap()
    def transformed():
        """QMatrix QBitmap.transformed()"""
        return QMatrix()
    def transformed(_matrix):
        """QBitmap QBitmap.transformed(QTransform _matrix)"""
        return QBitmap()
    def fromData(_size, _bits, _format):
        """QBitmap QBitmap.fromData(QSize _size, str _bits, QImage.Format _format)"""
        return QBitmap()
    def fromImage(_image, _flags):
        """QBitmap QBitmap.fromImage(QImage _image, Qt.ImageConversionFlags _flags)"""
        return QBitmap()
    def clear():
        """None QBitmap.clear()"""
        return None


class QLayoutItem():
    """"""
    def __init__(_alignment):
        """None QLayoutItem.__init__(Qt.Alignment _alignment)"""
        return None
    def __init__():
        """QLayoutItem QLayoutItem.__init__()"""
        return QLayoutItem()
    def controlTypes():
        """QSizePolicy.ControlTypes QLayoutItem.controlTypes()"""
        return QSizePolicy.ControlTypes()
    def setAlignment(_a):
        """None QLayoutItem.setAlignment(Qt.Alignment _a)"""
        return None
    def alignment():
        """Qt.Alignment QLayoutItem.alignment()"""
        return Qt.Alignment()
    def spacerItem():
        """QSpacerItem QLayoutItem.spacerItem()"""
        return QSpacerItem()
    def layout():
        """QLayout QLayoutItem.layout()"""
        return QLayout()
    def widget():
        """QWidget QLayoutItem.widget()"""
        return QWidget()
    def invalidate():
        """None QLayoutItem.invalidate()"""
        return None
    def minimumHeightForWidth():
        """int QLayoutItem.minimumHeightForWidth()"""
        return int()
    def heightForWidth():
        """int QLayoutItem.heightForWidth()"""
        return int()
    def hasHeightForWidth():
        """bool QLayoutItem.hasHeightForWidth()"""
        return bool()
    def isEmpty():
        """abstract bool QLayoutItem.isEmpty()"""
        return bool()
    def geometry():
        """abstract QRect QLayoutItem.geometry()"""
        return QRect()
    def setGeometry():
        """abstract QRect QLayoutItem.setGeometry()"""
        return QRect()
    def expandingDirections():
        """abstract Qt.Orientations QLayoutItem.expandingDirections()"""
        return Qt.Orientations()
    def maximumSize():
        """abstract QSize QLayoutItem.maximumSize()"""
        return QSize()
    def minimumSize():
        """abstract QSize QLayoutItem.minimumSize()"""
        return QSize()
    def sizeHint():
        """abstract QSize QLayoutItem.sizeHint()"""
        return QSize()


class QLayout(QObject, QLayoutItem):
    """"""
    SetDefaultConstraint = int() # QLayout.SizeConstraint enum
    SetNoConstraint = int() # QLayout.SizeConstraint enum
    SetMinimumSize = int() # QLayout.SizeConstraint enum
    SetFixedSize = int() # QLayout.SizeConstraint enum
    SetMaximumSize = int() # QLayout.SizeConstraint enum
    SetMinAndMaxSize = int() # QLayout.SizeConstraint enum

    def __init__(_parent):
        """None QLayout.__init__(QWidget _parent)"""
        return None
    def __init__():
        """None QLayout.__init__()"""
        return None
    def contentsMargins():
        """QMargins QLayout.contentsMargins()"""
        return QMargins()
    def contentsRect():
        """QRect QLayout.contentsRect()"""
        return QRect()
    def getContentsMargins(_left, _top, _right, _bottom):
        """None QLayout.getContentsMargins(int _left, int _top, int _right, int _bottom)"""
        return None
    def setContentsMargins(_left, _top, _right, _bottom):
        """None QLayout.setContentsMargins(int _left, int _top, int _right, int _bottom)"""
        return None
    def setContentsMargins(_margins):
        """None QLayout.setContentsMargins(QMargins _margins)"""
        return None
    def alignmentRect():
        """QRect QLayout.alignmentRect()"""
        return QRect()
    def addChildWidget(_w):
        """None QLayout.addChildWidget(QWidget _w)"""
        return None
    def addChildLayout(_l):
        """None QLayout.addChildLayout(QLayout _l)"""
        return None
    def childEvent(_e):
        """None QLayout.childEvent(QChildEvent _e)"""
        return None
    def widgetEvent():
        """QEvent QLayout.widgetEvent()"""
        return QEvent()
    def closestAcceptableSize(_w, _s):
        """QSize QLayout.closestAcceptableSize(QWidget _w, QSize _s)"""
        return QSize()
    def isEnabled():
        """bool QLayout.isEnabled()"""
        return bool()
    def setEnabled():
        """bool QLayout.setEnabled()"""
        return bool()
    def layout():
        """QLayout QLayout.layout()"""
        return QLayout()
    def totalSizeHint():
        """QSize QLayout.totalSizeHint()"""
        return QSize()
    def totalMaximumSize():
        """QSize QLayout.totalMaximumSize()"""
        return QSize()
    def totalMinimumSize():
        """QSize QLayout.totalMinimumSize()"""
        return QSize()
    def totalHeightForWidth(_w):
        """int QLayout.totalHeightForWidth(int _w)"""
        return int()
    def isEmpty():
        """bool QLayout.isEmpty()"""
        return bool()
    def __len__():
        """ QLayout.__len__()"""
        return ()
    def count():
        """abstract int QLayout.count()"""
        return int()
    def indexOf():
        """QWidget QLayout.indexOf()"""
        return QWidget()
    def takeAt(_index):
        """abstract QLayoutItem QLayout.takeAt(int _index)"""
        return QLayoutItem()
    def itemAt(_index):
        """abstract QLayoutItem QLayout.itemAt(int _index)"""
        return QLayoutItem()
    def setGeometry():
        """QRect QLayout.setGeometry()"""
        return QRect()
    def maximumSize():
        """QSize QLayout.maximumSize()"""
        return QSize()
    def minimumSize():
        """QSize QLayout.minimumSize()"""
        return QSize()
    def expandingDirections():
        """Qt.Orientations QLayout.expandingDirections()"""
        return Qt.Orientations()
    def removeItem():
        """QLayoutItem QLayout.removeItem()"""
        return QLayoutItem()
    def removeWidget(_w):
        """None QLayout.removeWidget(QWidget _w)"""
        return None
    def addItem():
        """abstract QLayoutItem QLayout.addItem()"""
        return QLayoutItem()
    def addWidget(_w):
        """None QLayout.addWidget(QWidget _w)"""
        return None
    def update():
        """None QLayout.update()"""
        return None
    def activate():
        """bool QLayout.activate()"""
        return bool()
    def geometry():
        """QRect QLayout.geometry()"""
        return QRect()
    def invalidate():
        """None QLayout.invalidate()"""
        return None
    def parentWidget():
        """QWidget QLayout.parentWidget()"""
        return QWidget()
    def menuBar():
        """QWidget QLayout.menuBar()"""
        return QWidget()
    def setMenuBar(_w):
        """None QLayout.setMenuBar(QWidget _w)"""
        return None
    def sizeConstraint():
        """QLayout.SizeConstraint QLayout.sizeConstraint()"""
        return QLayout.SizeConstraint()
    def setSizeConstraint():
        """QLayout.SizeConstraint QLayout.setSizeConstraint()"""
        return QLayout.SizeConstraint()
    def setAlignment(_w, _alignment):
        """bool QLayout.setAlignment(QWidget _w, Qt.Alignment _alignment)"""
        return bool()
    def setAlignment(_l, _alignment):
        """bool QLayout.setAlignment(QLayout _l, Qt.Alignment _alignment)"""
        return bool()
    def setAlignment(_alignment):
        """None QLayout.setAlignment(Qt.Alignment _alignment)"""
        return None
    def setSpacing():
        """int QLayout.setSpacing()"""
        return int()
    def setMargin():
        """int QLayout.setMargin()"""
        return int()
    def spacing():
        """int QLayout.spacing()"""
        return int()
    def margin():
        """int QLayout.margin()"""
        return int()


class QBoxLayout(QLayout):
    """"""
    LeftToRight = int() # QBoxLayout.Direction enum
    RightToLeft = int() # QBoxLayout.Direction enum
    TopToBottom = int() # QBoxLayout.Direction enum
    BottomToTop = int() # QBoxLayout.Direction enum
    Down = int() # QBoxLayout.Direction enum
    Up = int() # QBoxLayout.Direction enum

    def __init__(_direction, _parent):
        """None QBoxLayout.__init__(QBoxLayout.Direction _direction, QWidget _parent)"""
        return None
    def insertItem(_index):
        """QLayoutItem QBoxLayout.insertItem(int _index)"""
        return QLayoutItem()
    def stretch(_index):
        """int QBoxLayout.stretch(int _index)"""
        return int()
    def setStretch(_index, _stretch):
        """None QBoxLayout.setStretch(int _index, int _stretch)"""
        return None
    def insertSpacerItem(_index, _spacerItem):
        """None QBoxLayout.insertSpacerItem(int _index, QSpacerItem _spacerItem)"""
        return None
    def addSpacerItem(_spacerItem):
        """None QBoxLayout.addSpacerItem(QSpacerItem _spacerItem)"""
        return None
    def setSpacing(_spacing):
        """None QBoxLayout.setSpacing(int _spacing)"""
        return None
    def spacing():
        """int QBoxLayout.spacing()"""
        return int()
    def setGeometry():
        """QRect QBoxLayout.setGeometry()"""
        return QRect()
    def count():
        """int QBoxLayout.count()"""
        return int()
    def takeAt():
        """int QBoxLayout.takeAt()"""
        return int()
    def itemAt():
        """int QBoxLayout.itemAt()"""
        return int()
    def invalidate():
        """None QBoxLayout.invalidate()"""
        return None
    def expandingDirections():
        """Qt.Orientations QBoxLayout.expandingDirections()"""
        return Qt.Orientations()
    def minimumHeightForWidth():
        """int QBoxLayout.minimumHeightForWidth()"""
        return int()
    def heightForWidth():
        """int QBoxLayout.heightForWidth()"""
        return int()
    def hasHeightForWidth():
        """bool QBoxLayout.hasHeightForWidth()"""
        return bool()
    def maximumSize():
        """QSize QBoxLayout.maximumSize()"""
        return QSize()
    def minimumSize():
        """QSize QBoxLayout.minimumSize()"""
        return QSize()
    def sizeHint():
        """QSize QBoxLayout.sizeHint()"""
        return QSize()
    def setStretchFactor(_w, _stretch):
        """bool QBoxLayout.setStretchFactor(QWidget _w, int _stretch)"""
        return bool()
    def setStretchFactor(_l, _stretch):
        """bool QBoxLayout.setStretchFactor(QLayout _l, int _stretch)"""
        return bool()
    def insertLayout(_index, _layout, _stretch):
        """None QBoxLayout.insertLayout(int _index, QLayout _layout, int _stretch)"""
        return None
    def insertWidget(_index, _widget, _stretch, _alignment):
        """None QBoxLayout.insertWidget(int _index, QWidget _widget, int _stretch, Qt.Alignment _alignment)"""
        return None
    def insertStretch(_index, _stretch):
        """None QBoxLayout.insertStretch(int _index, int _stretch)"""
        return None
    def insertSpacing(_index, _size):
        """None QBoxLayout.insertSpacing(int _index, int _size)"""
        return None
    def addItem():
        """QLayoutItem QBoxLayout.addItem()"""
        return QLayoutItem()
    def addStrut():
        """int QBoxLayout.addStrut()"""
        return int()
    def addLayout(_layout, _stretch):
        """None QBoxLayout.addLayout(QLayout _layout, int _stretch)"""
        return None
    def addWidget(_stretch, _alignment):
        """QWidget QBoxLayout.addWidget(int _stretch, Qt.Alignment _alignment)"""
        return QWidget()
    def addStretch(_stretch):
        """None QBoxLayout.addStretch(int _stretch)"""
        return None
    def addSpacing(_size):
        """None QBoxLayout.addSpacing(int _size)"""
        return None
    def setDirection():
        """QBoxLayout.Direction QBoxLayout.setDirection()"""
        return QBoxLayout.Direction()
    def direction():
        """QBoxLayout.Direction QBoxLayout.direction()"""
        return QBoxLayout.Direction()


class QHBoxLayout(QBoxLayout):
    """"""
    def __init__():
        """None QHBoxLayout.__init__()"""
        return None
    def __init__(_parent):
        """None QHBoxLayout.__init__(QWidget _parent)"""
        return None


class QVBoxLayout(QBoxLayout):
    """"""
    def __init__():
        """None QVBoxLayout.__init__()"""
        return None
    def __init__(_parent):
        """None QVBoxLayout.__init__(QWidget _parent)"""
        return None


class QColor():
    """"""
    Invalid = int() # QColor.Spec enum
    Rgb = int() # QColor.Spec enum
    Hsv = int() # QColor.Spec enum
    Cmyk = int() # QColor.Spec enum
    Hsl = int() # QColor.Spec enum

    def __init__(_color):
        """None QColor.__init__(Qt.GlobalColor _color)"""
        return None
    def __init__(_rgb):
        """None QColor.__init__(int _rgb)"""
        return None
    def __init__(_variant):
        """None QColor.__init__(QVariant _variant)"""
        return None
    def __init__():
        """None QColor.__init__()"""
        return None
    def __init__(_r, _g, _b, _alpha):
        """None QColor.__init__(int _r, int _g, int _b, int _alpha)"""
        return None
    def __init__(_aname):
        """None QColor.__init__(QString _aname)"""
        return None
    def __init__(_acolor):
        """None QColor.__init__(QColor _acolor)"""
        return None
    def isValidColor(_name):
        """bool QColor.isValidColor(QString _name)"""
        return bool()
    def fromHslF(_h, _s, _l, _alpha):
        """QColor QColor.fromHslF(float _h, float _s, float _l, float _alpha)"""
        return QColor()
    def fromHsl(_h, _s, _l, _alpha):
        """QColor QColor.fromHsl(int _h, int _s, int _l, int _alpha)"""
        return QColor()
    def toHsl():
        """QColor QColor.toHsl()"""
        return QColor()
    def setHslF(_h, _s, _l, _alpha):
        """None QColor.setHslF(float _h, float _s, float _l, float _alpha)"""
        return None
    def getHslF(_h, _s, _l, _alpha):
        """None QColor.getHslF(float _h, float _s, float _l, float _alpha)"""
        return None
    def setHsl(_h, _s, _l, _alpha):
        """None QColor.setHsl(int _h, int _s, int _l, int _alpha)"""
        return None
    def getHsl(_h, _s, _l, _alpha):
        """None QColor.getHsl(int _h, int _s, int _l, int _alpha)"""
        return None
    def lightnessF():
        """float QColor.lightnessF()"""
        return float()
    def hslSaturationF():
        """float QColor.hslSaturationF()"""
        return float()
    def hslHueF():
        """float QColor.hslHueF()"""
        return float()
    def lightness():
        """int QColor.lightness()"""
        return int()
    def hslSaturation():
        """int QColor.hslSaturation()"""
        return int()
    def hslHue():
        """int QColor.hslHue()"""
        return int()
    def hsvSaturationF():
        """float QColor.hsvSaturationF()"""
        return float()
    def hsvHueF():
        """float QColor.hsvHueF()"""
        return float()
    def hsvSaturation():
        """int QColor.hsvSaturation()"""
        return int()
    def hsvHue():
        """int QColor.hsvHue()"""
        return int()
    def darker(_factor):
        """QColor QColor.darker(int _factor)"""
        return QColor()
    def lighter(_factor):
        """QColor QColor.lighter(int _factor)"""
        return QColor()
    def setAllowX11ColorNames(_enabled):
        """None QColor.setAllowX11ColorNames(bool _enabled)"""
        return None
    def allowX11ColorNames():
        """bool QColor.allowX11ColorNames()"""
        return bool()
    def isValid():
        """bool QColor.isValid()"""
        return bool()
    def __ne__(_c):
        """bool QColor.__ne__(QColor _c)"""
        return bool()
    def __eq__(_c):
        """bool QColor.__eq__(QColor _c)"""
        return bool()
    def dark(_factor):
        """QColor QColor.dark(int _factor)"""
        return QColor()
    def light(_factor):
        """QColor QColor.light(int _factor)"""
        return QColor()
    def fromCmykF(_c, _m, _y, _k, _alpha):
        """QColor QColor.fromCmykF(float _c, float _m, float _y, float _k, float _alpha)"""
        return QColor()
    def fromCmyk(_c, _m, _y, _k, _alpha):
        """QColor QColor.fromCmyk(int _c, int _m, int _y, int _k, int _alpha)"""
        return QColor()
    def fromHsvF(_h, _s, _v, _alpha):
        """QColor QColor.fromHsvF(float _h, float _s, float _v, float _alpha)"""
        return QColor()
    def fromHsv(_h, _s, _v, _alpha):
        """QColor QColor.fromHsv(int _h, int _s, int _v, int _alpha)"""
        return QColor()
    def fromRgbF(_r, _g, _b, _alpha):
        """QColor QColor.fromRgbF(float _r, float _g, float _b, float _alpha)"""
        return QColor()
    def fromRgba(_rgba):
        """QColor QColor.fromRgba(int _rgba)"""
        return QColor()
    def fromRgb(_rgb):
        """QColor QColor.fromRgb(int _rgb)"""
        return QColor()
    def fromRgb(_r, _g, _b, _alpha):
        """QColor QColor.fromRgb(int _r, int _g, int _b, int _alpha)"""
        return QColor()
    def convertTo(_colorSpec):
        """QColor QColor.convertTo(QColor.Spec _colorSpec)"""
        return QColor()
    def toCmyk():
        """QColor QColor.toCmyk()"""
        return QColor()
    def toHsv():
        """QColor QColor.toHsv()"""
        return QColor()
    def toRgb():
        """QColor QColor.toRgb()"""
        return QColor()
    def setCmykF(_c, _m, _y, _k, _alpha):
        """None QColor.setCmykF(float _c, float _m, float _y, float _k, float _alpha)"""
        return None
    def getCmykF(_c, _m, _y, _k, _alpha):
        """None QColor.getCmykF(float _c, float _m, float _y, float _k, float _alpha)"""
        return None
    def setCmyk(_c, _m, _y, _k, _alpha):
        """None QColor.setCmyk(int _c, int _m, int _y, int _k, int _alpha)"""
        return None
    def getCmyk(_c, _m, _y, _k, _alpha):
        """None QColor.getCmyk(int _c, int _m, int _y, int _k, int _alpha)"""
        return None
    def blackF():
        """float QColor.blackF()"""
        return float()
    def yellowF():
        """float QColor.yellowF()"""
        return float()
    def magentaF():
        """float QColor.magentaF()"""
        return float()
    def cyanF():
        """float QColor.cyanF()"""
        return float()
    def black():
        """int QColor.black()"""
        return int()
    def yellow():
        """int QColor.yellow()"""
        return int()
    def magenta():
        """int QColor.magenta()"""
        return int()
    def cyan():
        """int QColor.cyan()"""
        return int()
    def setHsvF(_h, _s, _v, _alpha):
        """None QColor.setHsvF(float _h, float _s, float _v, float _alpha)"""
        return None
    def getHsvF(_h, _s, _v, _alpha):
        """None QColor.getHsvF(float _h, float _s, float _v, float _alpha)"""
        return None
    def setHsv(_h, _s, _v, _alpha):
        """None QColor.setHsv(int _h, int _s, int _v, int _alpha)"""
        return None
    def getHsv(_h, _s, _v, _alpha):
        """None QColor.getHsv(int _h, int _s, int _v, int _alpha)"""
        return None
    def valueF():
        """float QColor.valueF()"""
        return float()
    def saturationF():
        """float QColor.saturationF()"""
        return float()
    def hueF():
        """float QColor.hueF()"""
        return float()
    def value():
        """int QColor.value()"""
        return int()
    def saturation():
        """int QColor.saturation()"""
        return int()
    def hue():
        """int QColor.hue()"""
        return int()
    def rgb():
        """int QColor.rgb()"""
        return int()
    def setRgba(_rgba):
        """None QColor.setRgba(int _rgba)"""
        return None
    def rgba():
        """int QColor.rgba()"""
        return int()
    def setRgbF(_r, _g, _b, _alpha):
        """None QColor.setRgbF(float _r, float _g, float _b, float _alpha)"""
        return None
    def getRgbF(_r, _g, _b, _alpha):
        """None QColor.getRgbF(float _r, float _g, float _b, float _alpha)"""
        return None
    def setRgb(_r, _g, _b, _alpha):
        """None QColor.setRgb(int _r, int _g, int _b, int _alpha)"""
        return None
    def setRgb(_rgb):
        """None QColor.setRgb(int _rgb)"""
        return None
    def getRgb(_r, _g, _b, _alpha):
        """None QColor.getRgb(int _r, int _g, int _b, int _alpha)"""
        return None
    def setBlueF(_blue):
        """None QColor.setBlueF(float _blue)"""
        return None
    def setGreenF(_green):
        """None QColor.setGreenF(float _green)"""
        return None
    def setRedF(_red):
        """None QColor.setRedF(float _red)"""
        return None
    def blueF():
        """float QColor.blueF()"""
        return float()
    def greenF():
        """float QColor.greenF()"""
        return float()
    def redF():
        """float QColor.redF()"""
        return float()
    def setBlue(_blue):
        """None QColor.setBlue(int _blue)"""
        return None
    def setGreen(_green):
        """None QColor.setGreen(int _green)"""
        return None
    def setRed(_red):
        """None QColor.setRed(int _red)"""
        return None
    def blue():
        """int QColor.blue()"""
        return int()
    def green():
        """int QColor.green()"""
        return int()
    def red():
        """int QColor.red()"""
        return int()
    def setAlphaF(_alpha):
        """None QColor.setAlphaF(float _alpha)"""
        return None
    def alphaF():
        """float QColor.alphaF()"""
        return float()
    def setAlpha(_alpha):
        """None QColor.setAlpha(int _alpha)"""
        return None
    def alpha():
        """int QColor.alpha()"""
        return int()
    def spec():
        """QColor.Spec QColor.spec()"""
        return QColor.Spec()
    def colorNames():
        """QStringList QColor.colorNames()"""
        return QStringList()
    def setNamedColor(_name):
        """None QColor.setNamedColor(QString _name)"""
        return None
    def name():
        """QString QColor.name()"""
        return QString()


class QPushButton(QAbstractButton):
    """"""
    def __init__(_parent):
        """None QPushButton.__init__(QWidget _parent)"""
        return None
    def __init__(_text, _parent):
        """None QPushButton.__init__(QString _text, QWidget _parent)"""
        return None
    def __init__(_icon, _text, _parent):
        """None QPushButton.__init__(QIcon _icon, QString _text, QWidget _parent)"""
        return None
    def focusOutEvent():
        """QFocusEvent QPushButton.focusOutEvent()"""
        return QFocusEvent()
    def focusInEvent():
        """QFocusEvent QPushButton.focusInEvent()"""
        return QFocusEvent()
    def keyPressEvent():
        """QKeyEvent QPushButton.keyPressEvent()"""
        return QKeyEvent()
    def paintEvent():
        """QPaintEvent QPushButton.paintEvent()"""
        return QPaintEvent()
    def event(_e):
        """bool QPushButton.event(QEvent _e)"""
        return bool()
    def initStyleOption(_option):
        """None QPushButton.initStyleOption(QStyleOptionButton _option)"""
        return None
    def showMenu():
        """None QPushButton.showMenu()"""
        return None
    def isFlat():
        """bool QPushButton.isFlat()"""
        return bool()
    def setFlat():
        """bool QPushButton.setFlat()"""
        return bool()
    def menu():
        """QMenu QPushButton.menu()"""
        return QMenu()
    def setMenu(_menu):
        """None QPushButton.setMenu(QMenu _menu)"""
        return None
    def setDefault():
        """bool QPushButton.setDefault()"""
        return bool()
    def isDefault():
        """bool QPushButton.isDefault()"""
        return bool()
    def setAutoDefault():
        """bool QPushButton.setAutoDefault()"""
        return bool()
    def autoDefault():
        """bool QPushButton.autoDefault()"""
        return bool()
    def minimumSizeHint():
        """QSize QPushButton.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QPushButton.sizeHint()"""
        return QSize()


class QCommandLinkButton(QPushButton):
    """"""
    def __init__(_parent):
        """None QCommandLinkButton.__init__(QWidget _parent)"""
        return None
    def __init__(_text, _parent):
        """None QCommandLinkButton.__init__(QString _text, QWidget _parent)"""
        return None
    def __init__(_text, _description, _parent):
        """None QCommandLinkButton.__init__(QString _text, QString _description, QWidget _parent)"""
        return None
    def paintEvent():
        """QPaintEvent QCommandLinkButton.paintEvent()"""
        return QPaintEvent()
    def event(_e):
        """bool QCommandLinkButton.event(QEvent _e)"""
        return bool()
    def minimumSizeHint():
        """QSize QCommandLinkButton.minimumSizeHint()"""
        return QSize()
    def heightForWidth():
        """int QCommandLinkButton.heightForWidth()"""
        return int()
    def sizeHint():
        """QSize QCommandLinkButton.sizeHint()"""
        return QSize()
    def setDescription(_description):
        """None QCommandLinkButton.setDescription(QString _description)"""
        return None
    def description():
        """QString QCommandLinkButton.description()"""
        return QString()


class QBrush():
    """"""
    def __init__():
        """None QBrush.__init__()"""
        return None
    def __init__(_bs):
        """None QBrush.__init__(Qt.BrushStyle _bs)"""
        return None
    def __init__(_color, _style):
        """None QBrush.__init__(QColor _color, Qt.BrushStyle _style)"""
        return None
    def __init__(_color, _style):
        """None QBrush.__init__(Qt.GlobalColor _color, Qt.BrushStyle _style)"""
        return None
    def __init__(_color, _pixmap):
        """None QBrush.__init__(QColor _color, QPixmap _pixmap)"""
        return None
    def __init__(_color, _pixmap):
        """None QBrush.__init__(Qt.GlobalColor _color, QPixmap _pixmap)"""
        return None
    def __init__(_pixmap):
        """None QBrush.__init__(QPixmap _pixmap)"""
        return None
    def __init__(_image):
        """None QBrush.__init__(QImage _image)"""
        return None
    def __init__(_gradient):
        """None QBrush.__init__(QGradient _gradient)"""
        return None
    def __init__(_brush):
        """None QBrush.__init__(QBrush _brush)"""
        return None
    def __init__(_variant):
        """None QBrush.__init__(QVariant _variant)"""
        return None
    def transform():
        """QTransform QBrush.transform()"""
        return QTransform()
    def setTransform():
        """QTransform QBrush.setTransform()"""
        return QTransform()
    def textureImage():
        """QImage QBrush.textureImage()"""
        return QImage()
    def setTextureImage(_image):
        """None QBrush.setTextureImage(QImage _image)"""
        return None
    def matrix():
        """QMatrix QBrush.matrix()"""
        return QMatrix()
    def setMatrix(_mat):
        """None QBrush.setMatrix(QMatrix _mat)"""
        return None
    def color():
        """QColor QBrush.color()"""
        return QColor()
    def style():
        """Qt.BrushStyle QBrush.style()"""
        return Qt.BrushStyle()
    def __ne__(_b):
        """bool QBrush.__ne__(QBrush _b)"""
        return bool()
    def __eq__(_b):
        """bool QBrush.__eq__(QBrush _b)"""
        return bool()
    def isOpaque():
        """bool QBrush.isOpaque()"""
        return bool()
    def gradient():
        """QGradient QBrush.gradient()"""
        return QGradient()
    def setColor(_color):
        """None QBrush.setColor(QColor _color)"""
        return None
    def setColor(_acolor):
        """None QBrush.setColor(Qt.GlobalColor _acolor)"""
        return None
    def setTexture(_pixmap):
        """None QBrush.setTexture(QPixmap _pixmap)"""
        return None
    def texture():
        """QPixmap QBrush.texture()"""
        return QPixmap()
    def setStyle():
        """Qt.BrushStyle QBrush.setStyle()"""
        return Qt.BrushStyle()


class QGradient():
    """"""
    PadSpread = int() # QGradient.Spread enum
    ReflectSpread = int() # QGradient.Spread enum
    RepeatSpread = int() # QGradient.Spread enum

    LinearGradient = int() # QGradient.Type enum
    RadialGradient = int() # QGradient.Type enum
    ConicalGradient = int() # QGradient.Type enum
    NoGradient = int() # QGradient.Type enum

    LogicalMode = int() # QGradient.CoordinateMode enum
    StretchToDeviceMode = int() # QGradient.CoordinateMode enum
    ObjectBoundingMode = int() # QGradient.CoordinateMode enum

    def __init__():
        """None QGradient.__init__()"""
        return None
    def __init__():
        """QGradient QGradient.__init__()"""
        return QGradient()
    def setCoordinateMode(_mode):
        """None QGradient.setCoordinateMode(QGradient.CoordinateMode _mode)"""
        return None
    def coordinateMode():
        """QGradient.CoordinateMode QGradient.coordinateMode()"""
        return QGradient.CoordinateMode()
    def setSpread(_aspread):
        """None QGradient.setSpread(QGradient.Spread _aspread)"""
        return None
    def __ne__(_other):
        """bool QGradient.__ne__(QGradient _other)"""
        return bool()
    def __eq__(_gradient):
        """bool QGradient.__eq__(QGradient _gradient)"""
        return bool()
    def stops():
        """list-of-tuple-of-float-QColor QGradient.stops()"""
        return [tuple-of-float-QColor()]
    def setStops(_stops):
        """None QGradient.setStops(list-of-tuple-of-float-QColor _stops)"""
        return None
    def setColorAt(_pos, _color):
        """None QGradient.setColorAt(float _pos, QColor _color)"""
        return None
    def spread():
        """QGradient.Spread QGradient.spread()"""
        return QGradient.Spread()
    def type():
        """QGradient.Type QGradient.type()"""
        return QGradient.Type()


class QLinearGradient(QGradient):
    """"""
    def __init__():
        """None QLinearGradient.__init__()"""
        return None
    def __init__(_start, _finalStop):
        """None QLinearGradient.__init__(QPointF _start, QPointF _finalStop)"""
        return None
    def __init__(_xStart, _yStart, _xFinalStop, _yFinalStop):
        """None QLinearGradient.__init__(float _xStart, float _yStart, float _xFinalStop, float _yFinalStop)"""
        return None
    def __init__():
        """QLinearGradient QLinearGradient.__init__()"""
        return QLinearGradient()
    def setFinalStop(_stop):
        """None QLinearGradient.setFinalStop(QPointF _stop)"""
        return None
    def setFinalStop(_x, _y):
        """None QLinearGradient.setFinalStop(float _x, float _y)"""
        return None
    def setStart(_start):
        """None QLinearGradient.setStart(QPointF _start)"""
        return None
    def setStart(_x, _y):
        """None QLinearGradient.setStart(float _x, float _y)"""
        return None
    def finalStop():
        """QPointF QLinearGradient.finalStop()"""
        return QPointF()
    def start():
        """QPointF QLinearGradient.start()"""
        return QPointF()


class QRadialGradient(QGradient):
    """"""
    def __init__():
        """None QRadialGradient.__init__()"""
        return None
    def __init__(_center, _radius, _focalPoint):
        """None QRadialGradient.__init__(QPointF _center, float _radius, QPointF _focalPoint)"""
        return None
    def __init__(_center, _radius):
        """None QRadialGradient.__init__(QPointF _center, float _radius)"""
        return None
    def __init__(_cx, _cy, _radius, _fx, _fy):
        """None QRadialGradient.__init__(float _cx, float _cy, float _radius, float _fx, float _fy)"""
        return None
    def __init__(_cx, _cy, _radius):
        """None QRadialGradient.__init__(float _cx, float _cy, float _radius)"""
        return None
    def __init__():
        """QRadialGradient QRadialGradient.__init__()"""
        return QRadialGradient()
    def setRadius(_radius):
        """None QRadialGradient.setRadius(float _radius)"""
        return None
    def setFocalPoint(_focalPoint):
        """None QRadialGradient.setFocalPoint(QPointF _focalPoint)"""
        return None
    def setFocalPoint(_x, _y):
        """None QRadialGradient.setFocalPoint(float _x, float _y)"""
        return None
    def setCenter(_center):
        """None QRadialGradient.setCenter(QPointF _center)"""
        return None
    def setCenter(_x, _y):
        """None QRadialGradient.setCenter(float _x, float _y)"""
        return None
    def radius():
        """float QRadialGradient.radius()"""
        return float()
    def focalPoint():
        """QPointF QRadialGradient.focalPoint()"""
        return QPointF()
    def center():
        """QPointF QRadialGradient.center()"""
        return QPointF()


class QConicalGradient(QGradient):
    """"""
    def __init__():
        """None QConicalGradient.__init__()"""
        return None
    def __init__(_center, _startAngle):
        """None QConicalGradient.__init__(QPointF _center, float _startAngle)"""
        return None
    def __init__(_cx, _cy, _startAngle):
        """None QConicalGradient.__init__(float _cx, float _cy, float _startAngle)"""
        return None
    def __init__():
        """QConicalGradient QConicalGradient.__init__()"""
        return QConicalGradient()
    def setAngle(_angle):
        """None QConicalGradient.setAngle(float _angle)"""
        return None
    def setCenter(_center):
        """None QConicalGradient.setCenter(QPointF _center)"""
        return None
    def setCenter(_x, _y):
        """None QConicalGradient.setCenter(float _x, float _y)"""
        return None
    def angle():
        """float QConicalGradient.angle()"""
        return float()
    def center():
        """QPointF QConicalGradient.center()"""
        return QPointF()


class QButtonGroup(QObject):
    """"""
    def __init__(_parent):
        """None QButtonGroup.__init__(QObject _parent)"""
        return None
    def checkedId():
        """int QButtonGroup.checkedId()"""
        return int()
    def id(_button):
        """int QButtonGroup.id(QAbstractButton _button)"""
        return int()
    def setId(_button, _id):
        """None QButtonGroup.setId(QAbstractButton _button, int _id)"""
        return None
    def checkedButton():
        """QAbstractButton QButtonGroup.checkedButton()"""
        return QAbstractButton()
    def button(_id):
        """QAbstractButton QButtonGroup.button(int _id)"""
        return QAbstractButton()
    def buttons():
        """list-of-QAbstractButton QButtonGroup.buttons()"""
        return [QAbstractButton()]
    def removeButton():
        """QAbstractButton QButtonGroup.removeButton()"""
        return QAbstractButton()
    def addButton():
        """QAbstractButton QButtonGroup.addButton()"""
        return QAbstractButton()
    def addButton(_id):
        """QAbstractButton QButtonGroup.addButton(int _id)"""
        return QAbstractButton()
    def exclusive():
        """bool QButtonGroup.exclusive()"""
        return bool()
    def setExclusive():
        """bool QButtonGroup.setExclusive()"""
        return bool()


class QCalendarWidget(QWidget):
    """"""
    NoSelection = int() # QCalendarWidget.SelectionMode enum
    SingleSelection = int() # QCalendarWidget.SelectionMode enum

    NoVerticalHeader = int() # QCalendarWidget.VerticalHeaderFormat enum
    ISOWeekNumbers = int() # QCalendarWidget.VerticalHeaderFormat enum

    NoHorizontalHeader = int() # QCalendarWidget.HorizontalHeaderFormat enum
    SingleLetterDayNames = int() # QCalendarWidget.HorizontalHeaderFormat enum
    ShortDayNames = int() # QCalendarWidget.HorizontalHeaderFormat enum
    LongDayNames = int() # QCalendarWidget.HorizontalHeaderFormat enum

    def __init__(_parent):
        """None QCalendarWidget.__init__(QWidget _parent)"""
        return None
    def setNavigationBarVisible(_visible):
        """None QCalendarWidget.setNavigationBarVisible(bool _visible)"""
        return None
    def setDateEditAcceptDelay(_delay):
        """None QCalendarWidget.setDateEditAcceptDelay(int _delay)"""
        return None
    def dateEditAcceptDelay():
        """int QCalendarWidget.dateEditAcceptDelay()"""
        return int()
    def setDateEditEnabled(_enable):
        """None QCalendarWidget.setDateEditEnabled(bool _enable)"""
        return None
    def isDateEditEnabled():
        """bool QCalendarWidget.isDateEditEnabled()"""
        return bool()
    def isNavigationBarVisible():
        """bool QCalendarWidget.isNavigationBarVisible()"""
        return bool()
    def showToday():
        """None QCalendarWidget.showToday()"""
        return None
    def showSelectedDate():
        """None QCalendarWidget.showSelectedDate()"""
        return None
    def showPreviousYear():
        """None QCalendarWidget.showPreviousYear()"""
        return None
    def showPreviousMonth():
        """None QCalendarWidget.showPreviousMonth()"""
        return None
    def showNextYear():
        """None QCalendarWidget.showNextYear()"""
        return None
    def showNextMonth():
        """None QCalendarWidget.showNextMonth()"""
        return None
    def setSelectedDate(_date):
        """None QCalendarWidget.setSelectedDate(QDate _date)"""
        return None
    def setDateRange(_min, _max):
        """None QCalendarWidget.setDateRange(QDate _min, QDate _max)"""
        return None
    def setCurrentPage(_year, _month):
        """None QCalendarWidget.setCurrentPage(int _year, int _month)"""
        return None
    def paintCell(_painter, _rect, _date):
        """None QCalendarWidget.paintCell(QPainter _painter, QRect _rect, QDate _date)"""
        return None
    def keyPressEvent(_event):
        """None QCalendarWidget.keyPressEvent(QKeyEvent _event)"""
        return None
    def resizeEvent(_event):
        """None QCalendarWidget.resizeEvent(QResizeEvent _event)"""
        return None
    def mousePressEvent(_event):
        """None QCalendarWidget.mousePressEvent(QMouseEvent _event)"""
        return None
    def eventFilter(_watched, _event):
        """bool QCalendarWidget.eventFilter(QObject _watched, QEvent _event)"""
        return bool()
    def event(_event):
        """bool QCalendarWidget.event(QEvent _event)"""
        return bool()
    def updateCells():
        """None QCalendarWidget.updateCells()"""
        return None
    def updateCell(_date):
        """None QCalendarWidget.updateCell(QDate _date)"""
        return None
    def setDateTextFormat(_date, _color):
        """None QCalendarWidget.setDateTextFormat(QDate _date, QTextCharFormat _color)"""
        return None
    def dateTextFormat():
        """dict-of-QDate-QTextCharFormat QCalendarWidget.dateTextFormat()"""
        return dict-of-QDate-QTextCharFormat()
    def dateTextFormat(_date):
        """QTextCharFormat QCalendarWidget.dateTextFormat(QDate _date)"""
        return QTextCharFormat()
    def setWeekdayTextFormat(_dayOfWeek, _format):
        """None QCalendarWidget.setWeekdayTextFormat(Qt.DayOfWeek _dayOfWeek, QTextCharFormat _format)"""
        return None
    def weekdayTextFormat(_dayOfWeek):
        """QTextCharFormat QCalendarWidget.weekdayTextFormat(Qt.DayOfWeek _dayOfWeek)"""
        return QTextCharFormat()
    def setHeaderTextFormat(_format):
        """None QCalendarWidget.setHeaderTextFormat(QTextCharFormat _format)"""
        return None
    def headerTextFormat():
        """QTextCharFormat QCalendarWidget.headerTextFormat()"""
        return QTextCharFormat()
    def setVerticalHeaderFormat(_format):
        """None QCalendarWidget.setVerticalHeaderFormat(QCalendarWidget.VerticalHeaderFormat _format)"""
        return None
    def verticalHeaderFormat():
        """QCalendarWidget.VerticalHeaderFormat QCalendarWidget.verticalHeaderFormat()"""
        return QCalendarWidget.VerticalHeaderFormat()
    def setHorizontalHeaderFormat(_format):
        """None QCalendarWidget.setHorizontalHeaderFormat(QCalendarWidget.HorizontalHeaderFormat _format)"""
        return None
    def horizontalHeaderFormat():
        """QCalendarWidget.HorizontalHeaderFormat QCalendarWidget.horizontalHeaderFormat()"""
        return QCalendarWidget.HorizontalHeaderFormat()
    def setSelectionMode(_mode):
        """None QCalendarWidget.setSelectionMode(QCalendarWidget.SelectionMode _mode)"""
        return None
    def selectionMode():
        """QCalendarWidget.SelectionMode QCalendarWidget.selectionMode()"""
        return QCalendarWidget.SelectionMode()
    def setGridVisible(_show):
        """None QCalendarWidget.setGridVisible(bool _show)"""
        return None
    def isGridVisible():
        """bool QCalendarWidget.isGridVisible()"""
        return bool()
    def setHeaderVisible(_show):
        """None QCalendarWidget.setHeaderVisible(bool _show)"""
        return None
    def isHeaderVisible():
        """bool QCalendarWidget.isHeaderVisible()"""
        return bool()
    def setFirstDayOfWeek(_dayOfWeek):
        """None QCalendarWidget.setFirstDayOfWeek(Qt.DayOfWeek _dayOfWeek)"""
        return None
    def firstDayOfWeek():
        """Qt.DayOfWeek QCalendarWidget.firstDayOfWeek()"""
        return Qt.DayOfWeek()
    def setMaximumDate(_date):
        """None QCalendarWidget.setMaximumDate(QDate _date)"""
        return None
    def maximumDate():
        """QDate QCalendarWidget.maximumDate()"""
        return QDate()
    def setMinimumDate(_date):
        """None QCalendarWidget.setMinimumDate(QDate _date)"""
        return None
    def minimumDate():
        """QDate QCalendarWidget.minimumDate()"""
        return QDate()
    def monthShown():
        """int QCalendarWidget.monthShown()"""
        return int()
    def yearShown():
        """int QCalendarWidget.yearShown()"""
        return int()
    def selectedDate():
        """QDate QCalendarWidget.selectedDate()"""
        return QDate()
    def minimumSizeHint():
        """QSize QCalendarWidget.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QCalendarWidget.sizeHint()"""
        return QSize()


class QCheckBox(QAbstractButton):
    """"""
    def __init__(_parent):
        """None QCheckBox.__init__(QWidget _parent)"""
        return None
    def __init__(_text, _parent):
        """None QCheckBox.__init__(QString _text, QWidget _parent)"""
        return None
    def initStyleOption(_option):
        """None QCheckBox.initStyleOption(QStyleOptionButton _option)"""
        return None
    def mouseMoveEvent():
        """QMouseEvent QCheckBox.mouseMoveEvent()"""
        return QMouseEvent()
    def paintEvent():
        """QPaintEvent QCheckBox.paintEvent()"""
        return QPaintEvent()
    def event(_e):
        """bool QCheckBox.event(QEvent _e)"""
        return bool()
    def nextCheckState():
        """None QCheckBox.nextCheckState()"""
        return None
    def checkStateSet():
        """None QCheckBox.checkStateSet()"""
        return None
    def hitButton(_pos):
        """bool QCheckBox.hitButton(QPoint _pos)"""
        return bool()
    def setCheckState(_state):
        """None QCheckBox.setCheckState(Qt.CheckState _state)"""
        return None
    def checkState():
        """Qt.CheckState QCheckBox.checkState()"""
        return Qt.CheckState()
    def isTristate():
        """bool QCheckBox.isTristate()"""
        return bool()
    def setTristate(_on):
        """None QCheckBox.setTristate(bool _on)"""
        return None
    def sizeHint():
        """QSize QCheckBox.sizeHint()"""
        return QSize()


class QClipboard(QObject):
    """"""
    Clipboard = int() # QClipboard.Mode enum
    Selection = int() # QClipboard.Mode enum
    FindBuffer = int() # QClipboard.Mode enum

    def event():
        """QEvent QClipboard.event()"""
        return QEvent()
    def connectNotify():
        """SIGNAL() QClipboard.connectNotify()"""
        return SIGNAL()()
    def setPixmap(_mode):
        """QPixmap QClipboard.setPixmap(QClipboard.Mode _mode)"""
        return QPixmap()
    def setImage(_mode):
        """QImage QClipboard.setImage(QClipboard.Mode _mode)"""
        return QImage()
    def pixmap(_mode):
        """QPixmap QClipboard.pixmap(QClipboard.Mode _mode)"""
        return QPixmap()
    def image(_mode):
        """QImage QClipboard.image(QClipboard.Mode _mode)"""
        return QImage()
    def setMimeData(_data, _mode):
        """None QClipboard.setMimeData(QMimeData _data, QClipboard.Mode _mode)"""
        return None
    def mimeData(_mode):
        """QMimeData QClipboard.mimeData(QClipboard.Mode _mode)"""
        return QMimeData()
    def setText(_mode):
        """QString QClipboard.setText(QClipboard.Mode _mode)"""
        return QString()
    def text(_mode):
        """QString QClipboard.text(QClipboard.Mode _mode)"""
        return QString()
    def text(_subtype, _mode):
        """(QString, QString) QClipboard.text(QString _subtype, QClipboard.Mode _mode)"""
        return (QString, QString)()
    def text(_subtype, _mode):
        """QString QClipboard.text(QString _subtype, QClipboard.Mode _mode)"""
        return QString()
    def ownsSelection():
        """bool QClipboard.ownsSelection()"""
        return bool()
    def ownsFindBuffer():
        """bool QClipboard.ownsFindBuffer()"""
        return bool()
    def ownsClipboard():
        """bool QClipboard.ownsClipboard()"""
        return bool()
    def supportsSelection():
        """bool QClipboard.supportsSelection()"""
        return bool()
    def supportsFindBuffer():
        """bool QClipboard.supportsFindBuffer()"""
        return bool()
    def clear(_mode):
        """None QClipboard.clear(QClipboard.Mode _mode)"""
        return None


class QColumnView(QAbstractItemView):
    """"""
    def __init__(_parent):
        """None QColumnView.__init__(QWidget _parent)"""
        return None
    def currentChanged(_current, _previous):
        """None QColumnView.currentChanged(QModelIndex _current, QModelIndex _previous)"""
        return None
    def rowsInserted(_parent, _start, _end):
        """None QColumnView.rowsInserted(QModelIndex _parent, int _start, int _end)"""
        return None
    def scrollContentsBy(_dx, _dy):
        """None QColumnView.scrollContentsBy(int _dx, int _dy)"""
        return None
    def verticalOffset():
        """int QColumnView.verticalOffset()"""
        return int()
    def horizontalOffset():
        """int QColumnView.horizontalOffset()"""
        return int()
    def visualRegionForSelection(_selection):
        """QRegion QColumnView.visualRegionForSelection(QItemSelection _selection)"""
        return QRegion()
    def setSelection(_rect, _command):
        """None QColumnView.setSelection(QRect _rect, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def resizeEvent(_event):
        """None QColumnView.resizeEvent(QResizeEvent _event)"""
        return None
    def moveCursor(_cursorAction, _modifiers):
        """QModelIndex QColumnView.moveCursor(QAbstractItemView.CursorAction _cursorAction, Qt.KeyboardModifiers _modifiers)"""
        return QModelIndex()
    def isIndexHidden(_index):
        """bool QColumnView.isIndexHidden(QModelIndex _index)"""
        return bool()
    def initializeColumn(_column):
        """None QColumnView.initializeColumn(QAbstractItemView _column)"""
        return None
    def createColumn(_rootIndex):
        """QAbstractItemView QColumnView.createColumn(QModelIndex _rootIndex)"""
        return QAbstractItemView()
    def selectAll():
        """None QColumnView.selectAll()"""
        return None
    def setRootIndex(_index):
        """None QColumnView.setRootIndex(QModelIndex _index)"""
        return None
    def setSelectionModel(_selectionModel):
        """None QColumnView.setSelectionModel(QItemSelectionModel _selectionModel)"""
        return None
    def setModel(_model):
        """None QColumnView.setModel(QAbstractItemModel _model)"""
        return None
    def visualRect(_index):
        """QRect QColumnView.visualRect(QModelIndex _index)"""
        return QRect()
    def sizeHint():
        """QSize QColumnView.sizeHint()"""
        return QSize()
    def scrollTo(_index, _hint):
        """None QColumnView.scrollTo(QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def indexAt(_point):
        """QModelIndex QColumnView.indexAt(QPoint _point)"""
        return QModelIndex()
    def setResizeGripsVisible(_visible):
        """None QColumnView.setResizeGripsVisible(bool _visible)"""
        return None
    def setPreviewWidget(_widget):
        """None QColumnView.setPreviewWidget(QWidget _widget)"""
        return None
    def setColumnWidths(_list):
        """None QColumnView.setColumnWidths(list-of-int _list)"""
        return None
    def resizeGripsVisible():
        """bool QColumnView.resizeGripsVisible()"""
        return bool()
    def previewWidget():
        """QWidget QColumnView.previewWidget()"""
        return QWidget()
    def columnWidths():
        """list-of-int QColumnView.columnWidths()"""
        return [int()]


class QColorDialog(QDialog):
    """"""
    ShowAlphaChannel = int() # QColorDialog.ColorDialogOption enum
    NoButtons = int() # QColorDialog.ColorDialogOption enum
    DontUseNativeDialog = int() # QColorDialog.ColorDialogOption enum

    def __init__(_parent):
        """None QColorDialog.__init__(QWidget _parent)"""
        return None
    def __init__(_initial, _parent):
        """None QColorDialog.__init__(QColor _initial, QWidget _parent)"""
        return None
    def setVisible(_visible):
        """None QColorDialog.setVisible(bool _visible)"""
        return None
    def open():
        """None QColorDialog.open()"""
        return None
    def open(_receiver, _member):
        """None QColorDialog.open(QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(_receiver):
        """None QColorDialog.open(callable _receiver)"""
        return None
    def options():
        """QColorDialog.ColorDialogOptions QColorDialog.options()"""
        return QColorDialog.ColorDialogOptions()
    def setOptions(_options):
        """None QColorDialog.setOptions(QColorDialog.ColorDialogOptions _options)"""
        return None
    def testOption(_option):
        """bool QColorDialog.testOption(QColorDialog.ColorDialogOption _option)"""
        return bool()
    def setOption(_option, _on):
        """None QColorDialog.setOption(QColorDialog.ColorDialogOption _option, bool _on)"""
        return None
    def selectedColor():
        """QColor QColorDialog.selectedColor()"""
        return QColor()
    def currentColor():
        """QColor QColorDialog.currentColor()"""
        return QColor()
    def setCurrentColor(_color):
        """None QColorDialog.setCurrentColor(QColor _color)"""
        return None
    def done(_result):
        """None QColorDialog.done(int _result)"""
        return None
    def changeEvent(_e):
        """None QColorDialog.changeEvent(QEvent _e)"""
        return None
    def setStandardColor():
        """int QColorDialog.setStandardColor()"""
        return int()
    def setCustomColor():
        """int QColorDialog.setCustomColor()"""
        return int()
    def customColor():
        """int QColorDialog.customColor()"""
        return int()
    def customCount():
        """int QColorDialog.customCount()"""
        return int()
    def getRgba(_initial, _ok, _parent):
        """int QColorDialog.getRgba(int _initial, bool _ok, QWidget _parent)"""
        return int()
    def getColor(_initial, _parent):
        """QColor QColorDialog.getColor(QColor _initial, QWidget _parent)"""
        return QColor()
    def getColor(_initial, _parent, _title, _options):
        """QColor QColorDialog.getColor(QColor _initial, QWidget _parent, QString _title, QColorDialog.ColorDialogOptions _options)"""
        return QColor()


class QComboBox(QWidget):
    """"""
    AdjustToContents = int() # QComboBox.SizeAdjustPolicy enum
    AdjustToContentsOnFirstShow = int() # QComboBox.SizeAdjustPolicy enum
    AdjustToMinimumContentsLength = int() # QComboBox.SizeAdjustPolicy enum
    AdjustToMinimumContentsLengthWithIcon = int() # QComboBox.SizeAdjustPolicy enum

    NoInsert = int() # QComboBox.InsertPolicy enum
    InsertAtTop = int() # QComboBox.InsertPolicy enum
    InsertAtCurrent = int() # QComboBox.InsertPolicy enum
    InsertAtBottom = int() # QComboBox.InsertPolicy enum
    InsertAfterCurrent = int() # QComboBox.InsertPolicy enum
    InsertBeforeCurrent = int() # QComboBox.InsertPolicy enum
    InsertAlphabetically = int() # QComboBox.InsertPolicy enum

    def __init__(_parent):
        """None QComboBox.__init__(QWidget _parent)"""
        return None
    def inputMethodQuery():
        """Qt.InputMethodQuery QComboBox.inputMethodQuery()"""
        return Qt.InputMethodQuery()
    def inputMethodEvent():
        """QInputMethodEvent QComboBox.inputMethodEvent()"""
        return QInputMethodEvent()
    def contextMenuEvent(_e):
        """None QComboBox.contextMenuEvent(QContextMenuEvent _e)"""
        return None
    def wheelEvent(_e):
        """None QComboBox.wheelEvent(QWheelEvent _e)"""
        return None
    def keyReleaseEvent(_e):
        """None QComboBox.keyReleaseEvent(QKeyEvent _e)"""
        return None
    def keyPressEvent(_e):
        """None QComboBox.keyPressEvent(QKeyEvent _e)"""
        return None
    def mouseReleaseEvent(_e):
        """None QComboBox.mouseReleaseEvent(QMouseEvent _e)"""
        return None
    def mousePressEvent(_e):
        """None QComboBox.mousePressEvent(QMouseEvent _e)"""
        return None
    def hideEvent(_e):
        """None QComboBox.hideEvent(QHideEvent _e)"""
        return None
    def showEvent(_e):
        """None QComboBox.showEvent(QShowEvent _e)"""
        return None
    def paintEvent(_e):
        """None QComboBox.paintEvent(QPaintEvent _e)"""
        return None
    def resizeEvent(_e):
        """None QComboBox.resizeEvent(QResizeEvent _e)"""
        return None
    def changeEvent(_e):
        """None QComboBox.changeEvent(QEvent _e)"""
        return None
    def focusOutEvent(_e):
        """None QComboBox.focusOutEvent(QFocusEvent _e)"""
        return None
    def focusInEvent(_e):
        """None QComboBox.focusInEvent(QFocusEvent _e)"""
        return None
    def initStyleOption(_option):
        """None QComboBox.initStyleOption(QStyleOptionComboBox _option)"""
        return None
    def setEditText(_text):
        """None QComboBox.setEditText(QString _text)"""
        return None
    def clearEditText():
        """None QComboBox.clearEditText()"""
        return None
    def clear():
        """None QComboBox.clear()"""
        return None
    def insertSeparator(_index):
        """None QComboBox.insertSeparator(int _index)"""
        return None
    def completer():
        """QCompleter QComboBox.completer()"""
        return QCompleter()
    def setCompleter(_c):
        """None QComboBox.setCompleter(QCompleter _c)"""
        return None
    def event(_event):
        """bool QComboBox.event(QEvent _event)"""
        return bool()
    def hidePopup():
        """None QComboBox.hidePopup()"""
        return None
    def showPopup():
        """None QComboBox.showPopup()"""
        return None
    def minimumSizeHint():
        """QSize QComboBox.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QComboBox.sizeHint()"""
        return QSize()
    def setView(_itemView):
        """None QComboBox.setView(QAbstractItemView _itemView)"""
        return None
    def view():
        """QAbstractItemView QComboBox.view()"""
        return QAbstractItemView()
    def setItemData(_index, _value, _role):
        """None QComboBox.setItemData(int _index, QVariant _value, int _role)"""
        return None
    def setItemIcon(_index, _icon):
        """None QComboBox.setItemIcon(int _index, QIcon _icon)"""
        return None
    def setItemText(_index, _text):
        """None QComboBox.setItemText(int _index, QString _text)"""
        return None
    def removeItem(_index):
        """None QComboBox.removeItem(int _index)"""
        return None
    def insertItems(_index, _texts):
        """None QComboBox.insertItems(int _index, QStringList _texts)"""
        return None
    def insertItem(_index, _text, _userData):
        """None QComboBox.insertItem(int _index, QString _text, QVariant _userData)"""
        return None
    def insertItem(_index, _icon, _text, _userData):
        """None QComboBox.insertItem(int _index, QIcon _icon, QString _text, QVariant _userData)"""
        return None
    def addItem(_text, _userData):
        """None QComboBox.addItem(QString _text, QVariant _userData)"""
        return None
    def addItem(_icon, _text, _userData):
        """None QComboBox.addItem(QIcon _icon, QString _text, QVariant _userData)"""
        return None
    def addItems(_texts):
        """None QComboBox.addItems(QStringList _texts)"""
        return None
    def itemData(_index, _role):
        """QVariant QComboBox.itemData(int _index, int _role)"""
        return QVariant()
    def itemIcon(_index):
        """QIcon QComboBox.itemIcon(int _index)"""
        return QIcon()
    def itemText(_index):
        """QString QComboBox.itemText(int _index)"""
        return QString()
    def currentText():
        """QString QComboBox.currentText()"""
        return QString()
    def setCurrentIndex(_index):
        """None QComboBox.setCurrentIndex(int _index)"""
        return None
    def currentIndex():
        """int QComboBox.currentIndex()"""
        return int()
    def setModelColumn(_visibleColumn):
        """None QComboBox.setModelColumn(int _visibleColumn)"""
        return None
    def modelColumn():
        """int QComboBox.modelColumn()"""
        return int()
    def setRootModelIndex(_index):
        """None QComboBox.setRootModelIndex(QModelIndex _index)"""
        return None
    def rootModelIndex():
        """QModelIndex QComboBox.rootModelIndex()"""
        return QModelIndex()
    def setModel(_model):
        """None QComboBox.setModel(QAbstractItemModel _model)"""
        return None
    def model():
        """QAbstractItemModel QComboBox.model()"""
        return QAbstractItemModel()
    def setItemDelegate(_delegate):
        """None QComboBox.setItemDelegate(QAbstractItemDelegate _delegate)"""
        return None
    def itemDelegate():
        """QAbstractItemDelegate QComboBox.itemDelegate()"""
        return QAbstractItemDelegate()
    def validator():
        """QValidator QComboBox.validator()"""
        return QValidator()
    def setValidator(_v):
        """None QComboBox.setValidator(QValidator _v)"""
        return None
    def lineEdit():
        """QLineEdit QComboBox.lineEdit()"""
        return QLineEdit()
    def setLineEdit(_edit):
        """None QComboBox.setLineEdit(QLineEdit _edit)"""
        return None
    def setEditable(_editable):
        """None QComboBox.setEditable(bool _editable)"""
        return None
    def isEditable():
        """bool QComboBox.isEditable()"""
        return bool()
    def setIconSize(_size):
        """None QComboBox.setIconSize(QSize _size)"""
        return None
    def iconSize():
        """QSize QComboBox.iconSize()"""
        return QSize()
    def setMinimumContentsLength(_characters):
        """None QComboBox.setMinimumContentsLength(int _characters)"""
        return None
    def minimumContentsLength():
        """int QComboBox.minimumContentsLength()"""
        return int()
    def setSizeAdjustPolicy(_policy):
        """None QComboBox.setSizeAdjustPolicy(QComboBox.SizeAdjustPolicy _policy)"""
        return None
    def sizeAdjustPolicy():
        """QComboBox.SizeAdjustPolicy QComboBox.sizeAdjustPolicy()"""
        return QComboBox.SizeAdjustPolicy()
    def setInsertPolicy(_policy):
        """None QComboBox.setInsertPolicy(QComboBox.InsertPolicy _policy)"""
        return None
    def insertPolicy():
        """QComboBox.InsertPolicy QComboBox.insertPolicy()"""
        return QComboBox.InsertPolicy()
    def findData(_data, _role, _flags):
        """int QComboBox.findData(QVariant _data, int _role, Qt.MatchFlags _flags)"""
        return int()
    def findText(_text, _flags):
        """int QComboBox.findText(QString _text, Qt.MatchFlags _flags)"""
        return int()
    def hasFrame():
        """bool QComboBox.hasFrame()"""
        return bool()
    def setFrame():
        """bool QComboBox.setFrame()"""
        return bool()
    def setDuplicatesEnabled(_enable):
        """None QComboBox.setDuplicatesEnabled(bool _enable)"""
        return None
    def duplicatesEnabled():
        """bool QComboBox.duplicatesEnabled()"""
        return bool()
    def setAutoCompletionCaseSensitivity(_sensitivity):
        """None QComboBox.setAutoCompletionCaseSensitivity(Qt.CaseSensitivity _sensitivity)"""
        return None
    def autoCompletionCaseSensitivity():
        """Qt.CaseSensitivity QComboBox.autoCompletionCaseSensitivity()"""
        return Qt.CaseSensitivity()
    def setAutoCompletion(_enable):
        """None QComboBox.setAutoCompletion(bool _enable)"""
        return None
    def autoCompletion():
        """bool QComboBox.autoCompletion()"""
        return bool()
    def maxCount():
        """int QComboBox.maxCount()"""
        return int()
    def setMaxCount(_max):
        """None QComboBox.setMaxCount(int _max)"""
        return None
    def __len__():
        """ QComboBox.__len__()"""
        return ()
    def count():
        """int QComboBox.count()"""
        return int()
    def setMaxVisibleItems(_maxItems):
        """None QComboBox.setMaxVisibleItems(int _maxItems)"""
        return None
    def maxVisibleItems():
        """int QComboBox.maxVisibleItems()"""
        return int()


class QCompleter(QObject):
    """"""
    UnsortedModel = int() # QCompleter.ModelSorting enum
    CaseSensitivelySortedModel = int() # QCompleter.ModelSorting enum
    CaseInsensitivelySortedModel = int() # QCompleter.ModelSorting enum

    PopupCompletion = int() # QCompleter.CompletionMode enum
    UnfilteredPopupCompletion = int() # QCompleter.CompletionMode enum
    InlineCompletion = int() # QCompleter.CompletionMode enum

    def __init__(_parent):
        """None QCompleter.__init__(QObject _parent)"""
        return None
    def __init__(_model, _parent):
        """None QCompleter.__init__(QAbstractItemModel _model, QObject _parent)"""
        return None
    def __init__(_list, _parent):
        """None QCompleter.__init__(QStringList _list, QObject _parent)"""
        return None
    def setMaxVisibleItems(_maxItems):
        """None QCompleter.setMaxVisibleItems(int _maxItems)"""
        return None
    def maxVisibleItems():
        """int QCompleter.maxVisibleItems()"""
        return int()
    def event():
        """QEvent QCompleter.event()"""
        return QEvent()
    def eventFilter(_o, _e):
        """bool QCompleter.eventFilter(QObject _o, QEvent _e)"""
        return bool()
    def setWrapAround(_wrap):
        """None QCompleter.setWrapAround(bool _wrap)"""
        return None
    def setCompletionPrefix(_prefix):
        """None QCompleter.setCompletionPrefix(QString _prefix)"""
        return None
    def complete(_rect):
        """None QCompleter.complete(QRect _rect)"""
        return None
    def wrapAround():
        """bool QCompleter.wrapAround()"""
        return bool()
    def splitPath(_path):
        """QStringList QCompleter.splitPath(QString _path)"""
        return QStringList()
    def pathFromIndex(_index):
        """QString QCompleter.pathFromIndex(QModelIndex _index)"""
        return QString()
    def completionPrefix():
        """QString QCompleter.completionPrefix()"""
        return QString()
    def completionModel():
        """QAbstractItemModel QCompleter.completionModel()"""
        return QAbstractItemModel()
    def currentCompletion():
        """QString QCompleter.currentCompletion()"""
        return QString()
    def currentIndex():
        """QModelIndex QCompleter.currentIndex()"""
        return QModelIndex()
    def currentRow():
        """int QCompleter.currentRow()"""
        return int()
    def setCurrentRow(_row):
        """bool QCompleter.setCurrentRow(int _row)"""
        return bool()
    def completionCount():
        """int QCompleter.completionCount()"""
        return int()
    def completionRole():
        """int QCompleter.completionRole()"""
        return int()
    def setCompletionRole(_role):
        """None QCompleter.setCompletionRole(int _role)"""
        return None
    def completionColumn():
        """int QCompleter.completionColumn()"""
        return int()
    def setCompletionColumn(_column):
        """None QCompleter.setCompletionColumn(int _column)"""
        return None
    def modelSorting():
        """QCompleter.ModelSorting QCompleter.modelSorting()"""
        return QCompleter.ModelSorting()
    def setModelSorting(_sorting):
        """None QCompleter.setModelSorting(QCompleter.ModelSorting _sorting)"""
        return None
    def caseSensitivity():
        """Qt.CaseSensitivity QCompleter.caseSensitivity()"""
        return Qt.CaseSensitivity()
    def setCaseSensitivity(_caseSensitivity):
        """None QCompleter.setCaseSensitivity(Qt.CaseSensitivity _caseSensitivity)"""
        return None
    def setPopup(_popup):
        """None QCompleter.setPopup(QAbstractItemView _popup)"""
        return None
    def popup():
        """QAbstractItemView QCompleter.popup()"""
        return QAbstractItemView()
    def completionMode():
        """QCompleter.CompletionMode QCompleter.completionMode()"""
        return QCompleter.CompletionMode()
    def setCompletionMode(_mode):
        """None QCompleter.setCompletionMode(QCompleter.CompletionMode _mode)"""
        return None
    def model():
        """QAbstractItemModel QCompleter.model()"""
        return QAbstractItemModel()
    def setModel(_c):
        """None QCompleter.setModel(QAbstractItemModel _c)"""
        return None
    def widget():
        """QWidget QCompleter.widget()"""
        return QWidget()
    def setWidget(_widget):
        """None QCompleter.setWidget(QWidget _widget)"""
        return None


class QCursor():
    """"""
    def __init__():
        """None QCursor.__init__()"""
        return None
    def __init__(_shape):
        """None QCursor.__init__(Qt.CursorShape _shape)"""
        return None
    def __init__(_bitmap, _mask, _hotX, _hotY):
        """None QCursor.__init__(QBitmap _bitmap, QBitmap _mask, int _hotX, int _hotY)"""
        return None
    def __init__(_pixmap, _hotX, _hotY):
        """None QCursor.__init__(QPixmap _pixmap, int _hotX, int _hotY)"""
        return None
    def __init__(_cursor):
        """None QCursor.__init__(QCursor _cursor)"""
        return None
    def __init__(_variant):
        """None QCursor.__init__(QVariant _variant)"""
        return None
    def setPos(_x, _y):
        """None QCursor.setPos(int _x, int _y)"""
        return None
    def setPos(_p):
        """None QCursor.setPos(QPoint _p)"""
        return None
    def pos():
        """QPoint QCursor.pos()"""
        return QPoint()
    def hotSpot():
        """QPoint QCursor.hotSpot()"""
        return QPoint()
    def pixmap():
        """QPixmap QCursor.pixmap()"""
        return QPixmap()
    def mask():
        """QBitmap QCursor.mask()"""
        return QBitmap()
    def bitmap():
        """QBitmap QCursor.bitmap()"""
        return QBitmap()
    def setShape(_newShape):
        """None QCursor.setShape(Qt.CursorShape _newShape)"""
        return None
    def shape():
        """Qt.CursorShape QCursor.shape()"""
        return Qt.CursorShape()


class QDataWidgetMapper(QObject):
    """"""
    AutoSubmit = int() # QDataWidgetMapper.SubmitPolicy enum
    ManualSubmit = int() # QDataWidgetMapper.SubmitPolicy enum

    def __init__(_parent):
        """None QDataWidgetMapper.__init__(QObject _parent)"""
        return None
    def toPrevious():
        """None QDataWidgetMapper.toPrevious()"""
        return None
    def toNext():
        """None QDataWidgetMapper.toNext()"""
        return None
    def toLast():
        """None QDataWidgetMapper.toLast()"""
        return None
    def toFirst():
        """None QDataWidgetMapper.toFirst()"""
        return None
    def submit():
        """bool QDataWidgetMapper.submit()"""
        return bool()
    def setCurrentModelIndex(_index):
        """None QDataWidgetMapper.setCurrentModelIndex(QModelIndex _index)"""
        return None
    def setCurrentIndex(_index):
        """None QDataWidgetMapper.setCurrentIndex(int _index)"""
        return None
    def revert():
        """None QDataWidgetMapper.revert()"""
        return None
    def currentIndex():
        """int QDataWidgetMapper.currentIndex()"""
        return int()
    def clearMapping():
        """None QDataWidgetMapper.clearMapping()"""
        return None
    def mappedWidgetAt(_section):
        """QWidget QDataWidgetMapper.mappedWidgetAt(int _section)"""
        return QWidget()
    def mappedSection(_widget):
        """int QDataWidgetMapper.mappedSection(QWidget _widget)"""
        return int()
    def mappedPropertyName(_widget):
        """QByteArray QDataWidgetMapper.mappedPropertyName(QWidget _widget)"""
        return QByteArray()
    def removeMapping(_widget):
        """None QDataWidgetMapper.removeMapping(QWidget _widget)"""
        return None
    def addMapping(_widget, _section):
        """None QDataWidgetMapper.addMapping(QWidget _widget, int _section)"""
        return None
    def addMapping(_widget, _section, _propertyName):
        """None QDataWidgetMapper.addMapping(QWidget _widget, int _section, QByteArray _propertyName)"""
        return None
    def submitPolicy():
        """QDataWidgetMapper.SubmitPolicy QDataWidgetMapper.submitPolicy()"""
        return QDataWidgetMapper.SubmitPolicy()
    def setSubmitPolicy(_policy):
        """None QDataWidgetMapper.setSubmitPolicy(QDataWidgetMapper.SubmitPolicy _policy)"""
        return None
    def orientation():
        """Qt.Orientation QDataWidgetMapper.orientation()"""
        return Qt.Orientation()
    def setOrientation(_aOrientation):
        """None QDataWidgetMapper.setOrientation(Qt.Orientation _aOrientation)"""
        return None
    def rootIndex():
        """QModelIndex QDataWidgetMapper.rootIndex()"""
        return QModelIndex()
    def setRootIndex(_index):
        """None QDataWidgetMapper.setRootIndex(QModelIndex _index)"""
        return None
    def itemDelegate():
        """QAbstractItemDelegate QDataWidgetMapper.itemDelegate()"""
        return QAbstractItemDelegate()
    def setItemDelegate(_delegate):
        """None QDataWidgetMapper.setItemDelegate(QAbstractItemDelegate _delegate)"""
        return None
    def model():
        """QAbstractItemModel QDataWidgetMapper.model()"""
        return QAbstractItemModel()
    def setModel(_model):
        """None QDataWidgetMapper.setModel(QAbstractItemModel _model)"""
        return None


class QDateTimeEdit(QAbstractSpinBox):
    """"""
    NoSection = int() # QDateTimeEdit.Section enum
    AmPmSection = int() # QDateTimeEdit.Section enum
    MSecSection = int() # QDateTimeEdit.Section enum
    SecondSection = int() # QDateTimeEdit.Section enum
    MinuteSection = int() # QDateTimeEdit.Section enum
    HourSection = int() # QDateTimeEdit.Section enum
    DaySection = int() # QDateTimeEdit.Section enum
    MonthSection = int() # QDateTimeEdit.Section enum
    YearSection = int() # QDateTimeEdit.Section enum
    TimeSections_Mask = int() # QDateTimeEdit.Section enum
    DateSections_Mask = int() # QDateTimeEdit.Section enum

    def __init__(_parent):
        """None QDateTimeEdit.__init__(QWidget _parent)"""
        return None
    def __init__(_datetime, _parent):
        """None QDateTimeEdit.__init__(QDateTime _datetime, QWidget _parent)"""
        return None
    def __init__(_date, _parent):
        """None QDateTimeEdit.__init__(QDate _date, QWidget _parent)"""
        return None
    def __init__(_time, _parent):
        """None QDateTimeEdit.__init__(QTime _time, QWidget _parent)"""
        return None
    def setTimeSpec(_spec):
        """None QDateTimeEdit.setTimeSpec(Qt.TimeSpec _spec)"""
        return None
    def timeSpec():
        """Qt.TimeSpec QDateTimeEdit.timeSpec()"""
        return Qt.TimeSpec()
    def setCalendarWidget(_calendarWidget):
        """None QDateTimeEdit.setCalendarWidget(QCalendarWidget _calendarWidget)"""
        return None
    def calendarWidget():
        """QCalendarWidget QDateTimeEdit.calendarWidget()"""
        return QCalendarWidget()
    def setDateTimeRange(_min, _max):
        """None QDateTimeEdit.setDateTimeRange(QDateTime _min, QDateTime _max)"""
        return None
    def setMaximumDateTime(_dt):
        """None QDateTimeEdit.setMaximumDateTime(QDateTime _dt)"""
        return None
    def clearMaximumDateTime():
        """None QDateTimeEdit.clearMaximumDateTime()"""
        return None
    def maximumDateTime():
        """QDateTime QDateTimeEdit.maximumDateTime()"""
        return QDateTime()
    def setMinimumDateTime(_dt):
        """None QDateTimeEdit.setMinimumDateTime(QDateTime _dt)"""
        return None
    def clearMinimumDateTime():
        """None QDateTimeEdit.clearMinimumDateTime()"""
        return None
    def minimumDateTime():
        """QDateTime QDateTimeEdit.minimumDateTime()"""
        return QDateTime()
    def stepEnabled():
        """QAbstractSpinBox.StepEnabled QDateTimeEdit.stepEnabled()"""
        return QAbstractSpinBox.StepEnabled()
    def textFromDateTime(_dt):
        """QString QDateTimeEdit.textFromDateTime(QDateTime _dt)"""
        return QString()
    def dateTimeFromText(_text):
        """QDateTime QDateTimeEdit.dateTimeFromText(QString _text)"""
        return QDateTime()
    def fixup(_input):
        """None QDateTimeEdit.fixup(QString _input)"""
        return None
    def fixup(_input):
        """None QDateTimeEdit.fixup(QString _input)"""
        return None
    def validate(_input, _pos):
        """QValidator.State QDateTimeEdit.validate(QString _input, int _pos)"""
        return QValidator.State()
    def validate(_input, _pos):
        """QValidator.State QDateTimeEdit.validate(QString _input, int _pos)"""
        return QValidator.State()
    def paintEvent(_event):
        """None QDateTimeEdit.paintEvent(QPaintEvent _event)"""
        return None
    def mousePressEvent(_event):
        """None QDateTimeEdit.mousePressEvent(QMouseEvent _event)"""
        return None
    def focusNextPrevChild(_next):
        """bool QDateTimeEdit.focusNextPrevChild(bool _next)"""
        return bool()
    def focusInEvent(_e):
        """None QDateTimeEdit.focusInEvent(QFocusEvent _e)"""
        return None
    def wheelEvent(_e):
        """None QDateTimeEdit.wheelEvent(QWheelEvent _e)"""
        return None
    def keyPressEvent(_e):
        """None QDateTimeEdit.keyPressEvent(QKeyEvent _e)"""
        return None
    def initStyleOption(_option):
        """None QDateTimeEdit.initStyleOption(QStyleOptionSpinBox _option)"""
        return None
    def setTime(_time):
        """None QDateTimeEdit.setTime(QTime _time)"""
        return None
    def setDate(_date):
        """None QDateTimeEdit.setDate(QDate _date)"""
        return None
    def setDateTime(_dateTime):
        """None QDateTimeEdit.setDateTime(QDateTime _dateTime)"""
        return None
    def sectionCount():
        """int QDateTimeEdit.sectionCount()"""
        return int()
    def setCurrentSectionIndex(_index):
        """None QDateTimeEdit.setCurrentSectionIndex(int _index)"""
        return None
    def currentSectionIndex():
        """int QDateTimeEdit.currentSectionIndex()"""
        return int()
    def sectionAt(_index):
        """QDateTimeEdit.Section QDateTimeEdit.sectionAt(int _index)"""
        return QDateTimeEdit.Section()
    def event(_e):
        """bool QDateTimeEdit.event(QEvent _e)"""
        return bool()
    def stepBy(_steps):
        """None QDateTimeEdit.stepBy(int _steps)"""
        return None
    def clear():
        """None QDateTimeEdit.clear()"""
        return None
    def sizeHint():
        """QSize QDateTimeEdit.sizeHint()"""
        return QSize()
    def setSelectedSection(_section):
        """None QDateTimeEdit.setSelectedSection(QDateTimeEdit.Section _section)"""
        return None
    def setCalendarPopup(_enable):
        """None QDateTimeEdit.setCalendarPopup(bool _enable)"""
        return None
    def calendarPopup():
        """bool QDateTimeEdit.calendarPopup()"""
        return bool()
    def setDisplayFormat(_format):
        """None QDateTimeEdit.setDisplayFormat(QString _format)"""
        return None
    def displayFormat():
        """QString QDateTimeEdit.displayFormat()"""
        return QString()
    def sectionText(_s):
        """QString QDateTimeEdit.sectionText(QDateTimeEdit.Section _s)"""
        return QString()
    def setCurrentSection(_section):
        """None QDateTimeEdit.setCurrentSection(QDateTimeEdit.Section _section)"""
        return None
    def currentSection():
        """QDateTimeEdit.Section QDateTimeEdit.currentSection()"""
        return QDateTimeEdit.Section()
    def displayedSections():
        """QDateTimeEdit.Sections QDateTimeEdit.displayedSections()"""
        return QDateTimeEdit.Sections()
    def setTimeRange(_min, _max):
        """None QDateTimeEdit.setTimeRange(QTime _min, QTime _max)"""
        return None
    def clearMaximumTime():
        """None QDateTimeEdit.clearMaximumTime()"""
        return None
    def setMaximumTime(_max):
        """None QDateTimeEdit.setMaximumTime(QTime _max)"""
        return None
    def maximumTime():
        """QTime QDateTimeEdit.maximumTime()"""
        return QTime()
    def clearMinimumTime():
        """None QDateTimeEdit.clearMinimumTime()"""
        return None
    def setMinimumTime(_min):
        """None QDateTimeEdit.setMinimumTime(QTime _min)"""
        return None
    def minimumTime():
        """QTime QDateTimeEdit.minimumTime()"""
        return QTime()
    def setDateRange(_min, _max):
        """None QDateTimeEdit.setDateRange(QDate _min, QDate _max)"""
        return None
    def clearMaximumDate():
        """None QDateTimeEdit.clearMaximumDate()"""
        return None
    def setMaximumDate(_max):
        """None QDateTimeEdit.setMaximumDate(QDate _max)"""
        return None
    def maximumDate():
        """QDate QDateTimeEdit.maximumDate()"""
        return QDate()
    def clearMinimumDate():
        """None QDateTimeEdit.clearMinimumDate()"""
        return None
    def setMinimumDate(_min):
        """None QDateTimeEdit.setMinimumDate(QDate _min)"""
        return None
    def minimumDate():
        """QDate QDateTimeEdit.minimumDate()"""
        return QDate()
    def time():
        """QTime QDateTimeEdit.time()"""
        return QTime()
    def date():
        """QDate QDateTimeEdit.date()"""
        return QDate()
    def dateTime():
        """QDateTime QDateTimeEdit.dateTime()"""
        return QDateTime()


class QTimeEdit(QDateTimeEdit):
    """"""
    def __init__(_parent):
        """None QTimeEdit.__init__(QWidget _parent)"""
        return None
    def __init__(_time, _parent):
        """None QTimeEdit.__init__(QTime _time, QWidget _parent)"""
        return None


class QDateEdit(QDateTimeEdit):
    """"""
    def __init__(_parent):
        """None QDateEdit.__init__(QWidget _parent)"""
        return None
    def __init__(_date, _parent):
        """None QDateEdit.__init__(QDate _date, QWidget _parent)"""
        return None


class QDesktopServices():
    """"""
    DesktopLocation = int() # QDesktopServices.StandardLocation enum
    DocumentsLocation = int() # QDesktopServices.StandardLocation enum
    FontsLocation = int() # QDesktopServices.StandardLocation enum
    ApplicationsLocation = int() # QDesktopServices.StandardLocation enum
    MusicLocation = int() # QDesktopServices.StandardLocation enum
    MoviesLocation = int() # QDesktopServices.StandardLocation enum
    PicturesLocation = int() # QDesktopServices.StandardLocation enum
    TempLocation = int() # QDesktopServices.StandardLocation enum
    HomeLocation = int() # QDesktopServices.StandardLocation enum
    DataLocation = int() # QDesktopServices.StandardLocation enum
    CacheLocation = int() # QDesktopServices.StandardLocation enum

    def __init__():
        """None QDesktopServices.__init__()"""
        return None
    def __init__():
        """QDesktopServices QDesktopServices.__init__()"""
        return QDesktopServices()
    def displayName(_type):
        """QString QDesktopServices.displayName(QDesktopServices.StandardLocation _type)"""
        return QString()
    def storageLocation(_type):
        """QString QDesktopServices.storageLocation(QDesktopServices.StandardLocation _type)"""
        return QString()
    def unsetUrlHandler(_scheme):
        """None QDesktopServices.unsetUrlHandler(QString _scheme)"""
        return None
    def setUrlHandler(_scheme, _receiver, _method):
        """None QDesktopServices.setUrlHandler(QString _scheme, QObject _receiver, str _method)"""
        return None
    def setUrlHandler(_scheme, _method):
        """None QDesktopServices.setUrlHandler(QString _scheme, callable _method)"""
        return None
    def openUrl(_url):
        """bool QDesktopServices.openUrl(QUrl _url)"""
        return bool()


class QDesktopWidget(QWidget):
    """"""
    def __init__():
        """None QDesktopWidget.__init__()"""
        return None
    def resizeEvent(_e):
        """None QDesktopWidget.resizeEvent(QResizeEvent _e)"""
        return None
    def availableGeometry(_screen):
        """QRect QDesktopWidget.availableGeometry(int _screen)"""
        return QRect()
    def availableGeometry(_widget):
        """QRect QDesktopWidget.availableGeometry(QWidget _widget)"""
        return QRect()
    def availableGeometry(_point):
        """QRect QDesktopWidget.availableGeometry(QPoint _point)"""
        return QRect()
    def screenGeometry(_screen):
        """QRect QDesktopWidget.screenGeometry(int _screen)"""
        return QRect()
    def screenGeometry(_widget):
        """QRect QDesktopWidget.screenGeometry(QWidget _widget)"""
        return QRect()
    def screenGeometry(_point):
        """QRect QDesktopWidget.screenGeometry(QPoint _point)"""
        return QRect()
    def screenCount():
        """int QDesktopWidget.screenCount()"""
        return int()
    def screen(_screen):
        """QWidget QDesktopWidget.screen(int _screen)"""
        return QWidget()
    def screenNumber(_widget):
        """int QDesktopWidget.screenNumber(QWidget _widget)"""
        return int()
    def screenNumber():
        """QPoint QDesktopWidget.screenNumber()"""
        return QPoint()
    def primaryScreen():
        """int QDesktopWidget.primaryScreen()"""
        return int()
    def numScreens():
        """int QDesktopWidget.numScreens()"""
        return int()
    def isVirtualDesktop():
        """bool QDesktopWidget.isVirtualDesktop()"""
        return bool()


class QDial(QAbstractSlider):
    """"""
    def __init__(_parent):
        """None QDial.__init__(QWidget _parent)"""
        return None
    def sliderChange(_change):
        """None QDial.sliderChange(QAbstractSlider.SliderChange _change)"""
        return None
    def mouseMoveEvent(_me):
        """None QDial.mouseMoveEvent(QMouseEvent _me)"""
        return None
    def mouseReleaseEvent(_me):
        """None QDial.mouseReleaseEvent(QMouseEvent _me)"""
        return None
    def mousePressEvent(_me):
        """None QDial.mousePressEvent(QMouseEvent _me)"""
        return None
    def paintEvent(_pe):
        """None QDial.paintEvent(QPaintEvent _pe)"""
        return None
    def resizeEvent(_re):
        """None QDial.resizeEvent(QResizeEvent _re)"""
        return None
    def event(_e):
        """bool QDial.event(QEvent _e)"""
        return bool()
    def initStyleOption(_option):
        """None QDial.initStyleOption(QStyleOptionSlider _option)"""
        return None
    def setWrapping(_on):
        """None QDial.setWrapping(bool _on)"""
        return None
    def setNotchesVisible(_visible):
        """None QDial.setNotchesVisible(bool _visible)"""
        return None
    def minimumSizeHint():
        """QSize QDial.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QDial.sizeHint()"""
        return QSize()
    def notchesVisible():
        """bool QDial.notchesVisible()"""
        return bool()
    def notchTarget():
        """float QDial.notchTarget()"""
        return float()
    def setNotchTarget(_target):
        """None QDial.setNotchTarget(float _target)"""
        return None
    def notchSize():
        """int QDial.notchSize()"""
        return int()
    def wrapping():
        """bool QDial.wrapping()"""
        return bool()


class QDialogButtonBox(QWidget):
    """"""
    NoButton = int() # QDialogButtonBox.StandardButton enum
    Ok = int() # QDialogButtonBox.StandardButton enum
    Save = int() # QDialogButtonBox.StandardButton enum
    SaveAll = int() # QDialogButtonBox.StandardButton enum
    Open = int() # QDialogButtonBox.StandardButton enum
    Yes = int() # QDialogButtonBox.StandardButton enum
    YesToAll = int() # QDialogButtonBox.StandardButton enum
    No = int() # QDialogButtonBox.StandardButton enum
    NoToAll = int() # QDialogButtonBox.StandardButton enum
    Abort = int() # QDialogButtonBox.StandardButton enum
    Retry = int() # QDialogButtonBox.StandardButton enum
    Ignore = int() # QDialogButtonBox.StandardButton enum
    Close = int() # QDialogButtonBox.StandardButton enum
    Cancel = int() # QDialogButtonBox.StandardButton enum
    Discard = int() # QDialogButtonBox.StandardButton enum
    Help = int() # QDialogButtonBox.StandardButton enum
    Apply = int() # QDialogButtonBox.StandardButton enum
    Reset = int() # QDialogButtonBox.StandardButton enum
    RestoreDefaults = int() # QDialogButtonBox.StandardButton enum

    InvalidRole = int() # QDialogButtonBox.ButtonRole enum
    AcceptRole = int() # QDialogButtonBox.ButtonRole enum
    RejectRole = int() # QDialogButtonBox.ButtonRole enum
    DestructiveRole = int() # QDialogButtonBox.ButtonRole enum
    ActionRole = int() # QDialogButtonBox.ButtonRole enum
    HelpRole = int() # QDialogButtonBox.ButtonRole enum
    YesRole = int() # QDialogButtonBox.ButtonRole enum
    NoRole = int() # QDialogButtonBox.ButtonRole enum
    ResetRole = int() # QDialogButtonBox.ButtonRole enum
    ApplyRole = int() # QDialogButtonBox.ButtonRole enum

    WinLayout = int() # QDialogButtonBox.ButtonLayout enum
    MacLayout = int() # QDialogButtonBox.ButtonLayout enum
    KdeLayout = int() # QDialogButtonBox.ButtonLayout enum
    GnomeLayout = int() # QDialogButtonBox.ButtonLayout enum

    def __init__(_parent):
        """None QDialogButtonBox.__init__(QWidget _parent)"""
        return None
    def __init__(_orientation, _parent):
        """None QDialogButtonBox.__init__(Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def __init__(_buttons, _orientation, _parent):
        """None QDialogButtonBox.__init__(QDialogButtonBox.StandardButtons _buttons, Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def event(_event):
        """bool QDialogButtonBox.event(QEvent _event)"""
        return bool()
    def changeEvent(_event):
        """None QDialogButtonBox.changeEvent(QEvent _event)"""
        return None
    def centerButtons():
        """bool QDialogButtonBox.centerButtons()"""
        return bool()
    def setCenterButtons(_center):
        """None QDialogButtonBox.setCenterButtons(bool _center)"""
        return None
    def button(_which):
        """QPushButton QDialogButtonBox.button(QDialogButtonBox.StandardButton _which)"""
        return QPushButton()
    def standardButton(_button):
        """QDialogButtonBox.StandardButton QDialogButtonBox.standardButton(QAbstractButton _button)"""
        return QDialogButtonBox.StandardButton()
    def standardButtons():
        """QDialogButtonBox.StandardButtons QDialogButtonBox.standardButtons()"""
        return QDialogButtonBox.StandardButtons()
    def setStandardButtons(_buttons):
        """None QDialogButtonBox.setStandardButtons(QDialogButtonBox.StandardButtons _buttons)"""
        return None
    def buttonRole(_button):
        """QDialogButtonBox.ButtonRole QDialogButtonBox.buttonRole(QAbstractButton _button)"""
        return QDialogButtonBox.ButtonRole()
    def buttons():
        """list-of-QAbstractButton QDialogButtonBox.buttons()"""
        return [QAbstractButton()]
    def clear():
        """None QDialogButtonBox.clear()"""
        return None
    def removeButton(_button):
        """None QDialogButtonBox.removeButton(QAbstractButton _button)"""
        return None
    def addButton(_button, _role):
        """None QDialogButtonBox.addButton(QAbstractButton _button, QDialogButtonBox.ButtonRole _role)"""
        return None
    def addButton(_text, _role):
        """QPushButton QDialogButtonBox.addButton(QString _text, QDialogButtonBox.ButtonRole _role)"""
        return QPushButton()
    def addButton(_button):
        """QPushButton QDialogButtonBox.addButton(QDialogButtonBox.StandardButton _button)"""
        return QPushButton()
    def orientation():
        """Qt.Orientation QDialogButtonBox.orientation()"""
        return Qt.Orientation()
    def setOrientation(_orientation):
        """None QDialogButtonBox.setOrientation(Qt.Orientation _orientation)"""
        return None


class QDirModel(QAbstractItemModel):
    """"""
    FileIconRole = int() # QDirModel.Roles enum
    FilePathRole = int() # QDirModel.Roles enum
    FileNameRole = int() # QDirModel.Roles enum

    def __init__(_nameFilters, _filters, _sort, _parent):
        """None QDirModel.__init__(QStringList _nameFilters, QDir.Filters _filters, QDir.SortFlags _sort, QObject _parent)"""
        return None
    def __init__(_parent):
        """None QDirModel.__init__(QObject _parent)"""
        return None
    def fileInfo(_index):
        """QFileInfo QDirModel.fileInfo(QModelIndex _index)"""
        return QFileInfo()
    def fileIcon(_index):
        """QIcon QDirModel.fileIcon(QModelIndex _index)"""
        return QIcon()
    def fileName(_index):
        """QString QDirModel.fileName(QModelIndex _index)"""
        return QString()
    def filePath(_index):
        """QString QDirModel.filePath(QModelIndex _index)"""
        return QString()
    def remove(_index):
        """bool QDirModel.remove(QModelIndex _index)"""
        return bool()
    def rmdir(_index):
        """bool QDirModel.rmdir(QModelIndex _index)"""
        return bool()
    def mkdir(_parent, _name):
        """QModelIndex QDirModel.mkdir(QModelIndex _parent, QString _name)"""
        return QModelIndex()
    def isDir(_index):
        """bool QDirModel.isDir(QModelIndex _index)"""
        return bool()
    def refresh(_parent):
        """None QDirModel.refresh(QModelIndex _parent)"""
        return None
    def lazyChildCount():
        """bool QDirModel.lazyChildCount()"""
        return bool()
    def setLazyChildCount(_enable):
        """None QDirModel.setLazyChildCount(bool _enable)"""
        return None
    def isReadOnly():
        """bool QDirModel.isReadOnly()"""
        return bool()
    def setReadOnly(_enable):
        """None QDirModel.setReadOnly(bool _enable)"""
        return None
    def resolveSymlinks():
        """bool QDirModel.resolveSymlinks()"""
        return bool()
    def setResolveSymlinks(_enable):
        """None QDirModel.setResolveSymlinks(bool _enable)"""
        return None
    def sorting():
        """QDir.SortFlags QDirModel.sorting()"""
        return QDir.SortFlags()
    def setSorting(_sort):
        """None QDirModel.setSorting(QDir.SortFlags _sort)"""
        return None
    def filter():
        """QDir.Filters QDirModel.filter()"""
        return QDir.Filters()
    def setFilter(_filters):
        """None QDirModel.setFilter(QDir.Filters _filters)"""
        return None
    def nameFilters():
        """QStringList QDirModel.nameFilters()"""
        return QStringList()
    def setNameFilters(_filters):
        """None QDirModel.setNameFilters(QStringList _filters)"""
        return None
    def iconProvider():
        """QFileIconProvider QDirModel.iconProvider()"""
        return QFileIconProvider()
    def setIconProvider(_provider):
        """None QDirModel.setIconProvider(QFileIconProvider _provider)"""
        return None
    def supportedDropActions():
        """Qt.DropActions QDirModel.supportedDropActions()"""
        return Qt.DropActions()
    def dropMimeData(_data, _action, _row, _column, _parent):
        """bool QDirModel.dropMimeData(QMimeData _data, Qt.DropAction _action, int _row, int _column, QModelIndex _parent)"""
        return bool()
    def mimeData(_indexes):
        """QMimeData QDirModel.mimeData(list-of-QModelIndex _indexes)"""
        return QMimeData()
    def mimeTypes():
        """QStringList QDirModel.mimeTypes()"""
        return QStringList()
    def sort(_column, _order):
        """None QDirModel.sort(int _column, Qt.SortOrder _order)"""
        return None
    def flags(_index):
        """Qt.ItemFlags QDirModel.flags(QModelIndex _index)"""
        return Qt.ItemFlags()
    def hasChildren(_parent):
        """bool QDirModel.hasChildren(QModelIndex _parent)"""
        return bool()
    def headerData(_section, _orientation, _role):
        """QVariant QDirModel.headerData(int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(_index, _value, _role):
        """bool QDirModel.setData(QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def data(_index, _role):
        """QVariant QDirModel.data(QModelIndex _index, int _role)"""
        return QVariant()
    def columnCount(_parent):
        """int QDirModel.columnCount(QModelIndex _parent)"""
        return int()
    def rowCount(_parent):
        """int QDirModel.rowCount(QModelIndex _parent)"""
        return int()
    def parent(_child):
        """QModelIndex QDirModel.parent(QModelIndex _child)"""
        return QModelIndex()
    def parent():
        """QObject QDirModel.parent()"""
        return QObject()
    def index(_row, _column, _parent):
        """QModelIndex QDirModel.index(int _row, int _column, QModelIndex _parent)"""
        return QModelIndex()
    def index(_path, _column):
        """QModelIndex QDirModel.index(QString _path, int _column)"""
        return QModelIndex()


class QDockWidget(QWidget):
    """"""
    DockWidgetClosable = int() # QDockWidget.DockWidgetFeature enum
    DockWidgetMovable = int() # QDockWidget.DockWidgetFeature enum
    DockWidgetFloatable = int() # QDockWidget.DockWidgetFeature enum
    DockWidgetVerticalTitleBar = int() # QDockWidget.DockWidgetFeature enum
    AllDockWidgetFeatures = int() # QDockWidget.DockWidgetFeature enum
    NoDockWidgetFeatures = int() # QDockWidget.DockWidgetFeature enum

    def __init__(_title, _parent, _flags):
        """None QDockWidget.__init__(QString _title, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(_parent, _flags):
        """None QDockWidget.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def event(_event):
        """bool QDockWidget.event(QEvent _event)"""
        return bool()
    def paintEvent(_event):
        """None QDockWidget.paintEvent(QPaintEvent _event)"""
        return None
    def closeEvent(_event):
        """None QDockWidget.closeEvent(QCloseEvent _event)"""
        return None
    def changeEvent(_event):
        """None QDockWidget.changeEvent(QEvent _event)"""
        return None
    def initStyleOption(_option):
        """None QDockWidget.initStyleOption(QStyleOptionDockWidget _option)"""
        return None
    def titleBarWidget():
        """QWidget QDockWidget.titleBarWidget()"""
        return QWidget()
    def setTitleBarWidget(_widget):
        """None QDockWidget.setTitleBarWidget(QWidget _widget)"""
        return None
    def toggleViewAction():
        """QAction QDockWidget.toggleViewAction()"""
        return QAction()
    def isAreaAllowed(_area):
        """bool QDockWidget.isAreaAllowed(Qt.DockWidgetArea _area)"""
        return bool()
    def allowedAreas():
        """Qt.DockWidgetAreas QDockWidget.allowedAreas()"""
        return Qt.DockWidgetAreas()
    def setAllowedAreas(_areas):
        """None QDockWidget.setAllowedAreas(Qt.DockWidgetAreas _areas)"""
        return None
    def isFloating():
        """bool QDockWidget.isFloating()"""
        return bool()
    def setFloating(_floating):
        """None QDockWidget.setFloating(bool _floating)"""
        return None
    def features():
        """QDockWidget.DockWidgetFeatures QDockWidget.features()"""
        return QDockWidget.DockWidgetFeatures()
    def setFeatures(_features):
        """None QDockWidget.setFeatures(QDockWidget.DockWidgetFeatures _features)"""
        return None
    def setWidget(_widget):
        """None QDockWidget.setWidget(QWidget _widget)"""
        return None
    def widget():
        """QWidget QDockWidget.widget()"""
        return QWidget()


class QDrag(QObject):
    """"""
    def __init__(_dragSource):
        """None QDrag.__init__(QWidget _dragSource)"""
        return None
    def setDragCursor(_cursor, _action):
        """None QDrag.setDragCursor(QPixmap _cursor, Qt.DropAction _action)"""
        return None
    def start(_supportedActions):
        """Qt.DropAction QDrag.start(Qt.DropActions _supportedActions)"""
        return Qt.DropAction()
    def target():
        """QWidget QDrag.target()"""
        return QWidget()
    def source():
        """QWidget QDrag.source()"""
        return QWidget()
    def hotSpot():
        """QPoint QDrag.hotSpot()"""
        return QPoint()
    def setHotSpot(_hotspot):
        """None QDrag.setHotSpot(QPoint _hotspot)"""
        return None
    def pixmap():
        """QPixmap QDrag.pixmap()"""
        return QPixmap()
    def setPixmap():
        """QPixmap QDrag.setPixmap()"""
        return QPixmap()
    def mimeData():
        """QMimeData QDrag.mimeData()"""
        return QMimeData()
    def setMimeData(_data):
        """None QDrag.setMimeData(QMimeData _data)"""
        return None
    def exec_(_supportedActions):
        """Qt.DropAction QDrag.exec_(Qt.DropActions _supportedActions)"""
        return Qt.DropAction()
    def exec_(_supportedActions, _defaultDropAction):
        """Qt.DropAction QDrag.exec_(Qt.DropActions _supportedActions, Qt.DropAction _defaultDropAction)"""
        return Qt.DropAction()


class QErrorMessage(QDialog):
    """"""
    def __init__(_parent):
        """None QErrorMessage.__init__(QWidget _parent)"""
        return None
    def done():
        """int QErrorMessage.done()"""
        return int()
    def changeEvent(_e):
        """None QErrorMessage.changeEvent(QEvent _e)"""
        return None
    def showMessage(_message):
        """None QErrorMessage.showMessage(QString _message)"""
        return None
    def showMessage(_message, _type):
        """None QErrorMessage.showMessage(QString _message, QString _type)"""
        return None
    def qtHandler():
        """QErrorMessage QErrorMessage.qtHandler()"""
        return QErrorMessage()


class QInputEvent(QEvent):
    """"""
    def modifiers():
        """Qt.KeyboardModifiers QInputEvent.modifiers()"""
        return Qt.KeyboardModifiers()


class QMouseEvent(QInputEvent):
    """"""
    def __init__(_type, _pos, _button, _buttons, _modifiers):
        """None QMouseEvent.__init__(QEvent.Type _type, QPoint _pos, Qt.MouseButton _button, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers)"""
        return None
    def __init__(_type, _pos, _globalPos, _button, _buttons, _modifiers):
        """None QMouseEvent.__init__(QEvent.Type _type, QPoint _pos, QPoint _globalPos, Qt.MouseButton _button, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers)"""
        return None
    def __init__():
        """QMouseEvent QMouseEvent.__init__()"""
        return QMouseEvent()
    def posF():
        """QPointF QMouseEvent.posF()"""
        return QPointF()
    def hasExtendedInfo():
        """bool QMouseEvent.hasExtendedInfo()"""
        return bool()
    def buttons():
        """Qt.MouseButtons QMouseEvent.buttons()"""
        return Qt.MouseButtons()
    def button():
        """Qt.MouseButton QMouseEvent.button()"""
        return Qt.MouseButton()
    def globalY():
        """int QMouseEvent.globalY()"""
        return int()
    def globalX():
        """int QMouseEvent.globalX()"""
        return int()
    def y():
        """int QMouseEvent.y()"""
        return int()
    def x():
        """int QMouseEvent.x()"""
        return int()
    def globalPos():
        """QPoint QMouseEvent.globalPos()"""
        return QPoint()
    def pos():
        """QPoint QMouseEvent.pos()"""
        return QPoint()


class QHoverEvent(QEvent):
    """"""
    def __init__(_type, _pos, _oldPos):
        """None QHoverEvent.__init__(QEvent.Type _type, QPoint _pos, QPoint _oldPos)"""
        return None
    def __init__():
        """QHoverEvent QHoverEvent.__init__()"""
        return QHoverEvent()
    def oldPos():
        """QPoint QHoverEvent.oldPos()"""
        return QPoint()
    def pos():
        """QPoint QHoverEvent.pos()"""
        return QPoint()


class QWheelEvent(QInputEvent):
    """"""
    def __init__(_pos, _delta, _buttons, _modifiers, _orientation):
        """None QWheelEvent.__init__(QPoint _pos, int _delta, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers, Qt.Orientation _orientation)"""
        return None
    def __init__(_pos, _globalPos, _delta, _buttons, _modifiers, _orientation):
        """None QWheelEvent.__init__(QPoint _pos, QPoint _globalPos, int _delta, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers, Qt.Orientation _orientation)"""
        return None
    def __init__():
        """QWheelEvent QWheelEvent.__init__()"""
        return QWheelEvent()
    def orientation():
        """Qt.Orientation QWheelEvent.orientation()"""
        return Qt.Orientation()
    def buttons():
        """Qt.MouseButtons QWheelEvent.buttons()"""
        return Qt.MouseButtons()
    def globalY():
        """int QWheelEvent.globalY()"""
        return int()
    def globalX():
        """int QWheelEvent.globalX()"""
        return int()
    def y():
        """int QWheelEvent.y()"""
        return int()
    def x():
        """int QWheelEvent.x()"""
        return int()
    def globalPos():
        """QPoint QWheelEvent.globalPos()"""
        return QPoint()
    def pos():
        """QPoint QWheelEvent.pos()"""
        return QPoint()
    def delta():
        """int QWheelEvent.delta()"""
        return int()


class QTabletEvent(QInputEvent):
    """"""
    UnknownPointer = int() # QTabletEvent.PointerType enum
    Pen = int() # QTabletEvent.PointerType enum
    Cursor = int() # QTabletEvent.PointerType enum
    Eraser = int() # QTabletEvent.PointerType enum

    NoDevice = int() # QTabletEvent.TabletDevice enum
    Puck = int() # QTabletEvent.TabletDevice enum
    Stylus = int() # QTabletEvent.TabletDevice enum
    Airbrush = int() # QTabletEvent.TabletDevice enum
    FourDMouse = int() # QTabletEvent.TabletDevice enum
    XFreeEraser = int() # QTabletEvent.TabletDevice enum
    RotationStylus = int() # QTabletEvent.TabletDevice enum

    def __init__(_t, _pos, _globalPos, _hiResGlobalPos, _device, _pointerType, _pressure, _xTilt, _yTilt, _tangentialPressure, _rotation, _z, _keyState, _uniqueID):
        """None QTabletEvent.__init__(QEvent.Type _t, QPoint _pos, QPoint _globalPos, QPointF _hiResGlobalPos, int _device, int _pointerType, float _pressure, int _xTilt, int _yTilt, float _tangentialPressure, float _rotation, int _z, Qt.KeyboardModifiers _keyState, int _uniqueID)"""
        return None
    def __init__():
        """QTabletEvent QTabletEvent.__init__()"""
        return QTabletEvent()
    def yTilt():
        """int QTabletEvent.yTilt()"""
        return int()
    def xTilt():
        """int QTabletEvent.xTilt()"""
        return int()
    def rotation():
        """float QTabletEvent.rotation()"""
        return float()
    def tangentialPressure():
        """float QTabletEvent.tangentialPressure()"""
        return float()
    def z():
        """int QTabletEvent.z()"""
        return int()
    def pressure():
        """float QTabletEvent.pressure()"""
        return float()
    def uniqueId():
        """int QTabletEvent.uniqueId()"""
        return int()
    def pointerType():
        """QTabletEvent.PointerType QTabletEvent.pointerType()"""
        return QTabletEvent.PointerType()
    def device():
        """QTabletEvent.TabletDevice QTabletEvent.device()"""
        return QTabletEvent.TabletDevice()
    def hiResGlobalY():
        """float QTabletEvent.hiResGlobalY()"""
        return float()
    def hiResGlobalX():
        """float QTabletEvent.hiResGlobalX()"""
        return float()
    def globalY():
        """int QTabletEvent.globalY()"""
        return int()
    def globalX():
        """int QTabletEvent.globalX()"""
        return int()
    def y():
        """int QTabletEvent.y()"""
        return int()
    def x():
        """int QTabletEvent.x()"""
        return int()
    def hiResGlobalPos():
        """QPointF QTabletEvent.hiResGlobalPos()"""
        return QPointF()
    def globalPos():
        """QPoint QTabletEvent.globalPos()"""
        return QPoint()
    def pos():
        """QPoint QTabletEvent.pos()"""
        return QPoint()


class QKeyEvent(QInputEvent):
    """"""
    def __init__(_type, _key, _modifiers, _text, _autorep, _count):
        """None QKeyEvent.__init__(QEvent.Type _type, int _key, Qt.KeyboardModifiers _modifiers, QString _text, bool _autorep, int _count)"""
        return None
    def __init__():
        """QKeyEvent QKeyEvent.__init__()"""
        return QKeyEvent()
    def __ne__(_key):
        """bool QKeyEvent.__ne__(QKeySequence.StandardKey _key)"""
        return bool()
    def __eq__(_key):
        """bool QKeyEvent.__eq__(QKeySequence.StandardKey _key)"""
        return bool()
    def nativeVirtualKey():
        """int QKeyEvent.nativeVirtualKey()"""
        return int()
    def nativeScanCode():
        """int QKeyEvent.nativeScanCode()"""
        return int()
    def nativeModifiers():
        """int QKeyEvent.nativeModifiers()"""
        return int()
    def matches(_key):
        """bool QKeyEvent.matches(QKeySequence.StandardKey _key)"""
        return bool()
    def __len__():
        """ QKeyEvent.__len__()"""
        return ()
    def count():
        """int QKeyEvent.count()"""
        return int()
    def isAutoRepeat():
        """bool QKeyEvent.isAutoRepeat()"""
        return bool()
    def text():
        """QString QKeyEvent.text()"""
        return QString()
    def modifiers():
        """Qt.KeyboardModifiers QKeyEvent.modifiers()"""
        return Qt.KeyboardModifiers()
    def key():
        """int QKeyEvent.key()"""
        return int()


class QFocusEvent(QEvent):
    """"""
    def __init__(_type, _reason):
        """None QFocusEvent.__init__(QEvent.Type _type, Qt.FocusReason _reason)"""
        return None
    def __init__():
        """QFocusEvent QFocusEvent.__init__()"""
        return QFocusEvent()
    def reason():
        """Qt.FocusReason QFocusEvent.reason()"""
        return Qt.FocusReason()
    def lostFocus():
        """bool QFocusEvent.lostFocus()"""
        return bool()
    def gotFocus():
        """bool QFocusEvent.gotFocus()"""
        return bool()


class QPaintEvent(QEvent):
    """"""
    def __init__(_paintRegion):
        """None QPaintEvent.__init__(QRegion _paintRegion)"""
        return None
    def __init__(_paintRect):
        """None QPaintEvent.__init__(QRect _paintRect)"""
        return None
    def __init__():
        """QPaintEvent QPaintEvent.__init__()"""
        return QPaintEvent()
    def region():
        """QRegion QPaintEvent.region()"""
        return QRegion()
    def rect():
        """QRect QPaintEvent.rect()"""
        return QRect()


class QMoveEvent(QEvent):
    """"""
    def __init__(_pos, _oldPos):
        """None QMoveEvent.__init__(QPoint _pos, QPoint _oldPos)"""
        return None
    def __init__():
        """QMoveEvent QMoveEvent.__init__()"""
        return QMoveEvent()
    def oldPos():
        """QPoint QMoveEvent.oldPos()"""
        return QPoint()
    def pos():
        """QPoint QMoveEvent.pos()"""
        return QPoint()


class QResizeEvent(QEvent):
    """"""
    def __init__(_size, _oldSize):
        """None QResizeEvent.__init__(QSize _size, QSize _oldSize)"""
        return None
    def __init__():
        """QResizeEvent QResizeEvent.__init__()"""
        return QResizeEvent()
    def oldSize():
        """QSize QResizeEvent.oldSize()"""
        return QSize()
    def size():
        """QSize QResizeEvent.size()"""
        return QSize()


class QCloseEvent(QEvent):
    """"""
    def __init__():
        """None QCloseEvent.__init__()"""
        return None
    def __init__():
        """QCloseEvent QCloseEvent.__init__()"""
        return QCloseEvent()


class QIconDragEvent(QEvent):
    """"""
    def __init__():
        """None QIconDragEvent.__init__()"""
        return None
    def __init__():
        """QIconDragEvent QIconDragEvent.__init__()"""
        return QIconDragEvent()


class QShowEvent(QEvent):
    """"""
    def __init__():
        """None QShowEvent.__init__()"""
        return None
    def __init__():
        """QShowEvent QShowEvent.__init__()"""
        return QShowEvent()


class QHideEvent(QEvent):
    """"""
    def __init__():
        """None QHideEvent.__init__()"""
        return None
    def __init__():
        """QHideEvent QHideEvent.__init__()"""
        return QHideEvent()


class QContextMenuEvent(QInputEvent):
    """"""
    Mouse = int() # QContextMenuEvent.Reason enum
    Keyboard = int() # QContextMenuEvent.Reason enum
    Other = int() # QContextMenuEvent.Reason enum

    def __init__(_reason, _pos, _globalPos, _modifiers):
        """None QContextMenuEvent.__init__(QContextMenuEvent.Reason _reason, QPoint _pos, QPoint _globalPos, Qt.KeyboardModifiers _modifiers)"""
        return None
    def __init__(_reason, _pos, _globalPos):
        """None QContextMenuEvent.__init__(QContextMenuEvent.Reason _reason, QPoint _pos, QPoint _globalPos)"""
        return None
    def __init__(_reason, _pos):
        """None QContextMenuEvent.__init__(QContextMenuEvent.Reason _reason, QPoint _pos)"""
        return None
    def __init__():
        """QContextMenuEvent QContextMenuEvent.__init__()"""
        return QContextMenuEvent()
    def reason():
        """QContextMenuEvent.Reason QContextMenuEvent.reason()"""
        return QContextMenuEvent.Reason()
    def globalPos():
        """QPoint QContextMenuEvent.globalPos()"""
        return QPoint()
    def pos():
        """QPoint QContextMenuEvent.pos()"""
        return QPoint()
    def globalY():
        """int QContextMenuEvent.globalY()"""
        return int()
    def globalX():
        """int QContextMenuEvent.globalX()"""
        return int()
    def y():
        """int QContextMenuEvent.y()"""
        return int()
    def x():
        """int QContextMenuEvent.x()"""
        return int()


class QInputMethodEvent(QEvent):
    """"""
    TextFormat = int() # QInputMethodEvent.AttributeType enum
    Cursor = int() # QInputMethodEvent.AttributeType enum
    Language = int() # QInputMethodEvent.AttributeType enum
    Ruby = int() # QInputMethodEvent.AttributeType enum
    Selection = int() # QInputMethodEvent.AttributeType enum

    def __init__():
        """None QInputMethodEvent.__init__()"""
        return None
    def __init__(_preeditText, _attributes):
        """None QInputMethodEvent.__init__(QString _preeditText, list-of-QInputMethodEvent.Attribute _attributes)"""
        return None
    def __init__(_other):
        """None QInputMethodEvent.__init__(QInputMethodEvent _other)"""
        return None
    def replacementLength():
        """int QInputMethodEvent.replacementLength()"""
        return int()
    def replacementStart():
        """int QInputMethodEvent.replacementStart()"""
        return int()
    def commitString():
        """QString QInputMethodEvent.commitString()"""
        return QString()
    def preeditString():
        """QString QInputMethodEvent.preeditString()"""
        return QString()
    def attributes():
        """list-of-QInputMethodEvent.Attribute QInputMethodEvent.attributes()"""
        return [QInputMethodEvent.Attribute()]
    def setCommitString(_commitString, _from, _length):
        """None QInputMethodEvent.setCommitString(QString _commitString, int _from, int _length)"""
        return None


class QMimeSource():
    """"""
    def __init__():
        """None QMimeSource.__init__()"""
        return None
    def __init__():
        """QMimeSource QMimeSource.__init__()"""
        return QMimeSource()
    def encodedData():
        """abstract str QMimeSource.encodedData()"""
        return str()
    def provides():
        """str QMimeSource.provides()"""
        return str()
    def format(_i):
        """abstract str QMimeSource.format(int _i)"""
        return str()


class QDropEvent(QEvent, QMimeSource):
    """"""
    def __init__(_pos, _actions, _data, _buttons, _modifiers, _type):
        """None QDropEvent.__init__(QPoint _pos, Qt.DropActions _actions, QMimeData _data, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers, QEvent.Type _type)"""
        return None
    def __init__():
        """QDropEvent QDropEvent.__init__()"""
        return QDropEvent()
    def provides():
        """str QDropEvent.provides()"""
        return str()
    def encodedData():
        """str QDropEvent.encodedData()"""
        return str()
    def format(_n):
        """str QDropEvent.format(int _n)"""
        return str()
    def mimeData():
        """QMimeData QDropEvent.mimeData()"""
        return QMimeData()
    def source():
        """QWidget QDropEvent.source()"""
        return QWidget()
    def setDropAction(_action):
        """None QDropEvent.setDropAction(Qt.DropAction _action)"""
        return None
    def dropAction():
        """Qt.DropAction QDropEvent.dropAction()"""
        return Qt.DropAction()
    def acceptProposedAction():
        """None QDropEvent.acceptProposedAction()"""
        return None
    def proposedAction():
        """Qt.DropAction QDropEvent.proposedAction()"""
        return Qt.DropAction()
    def possibleActions():
        """Qt.DropActions QDropEvent.possibleActions()"""
        return Qt.DropActions()
    def keyboardModifiers():
        """Qt.KeyboardModifiers QDropEvent.keyboardModifiers()"""
        return Qt.KeyboardModifiers()
    def mouseButtons():
        """Qt.MouseButtons QDropEvent.mouseButtons()"""
        return Qt.MouseButtons()
    def pos():
        """QPoint QDropEvent.pos()"""
        return QPoint()


class QDragMoveEvent(QDropEvent):
    """"""
    def __init__(_pos, _actions, _data, _buttons, _modifiers, _type):
        """None QDragMoveEvent.__init__(QPoint _pos, Qt.DropActions _actions, QMimeData _data, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers, QEvent.Type _type)"""
        return None
    def __init__():
        """QDragMoveEvent QDragMoveEvent.__init__()"""
        return QDragMoveEvent()
    def ignore():
        """None QDragMoveEvent.ignore()"""
        return None
    def ignore(_r):
        """None QDragMoveEvent.ignore(QRect _r)"""
        return None
    def accept():
        """None QDragMoveEvent.accept()"""
        return None
    def accept(_r):
        """None QDragMoveEvent.accept(QRect _r)"""
        return None
    def answerRect():
        """QRect QDragMoveEvent.answerRect()"""
        return QRect()


class QDragEnterEvent(QDragMoveEvent):
    """"""
    def __init__(_pos, _actions, _data, _buttons, _modifiers):
        """None QDragEnterEvent.__init__(QPoint _pos, Qt.DropActions _actions, QMimeData _data, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers)"""
        return None
    def __init__():
        """QDragEnterEvent QDragEnterEvent.__init__()"""
        return QDragEnterEvent()


class QDragLeaveEvent(QEvent):
    """"""
    def __init__():
        """None QDragLeaveEvent.__init__()"""
        return None
    def __init__():
        """QDragLeaveEvent QDragLeaveEvent.__init__()"""
        return QDragLeaveEvent()


class QHelpEvent(QEvent):
    """"""
    def __init__(_type, _pos, _globalPos):
        """None QHelpEvent.__init__(QEvent.Type _type, QPoint _pos, QPoint _globalPos)"""
        return None
    def __init__():
        """QHelpEvent QHelpEvent.__init__()"""
        return QHelpEvent()
    def globalPos():
        """QPoint QHelpEvent.globalPos()"""
        return QPoint()
    def pos():
        """QPoint QHelpEvent.pos()"""
        return QPoint()
    def globalY():
        """int QHelpEvent.globalY()"""
        return int()
    def globalX():
        """int QHelpEvent.globalX()"""
        return int()
    def y():
        """int QHelpEvent.y()"""
        return int()
    def x():
        """int QHelpEvent.x()"""
        return int()


class QStatusTipEvent(QEvent):
    """"""
    def __init__(_tip):
        """None QStatusTipEvent.__init__(QString _tip)"""
        return None
    def __init__():
        """QStatusTipEvent QStatusTipEvent.__init__()"""
        return QStatusTipEvent()
    def tip():
        """QString QStatusTipEvent.tip()"""
        return QString()


class QWhatsThisClickedEvent(QEvent):
    """"""
    def __init__(_href):
        """None QWhatsThisClickedEvent.__init__(QString _href)"""
        return None
    def __init__():
        """QWhatsThisClickedEvent QWhatsThisClickedEvent.__init__()"""
        return QWhatsThisClickedEvent()
    def href():
        """QString QWhatsThisClickedEvent.href()"""
        return QString()


class QActionEvent(QEvent):
    """"""
    def __init__(_type, _action, _before):
        """None QActionEvent.__init__(int _type, QAction _action, QAction _before)"""
        return None
    def __init__():
        """QActionEvent QActionEvent.__init__()"""
        return QActionEvent()
    def before():
        """QAction QActionEvent.before()"""
        return QAction()
    def action():
        """QAction QActionEvent.action()"""
        return QAction()


class QFileOpenEvent(QEvent):
    """"""
    def url():
        """QUrl QFileOpenEvent.url()"""
        return QUrl()
    def file():
        """QString QFileOpenEvent.file()"""
        return QString()


class QShortcutEvent(QEvent):
    """"""
    def __init__(_key, _id, _ambiguous):
        """None QShortcutEvent.__init__(QKeySequence _key, int _id, bool _ambiguous)"""
        return None
    def __init__():
        """QShortcutEvent QShortcutEvent.__init__()"""
        return QShortcutEvent()
    def shortcutId():
        """int QShortcutEvent.shortcutId()"""
        return int()
    def key():
        """QKeySequence QShortcutEvent.key()"""
        return QKeySequence()
    def isAmbiguous():
        """bool QShortcutEvent.isAmbiguous()"""
        return bool()


class QWindowStateChangeEvent(QEvent):
    """"""
    def oldState():
        """Qt.WindowStates QWindowStateChangeEvent.oldState()"""
        return Qt.WindowStates()


class QTouchEvent(QInputEvent):
    """"""
    TouchScreen = int() # QTouchEvent.DeviceType enum
    TouchPad = int() # QTouchEvent.DeviceType enum

    def __init__(_eventType, _deviceType, _modifiers, _touchPointStates, _touchPoints):
        """None QTouchEvent.__init__(QEvent.Type _eventType, QTouchEvent.DeviceType _deviceType, Qt.KeyboardModifiers _modifiers, Qt.TouchPointStates _touchPointStates, list-of-QTouchEvent.TouchPoint _touchPoints)"""
        return None
    def __init__():
        """QTouchEvent QTouchEvent.__init__()"""
        return QTouchEvent()
    def touchPoints():
        """list-of-QTouchEvent.TouchPoint QTouchEvent.touchPoints()"""
        return [QTouchEvent.TouchPoint()]
    def touchPointStates():
        """Qt.TouchPointStates QTouchEvent.touchPointStates()"""
        return Qt.TouchPointStates()
    def deviceType():
        """QTouchEvent.DeviceType QTouchEvent.deviceType()"""
        return QTouchEvent.DeviceType()
    def widget():
        """QWidget QTouchEvent.widget()"""
        return QWidget()


class QGestureEvent(QEvent):
    """"""
    def __init__(_gestures):
        """None QGestureEvent.__init__(list-of-QGesture _gestures)"""
        return None
    def __init__():
        """QGestureEvent QGestureEvent.__init__()"""
        return QGestureEvent()
    def mapToGraphicsScene(_gesturePoint):
        """QPointF QGestureEvent.mapToGraphicsScene(QPointF _gesturePoint)"""
        return QPointF()
    def widget():
        """QWidget QGestureEvent.widget()"""
        return QWidget()
    def ignore():
        """None QGestureEvent.ignore()"""
        return None
    def ignore():
        """QGesture QGestureEvent.ignore()"""
        return QGesture()
    def ignore():
        """Qt.GestureType QGestureEvent.ignore()"""
        return Qt.GestureType()
    def accept():
        """None QGestureEvent.accept()"""
        return None
    def accept():
        """QGesture QGestureEvent.accept()"""
        return QGesture()
    def accept():
        """Qt.GestureType QGestureEvent.accept()"""
        return Qt.GestureType()
    def isAccepted():
        """bool QGestureEvent.isAccepted()"""
        return bool()
    def isAccepted():
        """QGesture QGestureEvent.isAccepted()"""
        return QGesture()
    def isAccepted():
        """Qt.GestureType QGestureEvent.isAccepted()"""
        return Qt.GestureType()
    def setAccepted(_accepted):
        """None QGestureEvent.setAccepted(bool _accepted)"""
        return None
    def setAccepted():
        """bool QGestureEvent.setAccepted()"""
        return bool()
    def setAccepted():
        """bool QGestureEvent.setAccepted()"""
        return bool()
    def canceledGestures():
        """list-of-QGesture QGestureEvent.canceledGestures()"""
        return [QGesture()]
    def activeGestures():
        """list-of-QGesture QGestureEvent.activeGestures()"""
        return [QGesture()]
    def gesture(_type):
        """QGesture QGestureEvent.gesture(Qt.GestureType _type)"""
        return QGesture()
    def gestures():
        """list-of-QGesture QGestureEvent.gestures()"""
        return [QGesture()]


class QFileDialog(QDialog):
    """"""
    ShowDirsOnly = int() # QFileDialog.Option enum
    DontResolveSymlinks = int() # QFileDialog.Option enum
    DontConfirmOverwrite = int() # QFileDialog.Option enum
    DontUseSheet = int() # QFileDialog.Option enum
    DontUseNativeDialog = int() # QFileDialog.Option enum
    ReadOnly = int() # QFileDialog.Option enum
    HideNameFilterDetails = int() # QFileDialog.Option enum

    LookIn = int() # QFileDialog.DialogLabel enum
    FileName = int() # QFileDialog.DialogLabel enum
    FileType = int() # QFileDialog.DialogLabel enum
    Accept = int() # QFileDialog.DialogLabel enum
    Reject = int() # QFileDialog.DialogLabel enum

    AcceptOpen = int() # QFileDialog.AcceptMode enum
    AcceptSave = int() # QFileDialog.AcceptMode enum

    AnyFile = int() # QFileDialog.FileMode enum
    ExistingFile = int() # QFileDialog.FileMode enum
    Directory = int() # QFileDialog.FileMode enum
    ExistingFiles = int() # QFileDialog.FileMode enum
    DirectoryOnly = int() # QFileDialog.FileMode enum

    Detail = int() # QFileDialog.ViewMode enum
    List = int() # QFileDialog.ViewMode enum

    def __init__(_parent, _f):
        """None QFileDialog.__init__(QWidget _parent, Qt.WindowFlags _f)"""
        return None
    def __init__(_parent, _caption, _directory, _filter):
        """None QFileDialog.__init__(QWidget _parent, QString _caption, QString _directory, QString _filter)"""
        return None
    def setVisible(_visible):
        """None QFileDialog.setVisible(bool _visible)"""
        return None
    def open():
        """None QFileDialog.open()"""
        return None
    def open(_receiver, _member):
        """None QFileDialog.open(QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(_receiver):
        """None QFileDialog.open(callable _receiver)"""
        return None
    def options():
        """QFileDialog.Options QFileDialog.options()"""
        return QFileDialog.Options()
    def setOptions(_options):
        """None QFileDialog.setOptions(QFileDialog.Options _options)"""
        return None
    def testOption(_option):
        """bool QFileDialog.testOption(QFileDialog.Option _option)"""
        return bool()
    def setOption(_option, _on):
        """None QFileDialog.setOption(QFileDialog.Option _option, bool _on)"""
        return None
    def filter():
        """QDir.Filters QFileDialog.filter()"""
        return QDir.Filters()
    def selectedNameFilter():
        """QString QFileDialog.selectedNameFilter()"""
        return QString()
    def selectNameFilter(_filter):
        """None QFileDialog.selectNameFilter(QString _filter)"""
        return None
    def nameFilters():
        """QStringList QFileDialog.nameFilters()"""
        return QStringList()
    def setNameFilters(_filters):
        """None QFileDialog.setNameFilters(QStringList _filters)"""
        return None
    def setNameFilter(_filter):
        """None QFileDialog.setNameFilter(QString _filter)"""
        return None
    def isNameFilterDetailsVisible():
        """bool QFileDialog.isNameFilterDetailsVisible()"""
        return bool()
    def setNameFilterDetailsVisible(_enabled):
        """None QFileDialog.setNameFilterDetailsVisible(bool _enabled)"""
        return None
    def proxyModel():
        """QAbstractProxyModel QFileDialog.proxyModel()"""
        return QAbstractProxyModel()
    def setProxyModel(_model):
        """None QFileDialog.setProxyModel(QAbstractProxyModel _model)"""
        return None
    def restoreState(_state):
        """bool QFileDialog.restoreState(QByteArray _state)"""
        return bool()
    def saveState():
        """QByteArray QFileDialog.saveState()"""
        return QByteArray()
    def sidebarUrls():
        """list-of-QUrl QFileDialog.sidebarUrls()"""
        return [QUrl()]
    def setSidebarUrls(_urls):
        """None QFileDialog.setSidebarUrls(list-of-QUrl _urls)"""
        return None
    def changeEvent(_e):
        """None QFileDialog.changeEvent(QEvent _e)"""
        return None
    def accept():
        """None QFileDialog.accept()"""
        return None
    def done(_result):
        """None QFileDialog.done(int _result)"""
        return None
    def getSaveFileNameAndFilter(_parent, _caption, _directory, _filter, _initialFilter, _options):
        """(QString, QString) QFileDialog.getSaveFileNameAndFilter(QWidget _parent, QString _caption, QString _directory, QString _filter, QString _initialFilter, QFileDialog.Options _options)"""
        return (QString, QString)()
    def getSaveFileName(_parent, _caption, _directory, _filter, _options):
        """QString QFileDialog.getSaveFileName(QWidget _parent, QString _caption, QString _directory, QString _filter, QFileDialog.Options _options)"""
        return QString()
    def getSaveFileName(_parent, _caption, _directory, _filter, _selectedFilter, _options):
        """QString QFileDialog.getSaveFileName(QWidget _parent, QString _caption, QString _directory, QString _filter, QString _selectedFilter, QFileDialog.Options _options)"""
        return QString()
    def getOpenFileNamesAndFilter(_parent, _caption, _directory, _filter, _initialFilter, _options):
        """(QString, QString) QFileDialog.getOpenFileNamesAndFilter(QWidget _parent, QString _caption, QString _directory, QString _filter, QString _initialFilter, QFileDialog.Options _options)"""
        return (QString, QString)()
    def getOpenFileNames(_parent, _caption, _directory, _filter, _options):
        """QStringList QFileDialog.getOpenFileNames(QWidget _parent, QString _caption, QString _directory, QString _filter, QFileDialog.Options _options)"""
        return QStringList()
    def getOpenFileNames(_parent, _caption, _directory, _filter, _selectedFilter, _options):
        """QStringList QFileDialog.getOpenFileNames(QWidget _parent, QString _caption, QString _directory, QString _filter, QString _selectedFilter, QFileDialog.Options _options)"""
        return QStringList()
    def getOpenFileNameAndFilter(_parent, _caption, _directory, _filter, _initialFilter, _options):
        """(QString, QString) QFileDialog.getOpenFileNameAndFilter(QWidget _parent, QString _caption, QString _directory, QString _filter, QString _initialFilter, QFileDialog.Options _options)"""
        return (QString, QString)()
    def getOpenFileName(_parent, _caption, _directory, _filter, _options):
        """QString QFileDialog.getOpenFileName(QWidget _parent, QString _caption, QString _directory, QString _filter, QFileDialog.Options _options)"""
        return QString()
    def getOpenFileName(_parent, _caption, _directory, _filter, _selectedFilter, _options):
        """QString QFileDialog.getOpenFileName(QWidget _parent, QString _caption, QString _directory, QString _filter, QString _selectedFilter, QFileDialog.Options _options)"""
        return QString()
    def getExistingDirectory(_parent, _caption, _directory, _options):
        """QString QFileDialog.getExistingDirectory(QWidget _parent, QString _caption, QString _directory, QFileDialog.Options _options)"""
        return QString()
    def labelText(_label):
        """QString QFileDialog.labelText(QFileDialog.DialogLabel _label)"""
        return QString()
    def setLabelText(_label, _text):
        """None QFileDialog.setLabelText(QFileDialog.DialogLabel _label, QString _text)"""
        return None
    def iconProvider():
        """QFileIconProvider QFileDialog.iconProvider()"""
        return QFileIconProvider()
    def setIconProvider(_provider):
        """None QFileDialog.setIconProvider(QFileIconProvider _provider)"""
        return None
    def itemDelegate():
        """QAbstractItemDelegate QFileDialog.itemDelegate()"""
        return QAbstractItemDelegate()
    def setItemDelegate(_delegate):
        """None QFileDialog.setItemDelegate(QAbstractItemDelegate _delegate)"""
        return None
    def history():
        """QStringList QFileDialog.history()"""
        return QStringList()
    def setHistory(_paths):
        """None QFileDialog.setHistory(QStringList _paths)"""
        return None
    def defaultSuffix():
        """QString QFileDialog.defaultSuffix()"""
        return QString()
    def setDefaultSuffix(_suffix):
        """None QFileDialog.setDefaultSuffix(QString _suffix)"""
        return None
    def confirmOverwrite():
        """bool QFileDialog.confirmOverwrite()"""
        return bool()
    def setConfirmOverwrite(_enabled):
        """None QFileDialog.setConfirmOverwrite(bool _enabled)"""
        return None
    def resolveSymlinks():
        """bool QFileDialog.resolveSymlinks()"""
        return bool()
    def setResolveSymlinks(_enabled):
        """None QFileDialog.setResolveSymlinks(bool _enabled)"""
        return None
    def isReadOnly():
        """bool QFileDialog.isReadOnly()"""
        return bool()
    def setReadOnly(_enabled):
        """None QFileDialog.setReadOnly(bool _enabled)"""
        return None
    def acceptMode():
        """QFileDialog.AcceptMode QFileDialog.acceptMode()"""
        return QFileDialog.AcceptMode()
    def setAcceptMode(_mode):
        """None QFileDialog.setAcceptMode(QFileDialog.AcceptMode _mode)"""
        return None
    def fileMode():
        """QFileDialog.FileMode QFileDialog.fileMode()"""
        return QFileDialog.FileMode()
    def setFileMode(_mode):
        """None QFileDialog.setFileMode(QFileDialog.FileMode _mode)"""
        return None
    def viewMode():
        """QFileDialog.ViewMode QFileDialog.viewMode()"""
        return QFileDialog.ViewMode()
    def setViewMode(_mode):
        """None QFileDialog.setViewMode(QFileDialog.ViewMode _mode)"""
        return None
    def selectedFilter():
        """QString QFileDialog.selectedFilter()"""
        return QString()
    def selectFilter(_filter):
        """None QFileDialog.selectFilter(QString _filter)"""
        return None
    def filters():
        """QStringList QFileDialog.filters()"""
        return QStringList()
    def setFilters(_filters):
        """None QFileDialog.setFilters(QStringList _filters)"""
        return None
    def setFilter(_filter):
        """None QFileDialog.setFilter(QString _filter)"""
        return None
    def setFilter(_filters):
        """None QFileDialog.setFilter(QDir.Filters _filters)"""
        return None
    def selectedFiles():
        """QStringList QFileDialog.selectedFiles()"""
        return QStringList()
    def selectFile(_filename):
        """None QFileDialog.selectFile(QString _filename)"""
        return None
    def directory():
        """QDir QFileDialog.directory()"""
        return QDir()
    def setDirectory(_directory):
        """None QFileDialog.setDirectory(QString _directory)"""
        return None
    def setDirectory(_adirectory):
        """None QFileDialog.setDirectory(QDir _adirectory)"""
        return None


class QFileIconProvider():
    """"""
    Computer = int() # QFileIconProvider.IconType enum
    Desktop = int() # QFileIconProvider.IconType enum
    Trashcan = int() # QFileIconProvider.IconType enum
    Network = int() # QFileIconProvider.IconType enum
    Drive = int() # QFileIconProvider.IconType enum
    Folder = int() # QFileIconProvider.IconType enum
    File = int() # QFileIconProvider.IconType enum

    def __init__():
        """None QFileIconProvider.__init__()"""
        return None
    def type(_info):
        """QString QFileIconProvider.type(QFileInfo _info)"""
        return QString()
    def icon(_type):
        """QIcon QFileIconProvider.icon(QFileIconProvider.IconType _type)"""
        return QIcon()
    def icon(_info):
        """QIcon QFileIconProvider.icon(QFileInfo _info)"""
        return QIcon()


class QFileSystemModel(QAbstractItemModel):
    """"""
    FileIconRole = int() # QFileSystemModel.Roles enum
    FilePathRole = int() # QFileSystemModel.Roles enum
    FileNameRole = int() # QFileSystemModel.Roles enum
    FilePermissions = int() # QFileSystemModel.Roles enum

    def __init__(_parent):
        """None QFileSystemModel.__init__(QObject _parent)"""
        return None
    def timerEvent(_event):
        """None QFileSystemModel.timerEvent(QTimerEvent _event)"""
        return None
    def event(_event):
        """bool QFileSystemModel.event(QEvent _event)"""
        return bool()
    def remove(_aindex):
        """bool QFileSystemModel.remove(QModelIndex _aindex)"""
        return bool()
    def fileInfo(_aindex):
        """QFileInfo QFileSystemModel.fileInfo(QModelIndex _aindex)"""
        return QFileInfo()
    def fileIcon(_aindex):
        """QIcon QFileSystemModel.fileIcon(QModelIndex _aindex)"""
        return QIcon()
    def fileName(_aindex):
        """QString QFileSystemModel.fileName(QModelIndex _aindex)"""
        return QString()
    def rmdir(_aindex):
        """bool QFileSystemModel.rmdir(QModelIndex _aindex)"""
        return bool()
    def permissions(_index):
        """QFile.Permissions QFileSystemModel.permissions(QModelIndex _index)"""
        return QFile.Permissions()
    def mkdir(_parent, _name):
        """QModelIndex QFileSystemModel.mkdir(QModelIndex _parent, QString _name)"""
        return QModelIndex()
    def lastModified(_index):
        """QDateTime QFileSystemModel.lastModified(QModelIndex _index)"""
        return QDateTime()
    def type(_index):
        """QString QFileSystemModel.type(QModelIndex _index)"""
        return QString()
    def size(_index):
        """int QFileSystemModel.size(QModelIndex _index)"""
        return int()
    def isDir(_index):
        """bool QFileSystemModel.isDir(QModelIndex _index)"""
        return bool()
    def filePath(_index):
        """QString QFileSystemModel.filePath(QModelIndex _index)"""
        return QString()
    def nameFilters():
        """QStringList QFileSystemModel.nameFilters()"""
        return QStringList()
    def setNameFilters(_filters):
        """None QFileSystemModel.setNameFilters(QStringList _filters)"""
        return None
    def nameFilterDisables():
        """bool QFileSystemModel.nameFilterDisables()"""
        return bool()
    def setNameFilterDisables(_enable):
        """None QFileSystemModel.setNameFilterDisables(bool _enable)"""
        return None
    def isReadOnly():
        """bool QFileSystemModel.isReadOnly()"""
        return bool()
    def setReadOnly(_enable):
        """None QFileSystemModel.setReadOnly(bool _enable)"""
        return None
    def resolveSymlinks():
        """bool QFileSystemModel.resolveSymlinks()"""
        return bool()
    def setResolveSymlinks(_enable):
        """None QFileSystemModel.setResolveSymlinks(bool _enable)"""
        return None
    def filter():
        """QDir.Filters QFileSystemModel.filter()"""
        return QDir.Filters()
    def setFilter(_filters):
        """None QFileSystemModel.setFilter(QDir.Filters _filters)"""
        return None
    def iconProvider():
        """QFileIconProvider QFileSystemModel.iconProvider()"""
        return QFileIconProvider()
    def setIconProvider(_provider):
        """None QFileSystemModel.setIconProvider(QFileIconProvider _provider)"""
        return None
    def rootDirectory():
        """QDir QFileSystemModel.rootDirectory()"""
        return QDir()
    def rootPath():
        """QString QFileSystemModel.rootPath()"""
        return QString()
    def setRootPath(_path):
        """QModelIndex QFileSystemModel.setRootPath(QString _path)"""
        return QModelIndex()
    def supportedDropActions():
        """Qt.DropActions QFileSystemModel.supportedDropActions()"""
        return Qt.DropActions()
    def dropMimeData(_data, _action, _row, _column, _parent):
        """bool QFileSystemModel.dropMimeData(QMimeData _data, Qt.DropAction _action, int _row, int _column, QModelIndex _parent)"""
        return bool()
    def mimeData(_indexes):
        """QMimeData QFileSystemModel.mimeData(list-of-QModelIndex _indexes)"""
        return QMimeData()
    def mimeTypes():
        """QStringList QFileSystemModel.mimeTypes()"""
        return QStringList()
    def sort(_column, _order):
        """None QFileSystemModel.sort(int _column, Qt.SortOrder _order)"""
        return None
    def flags(_index):
        """Qt.ItemFlags QFileSystemModel.flags(QModelIndex _index)"""
        return Qt.ItemFlags()
    def headerData(_section, _orientation, _role):
        """QVariant QFileSystemModel.headerData(int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(_idx, _value, _role):
        """bool QFileSystemModel.setData(QModelIndex _idx, QVariant _value, int _role)"""
        return bool()
    def data(_index, _role):
        """QVariant QFileSystemModel.data(QModelIndex _index, int _role)"""
        return QVariant()
    def myComputer(_role):
        """QVariant QFileSystemModel.myComputer(int _role)"""
        return QVariant()
    def columnCount(_parent):
        """int QFileSystemModel.columnCount(QModelIndex _parent)"""
        return int()
    def rowCount(_parent):
        """int QFileSystemModel.rowCount(QModelIndex _parent)"""
        return int()
    def fetchMore(_parent):
        """None QFileSystemModel.fetchMore(QModelIndex _parent)"""
        return None
    def canFetchMore(_parent):
        """bool QFileSystemModel.canFetchMore(QModelIndex _parent)"""
        return bool()
    def hasChildren(_parent):
        """bool QFileSystemModel.hasChildren(QModelIndex _parent)"""
        return bool()
    def parent(_child):
        """QModelIndex QFileSystemModel.parent(QModelIndex _child)"""
        return QModelIndex()
    def index(_row, _column, _parent):
        """QModelIndex QFileSystemModel.index(int _row, int _column, QModelIndex _parent)"""
        return QModelIndex()
    def index(_path, _column):
        """QModelIndex QFileSystemModel.index(QString _path, int _column)"""
        return QModelIndex()


class QFocusFrame(QWidget):
    """"""
    def __init__(_parent):
        """None QFocusFrame.__init__(QWidget _parent)"""
        return None
    def paintEvent():
        """QPaintEvent QFocusFrame.paintEvent()"""
        return QPaintEvent()
    def event(_e):
        """bool QFocusFrame.event(QEvent _e)"""
        return bool()
    def eventFilter():
        """QEvent QFocusFrame.eventFilter()"""
        return QEvent()
    def initStyleOption(_option):
        """None QFocusFrame.initStyleOption(QStyleOption _option)"""
        return None
    def widget():
        """QWidget QFocusFrame.widget()"""
        return QWidget()
    def setWidget(_widget):
        """None QFocusFrame.setWidget(QWidget _widget)"""
        return None


class QFont():
    """"""
    PercentageSpacing = int() # QFont.SpacingType enum
    AbsoluteSpacing = int() # QFont.SpacingType enum

    MixedCase = int() # QFont.Capitalization enum
    AllUppercase = int() # QFont.Capitalization enum
    AllLowercase = int() # QFont.Capitalization enum
    SmallCaps = int() # QFont.Capitalization enum
    Capitalize = int() # QFont.Capitalization enum

    UltraCondensed = int() # QFont.Stretch enum
    ExtraCondensed = int() # QFont.Stretch enum
    Condensed = int() # QFont.Stretch enum
    SemiCondensed = int() # QFont.Stretch enum
    Unstretched = int() # QFont.Stretch enum
    SemiExpanded = int() # QFont.Stretch enum
    Expanded = int() # QFont.Stretch enum
    ExtraExpanded = int() # QFont.Stretch enum
    UltraExpanded = int() # QFont.Stretch enum

    StyleNormal = int() # QFont.Style enum
    StyleItalic = int() # QFont.Style enum
    StyleOblique = int() # QFont.Style enum

    Light = int() # QFont.Weight enum
    Normal = int() # QFont.Weight enum
    DemiBold = int() # QFont.Weight enum
    Bold = int() # QFont.Weight enum
    Black = int() # QFont.Weight enum

    PreferDefault = int() # QFont.StyleStrategy enum
    PreferBitmap = int() # QFont.StyleStrategy enum
    PreferDevice = int() # QFont.StyleStrategy enum
    PreferOutline = int() # QFont.StyleStrategy enum
    ForceOutline = int() # QFont.StyleStrategy enum
    PreferMatch = int() # QFont.StyleStrategy enum
    PreferQuality = int() # QFont.StyleStrategy enum
    PreferAntialias = int() # QFont.StyleStrategy enum
    NoAntialias = int() # QFont.StyleStrategy enum
    OpenGLCompatible = int() # QFont.StyleStrategy enum
    NoFontMerging = int() # QFont.StyleStrategy enum
    ForceIntegerMetrics = int() # QFont.StyleStrategy enum

    Helvetica = int() # QFont.StyleHint enum
    SansSerif = int() # QFont.StyleHint enum
    Times = int() # QFont.StyleHint enum
    Serif = int() # QFont.StyleHint enum
    Courier = int() # QFont.StyleHint enum
    TypeWriter = int() # QFont.StyleHint enum
    OldEnglish = int() # QFont.StyleHint enum
    Decorative = int() # QFont.StyleHint enum
    System = int() # QFont.StyleHint enum
    AnyStyle = int() # QFont.StyleHint enum
    Cursive = int() # QFont.StyleHint enum
    Monospace = int() # QFont.StyleHint enum
    Fantasy = int() # QFont.StyleHint enum

    def __init__():
        """None QFont.__init__()"""
        return None
    def __init__(_family, _pointSize, _weight, _italic):
        """None QFont.__init__(QString _family, int _pointSize, int _weight, bool _italic)"""
        return None
    def __init__(_pd):
        """QFont QFont.__init__(QPaintDevice _pd)"""
        return QFont()
    def __init__():
        """QFont QFont.__init__()"""
        return QFont()
    def __init__(_variant):
        """None QFont.__init__(QVariant _variant)"""
        return None
    def __ge__():
        """QFont QFont.__ge__()"""
        return QFont()
    def capitalization():
        """QFont.Capitalization QFont.capitalization()"""
        return QFont.Capitalization()
    def setCapitalization():
        """QFont.Capitalization QFont.setCapitalization()"""
        return QFont.Capitalization()
    def setWordSpacing(_spacing):
        """None QFont.setWordSpacing(float _spacing)"""
        return None
    def wordSpacing():
        """float QFont.wordSpacing()"""
        return float()
    def setLetterSpacing(_type, _spacing):
        """None QFont.setLetterSpacing(QFont.SpacingType _type, float _spacing)"""
        return None
    def letterSpacingType():
        """QFont.SpacingType QFont.letterSpacingType()"""
        return QFont.SpacingType()
    def letterSpacing():
        """float QFont.letterSpacing()"""
        return float()
    def setItalic(_b):
        """None QFont.setItalic(bool _b)"""
        return None
    def italic():
        """bool QFont.italic()"""
        return bool()
    def setBold(_enable):
        """None QFont.setBold(bool _enable)"""
        return None
    def bold():
        """bool QFont.bold()"""
        return bool()
    def resolve():
        """QFont QFont.resolve()"""
        return QFont()
    def lastResortFont():
        """QString QFont.lastResortFont()"""
        return QString()
    def lastResortFamily():
        """QString QFont.lastResortFamily()"""
        return QString()
    def defaultFamily():
        """QString QFont.defaultFamily()"""
        return QString()
    def cacheStatistics():
        """None QFont.cacheStatistics()"""
        return None
    def cleanup():
        """None QFont.cleanup()"""
        return None
    def initialize():
        """None QFont.initialize()"""
        return None
    def removeSubstitution():
        """QString QFont.removeSubstitution()"""
        return QString()
    def insertSubstitutions():
        """QStringList QFont.insertSubstitutions()"""
        return QStringList()
    def insertSubstitution():
        """QString QFont.insertSubstitution()"""
        return QString()
    def substitutions():
        """QStringList QFont.substitutions()"""
        return QStringList()
    def substitutes():
        """QString QFont.substitutes()"""
        return QString()
    def substitute():
        """QString QFont.substitute()"""
        return QString()
    def fromString():
        """QString QFont.fromString()"""
        return QString()
    def toString():
        """QString QFont.toString()"""
        return QString()
    def key():
        """QString QFont.key()"""
        return QString()
    def rawName():
        """QString QFont.rawName()"""
        return QString()
    def setRawName():
        """QString QFont.setRawName()"""
        return QString()
    def handle():
        """int QFont.handle()"""
        return int()
    def isCopyOf():
        """QFont QFont.isCopyOf()"""
        return QFont()
    def __lt__():
        """QFont QFont.__lt__()"""
        return QFont()
    def __ne__():
        """QFont QFont.__ne__()"""
        return QFont()
    def __eq__():
        """QFont QFont.__eq__()"""
        return QFont()
    def exactMatch():
        """bool QFont.exactMatch()"""
        return bool()
    def setRawMode():
        """bool QFont.setRawMode()"""
        return bool()
    def rawMode():
        """bool QFont.rawMode()"""
        return bool()
    def setStretch():
        """int QFont.setStretch()"""
        return int()
    def stretch():
        """int QFont.stretch()"""
        return int()
    def setStyleStrategy(_s):
        """None QFont.setStyleStrategy(QFont.StyleStrategy _s)"""
        return None
    def setStyleHint(_hint, _strategy):
        """None QFont.setStyleHint(QFont.StyleHint _hint, QFont.StyleStrategy _strategy)"""
        return None
    def styleStrategy():
        """QFont.StyleStrategy QFont.styleStrategy()"""
        return QFont.StyleStrategy()
    def styleHint():
        """QFont.StyleHint QFont.styleHint()"""
        return QFont.StyleHint()
    def setKerning():
        """bool QFont.setKerning()"""
        return bool()
    def kerning():
        """bool QFont.kerning()"""
        return bool()
    def setFixedPitch():
        """bool QFont.setFixedPitch()"""
        return bool()
    def fixedPitch():
        """bool QFont.fixedPitch()"""
        return bool()
    def setStrikeOut():
        """bool QFont.setStrikeOut()"""
        return bool()
    def strikeOut():
        """bool QFont.strikeOut()"""
        return bool()
    def setOverline():
        """bool QFont.setOverline()"""
        return bool()
    def overline():
        """bool QFont.overline()"""
        return bool()
    def setUnderline():
        """bool QFont.setUnderline()"""
        return bool()
    def underline():
        """bool QFont.underline()"""
        return bool()
    def style():
        """QFont.Style QFont.style()"""
        return QFont.Style()
    def setStyle(_style):
        """None QFont.setStyle(QFont.Style _style)"""
        return None
    def setWeight():
        """int QFont.setWeight()"""
        return int()
    def weight():
        """int QFont.weight()"""
        return int()
    def setPixelSize():
        """int QFont.setPixelSize()"""
        return int()
    def pixelSize():
        """int QFont.pixelSize()"""
        return int()
    def setPointSizeF():
        """float QFont.setPointSizeF()"""
        return float()
    def pointSizeF():
        """float QFont.pointSizeF()"""
        return float()
    def setPointSize():
        """int QFont.setPointSize()"""
        return int()
    def pointSize():
        """int QFont.pointSize()"""
        return int()
    def setFamily():
        """QString QFont.setFamily()"""
        return QString()
    def family():
        """QString QFont.family()"""
        return QString()


class QFontComboBox(QComboBox):
    """"""
    AllFonts = int() # QFontComboBox.FontFilter enum
    ScalableFonts = int() # QFontComboBox.FontFilter enum
    NonScalableFonts = int() # QFontComboBox.FontFilter enum
    MonospacedFonts = int() # QFontComboBox.FontFilter enum
    ProportionalFonts = int() # QFontComboBox.FontFilter enum

    def __init__(_parent):
        """None QFontComboBox.__init__(QWidget _parent)"""
        return None
    def event(_e):
        """bool QFontComboBox.event(QEvent _e)"""
        return bool()
    def setCurrentFont(_f):
        """None QFontComboBox.setCurrentFont(QFont _f)"""
        return None
    def sizeHint():
        """QSize QFontComboBox.sizeHint()"""
        return QSize()
    def currentFont():
        """QFont QFontComboBox.currentFont()"""
        return QFont()
    def setFontFilters(_filters):
        """None QFontComboBox.setFontFilters(QFontComboBox.FontFilters _filters)"""
        return None
    def writingSystem():
        """QFontDatabase.WritingSystem QFontComboBox.writingSystem()"""
        return QFontDatabase.WritingSystem()
    def setWritingSystem():
        """QFontDatabase.WritingSystem QFontComboBox.setWritingSystem()"""
        return QFontDatabase.WritingSystem()
    def fontFilters():
        """QFontComboBox.FontFilters QFontComboBox.fontFilters()"""
        return QFontComboBox.FontFilters()


class QFontDatabase():
    """"""
    Any = int() # QFontDatabase.WritingSystem enum
    Latin = int() # QFontDatabase.WritingSystem enum
    Greek = int() # QFontDatabase.WritingSystem enum
    Cyrillic = int() # QFontDatabase.WritingSystem enum
    Armenian = int() # QFontDatabase.WritingSystem enum
    Hebrew = int() # QFontDatabase.WritingSystem enum
    Arabic = int() # QFontDatabase.WritingSystem enum
    Syriac = int() # QFontDatabase.WritingSystem enum
    Thaana = int() # QFontDatabase.WritingSystem enum
    Devanagari = int() # QFontDatabase.WritingSystem enum
    Bengali = int() # QFontDatabase.WritingSystem enum
    Gurmukhi = int() # QFontDatabase.WritingSystem enum
    Gujarati = int() # QFontDatabase.WritingSystem enum
    Oriya = int() # QFontDatabase.WritingSystem enum
    Tamil = int() # QFontDatabase.WritingSystem enum
    Telugu = int() # QFontDatabase.WritingSystem enum
    Kannada = int() # QFontDatabase.WritingSystem enum
    Malayalam = int() # QFontDatabase.WritingSystem enum
    Sinhala = int() # QFontDatabase.WritingSystem enum
    Thai = int() # QFontDatabase.WritingSystem enum
    Lao = int() # QFontDatabase.WritingSystem enum
    Tibetan = int() # QFontDatabase.WritingSystem enum
    Myanmar = int() # QFontDatabase.WritingSystem enum
    Georgian = int() # QFontDatabase.WritingSystem enum
    Khmer = int() # QFontDatabase.WritingSystem enum
    SimplifiedChinese = int() # QFontDatabase.WritingSystem enum
    TraditionalChinese = int() # QFontDatabase.WritingSystem enum
    Japanese = int() # QFontDatabase.WritingSystem enum
    Korean = int() # QFontDatabase.WritingSystem enum
    Vietnamese = int() # QFontDatabase.WritingSystem enum
    Other = int() # QFontDatabase.WritingSystem enum
    Symbol = int() # QFontDatabase.WritingSystem enum
    Ogham = int() # QFontDatabase.WritingSystem enum
    Runic = int() # QFontDatabase.WritingSystem enum
    Nko = int() # QFontDatabase.WritingSystem enum

    def __init__():
        """None QFontDatabase.__init__()"""
        return None
    def __init__():
        """QFontDatabase QFontDatabase.__init__()"""
        return QFontDatabase()
    def supportsThreadedFontRendering():
        """bool QFontDatabase.supportsThreadedFontRendering()"""
        return bool()
    def removeAllApplicationFonts():
        """bool QFontDatabase.removeAllApplicationFonts()"""
        return bool()
    def removeApplicationFont(_id):
        """bool QFontDatabase.removeApplicationFont(int _id)"""
        return bool()
    def applicationFontFamilies(_id):
        """QStringList QFontDatabase.applicationFontFamilies(int _id)"""
        return QStringList()
    def addApplicationFontFromData(_fontData):
        """int QFontDatabase.addApplicationFontFromData(QByteArray _fontData)"""
        return int()
    def addApplicationFont(_fileName):
        """int QFontDatabase.addApplicationFont(QString _fileName)"""
        return int()
    def writingSystemSample(_writingSystem):
        """QString QFontDatabase.writingSystemSample(QFontDatabase.WritingSystem _writingSystem)"""
        return QString()
    def writingSystemName(_writingSystem):
        """QString QFontDatabase.writingSystemName(QFontDatabase.WritingSystem _writingSystem)"""
        return QString()
    def weight(_family, _style):
        """int QFontDatabase.weight(QString _family, QString _style)"""
        return int()
    def bold(_family, _style):
        """bool QFontDatabase.bold(QString _family, QString _style)"""
        return bool()
    def italic(_family, _style):
        """bool QFontDatabase.italic(QString _family, QString _style)"""
        return bool()
    def isFixedPitch(_family, _style):
        """bool QFontDatabase.isFixedPitch(QString _family, QString _style)"""
        return bool()
    def isScalable(_family, _style):
        """bool QFontDatabase.isScalable(QString _family, QString _style)"""
        return bool()
    def isSmoothlyScalable(_family, _style):
        """bool QFontDatabase.isSmoothlyScalable(QString _family, QString _style)"""
        return bool()
    def isBitmapScalable(_family, _style):
        """bool QFontDatabase.isBitmapScalable(QString _family, QString _style)"""
        return bool()
    def font(_family, _style, _pointSize):
        """QFont QFontDatabase.font(QString _family, QString _style, int _pointSize)"""
        return QFont()
    def styleString(_font):
        """QString QFontDatabase.styleString(QFont _font)"""
        return QString()
    def styleString(_fontInfo):
        """QString QFontDatabase.styleString(QFontInfo _fontInfo)"""
        return QString()
    def smoothSizes(_family, _style):
        """list-of-int QFontDatabase.smoothSizes(QString _family, QString _style)"""
        return [int()]
    def pointSizes(_family, _style):
        """list-of-int QFontDatabase.pointSizes(QString _family, QString _style)"""
        return [int()]
    def styles(_family):
        """QStringList QFontDatabase.styles(QString _family)"""
        return QStringList()
    def families(_writingSystem):
        """QStringList QFontDatabase.families(QFontDatabase.WritingSystem _writingSystem)"""
        return QStringList()
    def writingSystems():
        """list-of-QFontDatabase.WritingSystem QFontDatabase.writingSystems()"""
        return [QFontDatabase.WritingSystem()]
    def writingSystems(_family):
        """list-of-QFontDatabase.WritingSystem QFontDatabase.writingSystems(QString _family)"""
        return [QFontDatabase.WritingSystem()]
    def standardSizes():
        """list-of-int QFontDatabase.standardSizes()"""
        return [int()]


class QFontDialog(QDialog):
    """"""
    NoButtons = int() # QFontDialog.FontDialogOption enum
    DontUseNativeDialog = int() # QFontDialog.FontDialogOption enum

    def __init__(_parent):
        """None QFontDialog.__init__(QWidget _parent)"""
        return None
    def __init__(_initial, _parent):
        """None QFontDialog.__init__(QFont _initial, QWidget _parent)"""
        return None
    def setVisible(_visible):
        """None QFontDialog.setVisible(bool _visible)"""
        return None
    def open():
        """None QFontDialog.open()"""
        return None
    def open(_receiver, _member):
        """None QFontDialog.open(QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(_receiver):
        """None QFontDialog.open(callable _receiver)"""
        return None
    def options():
        """QFontDialog.FontDialogOptions QFontDialog.options()"""
        return QFontDialog.FontDialogOptions()
    def setOptions(_options):
        """None QFontDialog.setOptions(QFontDialog.FontDialogOptions _options)"""
        return None
    def testOption(_option):
        """bool QFontDialog.testOption(QFontDialog.FontDialogOption _option)"""
        return bool()
    def setOption(_option, _on):
        """None QFontDialog.setOption(QFontDialog.FontDialogOption _option, bool _on)"""
        return None
    def selectedFont():
        """QFont QFontDialog.selectedFont()"""
        return QFont()
    def currentFont():
        """QFont QFontDialog.currentFont()"""
        return QFont()
    def setCurrentFont(_font):
        """None QFontDialog.setCurrentFont(QFont _font)"""
        return None
    def done(_result):
        """None QFontDialog.done(int _result)"""
        return None
    def changeEvent(_e):
        """None QFontDialog.changeEvent(QEvent _e)"""
        return None
    def getFont(_ok, _initial, _parent, _title, _options):
        """QFont QFontDialog.getFont(bool _ok, QFont _initial, QWidget _parent, QString _title, QFontDialog.FontDialogOptions _options)"""
        return QFont()
    def getFont(_ok, _def, _parent, _caption):
        """QFont QFontDialog.getFont(bool _ok, QFont _def, QWidget _parent, QString _caption)"""
        return QFont()
    def getFont(_ok, _initial, _parent):
        """QFont QFontDialog.getFont(bool _ok, QFont _initial, QWidget _parent)"""
        return QFont()
    def getFont(_ok, _parent):
        """QFont QFontDialog.getFont(bool _ok, QWidget _parent)"""
        return QFont()


class QFontInfo():
    """"""
    def __init__():
        """QFont QFontInfo.__init__()"""
        return QFont()
    def __init__():
        """QFontInfo QFontInfo.__init__()"""
        return QFontInfo()
    def exactMatch():
        """bool QFontInfo.exactMatch()"""
        return bool()
    def rawMode():
        """bool QFontInfo.rawMode()"""
        return bool()
    def styleHint():
        """QFont.StyleHint QFontInfo.styleHint()"""
        return QFont.StyleHint()
    def fixedPitch():
        """bool QFontInfo.fixedPitch()"""
        return bool()
    def bold():
        """bool QFontInfo.bold()"""
        return bool()
    def weight():
        """int QFontInfo.weight()"""
        return int()
    def style():
        """QFont.Style QFontInfo.style()"""
        return QFont.Style()
    def italic():
        """bool QFontInfo.italic()"""
        return bool()
    def pointSizeF():
        """float QFontInfo.pointSizeF()"""
        return float()
    def pointSize():
        """int QFontInfo.pointSize()"""
        return int()
    def pixelSize():
        """int QFontInfo.pixelSize()"""
        return int()
    def family():
        """QString QFontInfo.family()"""
        return QString()


class QFontMetrics():
    """"""
    def __init__():
        """QFont QFontMetrics.__init__()"""
        return QFont()
    def __init__(_pd):
        """QFont QFontMetrics.__init__(QPaintDevice _pd)"""
        return QFont()
    def __init__():
        """QFontMetrics QFontMetrics.__init__()"""
        return QFontMetrics()
    def tightBoundingRect(_text):
        """QRect QFontMetrics.tightBoundingRect(QString _text)"""
        return QRect()
    def __ne__(_other):
        """bool QFontMetrics.__ne__(QFontMetrics _other)"""
        return bool()
    def __eq__(_other):
        """bool QFontMetrics.__eq__(QFontMetrics _other)"""
        return bool()
    def elidedText(_text, _mode, _width, _flags):
        """QString QFontMetrics.elidedText(QString _text, Qt.TextElideMode _mode, int _width, int _flags)"""
        return QString()
    def averageCharWidth():
        """int QFontMetrics.averageCharWidth()"""
        return int()
    def lineWidth():
        """int QFontMetrics.lineWidth()"""
        return int()
    def strikeOutPos():
        """int QFontMetrics.strikeOutPos()"""
        return int()
    def overlinePos():
        """int QFontMetrics.overlinePos()"""
        return int()
    def underlinePos():
        """int QFontMetrics.underlinePos()"""
        return int()
    def size(_flags, _text, _tabStops, _tabArray):
        """QSize QFontMetrics.size(int _flags, QString _text, int _tabStops, list-of-int _tabArray)"""
        return QSize()
    def boundingRect():
        """QChar QFontMetrics.boundingRect()"""
        return QChar()
    def boundingRect(_text):
        """QRect QFontMetrics.boundingRect(QString _text)"""
        return QRect()
    def boundingRect(_rect, _flags, _text, _tabStops, _tabArray):
        """QRect QFontMetrics.boundingRect(QRect _rect, int _flags, QString _text, int _tabStops, list-of-int _tabArray)"""
        return QRect()
    def boundingRect(_x, _y, _width, _height, _flags, _text, _tabStops, _tabArray):
        """QRect QFontMetrics.boundingRect(int _x, int _y, int _width, int _height, int _flags, QString _text, int _tabStops, list-of-int _tabArray)"""
        return QRect()
    def boundingRectChar():
        """QChar QFontMetrics.boundingRectChar()"""
        return QChar()
    def charWidth(_str, _pos):
        """int QFontMetrics.charWidth(QString _str, int _pos)"""
        return int()
    def width():
        """QChar QFontMetrics.width()"""
        return QChar()
    def width(_text, _length):
        """int QFontMetrics.width(QString _text, int _length)"""
        return int()
    def widthChar():
        """QChar QFontMetrics.widthChar()"""
        return QChar()
    def rightBearing():
        """QChar QFontMetrics.rightBearing()"""
        return QChar()
    def leftBearing():
        """QChar QFontMetrics.leftBearing()"""
        return QChar()
    def inFont():
        """QChar QFontMetrics.inFont()"""
        return QChar()
    def xHeight():
        """int QFontMetrics.xHeight()"""
        return int()
    def maxWidth():
        """int QFontMetrics.maxWidth()"""
        return int()
    def minRightBearing():
        """int QFontMetrics.minRightBearing()"""
        return int()
    def minLeftBearing():
        """int QFontMetrics.minLeftBearing()"""
        return int()
    def lineSpacing():
        """int QFontMetrics.lineSpacing()"""
        return int()
    def leading():
        """int QFontMetrics.leading()"""
        return int()
    def height():
        """int QFontMetrics.height()"""
        return int()
    def descent():
        """int QFontMetrics.descent()"""
        return int()
    def ascent():
        """int QFontMetrics.ascent()"""
        return int()


class QFontMetricsF():
    """"""
    def __init__():
        """QFont QFontMetricsF.__init__()"""
        return QFont()
    def __init__(_pd):
        """QFont QFontMetricsF.__init__(QPaintDevice _pd)"""
        return QFont()
    def __init__():
        """QFontMetrics QFontMetricsF.__init__()"""
        return QFontMetrics()
    def __init__():
        """QFontMetricsF QFontMetricsF.__init__()"""
        return QFontMetricsF()
    def tightBoundingRect(_text):
        """QRectF QFontMetricsF.tightBoundingRect(QString _text)"""
        return QRectF()
    def __ne__(_other):
        """bool QFontMetricsF.__ne__(QFontMetricsF _other)"""
        return bool()
    def __eq__(_other):
        """bool QFontMetricsF.__eq__(QFontMetricsF _other)"""
        return bool()
    def elidedText(_text, _mode, _width, _flags):
        """QString QFontMetricsF.elidedText(QString _text, Qt.TextElideMode _mode, float _width, int _flags)"""
        return QString()
    def averageCharWidth():
        """float QFontMetricsF.averageCharWidth()"""
        return float()
    def lineWidth():
        """float QFontMetricsF.lineWidth()"""
        return float()
    def strikeOutPos():
        """float QFontMetricsF.strikeOutPos()"""
        return float()
    def overlinePos():
        """float QFontMetricsF.overlinePos()"""
        return float()
    def underlinePos():
        """float QFontMetricsF.underlinePos()"""
        return float()
    def size(_flags, _text, _tabStops, _tabArray):
        """QSizeF QFontMetricsF.size(int _flags, QString _text, int _tabStops, list-of-int _tabArray)"""
        return QSizeF()
    def boundingRect():
        """QChar QFontMetricsF.boundingRect()"""
        return QChar()
    def boundingRect(_string):
        """QRectF QFontMetricsF.boundingRect(QString _string)"""
        return QRectF()
    def boundingRect(_rect, _flags, _text, _tabStops, _tabArray):
        """QRectF QFontMetricsF.boundingRect(QRectF _rect, int _flags, QString _text, int _tabStops, list-of-int _tabArray)"""
        return QRectF()
    def boundingRectChar():
        """QChar QFontMetricsF.boundingRectChar()"""
        return QChar()
    def width():
        """QChar QFontMetricsF.width()"""
        return QChar()
    def width(_string):
        """float QFontMetricsF.width(QString _string)"""
        return float()
    def widthChar():
        """QChar QFontMetricsF.widthChar()"""
        return QChar()
    def rightBearing():
        """QChar QFontMetricsF.rightBearing()"""
        return QChar()
    def leftBearing():
        """QChar QFontMetricsF.leftBearing()"""
        return QChar()
    def inFont():
        """QChar QFontMetricsF.inFont()"""
        return QChar()
    def xHeight():
        """float QFontMetricsF.xHeight()"""
        return float()
    def maxWidth():
        """float QFontMetricsF.maxWidth()"""
        return float()
    def minRightBearing():
        """float QFontMetricsF.minRightBearing()"""
        return float()
    def minLeftBearing():
        """float QFontMetricsF.minLeftBearing()"""
        return float()
    def lineSpacing():
        """float QFontMetricsF.lineSpacing()"""
        return float()
    def leading():
        """float QFontMetricsF.leading()"""
        return float()
    def height():
        """float QFontMetricsF.height()"""
        return float()
    def descent():
        """float QFontMetricsF.descent()"""
        return float()
    def ascent():
        """float QFontMetricsF.ascent()"""
        return float()


class QFormLayout(QLayout):
    """"""
    LabelRole = int() # QFormLayout.ItemRole enum
    FieldRole = int() # QFormLayout.ItemRole enum
    SpanningRole = int() # QFormLayout.ItemRole enum

    DontWrapRows = int() # QFormLayout.RowWrapPolicy enum
    WrapLongRows = int() # QFormLayout.RowWrapPolicy enum
    WrapAllRows = int() # QFormLayout.RowWrapPolicy enum

    FieldsStayAtSizeHint = int() # QFormLayout.FieldGrowthPolicy enum
    ExpandingFieldsGrow = int() # QFormLayout.FieldGrowthPolicy enum
    AllNonFixedFieldsGrow = int() # QFormLayout.FieldGrowthPolicy enum

    def __init__(_parent):
        """None QFormLayout.__init__(QWidget _parent)"""
        return None
    def rowCount():
        """int QFormLayout.rowCount()"""
        return int()
    def count():
        """int QFormLayout.count()"""
        return int()
    def expandingDirections():
        """Qt.Orientations QFormLayout.expandingDirections()"""
        return Qt.Orientations()
    def heightForWidth(_width):
        """int QFormLayout.heightForWidth(int _width)"""
        return int()
    def hasHeightForWidth():
        """bool QFormLayout.hasHeightForWidth()"""
        return bool()
    def invalidate():
        """None QFormLayout.invalidate()"""
        return None
    def sizeHint():
        """QSize QFormLayout.sizeHint()"""
        return QSize()
    def minimumSize():
        """QSize QFormLayout.minimumSize()"""
        return QSize()
    def setGeometry(_rect):
        """None QFormLayout.setGeometry(QRect _rect)"""
        return None
    def takeAt(_index):
        """QLayoutItem QFormLayout.takeAt(int _index)"""
        return QLayoutItem()
    def addItem(_item):
        """None QFormLayout.addItem(QLayoutItem _item)"""
        return None
    def labelForField(_field):
        """QWidget QFormLayout.labelForField(QWidget _field)"""
        return QWidget()
    def labelForField(_field):
        """QWidget QFormLayout.labelForField(QLayout _field)"""
        return QWidget()
    def getLayoutPosition(_layout, _rowPtr, _rolePtr):
        """None QFormLayout.getLayoutPosition(QLayout _layout, int _rowPtr, QFormLayout.ItemRole _rolePtr)"""
        return None
    def getWidgetPosition(_widget, _rowPtr, _rolePtr):
        """None QFormLayout.getWidgetPosition(QWidget _widget, int _rowPtr, QFormLayout.ItemRole _rolePtr)"""
        return None
    def getItemPosition(_index, _rowPtr, _rolePtr):
        """None QFormLayout.getItemPosition(int _index, int _rowPtr, QFormLayout.ItemRole _rolePtr)"""
        return None
    def itemAt(_row, _role):
        """QLayoutItem QFormLayout.itemAt(int _row, QFormLayout.ItemRole _role)"""
        return QLayoutItem()
    def itemAt(_index):
        """QLayoutItem QFormLayout.itemAt(int _index)"""
        return QLayoutItem()
    def setLayout(_row, _role, _layout):
        """None QFormLayout.setLayout(int _row, QFormLayout.ItemRole _role, QLayout _layout)"""
        return None
    def setWidget(_row, _role, _widget):
        """None QFormLayout.setWidget(int _row, QFormLayout.ItemRole _role, QWidget _widget)"""
        return None
    def setItem(_row, _role, _item):
        """None QFormLayout.setItem(int _row, QFormLayout.ItemRole _role, QLayoutItem _item)"""
        return None
    def insertRow(_row, _label, _field):
        """None QFormLayout.insertRow(int _row, QWidget _label, QWidget _field)"""
        return None
    def insertRow(_row, _label, _field):
        """None QFormLayout.insertRow(int _row, QWidget _label, QLayout _field)"""
        return None
    def insertRow(_row, _labelText, _field):
        """None QFormLayout.insertRow(int _row, QString _labelText, QWidget _field)"""
        return None
    def insertRow(_row, _labelText, _field):
        """None QFormLayout.insertRow(int _row, QString _labelText, QLayout _field)"""
        return None
    def insertRow(_row, _widget):
        """None QFormLayout.insertRow(int _row, QWidget _widget)"""
        return None
    def insertRow(_row, _layout):
        """None QFormLayout.insertRow(int _row, QLayout _layout)"""
        return None
    def addRow(_label, _field):
        """None QFormLayout.addRow(QWidget _label, QWidget _field)"""
        return None
    def addRow(_label, _field):
        """None QFormLayout.addRow(QWidget _label, QLayout _field)"""
        return None
    def addRow(_labelText, _field):
        """None QFormLayout.addRow(QString _labelText, QWidget _field)"""
        return None
    def addRow(_labelText, _field):
        """None QFormLayout.addRow(QString _labelText, QLayout _field)"""
        return None
    def addRow(_widget):
        """None QFormLayout.addRow(QWidget _widget)"""
        return None
    def addRow(_layout):
        """None QFormLayout.addRow(QLayout _layout)"""
        return None
    def setSpacing():
        """int QFormLayout.setSpacing()"""
        return int()
    def spacing():
        """int QFormLayout.spacing()"""
        return int()
    def verticalSpacing():
        """int QFormLayout.verticalSpacing()"""
        return int()
    def setVerticalSpacing(_spacing):
        """None QFormLayout.setVerticalSpacing(int _spacing)"""
        return None
    def horizontalSpacing():
        """int QFormLayout.horizontalSpacing()"""
        return int()
    def setHorizontalSpacing(_spacing):
        """None QFormLayout.setHorizontalSpacing(int _spacing)"""
        return None
    def formAlignment():
        """Qt.Alignment QFormLayout.formAlignment()"""
        return Qt.Alignment()
    def setFormAlignment(_alignment):
        """None QFormLayout.setFormAlignment(Qt.Alignment _alignment)"""
        return None
    def labelAlignment():
        """Qt.Alignment QFormLayout.labelAlignment()"""
        return Qt.Alignment()
    def setLabelAlignment(_alignment):
        """None QFormLayout.setLabelAlignment(Qt.Alignment _alignment)"""
        return None
    def rowWrapPolicy():
        """QFormLayout.RowWrapPolicy QFormLayout.rowWrapPolicy()"""
        return QFormLayout.RowWrapPolicy()
    def setRowWrapPolicy(_policy):
        """None QFormLayout.setRowWrapPolicy(QFormLayout.RowWrapPolicy _policy)"""
        return None
    def fieldGrowthPolicy():
        """QFormLayout.FieldGrowthPolicy QFormLayout.fieldGrowthPolicy()"""
        return QFormLayout.FieldGrowthPolicy()
    def setFieldGrowthPolicy(_policy):
        """None QFormLayout.setFieldGrowthPolicy(QFormLayout.FieldGrowthPolicy _policy)"""
        return None


class QMatrix4x3():
    """"""
    def __init__():
        """None QMatrix4x3.__init__()"""
        return None
    def __init__(_other):
        """None QMatrix4x3.__init__(QMatrix4x3 _other)"""
        return None
    def __init__(_values):
        """None QMatrix4x3.__init__(sequence-of-float _values)"""
        return None
    def __ne__():
        """QMatrix4x3 QMatrix4x3.__ne__()"""
        return QMatrix4x3()
    def __eq__():
        """QMatrix4x3 QMatrix4x3.__eq__()"""
        return QMatrix4x3()
    def __idiv__():
        """float QMatrix4x3.__idiv__()"""
        return float()
    def __imul__():
        """float QMatrix4x3.__imul__()"""
        return float()
    def __isub__():
        """QMatrix4x3 QMatrix4x3.__isub__()"""
        return QMatrix4x3()
    def __iadd__():
        """QMatrix4x3 QMatrix4x3.__iadd__()"""
        return QMatrix4x3()
    def transposed():
        """QMatrix3x4 QMatrix4x3.transposed()"""
        return QMatrix3x4()
    def fill(_value):
        """None QMatrix4x3.fill(float _value)"""
        return None
    def setToIdentity():
        """None QMatrix4x3.setToIdentity()"""
        return None
    def isIdentity():
        """bool QMatrix4x3.isIdentity()"""
        return bool()
    def __setitem__():
        """float QMatrix4x3.__setitem__()"""
        return float()
    def __getitem__():
        """object QMatrix4x3.__getitem__()"""
        return object()
    def copyDataTo():
        """list-of-float QMatrix4x3.copyDataTo()"""
        return [float()]
    def data():
        """list-of-float QMatrix4x3.data()"""
        return [float()]
    def __repr__():
        """str QMatrix4x3.__repr__()"""
        return str()


class QMatrix4x2():
    """"""
    def __init__():
        """None QMatrix4x2.__init__()"""
        return None
    def __init__(_other):
        """None QMatrix4x2.__init__(QMatrix4x2 _other)"""
        return None
    def __init__(_values):
        """None QMatrix4x2.__init__(sequence-of-float _values)"""
        return None
    def __ne__():
        """QMatrix4x2 QMatrix4x2.__ne__()"""
        return QMatrix4x2()
    def __eq__():
        """QMatrix4x2 QMatrix4x2.__eq__()"""
        return QMatrix4x2()
    def __idiv__():
        """float QMatrix4x2.__idiv__()"""
        return float()
    def __imul__():
        """float QMatrix4x2.__imul__()"""
        return float()
    def __isub__():
        """QMatrix4x2 QMatrix4x2.__isub__()"""
        return QMatrix4x2()
    def __iadd__():
        """QMatrix4x2 QMatrix4x2.__iadd__()"""
        return QMatrix4x2()
    def transposed():
        """QMatrix2x4 QMatrix4x2.transposed()"""
        return QMatrix2x4()
    def fill(_value):
        """None QMatrix4x2.fill(float _value)"""
        return None
    def setToIdentity():
        """None QMatrix4x2.setToIdentity()"""
        return None
    def isIdentity():
        """bool QMatrix4x2.isIdentity()"""
        return bool()
    def __setitem__():
        """float QMatrix4x2.__setitem__()"""
        return float()
    def __getitem__():
        """object QMatrix4x2.__getitem__()"""
        return object()
    def copyDataTo():
        """list-of-float QMatrix4x2.copyDataTo()"""
        return [float()]
    def data():
        """list-of-float QMatrix4x2.data()"""
        return [float()]
    def __repr__():
        """str QMatrix4x2.__repr__()"""
        return str()


class QMatrix3x4():
    """"""
    def __init__():
        """None QMatrix3x4.__init__()"""
        return None
    def __init__(_other):
        """None QMatrix3x4.__init__(QMatrix3x4 _other)"""
        return None
    def __init__(_values):
        """None QMatrix3x4.__init__(sequence-of-float _values)"""
        return None
    def __ne__():
        """QMatrix3x4 QMatrix3x4.__ne__()"""
        return QMatrix3x4()
    def __eq__():
        """QMatrix3x4 QMatrix3x4.__eq__()"""
        return QMatrix3x4()
    def __idiv__():
        """float QMatrix3x4.__idiv__()"""
        return float()
    def __imul__():
        """float QMatrix3x4.__imul__()"""
        return float()
    def __isub__():
        """QMatrix3x4 QMatrix3x4.__isub__()"""
        return QMatrix3x4()
    def __iadd__():
        """QMatrix3x4 QMatrix3x4.__iadd__()"""
        return QMatrix3x4()
    def transposed():
        """QMatrix4x3 QMatrix3x4.transposed()"""
        return QMatrix4x3()
    def fill(_value):
        """None QMatrix3x4.fill(float _value)"""
        return None
    def setToIdentity():
        """None QMatrix3x4.setToIdentity()"""
        return None
    def isIdentity():
        """bool QMatrix3x4.isIdentity()"""
        return bool()
    def __setitem__():
        """float QMatrix3x4.__setitem__()"""
        return float()
    def __getitem__():
        """object QMatrix3x4.__getitem__()"""
        return object()
    def copyDataTo():
        """list-of-float QMatrix3x4.copyDataTo()"""
        return [float()]
    def data():
        """list-of-float QMatrix3x4.data()"""
        return [float()]
    def __repr__():
        """str QMatrix3x4.__repr__()"""
        return str()


class QMatrix3x3():
    """"""
    def __init__():
        """None QMatrix3x3.__init__()"""
        return None
    def __init__(_other):
        """None QMatrix3x3.__init__(QMatrix3x3 _other)"""
        return None
    def __init__(_values):
        """None QMatrix3x3.__init__(sequence-of-float _values)"""
        return None
    def __ne__():
        """QMatrix3x3 QMatrix3x3.__ne__()"""
        return QMatrix3x3()
    def __eq__():
        """QMatrix3x3 QMatrix3x3.__eq__()"""
        return QMatrix3x3()
    def __idiv__():
        """float QMatrix3x3.__idiv__()"""
        return float()
    def __imul__():
        """float QMatrix3x3.__imul__()"""
        return float()
    def __isub__():
        """QMatrix3x3 QMatrix3x3.__isub__()"""
        return QMatrix3x3()
    def __iadd__():
        """QMatrix3x3 QMatrix3x3.__iadd__()"""
        return QMatrix3x3()
    def transposed():
        """QMatrix3x3 QMatrix3x3.transposed()"""
        return QMatrix3x3()
    def fill(_value):
        """None QMatrix3x3.fill(float _value)"""
        return None
    def setToIdentity():
        """None QMatrix3x3.setToIdentity()"""
        return None
    def isIdentity():
        """bool QMatrix3x3.isIdentity()"""
        return bool()
    def __setitem__():
        """float QMatrix3x3.__setitem__()"""
        return float()
    def __getitem__():
        """object QMatrix3x3.__getitem__()"""
        return object()
    def copyDataTo():
        """list-of-float QMatrix3x3.copyDataTo()"""
        return [float()]
    def data():
        """list-of-float QMatrix3x3.data()"""
        return [float()]
    def __repr__():
        """str QMatrix3x3.__repr__()"""
        return str()


class QMatrix3x2():
    """"""
    def __init__():
        """None QMatrix3x2.__init__()"""
        return None
    def __init__(_other):
        """None QMatrix3x2.__init__(QMatrix3x2 _other)"""
        return None
    def __init__(_values):
        """None QMatrix3x2.__init__(sequence-of-float _values)"""
        return None
    def __ne__():
        """QMatrix3x2 QMatrix3x2.__ne__()"""
        return QMatrix3x2()
    def __eq__():
        """QMatrix3x2 QMatrix3x2.__eq__()"""
        return QMatrix3x2()
    def __idiv__():
        """float QMatrix3x2.__idiv__()"""
        return float()
    def __imul__():
        """float QMatrix3x2.__imul__()"""
        return float()
    def __isub__():
        """QMatrix3x2 QMatrix3x2.__isub__()"""
        return QMatrix3x2()
    def __iadd__():
        """QMatrix3x2 QMatrix3x2.__iadd__()"""
        return QMatrix3x2()
    def transposed():
        """QMatrix2x3 QMatrix3x2.transposed()"""
        return QMatrix2x3()
    def fill(_value):
        """None QMatrix3x2.fill(float _value)"""
        return None
    def setToIdentity():
        """None QMatrix3x2.setToIdentity()"""
        return None
    def isIdentity():
        """bool QMatrix3x2.isIdentity()"""
        return bool()
    def __setitem__():
        """float QMatrix3x2.__setitem__()"""
        return float()
    def __getitem__():
        """object QMatrix3x2.__getitem__()"""
        return object()
    def copyDataTo():
        """list-of-float QMatrix3x2.copyDataTo()"""
        return [float()]
    def data():
        """list-of-float QMatrix3x2.data()"""
        return [float()]
    def __repr__():
        """str QMatrix3x2.__repr__()"""
        return str()


class QMatrix2x4():
    """"""
    def __init__():
        """None QMatrix2x4.__init__()"""
        return None
    def __init__(_other):
        """None QMatrix2x4.__init__(QMatrix2x4 _other)"""
        return None
    def __init__(_values):
        """None QMatrix2x4.__init__(sequence-of-float _values)"""
        return None
    def __ne__():
        """QMatrix2x4 QMatrix2x4.__ne__()"""
        return QMatrix2x4()
    def __eq__():
        """QMatrix2x4 QMatrix2x4.__eq__()"""
        return QMatrix2x4()
    def __idiv__():
        """float QMatrix2x4.__idiv__()"""
        return float()
    def __imul__():
        """float QMatrix2x4.__imul__()"""
        return float()
    def __isub__():
        """QMatrix2x4 QMatrix2x4.__isub__()"""
        return QMatrix2x4()
    def __iadd__():
        """QMatrix2x4 QMatrix2x4.__iadd__()"""
        return QMatrix2x4()
    def transposed():
        """QMatrix4x2 QMatrix2x4.transposed()"""
        return QMatrix4x2()
    def fill(_value):
        """None QMatrix2x4.fill(float _value)"""
        return None
    def setToIdentity():
        """None QMatrix2x4.setToIdentity()"""
        return None
    def isIdentity():
        """bool QMatrix2x4.isIdentity()"""
        return bool()
    def __setitem__():
        """float QMatrix2x4.__setitem__()"""
        return float()
    def __getitem__():
        """object QMatrix2x4.__getitem__()"""
        return object()
    def copyDataTo():
        """list-of-float QMatrix2x4.copyDataTo()"""
        return [float()]
    def data():
        """list-of-float QMatrix2x4.data()"""
        return [float()]
    def __repr__():
        """str QMatrix2x4.__repr__()"""
        return str()


class QMatrix2x3():
    """"""
    def __init__():
        """None QMatrix2x3.__init__()"""
        return None
    def __init__(_other):
        """None QMatrix2x3.__init__(QMatrix2x3 _other)"""
        return None
    def __init__(_values):
        """None QMatrix2x3.__init__(sequence-of-float _values)"""
        return None
    def __ne__():
        """QMatrix2x3 QMatrix2x3.__ne__()"""
        return QMatrix2x3()
    def __eq__():
        """QMatrix2x3 QMatrix2x3.__eq__()"""
        return QMatrix2x3()
    def __idiv__():
        """float QMatrix2x3.__idiv__()"""
        return float()
    def __imul__():
        """float QMatrix2x3.__imul__()"""
        return float()
    def __isub__():
        """QMatrix2x3 QMatrix2x3.__isub__()"""
        return QMatrix2x3()
    def __iadd__():
        """QMatrix2x3 QMatrix2x3.__iadd__()"""
        return QMatrix2x3()
    def transposed():
        """QMatrix3x2 QMatrix2x3.transposed()"""
        return QMatrix3x2()
    def fill(_value):
        """None QMatrix2x3.fill(float _value)"""
        return None
    def setToIdentity():
        """None QMatrix2x3.setToIdentity()"""
        return None
    def isIdentity():
        """bool QMatrix2x3.isIdentity()"""
        return bool()
    def __setitem__():
        """float QMatrix2x3.__setitem__()"""
        return float()
    def __getitem__():
        """object QMatrix2x3.__getitem__()"""
        return object()
    def copyDataTo():
        """list-of-float QMatrix2x3.copyDataTo()"""
        return [float()]
    def data():
        """list-of-float QMatrix2x3.data()"""
        return [float()]
    def __repr__():
        """str QMatrix2x3.__repr__()"""
        return str()


class QMatrix2x2():
    """"""
    def __init__():
        """None QMatrix2x2.__init__()"""
        return None
    def __init__(_other):
        """None QMatrix2x2.__init__(QMatrix2x2 _other)"""
        return None
    def __init__(_values):
        """None QMatrix2x2.__init__(sequence-of-float _values)"""
        return None
    def __ne__():
        """QMatrix2x2 QMatrix2x2.__ne__()"""
        return QMatrix2x2()
    def __eq__():
        """QMatrix2x2 QMatrix2x2.__eq__()"""
        return QMatrix2x2()
    def __idiv__():
        """float QMatrix2x2.__idiv__()"""
        return float()
    def __imul__():
        """float QMatrix2x2.__imul__()"""
        return float()
    def __isub__():
        """QMatrix2x2 QMatrix2x2.__isub__()"""
        return QMatrix2x2()
    def __iadd__():
        """QMatrix2x2 QMatrix2x2.__iadd__()"""
        return QMatrix2x2()
    def transposed():
        """QMatrix2x2 QMatrix2x2.transposed()"""
        return QMatrix2x2()
    def fill(_value):
        """None QMatrix2x2.fill(float _value)"""
        return None
    def setToIdentity():
        """None QMatrix2x2.setToIdentity()"""
        return None
    def isIdentity():
        """bool QMatrix2x2.isIdentity()"""
        return bool()
    def __setitem__():
        """float QMatrix2x2.__setitem__()"""
        return float()
    def __getitem__():
        """object QMatrix2x2.__getitem__()"""
        return object()
    def copyDataTo():
        """list-of-float QMatrix2x2.copyDataTo()"""
        return [float()]
    def data():
        """list-of-float QMatrix2x2.data()"""
        return [float()]
    def __repr__():
        """str QMatrix2x2.__repr__()"""
        return str()


class QGesture(QObject):
    """"""
    CancelNone = int() # QGesture.GestureCancelPolicy enum
    CancelAllInContext = int() # QGesture.GestureCancelPolicy enum

    def __init__(_parent):
        """None QGesture.__init__(QObject _parent)"""
        return None
    def gestureCancelPolicy():
        """QGesture.GestureCancelPolicy QGesture.gestureCancelPolicy()"""
        return QGesture.GestureCancelPolicy()
    def setGestureCancelPolicy(_policy):
        """None QGesture.setGestureCancelPolicy(QGesture.GestureCancelPolicy _policy)"""
        return None
    def unsetHotSpot():
        """None QGesture.unsetHotSpot()"""
        return None
    def hasHotSpot():
        """bool QGesture.hasHotSpot()"""
        return bool()
    def setHotSpot(_value):
        """None QGesture.setHotSpot(QPointF _value)"""
        return None
    def hotSpot():
        """QPointF QGesture.hotSpot()"""
        return QPointF()
    def state():
        """Qt.GestureState QGesture.state()"""
        return Qt.GestureState()
    def gestureType():
        """Qt.GestureType QGesture.gestureType()"""
        return Qt.GestureType()


class QPanGesture(QGesture):
    """"""
    def __init__(_parent):
        """None QPanGesture.__init__(QObject _parent)"""
        return None
    def setAcceleration(_value):
        """None QPanGesture.setAcceleration(float _value)"""
        return None
    def setOffset(_value):
        """None QPanGesture.setOffset(QPointF _value)"""
        return None
    def setLastOffset(_value):
        """None QPanGesture.setLastOffset(QPointF _value)"""
        return None
    def acceleration():
        """float QPanGesture.acceleration()"""
        return float()
    def delta():
        """QPointF QPanGesture.delta()"""
        return QPointF()
    def offset():
        """QPointF QPanGesture.offset()"""
        return QPointF()
    def lastOffset():
        """QPointF QPanGesture.lastOffset()"""
        return QPointF()


class QPinchGesture(QGesture):
    """"""
    ScaleFactorChanged = int() # QPinchGesture.ChangeFlag enum
    RotationAngleChanged = int() # QPinchGesture.ChangeFlag enum
    CenterPointChanged = int() # QPinchGesture.ChangeFlag enum

    def __init__(_parent):
        """None QPinchGesture.__init__(QObject _parent)"""
        return None
    def setRotationAngle(_value):
        """None QPinchGesture.setRotationAngle(float _value)"""
        return None
    def setLastRotationAngle(_value):
        """None QPinchGesture.setLastRotationAngle(float _value)"""
        return None
    def setTotalRotationAngle(_value):
        """None QPinchGesture.setTotalRotationAngle(float _value)"""
        return None
    def rotationAngle():
        """float QPinchGesture.rotationAngle()"""
        return float()
    def lastRotationAngle():
        """float QPinchGesture.lastRotationAngle()"""
        return float()
    def totalRotationAngle():
        """float QPinchGesture.totalRotationAngle()"""
        return float()
    def setScaleFactor(_value):
        """None QPinchGesture.setScaleFactor(float _value)"""
        return None
    def setLastScaleFactor(_value):
        """None QPinchGesture.setLastScaleFactor(float _value)"""
        return None
    def setTotalScaleFactor(_value):
        """None QPinchGesture.setTotalScaleFactor(float _value)"""
        return None
    def scaleFactor():
        """float QPinchGesture.scaleFactor()"""
        return float()
    def lastScaleFactor():
        """float QPinchGesture.lastScaleFactor()"""
        return float()
    def totalScaleFactor():
        """float QPinchGesture.totalScaleFactor()"""
        return float()
    def setCenterPoint(_value):
        """None QPinchGesture.setCenterPoint(QPointF _value)"""
        return None
    def setLastCenterPoint(_value):
        """None QPinchGesture.setLastCenterPoint(QPointF _value)"""
        return None
    def setStartCenterPoint(_value):
        """None QPinchGesture.setStartCenterPoint(QPointF _value)"""
        return None
    def centerPoint():
        """QPointF QPinchGesture.centerPoint()"""
        return QPointF()
    def lastCenterPoint():
        """QPointF QPinchGesture.lastCenterPoint()"""
        return QPointF()
    def startCenterPoint():
        """QPointF QPinchGesture.startCenterPoint()"""
        return QPointF()
    def setChangeFlags(_value):
        """None QPinchGesture.setChangeFlags(QPinchGesture.ChangeFlags _value)"""
        return None
    def changeFlags():
        """QPinchGesture.ChangeFlags QPinchGesture.changeFlags()"""
        return QPinchGesture.ChangeFlags()
    def setTotalChangeFlags(_value):
        """None QPinchGesture.setTotalChangeFlags(QPinchGesture.ChangeFlags _value)"""
        return None
    def totalChangeFlags():
        """QPinchGesture.ChangeFlags QPinchGesture.totalChangeFlags()"""
        return QPinchGesture.ChangeFlags()


class QSwipeGesture(QGesture):
    """"""
    NoDirection = int() # QSwipeGesture.SwipeDirection enum
    Left = int() # QSwipeGesture.SwipeDirection enum
    Right = int() # QSwipeGesture.SwipeDirection enum
    Up = int() # QSwipeGesture.SwipeDirection enum
    Down = int() # QSwipeGesture.SwipeDirection enum

    def __init__(_parent):
        """None QSwipeGesture.__init__(QObject _parent)"""
        return None
    def setSwipeAngle(_value):
        """None QSwipeGesture.setSwipeAngle(float _value)"""
        return None
    def swipeAngle():
        """float QSwipeGesture.swipeAngle()"""
        return float()
    def verticalDirection():
        """QSwipeGesture.SwipeDirection QSwipeGesture.verticalDirection()"""
        return QSwipeGesture.SwipeDirection()
    def horizontalDirection():
        """QSwipeGesture.SwipeDirection QSwipeGesture.horizontalDirection()"""
        return QSwipeGesture.SwipeDirection()


class QTapGesture(QGesture):
    """"""
    def __init__(_parent):
        """None QTapGesture.__init__(QObject _parent)"""
        return None
    def setPosition(_pos):
        """None QTapGesture.setPosition(QPointF _pos)"""
        return None
    def position():
        """QPointF QTapGesture.position()"""
        return QPointF()


class QTapAndHoldGesture(QGesture):
    """"""
    def __init__(_parent):
        """None QTapAndHoldGesture.__init__(QObject _parent)"""
        return None
    def timeout():
        """int QTapAndHoldGesture.timeout()"""
        return int()
    def setTimeout(_msecs):
        """None QTapAndHoldGesture.setTimeout(int _msecs)"""
        return None
    def setPosition(_pos):
        """None QTapAndHoldGesture.setPosition(QPointF _pos)"""
        return None
    def position():
        """QPointF QTapAndHoldGesture.position()"""
        return QPointF()


class QGestureRecognizer():
    """"""
    Ignore = int() # QGestureRecognizer.ResultFlag enum
    MayBeGesture = int() # QGestureRecognizer.ResultFlag enum
    TriggerGesture = int() # QGestureRecognizer.ResultFlag enum
    FinishGesture = int() # QGestureRecognizer.ResultFlag enum
    CancelGesture = int() # QGestureRecognizer.ResultFlag enum
    ConsumeEventHint = int() # QGestureRecognizer.ResultFlag enum

    def __init__():
        """None QGestureRecognizer.__init__()"""
        return None
    def __init__():
        """QGestureRecognizer QGestureRecognizer.__init__()"""
        return QGestureRecognizer()
    def unregisterRecognizer(_type):
        """None QGestureRecognizer.unregisterRecognizer(Qt.GestureType _type)"""
        return None
    def registerRecognizer(_recognizer):
        """Qt.GestureType QGestureRecognizer.registerRecognizer(QGestureRecognizer _recognizer)"""
        return Qt.GestureType()
    def reset(_state):
        """None QGestureRecognizer.reset(QGesture _state)"""
        return None
    def recognize(_state, _watched, _event):
        """abstract QGestureRecognizer.Result QGestureRecognizer.recognize(QGesture _state, QObject _watched, QEvent _event)"""
        return QGestureRecognizer.Result()
    def create(_target):
        """QGesture QGestureRecognizer.create(QObject _target)"""
        return QGesture()


class QGraphicsAnchor(QObject):
    """"""
    def sizePolicy():
        """QSizePolicy.Policy QGraphicsAnchor.sizePolicy()"""
        return QSizePolicy.Policy()
    def setSizePolicy(_policy):
        """None QGraphicsAnchor.setSizePolicy(QSizePolicy.Policy _policy)"""
        return None
    def spacing():
        """float QGraphicsAnchor.spacing()"""
        return float()
    def unsetSpacing():
        """None QGraphicsAnchor.unsetSpacing()"""
        return None
    def setSpacing(_spacing):
        """None QGraphicsAnchor.setSpacing(float _spacing)"""
        return None


class QGraphicsLayoutItem():
    """"""
    def __init__(_parent, _isLayout):
        """None QGraphicsLayoutItem.__init__(QGraphicsLayoutItem _parent, bool _isLayout)"""
        return None
    def setOwnedByLayout(_ownedByLayout):
        """None QGraphicsLayoutItem.setOwnedByLayout(bool _ownedByLayout)"""
        return None
    def setGraphicsItem(_item):
        """None QGraphicsLayoutItem.setGraphicsItem(QGraphicsItem _item)"""
        return None
    def sizeHint(_which, _constraint):
        """abstract QSizeF QGraphicsLayoutItem.sizeHint(Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def ownedByLayout():
        """bool QGraphicsLayoutItem.ownedByLayout()"""
        return bool()
    def graphicsItem():
        """QGraphicsItem QGraphicsLayoutItem.graphicsItem()"""
        return QGraphicsItem()
    def maximumHeight():
        """float QGraphicsLayoutItem.maximumHeight()"""
        return float()
    def maximumWidth():
        """float QGraphicsLayoutItem.maximumWidth()"""
        return float()
    def preferredHeight():
        """float QGraphicsLayoutItem.preferredHeight()"""
        return float()
    def preferredWidth():
        """float QGraphicsLayoutItem.preferredWidth()"""
        return float()
    def minimumHeight():
        """float QGraphicsLayoutItem.minimumHeight()"""
        return float()
    def minimumWidth():
        """float QGraphicsLayoutItem.minimumWidth()"""
        return float()
    def isLayout():
        """bool QGraphicsLayoutItem.isLayout()"""
        return bool()
    def setParentLayoutItem(_parent):
        """None QGraphicsLayoutItem.setParentLayoutItem(QGraphicsLayoutItem _parent)"""
        return None
    def parentLayoutItem():
        """QGraphicsLayoutItem QGraphicsLayoutItem.parentLayoutItem()"""
        return QGraphicsLayoutItem()
    def updateGeometry():
        """None QGraphicsLayoutItem.updateGeometry()"""
        return None
    def effectiveSizeHint(_which, _constraint):
        """QSizeF QGraphicsLayoutItem.effectiveSizeHint(Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def contentsRect():
        """QRectF QGraphicsLayoutItem.contentsRect()"""
        return QRectF()
    def getContentsMargins(_left, _top, _right, _bottom):
        """None QGraphicsLayoutItem.getContentsMargins(float _left, float _top, float _right, float _bottom)"""
        return None
    def geometry():
        """QRectF QGraphicsLayoutItem.geometry()"""
        return QRectF()
    def setGeometry(_rect):
        """None QGraphicsLayoutItem.setGeometry(QRectF _rect)"""
        return None
    def setMaximumHeight(_height):
        """None QGraphicsLayoutItem.setMaximumHeight(float _height)"""
        return None
    def setMaximumWidth(_width):
        """None QGraphicsLayoutItem.setMaximumWidth(float _width)"""
        return None
    def maximumSize():
        """QSizeF QGraphicsLayoutItem.maximumSize()"""
        return QSizeF()
    def setMaximumSize(_size):
        """None QGraphicsLayoutItem.setMaximumSize(QSizeF _size)"""
        return None
    def setMaximumSize(_aw, _ah):
        """None QGraphicsLayoutItem.setMaximumSize(float _aw, float _ah)"""
        return None
    def setPreferredHeight(_height):
        """None QGraphicsLayoutItem.setPreferredHeight(float _height)"""
        return None
    def setPreferredWidth(_width):
        """None QGraphicsLayoutItem.setPreferredWidth(float _width)"""
        return None
    def preferredSize():
        """QSizeF QGraphicsLayoutItem.preferredSize()"""
        return QSizeF()
    def setPreferredSize(_size):
        """None QGraphicsLayoutItem.setPreferredSize(QSizeF _size)"""
        return None
    def setPreferredSize(_aw, _ah):
        """None QGraphicsLayoutItem.setPreferredSize(float _aw, float _ah)"""
        return None
    def setMinimumHeight(_height):
        """None QGraphicsLayoutItem.setMinimumHeight(float _height)"""
        return None
    def setMinimumWidth(_width):
        """None QGraphicsLayoutItem.setMinimumWidth(float _width)"""
        return None
    def minimumSize():
        """QSizeF QGraphicsLayoutItem.minimumSize()"""
        return QSizeF()
    def setMinimumSize(_size):
        """None QGraphicsLayoutItem.setMinimumSize(QSizeF _size)"""
        return None
    def setMinimumSize(_aw, _ah):
        """None QGraphicsLayoutItem.setMinimumSize(float _aw, float _ah)"""
        return None
    def sizePolicy():
        """QSizePolicy QGraphicsLayoutItem.sizePolicy()"""
        return QSizePolicy()
    def setSizePolicy(_policy):
        """None QGraphicsLayoutItem.setSizePolicy(QSizePolicy _policy)"""
        return None
    def setSizePolicy(_hPolicy, _vPolicy, _controlType):
        """None QGraphicsLayoutItem.setSizePolicy(QSizePolicy.Policy _hPolicy, QSizePolicy.Policy _vPolicy, QSizePolicy.ControlType _controlType)"""
        return None


class QGraphicsLayout(QGraphicsLayoutItem):
    """"""
    def __init__(_parent):
        """None QGraphicsLayout.__init__(QGraphicsLayoutItem _parent)"""
        return None
    def addChildLayoutItem(_layoutItem):
        """None QGraphicsLayout.addChildLayoutItem(QGraphicsLayoutItem _layoutItem)"""
        return None
    def updateGeometry():
        """None QGraphicsLayout.updateGeometry()"""
        return None
    def removeAt(_index):
        """abstract None QGraphicsLayout.removeAt(int _index)"""
        return None
    def itemAt(_i):
        """abstract QGraphicsLayoutItem QGraphicsLayout.itemAt(int _i)"""
        return QGraphicsLayoutItem()
    def __len__():
        """ QGraphicsLayout.__len__()"""
        return ()
    def count():
        """abstract int QGraphicsLayout.count()"""
        return int()
    def widgetEvent(_e):
        """None QGraphicsLayout.widgetEvent(QEvent _e)"""
        return None
    def invalidate():
        """None QGraphicsLayout.invalidate()"""
        return None
    def isActivated():
        """bool QGraphicsLayout.isActivated()"""
        return bool()
    def activate():
        """None QGraphicsLayout.activate()"""
        return None
    def getContentsMargins(_left, _top, _right, _bottom):
        """None QGraphicsLayout.getContentsMargins(float _left, float _top, float _right, float _bottom)"""
        return None
    def setContentsMargins(_left, _top, _right, _bottom):
        """None QGraphicsLayout.setContentsMargins(float _left, float _top, float _right, float _bottom)"""
        return None


class QGraphicsAnchorLayout(QGraphicsLayout):
    """"""
    def __init__(_parent):
        """None QGraphicsAnchorLayout.__init__(QGraphicsLayoutItem _parent)"""
        return None
    def sizeHint(_which, _constraint):
        """QSizeF QGraphicsAnchorLayout.sizeHint(Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def invalidate():
        """None QGraphicsAnchorLayout.invalidate()"""
        return None
    def itemAt(_index):
        """QGraphicsLayoutItem QGraphicsAnchorLayout.itemAt(int _index)"""
        return QGraphicsLayoutItem()
    def count():
        """int QGraphicsAnchorLayout.count()"""
        return int()
    def setGeometry(_rect):
        """None QGraphicsAnchorLayout.setGeometry(QRectF _rect)"""
        return None
    def removeAt(_index):
        """None QGraphicsAnchorLayout.removeAt(int _index)"""
        return None
    def verticalSpacing():
        """float QGraphicsAnchorLayout.verticalSpacing()"""
        return float()
    def horizontalSpacing():
        """float QGraphicsAnchorLayout.horizontalSpacing()"""
        return float()
    def setSpacing(_spacing):
        """None QGraphicsAnchorLayout.setSpacing(float _spacing)"""
        return None
    def setVerticalSpacing(_spacing):
        """None QGraphicsAnchorLayout.setVerticalSpacing(float _spacing)"""
        return None
    def setHorizontalSpacing(_spacing):
        """None QGraphicsAnchorLayout.setHorizontalSpacing(float _spacing)"""
        return None
    def addAnchors(_firstItem, _secondItem, _orientations):
        """None QGraphicsAnchorLayout.addAnchors(QGraphicsLayoutItem _firstItem, QGraphicsLayoutItem _secondItem, Qt.Orientations _orientations)"""
        return None
    def addCornerAnchors(_firstItem, _firstCorner, _secondItem, _secondCorner):
        """None QGraphicsAnchorLayout.addCornerAnchors(QGraphicsLayoutItem _firstItem, Qt.Corner _firstCorner, QGraphicsLayoutItem _secondItem, Qt.Corner _secondCorner)"""
        return None
    def anchor(_firstItem, _firstEdge, _secondItem, _secondEdge):
        """QGraphicsAnchor QGraphicsAnchorLayout.anchor(QGraphicsLayoutItem _firstItem, Qt.AnchorPoint _firstEdge, QGraphicsLayoutItem _secondItem, Qt.AnchorPoint _secondEdge)"""
        return QGraphicsAnchor()
    def addAnchor(_firstItem, _firstEdge, _secondItem, _secondEdge):
        """QGraphicsAnchor QGraphicsAnchorLayout.addAnchor(QGraphicsLayoutItem _firstItem, Qt.AnchorPoint _firstEdge, QGraphicsLayoutItem _secondItem, Qt.AnchorPoint _secondEdge)"""
        return QGraphicsAnchor()


class QGraphicsEffect(QObject):
    """"""
    NoPad = int() # QGraphicsEffect.PixmapPadMode enum
    PadToTransparentBorder = int() # QGraphicsEffect.PixmapPadMode enum
    PadToEffectiveBoundingRect = int() # QGraphicsEffect.PixmapPadMode enum

    SourceAttached = int() # QGraphicsEffect.ChangeFlag enum
    SourceDetached = int() # QGraphicsEffect.ChangeFlag enum
    SourceBoundingRectChanged = int() # QGraphicsEffect.ChangeFlag enum
    SourceInvalidated = int() # QGraphicsEffect.ChangeFlag enum

    def __init__(_parent):
        """None QGraphicsEffect.__init__(QObject _parent)"""
        return None
    def sourcePixmap(_system, _offset, _mode):
        """QPixmap QGraphicsEffect.sourcePixmap(Qt.CoordinateSystem _system, QPoint _offset, QGraphicsEffect.PixmapPadMode _mode)"""
        return QPixmap()
    def drawSource(_painter):
        """None QGraphicsEffect.drawSource(QPainter _painter)"""
        return None
    def sourceBoundingRect(_system):
        """QRectF QGraphicsEffect.sourceBoundingRect(Qt.CoordinateSystem _system)"""
        return QRectF()
    def sourceIsPixmap():
        """bool QGraphicsEffect.sourceIsPixmap()"""
        return bool()
    def updateBoundingRect():
        """None QGraphicsEffect.updateBoundingRect()"""
        return None
    def sourceChanged(_flags):
        """None QGraphicsEffect.sourceChanged(QGraphicsEffect.ChangeFlags _flags)"""
        return None
    def draw(_painter):
        """abstract None QGraphicsEffect.draw(QPainter _painter)"""
        return None
    def update():
        """None QGraphicsEffect.update()"""
        return None
    def setEnabled(_enable):
        """None QGraphicsEffect.setEnabled(bool _enable)"""
        return None
    def isEnabled():
        """bool QGraphicsEffect.isEnabled()"""
        return bool()
    def boundingRect():
        """QRectF QGraphicsEffect.boundingRect()"""
        return QRectF()
    def boundingRectFor(_sourceRect):
        """QRectF QGraphicsEffect.boundingRectFor(QRectF _sourceRect)"""
        return QRectF()


class QGraphicsColorizeEffect(QGraphicsEffect):
    """"""
    def __init__(_parent):
        """None QGraphicsColorizeEffect.__init__(QObject _parent)"""
        return None
    def draw(_painter):
        """None QGraphicsColorizeEffect.draw(QPainter _painter)"""
        return None
    def setStrength(_strength):
        """None QGraphicsColorizeEffect.setStrength(float _strength)"""
        return None
    def setColor(_c):
        """None QGraphicsColorizeEffect.setColor(QColor _c)"""
        return None
    def strength():
        """float QGraphicsColorizeEffect.strength()"""
        return float()
    def color():
        """QColor QGraphicsColorizeEffect.color()"""
        return QColor()


class QGraphicsBlurEffect(QGraphicsEffect):
    """"""
    PerformanceHint = int() # QGraphicsBlurEffect.BlurHint enum
    QualityHint = int() # QGraphicsBlurEffect.BlurHint enum
    AnimationHint = int() # QGraphicsBlurEffect.BlurHint enum

    def __init__(_parent):
        """None QGraphicsBlurEffect.__init__(QObject _parent)"""
        return None
    def draw(_painter):
        """None QGraphicsBlurEffect.draw(QPainter _painter)"""
        return None
    def setBlurHints(_hints):
        """None QGraphicsBlurEffect.setBlurHints(QGraphicsBlurEffect.BlurHints _hints)"""
        return None
    def setBlurRadius(_blurRadius):
        """None QGraphicsBlurEffect.setBlurRadius(float _blurRadius)"""
        return None
    def blurHints():
        """QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.blurHints()"""
        return QGraphicsBlurEffect.BlurHints()
    def blurRadius():
        """float QGraphicsBlurEffect.blurRadius()"""
        return float()
    def boundingRectFor(_rect):
        """QRectF QGraphicsBlurEffect.boundingRectFor(QRectF _rect)"""
        return QRectF()


class QGraphicsDropShadowEffect(QGraphicsEffect):
    """"""
    def __init__(_parent):
        """None QGraphicsDropShadowEffect.__init__(QObject _parent)"""
        return None
    def draw(_painter):
        """None QGraphicsDropShadowEffect.draw(QPainter _painter)"""
        return None
    def setColor(_color):
        """None QGraphicsDropShadowEffect.setColor(QColor _color)"""
        return None
    def setBlurRadius(_blurRadius):
        """None QGraphicsDropShadowEffect.setBlurRadius(float _blurRadius)"""
        return None
    def setYOffset(_dy):
        """None QGraphicsDropShadowEffect.setYOffset(float _dy)"""
        return None
    def setXOffset(_dx):
        """None QGraphicsDropShadowEffect.setXOffset(float _dx)"""
        return None
    def setOffset(_ofs):
        """None QGraphicsDropShadowEffect.setOffset(QPointF _ofs)"""
        return None
    def setOffset(_dx, _dy):
        """None QGraphicsDropShadowEffect.setOffset(float _dx, float _dy)"""
        return None
    def setOffset(_d):
        """None QGraphicsDropShadowEffect.setOffset(float _d)"""
        return None
    def color():
        """QColor QGraphicsDropShadowEffect.color()"""
        return QColor()
    def blurRadius():
        """float QGraphicsDropShadowEffect.blurRadius()"""
        return float()
    def yOffset():
        """float QGraphicsDropShadowEffect.yOffset()"""
        return float()
    def xOffset():
        """float QGraphicsDropShadowEffect.xOffset()"""
        return float()
    def offset():
        """QPointF QGraphicsDropShadowEffect.offset()"""
        return QPointF()
    def boundingRectFor(_rect):
        """QRectF QGraphicsDropShadowEffect.boundingRectFor(QRectF _rect)"""
        return QRectF()


class QGraphicsOpacityEffect(QGraphicsEffect):
    """"""
    def __init__(_parent):
        """None QGraphicsOpacityEffect.__init__(QObject _parent)"""
        return None
    def draw(_painter):
        """None QGraphicsOpacityEffect.draw(QPainter _painter)"""
        return None
    def setOpacityMask(_mask):
        """None QGraphicsOpacityEffect.setOpacityMask(QBrush _mask)"""
        return None
    def setOpacity(_opacity):
        """None QGraphicsOpacityEffect.setOpacity(float _opacity)"""
        return None
    def opacityMask():
        """QBrush QGraphicsOpacityEffect.opacityMask()"""
        return QBrush()
    def opacity():
        """float QGraphicsOpacityEffect.opacity()"""
        return float()


class QGraphicsGridLayout(QGraphicsLayout):
    """"""
    def __init__(_parent):
        """None QGraphicsGridLayout.__init__(QGraphicsLayoutItem _parent)"""
        return None
    def sizeHint(_which, _constraint):
        """QSizeF QGraphicsGridLayout.sizeHint(Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def setGeometry(_rect):
        """None QGraphicsGridLayout.setGeometry(QRectF _rect)"""
        return None
    def invalidate():
        """None QGraphicsGridLayout.invalidate()"""
        return None
    def removeAt(_index):
        """None QGraphicsGridLayout.removeAt(int _index)"""
        return None
    def count():
        """int QGraphicsGridLayout.count()"""
        return int()
    def itemAt(_row, _column):
        """QGraphicsLayoutItem QGraphicsGridLayout.itemAt(int _row, int _column)"""
        return QGraphicsLayoutItem()
    def itemAt(_index):
        """QGraphicsLayoutItem QGraphicsGridLayout.itemAt(int _index)"""
        return QGraphicsLayoutItem()
    def columnCount():
        """int QGraphicsGridLayout.columnCount()"""
        return int()
    def rowCount():
        """int QGraphicsGridLayout.rowCount()"""
        return int()
    def alignment(_item):
        """Qt.Alignment QGraphicsGridLayout.alignment(QGraphicsLayoutItem _item)"""
        return Qt.Alignment()
    def setAlignment(_item, _alignment):
        """None QGraphicsGridLayout.setAlignment(QGraphicsLayoutItem _item, Qt.Alignment _alignment)"""
        return None
    def columnAlignment(_column):
        """Qt.Alignment QGraphicsGridLayout.columnAlignment(int _column)"""
        return Qt.Alignment()
    def setColumnAlignment(_column, _alignment):
        """None QGraphicsGridLayout.setColumnAlignment(int _column, Qt.Alignment _alignment)"""
        return None
    def rowAlignment(_row):
        """Qt.Alignment QGraphicsGridLayout.rowAlignment(int _row)"""
        return Qt.Alignment()
    def setRowAlignment(_row, _alignment):
        """None QGraphicsGridLayout.setRowAlignment(int _row, Qt.Alignment _alignment)"""
        return None
    def setColumnFixedWidth(_column, _width):
        """None QGraphicsGridLayout.setColumnFixedWidth(int _column, float _width)"""
        return None
    def columnMaximumWidth(_column):
        """float QGraphicsGridLayout.columnMaximumWidth(int _column)"""
        return float()
    def setColumnMaximumWidth(_column, _width):
        """None QGraphicsGridLayout.setColumnMaximumWidth(int _column, float _width)"""
        return None
    def columnPreferredWidth(_column):
        """float QGraphicsGridLayout.columnPreferredWidth(int _column)"""
        return float()
    def setColumnPreferredWidth(_column, _width):
        """None QGraphicsGridLayout.setColumnPreferredWidth(int _column, float _width)"""
        return None
    def columnMinimumWidth(_column):
        """float QGraphicsGridLayout.columnMinimumWidth(int _column)"""
        return float()
    def setColumnMinimumWidth(_column, _width):
        """None QGraphicsGridLayout.setColumnMinimumWidth(int _column, float _width)"""
        return None
    def setRowFixedHeight(_row, _height):
        """None QGraphicsGridLayout.setRowFixedHeight(int _row, float _height)"""
        return None
    def rowMaximumHeight(_row):
        """float QGraphicsGridLayout.rowMaximumHeight(int _row)"""
        return float()
    def setRowMaximumHeight(_row, _height):
        """None QGraphicsGridLayout.setRowMaximumHeight(int _row, float _height)"""
        return None
    def rowPreferredHeight(_row):
        """float QGraphicsGridLayout.rowPreferredHeight(int _row)"""
        return float()
    def setRowPreferredHeight(_row, _height):
        """None QGraphicsGridLayout.setRowPreferredHeight(int _row, float _height)"""
        return None
    def rowMinimumHeight(_row):
        """float QGraphicsGridLayout.rowMinimumHeight(int _row)"""
        return float()
    def setRowMinimumHeight(_row, _height):
        """None QGraphicsGridLayout.setRowMinimumHeight(int _row, float _height)"""
        return None
    def columnStretchFactor(_column):
        """int QGraphicsGridLayout.columnStretchFactor(int _column)"""
        return int()
    def setColumnStretchFactor(_column, _stretch):
        """None QGraphicsGridLayout.setColumnStretchFactor(int _column, int _stretch)"""
        return None
    def rowStretchFactor(_row):
        """int QGraphicsGridLayout.rowStretchFactor(int _row)"""
        return int()
    def setRowStretchFactor(_row, _stretch):
        """None QGraphicsGridLayout.setRowStretchFactor(int _row, int _stretch)"""
        return None
    def columnSpacing(_column):
        """float QGraphicsGridLayout.columnSpacing(int _column)"""
        return float()
    def setColumnSpacing(_column, _spacing):
        """None QGraphicsGridLayout.setColumnSpacing(int _column, float _spacing)"""
        return None
    def rowSpacing(_row):
        """float QGraphicsGridLayout.rowSpacing(int _row)"""
        return float()
    def setRowSpacing(_row, _spacing):
        """None QGraphicsGridLayout.setRowSpacing(int _row, float _spacing)"""
        return None
    def setSpacing(_spacing):
        """None QGraphicsGridLayout.setSpacing(float _spacing)"""
        return None
    def verticalSpacing():
        """float QGraphicsGridLayout.verticalSpacing()"""
        return float()
    def setVerticalSpacing(_spacing):
        """None QGraphicsGridLayout.setVerticalSpacing(float _spacing)"""
        return None
    def horizontalSpacing():
        """float QGraphicsGridLayout.horizontalSpacing()"""
        return float()
    def setHorizontalSpacing(_spacing):
        """None QGraphicsGridLayout.setHorizontalSpacing(float _spacing)"""
        return None
    def addItem(_item, _row, _column, _rowSpan, _columnSpan, _alignment):
        """None QGraphicsGridLayout.addItem(QGraphicsLayoutItem _item, int _row, int _column, int _rowSpan, int _columnSpan, Qt.Alignment _alignment)"""
        return None
    def addItem(_aitem, _arow, _acolumn, _alignment):
        """None QGraphicsGridLayout.addItem(QGraphicsLayoutItem _aitem, int _arow, int _acolumn, Qt.Alignment _alignment)"""
        return None


class QGraphicsItem():
    """"""
    NonModal = int() # QGraphicsItem.PanelModality enum
    PanelModal = int() # QGraphicsItem.PanelModality enum
    SceneModal = int() # QGraphicsItem.PanelModality enum

    UserType = None # int member
    ItemIsMovable = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemIsSelectable = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemIsFocusable = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemClipsToShape = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemClipsChildrenToShape = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemIgnoresTransformations = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemIgnoresParentOpacity = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemDoesntPropagateOpacityToChildren = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemStacksBehindParent = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemUsesExtendedStyleOption = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemHasNoContents = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemSendsGeometryChanges = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemAcceptsInputMethod = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemNegativeZStacksBehindParent = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemIsPanel = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemSendsScenePositionChanges = int() # QGraphicsItem.GraphicsItemFlag enum

    ItemPositionChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemMatrixChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemVisibleChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemEnabledChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemSelectedChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemParentChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemChildAddedChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemChildRemovedChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemTransformChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemPositionHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemTransformHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemSceneChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemVisibleHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemEnabledHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemSelectedHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemParentHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemSceneHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemCursorChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemCursorHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemToolTipChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemToolTipHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemFlagsChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemFlagsHaveChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemZValueChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemZValueHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemOpacityChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemOpacityHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemScenePositionHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemRotationChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemRotationHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemScaleChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemScaleHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemTransformOriginPointChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemTransformOriginPointHasChanged = int() # QGraphicsItem.GraphicsItemChange enum

    NoCache = int() # QGraphicsItem.CacheMode enum
    ItemCoordinateCache = int() # QGraphicsItem.CacheMode enum
    DeviceCoordinateCache = int() # QGraphicsItem.CacheMode enum

    def __init__(_parent, _scene):
        """None QGraphicsItem.__init__(QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def updateMicroFocus():
        """None QGraphicsItem.updateMicroFocus()"""
        return None
    def setInputMethodHints(_hints):
        """None QGraphicsItem.setInputMethodHints(Qt.InputMethodHints _hints)"""
        return None
    def inputMethodHints():
        """Qt.InputMethodHints QGraphicsItem.inputMethodHints()"""
        return Qt.InputMethodHints()
    def stackBefore(_sibling):
        """None QGraphicsItem.stackBefore(QGraphicsItem _sibling)"""
        return None
    def setTransformOriginPoint(_origin):
        """None QGraphicsItem.setTransformOriginPoint(QPointF _origin)"""
        return None
    def setTransformOriginPoint(_ax, _ay):
        """None QGraphicsItem.setTransformOriginPoint(float _ax, float _ay)"""
        return None
    def transformOriginPoint():
        """QPointF QGraphicsItem.transformOriginPoint()"""
        return QPointF()
    def setTransformations(_transformations):
        """None QGraphicsItem.setTransformations(list-of-QGraphicsTransform _transformations)"""
        return None
    def transformations():
        """list-of-QGraphicsTransform QGraphicsItem.transformations()"""
        return [QGraphicsTransform()]
    def setScale(_scale):
        """None QGraphicsItem.setScale(float _scale)"""
        return None
    def rotation():
        """float QGraphicsItem.rotation()"""
        return float()
    def setRotation(_angle):
        """None QGraphicsItem.setRotation(float _angle)"""
        return None
    def setY(_y):
        """None QGraphicsItem.setY(float _y)"""
        return None
    def setX(_x):
        """None QGraphicsItem.setX(float _x)"""
        return None
    def focusItem():
        """QGraphicsItem QGraphicsItem.focusItem()"""
        return QGraphicsItem()
    def setFocusProxy(_item):
        """None QGraphicsItem.setFocusProxy(QGraphicsItem _item)"""
        return None
    def focusProxy():
        """QGraphicsItem QGraphicsItem.focusProxy()"""
        return QGraphicsItem()
    def setActive(_active):
        """None QGraphicsItem.setActive(bool _active)"""
        return None
    def isActive():
        """bool QGraphicsItem.isActive()"""
        return bool()
    def setFiltersChildEvents(_enabled):
        """None QGraphicsItem.setFiltersChildEvents(bool _enabled)"""
        return None
    def filtersChildEvents():
        """bool QGraphicsItem.filtersChildEvents()"""
        return bool()
    def setAcceptTouchEvents(_enabled):
        """None QGraphicsItem.setAcceptTouchEvents(bool _enabled)"""
        return None
    def acceptTouchEvents():
        """bool QGraphicsItem.acceptTouchEvents()"""
        return bool()
    def setGraphicsEffect(_effect):
        """None QGraphicsItem.setGraphicsEffect(QGraphicsEffect _effect)"""
        return None
    def graphicsEffect():
        """QGraphicsEffect QGraphicsItem.graphicsEffect()"""
        return QGraphicsEffect()
    def isBlockedByModalPanel(_blockingPanel):
        """bool QGraphicsItem.isBlockedByModalPanel(QGraphicsItem _blockingPanel)"""
        return bool()
    def setPanelModality(_panelModality):
        """None QGraphicsItem.setPanelModality(QGraphicsItem.PanelModality _panelModality)"""
        return None
    def panelModality():
        """QGraphicsItem.PanelModality QGraphicsItem.panelModality()"""
        return QGraphicsItem.PanelModality()
    def toGraphicsObject():
        """QGraphicsObject QGraphicsItem.toGraphicsObject()"""
        return QGraphicsObject()
    def isPanel():
        """bool QGraphicsItem.isPanel()"""
        return bool()
    def panel():
        """QGraphicsItem QGraphicsItem.panel()"""
        return QGraphicsItem()
    def parentObject():
        """QGraphicsObject QGraphicsItem.parentObject()"""
        return QGraphicsObject()
    def mapRectFromScene(_rect):
        """QRectF QGraphicsItem.mapRectFromScene(QRectF _rect)"""
        return QRectF()
    def mapRectFromScene(_ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectFromScene(float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def mapRectFromParent(_rect):
        """QRectF QGraphicsItem.mapRectFromParent(QRectF _rect)"""
        return QRectF()
    def mapRectFromParent(_ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectFromParent(float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def mapRectFromItem(_item, _rect):
        """QRectF QGraphicsItem.mapRectFromItem(QGraphicsItem _item, QRectF _rect)"""
        return QRectF()
    def mapRectFromItem(_item, _ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectFromItem(QGraphicsItem _item, float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def mapRectToScene(_rect):
        """QRectF QGraphicsItem.mapRectToScene(QRectF _rect)"""
        return QRectF()
    def mapRectToScene(_ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectToScene(float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def mapRectToParent(_rect):
        """QRectF QGraphicsItem.mapRectToParent(QRectF _rect)"""
        return QRectF()
    def mapRectToParent(_ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectToParent(float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def mapRectToItem(_item, _rect):
        """QRectF QGraphicsItem.mapRectToItem(QGraphicsItem _item, QRectF _rect)"""
        return QRectF()
    def mapRectToItem(_item, _ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectToItem(QGraphicsItem _item, float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def clipPath():
        """QPainterPath QGraphicsItem.clipPath()"""
        return QPainterPath()
    def isClipped():
        """bool QGraphicsItem.isClipped()"""
        return bool()
    def itemTransform(_other, _ok):
        """QTransform QGraphicsItem.itemTransform(QGraphicsItem _other, bool _ok)"""
        return QTransform()
    def setOpacity(_opacity):
        """None QGraphicsItem.setOpacity(float _opacity)"""
        return None
    def effectiveOpacity():
        """float QGraphicsItem.effectiveOpacity()"""
        return float()
    def opacity():
        """float QGraphicsItem.opacity()"""
        return float()
    def isUnderMouse():
        """bool QGraphicsItem.isUnderMouse()"""
        return bool()
    def commonAncestorItem(_other):
        """QGraphicsItem QGraphicsItem.commonAncestorItem(QGraphicsItem _other)"""
        return QGraphicsItem()
    def scroll(_dx, _dy, _rect):
        """None QGraphicsItem.scroll(float _dx, float _dy, QRectF _rect)"""
        return None
    def setBoundingRegionGranularity(_granularity):
        """None QGraphicsItem.setBoundingRegionGranularity(float _granularity)"""
        return None
    def boundingRegionGranularity():
        """float QGraphicsItem.boundingRegionGranularity()"""
        return float()
    def boundingRegion(_itemToDeviceTransform):
        """QRegion QGraphicsItem.boundingRegion(QTransform _itemToDeviceTransform)"""
        return QRegion()
    def ungrabKeyboard():
        """None QGraphicsItem.ungrabKeyboard()"""
        return None
    def grabKeyboard():
        """None QGraphicsItem.grabKeyboard()"""
        return None
    def ungrabMouse():
        """None QGraphicsItem.ungrabMouse()"""
        return None
    def grabMouse():
        """None QGraphicsItem.grabMouse()"""
        return None
    def setAcceptHoverEvents(_enabled):
        """None QGraphicsItem.setAcceptHoverEvents(bool _enabled)"""
        return None
    def acceptHoverEvents():
        """bool QGraphicsItem.acceptHoverEvents()"""
        return bool()
    def isVisibleTo(_parent):
        """bool QGraphicsItem.isVisibleTo(QGraphicsItem _parent)"""
        return bool()
    def setCacheMode(_mode, _logicalCacheSize):
        """None QGraphicsItem.setCacheMode(QGraphicsItem.CacheMode _mode, QSize _logicalCacheSize)"""
        return None
    def cacheMode():
        """QGraphicsItem.CacheMode QGraphicsItem.cacheMode()"""
        return QGraphicsItem.CacheMode()
    def isWindow():
        """bool QGraphicsItem.isWindow()"""
        return bool()
    def isWidget():
        """bool QGraphicsItem.isWidget()"""
        return bool()
    def childItems():
        """list-of-QGraphicsItem QGraphicsItem.childItems()"""
        return [QGraphicsItem()]
    def window():
        """QGraphicsWidget QGraphicsItem.window()"""
        return QGraphicsWidget()
    def topLevelWidget():
        """QGraphicsWidget QGraphicsItem.topLevelWidget()"""
        return QGraphicsWidget()
    def parentWidget():
        """QGraphicsWidget QGraphicsItem.parentWidget()"""
        return QGraphicsWidget()
    def resetTransform():
        """None QGraphicsItem.resetTransform()"""
        return None
    def setTransform(_matrix, _combine):
        """None QGraphicsItem.setTransform(QTransform _matrix, bool _combine)"""
        return None
    def deviceTransform(_viewportTransform):
        """QTransform QGraphicsItem.deviceTransform(QTransform _viewportTransform)"""
        return QTransform()
    def sceneTransform():
        """QTransform QGraphicsItem.sceneTransform()"""
        return QTransform()
    def transform():
        """QTransform QGraphicsItem.transform()"""
        return QTransform()
    def wheelEvent(_event):
        """None QGraphicsItem.wheelEvent(QGraphicsSceneWheelEvent _event)"""
        return None
    def sceneEventFilter(_watched, _event):
        """bool QGraphicsItem.sceneEventFilter(QGraphicsItem _watched, QEvent _event)"""
        return bool()
    def sceneEvent(_event):
        """bool QGraphicsItem.sceneEvent(QEvent _event)"""
        return bool()
    def prepareGeometryChange():
        """None QGraphicsItem.prepareGeometryChange()"""
        return None
    def mouseReleaseEvent(_event):
        """None QGraphicsItem.mouseReleaseEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mousePressEvent(_event):
        """None QGraphicsItem.mousePressEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseMoveEvent(_event):
        """None QGraphicsItem.mouseMoveEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseDoubleClickEvent(_event):
        """None QGraphicsItem.mouseDoubleClickEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def keyReleaseEvent(_event):
        """None QGraphicsItem.keyReleaseEvent(QKeyEvent _event)"""
        return None
    def keyPressEvent(_event):
        """None QGraphicsItem.keyPressEvent(QKeyEvent _event)"""
        return None
    def itemChange(_change, _value):
        """QVariant QGraphicsItem.itemChange(QGraphicsItem.GraphicsItemChange _change, QVariant _value)"""
        return QVariant()
    def inputMethodQuery(_query):
        """QVariant QGraphicsItem.inputMethodQuery(Qt.InputMethodQuery _query)"""
        return QVariant()
    def inputMethodEvent(_event):
        """None QGraphicsItem.inputMethodEvent(QInputMethodEvent _event)"""
        return None
    def hoverMoveEvent(_event):
        """None QGraphicsItem.hoverMoveEvent(QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverLeaveEvent(_event):
        """None QGraphicsItem.hoverLeaveEvent(QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverEnterEvent(_event):
        """None QGraphicsItem.hoverEnterEvent(QGraphicsSceneHoverEvent _event)"""
        return None
    def focusOutEvent(_event):
        """None QGraphicsItem.focusOutEvent(QFocusEvent _event)"""
        return None
    def focusInEvent(_event):
        """None QGraphicsItem.focusInEvent(QFocusEvent _event)"""
        return None
    def dropEvent(_event):
        """None QGraphicsItem.dropEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragMoveEvent(_event):
        """None QGraphicsItem.dragMoveEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragLeaveEvent(_event):
        """None QGraphicsItem.dragLeaveEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragEnterEvent(_event):
        """None QGraphicsItem.dragEnterEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def contextMenuEvent(_event):
        """None QGraphicsItem.contextMenuEvent(QGraphicsSceneContextMenuEvent _event)"""
        return None
    def removeSceneEventFilter(_filterItem):
        """None QGraphicsItem.removeSceneEventFilter(QGraphicsItem _filterItem)"""
        return None
    def installSceneEventFilter(_filterItem):
        """None QGraphicsItem.installSceneEventFilter(QGraphicsItem _filterItem)"""
        return None
    def type():
        """int QGraphicsItem.type()"""
        return int()
    def setData(_key, _value):
        """None QGraphicsItem.setData(int _key, QVariant _value)"""
        return None
    def data(_key):
        """QVariant QGraphicsItem.data(int _key)"""
        return QVariant()
    def isAncestorOf(_child):
        """bool QGraphicsItem.isAncestorOf(QGraphicsItem _child)"""
        return bool()
    def mapFromScene(_point):
        """QPointF QGraphicsItem.mapFromScene(QPointF _point)"""
        return QPointF()
    def mapFromScene(_rect):
        """QPolygonF QGraphicsItem.mapFromScene(QRectF _rect)"""
        return QPolygonF()
    def mapFromScene(_polygon):
        """QPolygonF QGraphicsItem.mapFromScene(QPolygonF _polygon)"""
        return QPolygonF()
    def mapFromScene(_path):
        """QPainterPath QGraphicsItem.mapFromScene(QPainterPath _path)"""
        return QPainterPath()
    def mapFromScene(_ax, _ay):
        """QPointF QGraphicsItem.mapFromScene(float _ax, float _ay)"""
        return QPointF()
    def mapFromScene(_ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapFromScene(float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def mapFromParent(_point):
        """QPointF QGraphicsItem.mapFromParent(QPointF _point)"""
        return QPointF()
    def mapFromParent(_rect):
        """QPolygonF QGraphicsItem.mapFromParent(QRectF _rect)"""
        return QPolygonF()
    def mapFromParent(_polygon):
        """QPolygonF QGraphicsItem.mapFromParent(QPolygonF _polygon)"""
        return QPolygonF()
    def mapFromParent(_path):
        """QPainterPath QGraphicsItem.mapFromParent(QPainterPath _path)"""
        return QPainterPath()
    def mapFromParent(_ax, _ay):
        """QPointF QGraphicsItem.mapFromParent(float _ax, float _ay)"""
        return QPointF()
    def mapFromParent(_ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapFromParent(float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def mapFromItem(_item, _point):
        """QPointF QGraphicsItem.mapFromItem(QGraphicsItem _item, QPointF _point)"""
        return QPointF()
    def mapFromItem(_item, _rect):
        """QPolygonF QGraphicsItem.mapFromItem(QGraphicsItem _item, QRectF _rect)"""
        return QPolygonF()
    def mapFromItem(_item, _polygon):
        """QPolygonF QGraphicsItem.mapFromItem(QGraphicsItem _item, QPolygonF _polygon)"""
        return QPolygonF()
    def mapFromItem(_item, _path):
        """QPainterPath QGraphicsItem.mapFromItem(QGraphicsItem _item, QPainterPath _path)"""
        return QPainterPath()
    def mapFromItem(_item, _ax, _ay):
        """QPointF QGraphicsItem.mapFromItem(QGraphicsItem _item, float _ax, float _ay)"""
        return QPointF()
    def mapFromItem(_item, _ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapFromItem(QGraphicsItem _item, float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def mapToScene(_point):
        """QPointF QGraphicsItem.mapToScene(QPointF _point)"""
        return QPointF()
    def mapToScene(_rect):
        """QPolygonF QGraphicsItem.mapToScene(QRectF _rect)"""
        return QPolygonF()
    def mapToScene(_polygon):
        """QPolygonF QGraphicsItem.mapToScene(QPolygonF _polygon)"""
        return QPolygonF()
    def mapToScene(_path):
        """QPainterPath QGraphicsItem.mapToScene(QPainterPath _path)"""
        return QPainterPath()
    def mapToScene(_ax, _ay):
        """QPointF QGraphicsItem.mapToScene(float _ax, float _ay)"""
        return QPointF()
    def mapToScene(_ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapToScene(float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def mapToParent(_point):
        """QPointF QGraphicsItem.mapToParent(QPointF _point)"""
        return QPointF()
    def mapToParent(_rect):
        """QPolygonF QGraphicsItem.mapToParent(QRectF _rect)"""
        return QPolygonF()
    def mapToParent(_polygon):
        """QPolygonF QGraphicsItem.mapToParent(QPolygonF _polygon)"""
        return QPolygonF()
    def mapToParent(_path):
        """QPainterPath QGraphicsItem.mapToParent(QPainterPath _path)"""
        return QPainterPath()
    def mapToParent(_ax, _ay):
        """QPointF QGraphicsItem.mapToParent(float _ax, float _ay)"""
        return QPointF()
    def mapToParent(_ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapToParent(float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def mapToItem(_item, _point):
        """QPointF QGraphicsItem.mapToItem(QGraphicsItem _item, QPointF _point)"""
        return QPointF()
    def mapToItem(_item, _rect):
        """QPolygonF QGraphicsItem.mapToItem(QGraphicsItem _item, QRectF _rect)"""
        return QPolygonF()
    def mapToItem(_item, _polygon):
        """QPolygonF QGraphicsItem.mapToItem(QGraphicsItem _item, QPolygonF _polygon)"""
        return QPolygonF()
    def mapToItem(_item, _path):
        """QPainterPath QGraphicsItem.mapToItem(QGraphicsItem _item, QPainterPath _path)"""
        return QPainterPath()
    def mapToItem(_item, _ax, _ay):
        """QPointF QGraphicsItem.mapToItem(QGraphicsItem _item, float _ax, float _ay)"""
        return QPointF()
    def mapToItem(_item, _ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapToItem(QGraphicsItem _item, float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def update(_rect):
        """None QGraphicsItem.update(QRectF _rect)"""
        return None
    def update(_ax, _ay, _width, _height):
        """None QGraphicsItem.update(float _ax, float _ay, float _width, float _height)"""
        return None
    def paint(_painter, _option, _widget):
        """abstract None QGraphicsItem.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def opaqueArea():
        """QPainterPath QGraphicsItem.opaqueArea()"""
        return QPainterPath()
    def isObscuredBy(_item):
        """bool QGraphicsItem.isObscuredBy(QGraphicsItem _item)"""
        return bool()
    def isObscured():
        """bool QGraphicsItem.isObscured()"""
        return bool()
    def isObscured(_rect):
        """bool QGraphicsItem.isObscured(QRectF _rect)"""
        return bool()
    def isObscured(_ax, _ay, _w, _h):
        """bool QGraphicsItem.isObscured(float _ax, float _ay, float _w, float _h)"""
        return bool()
    def collidingItems(_mode):
        """list-of-QGraphicsItem QGraphicsItem.collidingItems(Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def collidesWithPath(_path, _mode):
        """bool QGraphicsItem.collidesWithPath(QPainterPath _path, Qt.ItemSelectionMode _mode)"""
        return bool()
    def collidesWithItem(_other, _mode):
        """bool QGraphicsItem.collidesWithItem(QGraphicsItem _other, Qt.ItemSelectionMode _mode)"""
        return bool()
    def contains(_point):
        """bool QGraphicsItem.contains(QPointF _point)"""
        return bool()
    def shape():
        """QPainterPath QGraphicsItem.shape()"""
        return QPainterPath()
    def sceneBoundingRect():
        """QRectF QGraphicsItem.sceneBoundingRect()"""
        return QRectF()
    def childrenBoundingRect():
        """QRectF QGraphicsItem.childrenBoundingRect()"""
        return QRectF()
    def boundingRect():
        """abstract QRectF QGraphicsItem.boundingRect()"""
        return QRectF()
    def setZValue(_z):
        """None QGraphicsItem.setZValue(float _z)"""
        return None
    def zValue():
        """float QGraphicsItem.zValue()"""
        return float()
    def advance(_phase):
        """None QGraphicsItem.advance(int _phase)"""
        return None
    def translate(_dx, _dy):
        """None QGraphicsItem.translate(float _dx, float _dy)"""
        return None
    def shear(_sh, _sv):
        """None QGraphicsItem.shear(float _sh, float _sv)"""
        return None
    def scale(_sx, _sy):
        """None QGraphicsItem.scale(float _sx, float _sy)"""
        return None
    def scale():
        """float QGraphicsItem.scale()"""
        return float()
    def rotate(_angle):
        """None QGraphicsItem.rotate(float _angle)"""
        return None
    def resetMatrix():
        """None QGraphicsItem.resetMatrix()"""
        return None
    def setMatrix(_matrix, _combine):
        """None QGraphicsItem.setMatrix(QMatrix _matrix, bool _combine)"""
        return None
    def sceneMatrix():
        """QMatrix QGraphicsItem.sceneMatrix()"""
        return QMatrix()
    def matrix():
        """QMatrix QGraphicsItem.matrix()"""
        return QMatrix()
    def ensureVisible(_rect, _xMargin, _yMargin):
        """None QGraphicsItem.ensureVisible(QRectF _rect, int _xMargin, int _yMargin)"""
        return None
    def ensureVisible(_x, _y, _w, _h, _xMargin, _yMargin):
        """None QGraphicsItem.ensureVisible(float _x, float _y, float _w, float _h, int _xMargin, int _yMargin)"""
        return None
    def moveBy(_dx, _dy):
        """None QGraphicsItem.moveBy(float _dx, float _dy)"""
        return None
    def setPos(_pos):
        """None QGraphicsItem.setPos(QPointF _pos)"""
        return None
    def setPos(_ax, _ay):
        """None QGraphicsItem.setPos(float _ax, float _ay)"""
        return None
    def scenePos():
        """QPointF QGraphicsItem.scenePos()"""
        return QPointF()
    def y():
        """float QGraphicsItem.y()"""
        return float()
    def x():
        """float QGraphicsItem.x()"""
        return float()
    def pos():
        """QPointF QGraphicsItem.pos()"""
        return QPointF()
    def clearFocus():
        """None QGraphicsItem.clearFocus()"""
        return None
    def setFocus(_focusReason):
        """None QGraphicsItem.setFocus(Qt.FocusReason _focusReason)"""
        return None
    def hasFocus():
        """bool QGraphicsItem.hasFocus()"""
        return bool()
    def setHandlesChildEvents(_enabled):
        """None QGraphicsItem.setHandlesChildEvents(bool _enabled)"""
        return None
    def handlesChildEvents():
        """bool QGraphicsItem.handlesChildEvents()"""
        return bool()
    def setAcceptsHoverEvents(_enabled):
        """None QGraphicsItem.setAcceptsHoverEvents(bool _enabled)"""
        return None
    def acceptsHoverEvents():
        """bool QGraphicsItem.acceptsHoverEvents()"""
        return bool()
    def setAcceptedMouseButtons(_buttons):
        """None QGraphicsItem.setAcceptedMouseButtons(Qt.MouseButtons _buttons)"""
        return None
    def acceptedMouseButtons():
        """Qt.MouseButtons QGraphicsItem.acceptedMouseButtons()"""
        return Qt.MouseButtons()
    def setAcceptDrops(_on):
        """None QGraphicsItem.setAcceptDrops(bool _on)"""
        return None
    def acceptDrops():
        """bool QGraphicsItem.acceptDrops()"""
        return bool()
    def setSelected(_selected):
        """None QGraphicsItem.setSelected(bool _selected)"""
        return None
    def isSelected():
        """bool QGraphicsItem.isSelected()"""
        return bool()
    def setEnabled(_enabled):
        """None QGraphicsItem.setEnabled(bool _enabled)"""
        return None
    def isEnabled():
        """bool QGraphicsItem.isEnabled()"""
        return bool()
    def show():
        """None QGraphicsItem.show()"""
        return None
    def hide():
        """None QGraphicsItem.hide()"""
        return None
    def setVisible(_visible):
        """None QGraphicsItem.setVisible(bool _visible)"""
        return None
    def isVisible():
        """bool QGraphicsItem.isVisible()"""
        return bool()
    def unsetCursor():
        """None QGraphicsItem.unsetCursor()"""
        return None
    def hasCursor():
        """bool QGraphicsItem.hasCursor()"""
        return bool()
    def setCursor(_cursor):
        """None QGraphicsItem.setCursor(QCursor _cursor)"""
        return None
    def cursor():
        """QCursor QGraphicsItem.cursor()"""
        return QCursor()
    def setToolTip(_toolTip):
        """None QGraphicsItem.setToolTip(QString _toolTip)"""
        return None
    def toolTip():
        """QString QGraphicsItem.toolTip()"""
        return QString()
    def setFlags(_flags):
        """None QGraphicsItem.setFlags(QGraphicsItem.GraphicsItemFlags _flags)"""
        return None
    def setFlag(_flag, _enabled):
        """None QGraphicsItem.setFlag(QGraphicsItem.GraphicsItemFlag _flag, bool _enabled)"""
        return None
    def flags():
        """QGraphicsItem.GraphicsItemFlags QGraphicsItem.flags()"""
        return QGraphicsItem.GraphicsItemFlags()
    def setGroup(_group):
        """None QGraphicsItem.setGroup(QGraphicsItemGroup _group)"""
        return None
    def group():
        """QGraphicsItemGroup QGraphicsItem.group()"""
        return QGraphicsItemGroup()
    def setParentItem(_parent):
        """None QGraphicsItem.setParentItem(QGraphicsItem _parent)"""
        return None
    def topLevelItem():
        """QGraphicsItem QGraphicsItem.topLevelItem()"""
        return QGraphicsItem()
    def parentItem():
        """QGraphicsItem QGraphicsItem.parentItem()"""
        return QGraphicsItem()
    def scene():
        """QGraphicsScene QGraphicsItem.scene()"""
        return QGraphicsScene()


class QAbstractGraphicsShapeItem(QGraphicsItem):
    """"""
    def __init__(_parent, _scene):
        """None QAbstractGraphicsShapeItem.__init__(QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def opaqueArea():
        """QPainterPath QAbstractGraphicsShapeItem.opaqueArea()"""
        return QPainterPath()
    def isObscuredBy(_item):
        """bool QAbstractGraphicsShapeItem.isObscuredBy(QGraphicsItem _item)"""
        return bool()
    def setBrush(_brush):
        """None QAbstractGraphicsShapeItem.setBrush(QBrush _brush)"""
        return None
    def brush():
        """QBrush QAbstractGraphicsShapeItem.brush()"""
        return QBrush()
    def setPen(_pen):
        """None QAbstractGraphicsShapeItem.setPen(QPen _pen)"""
        return None
    def pen():
        """QPen QAbstractGraphicsShapeItem.pen()"""
        return QPen()


class QGraphicsPathItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(_parent, _scene):
        """None QGraphicsPathItem.__init__(QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(_path, _parent, _scene):
        """None QGraphicsPathItem.__init__(QPainterPath _path, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type():
        """int QGraphicsPathItem.type()"""
        return int()
    def opaqueArea():
        """QPainterPath QGraphicsPathItem.opaqueArea()"""
        return QPainterPath()
    def isObscuredBy(_item):
        """bool QGraphicsPathItem.isObscuredBy(QGraphicsItem _item)"""
        return bool()
    def paint(_painter, _option, _widget):
        """None QGraphicsPathItem.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(_point):
        """bool QGraphicsPathItem.contains(QPointF _point)"""
        return bool()
    def shape():
        """QPainterPath QGraphicsPathItem.shape()"""
        return QPainterPath()
    def boundingRect():
        """QRectF QGraphicsPathItem.boundingRect()"""
        return QRectF()
    def setPath(_path):
        """None QGraphicsPathItem.setPath(QPainterPath _path)"""
        return None
    def path():
        """QPainterPath QGraphicsPathItem.path()"""
        return QPainterPath()


class QGraphicsRectItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(_parent, _scene):
        """None QGraphicsRectItem.__init__(QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(_rect, _parent, _scene):
        """None QGraphicsRectItem.__init__(QRectF _rect, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(_x, _y, _w, _h, _parent, _scene):
        """None QGraphicsRectItem.__init__(float _x, float _y, float _w, float _h, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type():
        """int QGraphicsRectItem.type()"""
        return int()
    def opaqueArea():
        """QPainterPath QGraphicsRectItem.opaqueArea()"""
        return QPainterPath()
    def isObscuredBy(_item):
        """bool QGraphicsRectItem.isObscuredBy(QGraphicsItem _item)"""
        return bool()
    def paint(_painter, _option, _widget):
        """None QGraphicsRectItem.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(_point):
        """bool QGraphicsRectItem.contains(QPointF _point)"""
        return bool()
    def shape():
        """QPainterPath QGraphicsRectItem.shape()"""
        return QPainterPath()
    def boundingRect():
        """QRectF QGraphicsRectItem.boundingRect()"""
        return QRectF()
    def setRect(_rect):
        """None QGraphicsRectItem.setRect(QRectF _rect)"""
        return None
    def setRect(_ax, _ay, _w, _h):
        """None QGraphicsRectItem.setRect(float _ax, float _ay, float _w, float _h)"""
        return None
    def rect():
        """QRectF QGraphicsRectItem.rect()"""
        return QRectF()


class QGraphicsEllipseItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(_parent, _scene):
        """None QGraphicsEllipseItem.__init__(QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(_rect, _parent, _scene):
        """None QGraphicsEllipseItem.__init__(QRectF _rect, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(_x, _y, _w, _h, _parent, _scene):
        """None QGraphicsEllipseItem.__init__(float _x, float _y, float _w, float _h, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type():
        """int QGraphicsEllipseItem.type()"""
        return int()
    def opaqueArea():
        """QPainterPath QGraphicsEllipseItem.opaqueArea()"""
        return QPainterPath()
    def isObscuredBy(_item):
        """bool QGraphicsEllipseItem.isObscuredBy(QGraphicsItem _item)"""
        return bool()
    def paint(_painter, _option, _widget):
        """None QGraphicsEllipseItem.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(_point):
        """bool QGraphicsEllipseItem.contains(QPointF _point)"""
        return bool()
    def shape():
        """QPainterPath QGraphicsEllipseItem.shape()"""
        return QPainterPath()
    def boundingRect():
        """QRectF QGraphicsEllipseItem.boundingRect()"""
        return QRectF()
    def setSpanAngle(_angle):
        """None QGraphicsEllipseItem.setSpanAngle(int _angle)"""
        return None
    def spanAngle():
        """int QGraphicsEllipseItem.spanAngle()"""
        return int()
    def setStartAngle(_angle):
        """None QGraphicsEllipseItem.setStartAngle(int _angle)"""
        return None
    def startAngle():
        """int QGraphicsEllipseItem.startAngle()"""
        return int()
    def setRect(_rect):
        """None QGraphicsEllipseItem.setRect(QRectF _rect)"""
        return None
    def setRect(_ax, _ay, _w, _h):
        """None QGraphicsEllipseItem.setRect(float _ax, float _ay, float _w, float _h)"""
        return None
    def rect():
        """QRectF QGraphicsEllipseItem.rect()"""
        return QRectF()


class QGraphicsPolygonItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(_parent, _scene):
        """None QGraphicsPolygonItem.__init__(QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(_polygon, _parent, _scene):
        """None QGraphicsPolygonItem.__init__(QPolygonF _polygon, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type():
        """int QGraphicsPolygonItem.type()"""
        return int()
    def opaqueArea():
        """QPainterPath QGraphicsPolygonItem.opaqueArea()"""
        return QPainterPath()
    def isObscuredBy(_item):
        """bool QGraphicsPolygonItem.isObscuredBy(QGraphicsItem _item)"""
        return bool()
    def paint(_painter, _option, _widget):
        """None QGraphicsPolygonItem.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(_point):
        """bool QGraphicsPolygonItem.contains(QPointF _point)"""
        return bool()
    def shape():
        """QPainterPath QGraphicsPolygonItem.shape()"""
        return QPainterPath()
    def boundingRect():
        """QRectF QGraphicsPolygonItem.boundingRect()"""
        return QRectF()
    def setFillRule(_rule):
        """None QGraphicsPolygonItem.setFillRule(Qt.FillRule _rule)"""
        return None
    def fillRule():
        """Qt.FillRule QGraphicsPolygonItem.fillRule()"""
        return Qt.FillRule()
    def setPolygon(_polygon):
        """None QGraphicsPolygonItem.setPolygon(QPolygonF _polygon)"""
        return None
    def polygon():
        """QPolygonF QGraphicsPolygonItem.polygon()"""
        return QPolygonF()


class QGraphicsLineItem(QGraphicsItem):
    """"""
    def __init__(_parent, _scene):
        """None QGraphicsLineItem.__init__(QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(_line, _parent, _scene):
        """None QGraphicsLineItem.__init__(QLineF _line, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(_x1, _y1, _x2, _y2, _parent, _scene):
        """None QGraphicsLineItem.__init__(float _x1, float _y1, float _x2, float _y2, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type():
        """int QGraphicsLineItem.type()"""
        return int()
    def opaqueArea():
        """QPainterPath QGraphicsLineItem.opaqueArea()"""
        return QPainterPath()
    def isObscuredBy(_item):
        """bool QGraphicsLineItem.isObscuredBy(QGraphicsItem _item)"""
        return bool()
    def paint(_painter, _option, _widget):
        """None QGraphicsLineItem.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(_point):
        """bool QGraphicsLineItem.contains(QPointF _point)"""
        return bool()
    def shape():
        """QPainterPath QGraphicsLineItem.shape()"""
        return QPainterPath()
    def boundingRect():
        """QRectF QGraphicsLineItem.boundingRect()"""
        return QRectF()
    def setLine(_line):
        """None QGraphicsLineItem.setLine(QLineF _line)"""
        return None
    def setLine(_x1, _y1, _x2, _y2):
        """None QGraphicsLineItem.setLine(float _x1, float _y1, float _x2, float _y2)"""
        return None
    def line():
        """QLineF QGraphicsLineItem.line()"""
        return QLineF()
    def setPen(_pen):
        """None QGraphicsLineItem.setPen(QPen _pen)"""
        return None
    def pen():
        """QPen QGraphicsLineItem.pen()"""
        return QPen()


class QGraphicsPixmapItem(QGraphicsItem):
    """"""
    MaskShape = int() # QGraphicsPixmapItem.ShapeMode enum
    BoundingRectShape = int() # QGraphicsPixmapItem.ShapeMode enum
    HeuristicMaskShape = int() # QGraphicsPixmapItem.ShapeMode enum

    def __init__(_parent, _scene):
        """None QGraphicsPixmapItem.__init__(QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(_pixmap, _parent, _scene):
        """None QGraphicsPixmapItem.__init__(QPixmap _pixmap, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def setShapeMode(_mode):
        """None QGraphicsPixmapItem.setShapeMode(QGraphicsPixmapItem.ShapeMode _mode)"""
        return None
    def shapeMode():
        """QGraphicsPixmapItem.ShapeMode QGraphicsPixmapItem.shapeMode()"""
        return QGraphicsPixmapItem.ShapeMode()
    def type():
        """int QGraphicsPixmapItem.type()"""
        return int()
    def opaqueArea():
        """QPainterPath QGraphicsPixmapItem.opaqueArea()"""
        return QPainterPath()
    def isObscuredBy(_item):
        """bool QGraphicsPixmapItem.isObscuredBy(QGraphicsItem _item)"""
        return bool()
    def paint(_painter, _option, _widget):
        """None QGraphicsPixmapItem.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(_point):
        """bool QGraphicsPixmapItem.contains(QPointF _point)"""
        return bool()
    def shape():
        """QPainterPath QGraphicsPixmapItem.shape()"""
        return QPainterPath()
    def boundingRect():
        """QRectF QGraphicsPixmapItem.boundingRect()"""
        return QRectF()
    def setOffset(_offset):
        """None QGraphicsPixmapItem.setOffset(QPointF _offset)"""
        return None
    def setOffset(_ax, _ay):
        """None QGraphicsPixmapItem.setOffset(float _ax, float _ay)"""
        return None
    def offset():
        """QPointF QGraphicsPixmapItem.offset()"""
        return QPointF()
    def setTransformationMode(_mode):
        """None QGraphicsPixmapItem.setTransformationMode(Qt.TransformationMode _mode)"""
        return None
    def transformationMode():
        """Qt.TransformationMode QGraphicsPixmapItem.transformationMode()"""
        return Qt.TransformationMode()
    def setPixmap(_pixmap):
        """None QGraphicsPixmapItem.setPixmap(QPixmap _pixmap)"""
        return None
    def pixmap():
        """QPixmap QGraphicsPixmapItem.pixmap()"""
        return QPixmap()


class QGraphicsSimpleTextItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(_parent, _scene):
        """None QGraphicsSimpleTextItem.__init__(QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(_text, _parent, _scene):
        """None QGraphicsSimpleTextItem.__init__(QString _text, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type():
        """int QGraphicsSimpleTextItem.type()"""
        return int()
    def opaqueArea():
        """QPainterPath QGraphicsSimpleTextItem.opaqueArea()"""
        return QPainterPath()
    def isObscuredBy(_item):
        """bool QGraphicsSimpleTextItem.isObscuredBy(QGraphicsItem _item)"""
        return bool()
    def paint(_painter, _option, _widget):
        """None QGraphicsSimpleTextItem.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(_point):
        """bool QGraphicsSimpleTextItem.contains(QPointF _point)"""
        return bool()
    def shape():
        """QPainterPath QGraphicsSimpleTextItem.shape()"""
        return QPainterPath()
    def boundingRect():
        """QRectF QGraphicsSimpleTextItem.boundingRect()"""
        return QRectF()
    def font():
        """QFont QGraphicsSimpleTextItem.font()"""
        return QFont()
    def setFont(_font):
        """None QGraphicsSimpleTextItem.setFont(QFont _font)"""
        return None
    def text():
        """QString QGraphicsSimpleTextItem.text()"""
        return QString()
    def setText(_text):
        """None QGraphicsSimpleTextItem.setText(QString _text)"""
        return None


class QGraphicsItemGroup(QGraphicsItem):
    """"""
    def __init__(_parent, _scene):
        """None QGraphicsItemGroup.__init__(QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type():
        """int QGraphicsItemGroup.type()"""
        return int()
    def opaqueArea():
        """QPainterPath QGraphicsItemGroup.opaqueArea()"""
        return QPainterPath()
    def isObscuredBy(_item):
        """bool QGraphicsItemGroup.isObscuredBy(QGraphicsItem _item)"""
        return bool()
    def paint(_painter, _option, _widget):
        """None QGraphicsItemGroup.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def boundingRect():
        """QRectF QGraphicsItemGroup.boundingRect()"""
        return QRectF()
    def removeFromGroup(_item):
        """None QGraphicsItemGroup.removeFromGroup(QGraphicsItem _item)"""
        return None
    def addToGroup(_item):
        """None QGraphicsItemGroup.addToGroup(QGraphicsItem _item)"""
        return None


class QGraphicsObject(QObject, QGraphicsItem):
    """"""
    def __init__(_parent):
        """None QGraphicsObject.__init__(QGraphicsItem _parent)"""
        return None
    def updateMicroFocus():
        """None QGraphicsObject.updateMicroFocus()"""
        return None
    def ungrabGesture(_type):
        """None QGraphicsObject.ungrabGesture(Qt.GestureType _type)"""
        return None
    def grabGesture(_type, _flags):
        """None QGraphicsObject.grabGesture(Qt.GestureType _type, Qt.GestureFlags _flags)"""
        return None


class QGraphicsTextItem(QGraphicsObject):
    """"""
    def __init__(_parent, _scene):
        """None QGraphicsTextItem.__init__(QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(_text, _parent, _scene):
        """None QGraphicsTextItem.__init__(QString _text, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def inputMethodQuery(_query):
        """QVariant QGraphicsTextItem.inputMethodQuery(Qt.InputMethodQuery _query)"""
        return QVariant()
    def hoverLeaveEvent(_event):
        """None QGraphicsTextItem.hoverLeaveEvent(QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverMoveEvent(_event):
        """None QGraphicsTextItem.hoverMoveEvent(QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverEnterEvent(_event):
        """None QGraphicsTextItem.hoverEnterEvent(QGraphicsSceneHoverEvent _event)"""
        return None
    def inputMethodEvent(_event):
        """None QGraphicsTextItem.inputMethodEvent(QInputMethodEvent _event)"""
        return None
    def dropEvent(_event):
        """None QGraphicsTextItem.dropEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragMoveEvent(_event):
        """None QGraphicsTextItem.dragMoveEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragLeaveEvent(_event):
        """None QGraphicsTextItem.dragLeaveEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragEnterEvent(_event):
        """None QGraphicsTextItem.dragEnterEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def focusOutEvent(_event):
        """None QGraphicsTextItem.focusOutEvent(QFocusEvent _event)"""
        return None
    def focusInEvent(_event):
        """None QGraphicsTextItem.focusInEvent(QFocusEvent _event)"""
        return None
    def keyReleaseEvent(_event):
        """None QGraphicsTextItem.keyReleaseEvent(QKeyEvent _event)"""
        return None
    def keyPressEvent(_event):
        """None QGraphicsTextItem.keyPressEvent(QKeyEvent _event)"""
        return None
    def contextMenuEvent(_event):
        """None QGraphicsTextItem.contextMenuEvent(QGraphicsSceneContextMenuEvent _event)"""
        return None
    def mouseDoubleClickEvent(_event):
        """None QGraphicsTextItem.mouseDoubleClickEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseReleaseEvent(_event):
        """None QGraphicsTextItem.mouseReleaseEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseMoveEvent(_event):
        """None QGraphicsTextItem.mouseMoveEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mousePressEvent(_event):
        """None QGraphicsTextItem.mousePressEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def sceneEvent(_event):
        """bool QGraphicsTextItem.sceneEvent(QEvent _event)"""
        return bool()
    def textCursor():
        """QTextCursor QGraphicsTextItem.textCursor()"""
        return QTextCursor()
    def setTextCursor(_cursor):
        """None QGraphicsTextItem.setTextCursor(QTextCursor _cursor)"""
        return None
    def openExternalLinks():
        """bool QGraphicsTextItem.openExternalLinks()"""
        return bool()
    def setOpenExternalLinks(_open):
        """None QGraphicsTextItem.setOpenExternalLinks(bool _open)"""
        return None
    def tabChangesFocus():
        """bool QGraphicsTextItem.tabChangesFocus()"""
        return bool()
    def setTabChangesFocus(_b):
        """None QGraphicsTextItem.setTabChangesFocus(bool _b)"""
        return None
    def textInteractionFlags():
        """Qt.TextInteractionFlags QGraphicsTextItem.textInteractionFlags()"""
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(_flags):
        """None QGraphicsTextItem.setTextInteractionFlags(Qt.TextInteractionFlags _flags)"""
        return None
    def document():
        """QTextDocument QGraphicsTextItem.document()"""
        return QTextDocument()
    def setDocument(_document):
        """None QGraphicsTextItem.setDocument(QTextDocument _document)"""
        return None
    def adjustSize():
        """None QGraphicsTextItem.adjustSize()"""
        return None
    def textWidth():
        """float QGraphicsTextItem.textWidth()"""
        return float()
    def setTextWidth(_width):
        """None QGraphicsTextItem.setTextWidth(float _width)"""
        return None
    def type():
        """int QGraphicsTextItem.type()"""
        return int()
    def opaqueArea():
        """QPainterPath QGraphicsTextItem.opaqueArea()"""
        return QPainterPath()
    def isObscuredBy(_item):
        """bool QGraphicsTextItem.isObscuredBy(QGraphicsItem _item)"""
        return bool()
    def paint(_painter, _option, _widget):
        """None QGraphicsTextItem.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(_point):
        """bool QGraphicsTextItem.contains(QPointF _point)"""
        return bool()
    def shape():
        """QPainterPath QGraphicsTextItem.shape()"""
        return QPainterPath()
    def boundingRect():
        """QRectF QGraphicsTextItem.boundingRect()"""
        return QRectF()
    def defaultTextColor():
        """QColor QGraphicsTextItem.defaultTextColor()"""
        return QColor()
    def setDefaultTextColor(_c):
        """None QGraphicsTextItem.setDefaultTextColor(QColor _c)"""
        return None
    def setFont(_font):
        """None QGraphicsTextItem.setFont(QFont _font)"""
        return None
    def font():
        """QFont QGraphicsTextItem.font()"""
        return QFont()
    def setPlainText(_text):
        """None QGraphicsTextItem.setPlainText(QString _text)"""
        return None
    def toPlainText():
        """QString QGraphicsTextItem.toPlainText()"""
        return QString()
    def setHtml(_html):
        """None QGraphicsTextItem.setHtml(QString _html)"""
        return None
    def toHtml():
        """QString QGraphicsTextItem.toHtml()"""
        return QString()


class QGraphicsItemAnimation(QObject):
    """"""
    def __init__(_parent):
        """None QGraphicsItemAnimation.__init__(QObject _parent)"""
        return None
    def shearList():
        """list-of-tuple-of-float-QPointF QGraphicsItemAnimation.shearList()"""
        return [tuple-of-float-QPointF()]
    def scaleList():
        """list-of-tuple-of-float-QPointF QGraphicsItemAnimation.scaleList()"""
        return [tuple-of-float-QPointF()]
    def translationList():
        """list-of-tuple-of-float-QPointF QGraphicsItemAnimation.translationList()"""
        return [tuple-of-float-QPointF()]
    def rotationList():
        """list-of-tuple-of-float-float QGraphicsItemAnimation.rotationList()"""
        return [tuple-of-float-float()]
    def posList():
        """list-of-tuple-of-float-QPointF QGraphicsItemAnimation.posList()"""
        return [tuple-of-float-QPointF()]
    def beforeAnimationStep(_step):
        """None QGraphicsItemAnimation.beforeAnimationStep(float _step)"""
        return None
    def afterAnimationStep(_step):
        """None QGraphicsItemAnimation.afterAnimationStep(float _step)"""
        return None
    def setStep(_x):
        """None QGraphicsItemAnimation.setStep(float _x)"""
        return None
    def reset():
        """None QGraphicsItemAnimation.reset()"""
        return None
    def clear():
        """None QGraphicsItemAnimation.clear()"""
        return None
    def setShearAt(_step, _sh, _sv):
        """None QGraphicsItemAnimation.setShearAt(float _step, float _sh, float _sv)"""
        return None
    def horizontalShearAt(_step):
        """float QGraphicsItemAnimation.horizontalShearAt(float _step)"""
        return float()
    def verticalShearAt(_step):
        """float QGraphicsItemAnimation.verticalShearAt(float _step)"""
        return float()
    def setScaleAt(_step, _sx, _sy):
        """None QGraphicsItemAnimation.setScaleAt(float _step, float _sx, float _sy)"""
        return None
    def horizontalScaleAt(_step):
        """float QGraphicsItemAnimation.horizontalScaleAt(float _step)"""
        return float()
    def verticalScaleAt(_step):
        """float QGraphicsItemAnimation.verticalScaleAt(float _step)"""
        return float()
    def setTranslationAt(_step, _dx, _dy):
        """None QGraphicsItemAnimation.setTranslationAt(float _step, float _dx, float _dy)"""
        return None
    def yTranslationAt(_step):
        """float QGraphicsItemAnimation.yTranslationAt(float _step)"""
        return float()
    def xTranslationAt(_step):
        """float QGraphicsItemAnimation.xTranslationAt(float _step)"""
        return float()
    def setRotationAt(_step, _angle):
        """None QGraphicsItemAnimation.setRotationAt(float _step, float _angle)"""
        return None
    def rotationAt(_step):
        """float QGraphicsItemAnimation.rotationAt(float _step)"""
        return float()
    def matrixAt(_step):
        """QMatrix QGraphicsItemAnimation.matrixAt(float _step)"""
        return QMatrix()
    def setPosAt(_step, _pos):
        """None QGraphicsItemAnimation.setPosAt(float _step, QPointF _pos)"""
        return None
    def posAt(_step):
        """QPointF QGraphicsItemAnimation.posAt(float _step)"""
        return QPointF()
    def setTimeLine(_timeLine):
        """None QGraphicsItemAnimation.setTimeLine(QTimeLine _timeLine)"""
        return None
    def timeLine():
        """QTimeLine QGraphicsItemAnimation.timeLine()"""
        return QTimeLine()
    def setItem(_item):
        """None QGraphicsItemAnimation.setItem(QGraphicsItem _item)"""
        return None
    def item():
        """QGraphicsItem QGraphicsItemAnimation.item()"""
        return QGraphicsItem()


class QGraphicsLinearLayout(QGraphicsLayout):
    """"""
    def __init__(_parent):
        """None QGraphicsLinearLayout.__init__(QGraphicsLayoutItem _parent)"""
        return None
    def __init__(_orientation, _parent):
        """None QGraphicsLinearLayout.__init__(Qt.Orientation _orientation, QGraphicsLayoutItem _parent)"""
        return None
    def sizeHint(_which, _constraint):
        """QSizeF QGraphicsLinearLayout.sizeHint(Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def invalidate():
        """None QGraphicsLinearLayout.invalidate()"""
        return None
    def itemAt(_index):
        """QGraphicsLayoutItem QGraphicsLinearLayout.itemAt(int _index)"""
        return QGraphicsLayoutItem()
    def count():
        """int QGraphicsLinearLayout.count()"""
        return int()
    def setGeometry(_rect):
        """None QGraphicsLinearLayout.setGeometry(QRectF _rect)"""
        return None
    def alignment(_item):
        """Qt.Alignment QGraphicsLinearLayout.alignment(QGraphicsLayoutItem _item)"""
        return Qt.Alignment()
    def setAlignment(_item, _alignment):
        """None QGraphicsLinearLayout.setAlignment(QGraphicsLayoutItem _item, Qt.Alignment _alignment)"""
        return None
    def stretchFactor(_item):
        """int QGraphicsLinearLayout.stretchFactor(QGraphicsLayoutItem _item)"""
        return int()
    def setStretchFactor(_item, _stretch):
        """None QGraphicsLinearLayout.setStretchFactor(QGraphicsLayoutItem _item, int _stretch)"""
        return None
    def itemSpacing(_index):
        """float QGraphicsLinearLayout.itemSpacing(int _index)"""
        return float()
    def setItemSpacing(_index, _spacing):
        """None QGraphicsLinearLayout.setItemSpacing(int _index, float _spacing)"""
        return None
    def spacing():
        """float QGraphicsLinearLayout.spacing()"""
        return float()
    def setSpacing(_spacing):
        """None QGraphicsLinearLayout.setSpacing(float _spacing)"""
        return None
    def removeAt(_index):
        """None QGraphicsLinearLayout.removeAt(int _index)"""
        return None
    def removeItem(_item):
        """None QGraphicsLinearLayout.removeItem(QGraphicsLayoutItem _item)"""
        return None
    def insertStretch(_index, _stretch):
        """None QGraphicsLinearLayout.insertStretch(int _index, int _stretch)"""
        return None
    def insertItem(_index, _item):
        """None QGraphicsLinearLayout.insertItem(int _index, QGraphicsLayoutItem _item)"""
        return None
    def addStretch(_stretch):
        """None QGraphicsLinearLayout.addStretch(int _stretch)"""
        return None
    def addItem(_item):
        """None QGraphicsLinearLayout.addItem(QGraphicsLayoutItem _item)"""
        return None
    def orientation():
        """Qt.Orientation QGraphicsLinearLayout.orientation()"""
        return Qt.Orientation()
    def setOrientation(_orientation):
        """None QGraphicsLinearLayout.setOrientation(Qt.Orientation _orientation)"""
        return None


class QGraphicsWidget(QGraphicsObject, QGraphicsLayoutItem):
    """"""
    def __init__(_parent, _flags):
        """None QGraphicsWidget.__init__(QGraphicsItem _parent, Qt.WindowFlags _flags)"""
        return None
    def setAutoFillBackground(_enabled):
        """None QGraphicsWidget.setAutoFillBackground(bool _enabled)"""
        return None
    def autoFillBackground():
        """bool QGraphicsWidget.autoFillBackground()"""
        return bool()
    def ungrabKeyboardEvent(_event):
        """None QGraphicsWidget.ungrabKeyboardEvent(QEvent _event)"""
        return None
    def grabKeyboardEvent(_event):
        """None QGraphicsWidget.grabKeyboardEvent(QEvent _event)"""
        return None
    def ungrabMouseEvent(_event):
        """None QGraphicsWidget.ungrabMouseEvent(QEvent _event)"""
        return None
    def grabMouseEvent(_event):
        """None QGraphicsWidget.grabMouseEvent(QEvent _event)"""
        return None
    def hoverLeaveEvent(_event):
        """None QGraphicsWidget.hoverLeaveEvent(QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverMoveEvent(_event):
        """None QGraphicsWidget.hoverMoveEvent(QGraphicsSceneHoverEvent _event)"""
        return None
    def showEvent(_event):
        """None QGraphicsWidget.showEvent(QShowEvent _event)"""
        return None
    def resizeEvent(_event):
        """None QGraphicsWidget.resizeEvent(QGraphicsSceneResizeEvent _event)"""
        return None
    def polishEvent():
        """None QGraphicsWidget.polishEvent()"""
        return None
    def moveEvent(_event):
        """None QGraphicsWidget.moveEvent(QGraphicsSceneMoveEvent _event)"""
        return None
    def hideEvent(_event):
        """None QGraphicsWidget.hideEvent(QHideEvent _event)"""
        return None
    def focusOutEvent(_event):
        """None QGraphicsWidget.focusOutEvent(QFocusEvent _event)"""
        return None
    def focusNextPrevChild(_next):
        """bool QGraphicsWidget.focusNextPrevChild(bool _next)"""
        return bool()
    def focusInEvent(_event):
        """None QGraphicsWidget.focusInEvent(QFocusEvent _event)"""
        return None
    def closeEvent(_event):
        """None QGraphicsWidget.closeEvent(QCloseEvent _event)"""
        return None
    def changeEvent(_event):
        """None QGraphicsWidget.changeEvent(QEvent _event)"""
        return None
    def event(_event):
        """bool QGraphicsWidget.event(QEvent _event)"""
        return bool()
    def windowFrameSectionAt(_pos):
        """Qt.WindowFrameSection QGraphicsWidget.windowFrameSectionAt(QPointF _pos)"""
        return Qt.WindowFrameSection()
    def windowFrameEvent(_e):
        """bool QGraphicsWidget.windowFrameEvent(QEvent _e)"""
        return bool()
    def sceneEvent(_event):
        """bool QGraphicsWidget.sceneEvent(QEvent _event)"""
        return bool()
    def itemChange(_change, _value):
        """QVariant QGraphicsWidget.itemChange(QGraphicsItem.GraphicsItemChange _change, QVariant _value)"""
        return QVariant()
    def updateGeometry():
        """None QGraphicsWidget.updateGeometry()"""
        return None
    def sizeHint(_which, _constraint):
        """QSizeF QGraphicsWidget.sizeHint(Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def initStyleOption(_option):
        """None QGraphicsWidget.initStyleOption(QStyleOption _option)"""
        return None
    def close():
        """bool QGraphicsWidget.close()"""
        return bool()
    def shape():
        """QPainterPath QGraphicsWidget.shape()"""
        return QPainterPath()
    def boundingRect():
        """QRectF QGraphicsWidget.boundingRect()"""
        return QRectF()
    def paintWindowFrame(_painter, _option, _widget):
        """None QGraphicsWidget.paintWindowFrame(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def paint(_painter, _option, _widget):
        """None QGraphicsWidget.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def type():
        """int QGraphicsWidget.type()"""
        return int()
    def testAttribute(_attribute):
        """bool QGraphicsWidget.testAttribute(Qt.WidgetAttribute _attribute)"""
        return bool()
    def setAttribute(_attribute, _on):
        """None QGraphicsWidget.setAttribute(Qt.WidgetAttribute _attribute, bool _on)"""
        return None
    def actions():
        """list-of-QAction QGraphicsWidget.actions()"""
        return [QAction()]
    def removeAction(_action):
        """None QGraphicsWidget.removeAction(QAction _action)"""
        return None
    def insertActions(_before, _actions):
        """None QGraphicsWidget.insertActions(QAction _before, list-of-QAction _actions)"""
        return None
    def insertAction(_before, _action):
        """None QGraphicsWidget.insertAction(QAction _before, QAction _action)"""
        return None
    def addActions(_actions):
        """None QGraphicsWidget.addActions(list-of-QAction _actions)"""
        return None
    def addAction(_action):
        """None QGraphicsWidget.addAction(QAction _action)"""
        return None
    def setShortcutAutoRepeat(_id, _enabled):
        """None QGraphicsWidget.setShortcutAutoRepeat(int _id, bool _enabled)"""
        return None
    def setShortcutEnabled(_id, _enabled):
        """None QGraphicsWidget.setShortcutEnabled(int _id, bool _enabled)"""
        return None
    def releaseShortcut(_id):
        """None QGraphicsWidget.releaseShortcut(int _id)"""
        return None
    def grabShortcut(_sequence, _context):
        """int QGraphicsWidget.grabShortcut(QKeySequence _sequence, Qt.ShortcutContext _context)"""
        return int()
    def focusWidget():
        """QGraphicsWidget QGraphicsWidget.focusWidget()"""
        return QGraphicsWidget()
    def setTabOrder(_first, _second):
        """None QGraphicsWidget.setTabOrder(QGraphicsWidget _first, QGraphicsWidget _second)"""
        return None
    def setFocusPolicy(_policy):
        """None QGraphicsWidget.setFocusPolicy(Qt.FocusPolicy _policy)"""
        return None
    def focusPolicy():
        """Qt.FocusPolicy QGraphicsWidget.focusPolicy()"""
        return Qt.FocusPolicy()
    def windowTitle():
        """QString QGraphicsWidget.windowTitle()"""
        return QString()
    def setWindowTitle(_title):
        """None QGraphicsWidget.setWindowTitle(QString _title)"""
        return None
    def isActiveWindow():
        """bool QGraphicsWidget.isActiveWindow()"""
        return bool()
    def setWindowFlags(_wFlags):
        """None QGraphicsWidget.setWindowFlags(Qt.WindowFlags _wFlags)"""
        return None
    def windowType():
        """Qt.WindowType QGraphicsWidget.windowType()"""
        return Qt.WindowType()
    def windowFlags():
        """Qt.WindowFlags QGraphicsWidget.windowFlags()"""
        return Qt.WindowFlags()
    def windowFrameRect():
        """QRectF QGraphicsWidget.windowFrameRect()"""
        return QRectF()
    def windowFrameGeometry():
        """QRectF QGraphicsWidget.windowFrameGeometry()"""
        return QRectF()
    def unsetWindowFrameMargins():
        """None QGraphicsWidget.unsetWindowFrameMargins()"""
        return None
    def getWindowFrameMargins(_left, _top, _right, _bottom):
        """None QGraphicsWidget.getWindowFrameMargins(float _left, float _top, float _right, float _bottom)"""
        return None
    def setWindowFrameMargins(_left, _top, _right, _bottom):
        """None QGraphicsWidget.setWindowFrameMargins(float _left, float _top, float _right, float _bottom)"""
        return None
    def getContentsMargins(_left, _top, _right, _bottom):
        """None QGraphicsWidget.getContentsMargins(float _left, float _top, float _right, float _bottom)"""
        return None
    def setContentsMargins(_left, _top, _right, _bottom):
        """None QGraphicsWidget.setContentsMargins(float _left, float _top, float _right, float _bottom)"""
        return None
    def rect():
        """QRectF QGraphicsWidget.rect()"""
        return QRectF()
    def setGeometry(_rect):
        """None QGraphicsWidget.setGeometry(QRectF _rect)"""
        return None
    def setGeometry(_ax, _ay, _aw, _ah):
        """None QGraphicsWidget.setGeometry(float _ax, float _ay, float _aw, float _ah)"""
        return None
    def size():
        """QSizeF QGraphicsWidget.size()"""
        return QSizeF()
    def resize(_size):
        """None QGraphicsWidget.resize(QSizeF _size)"""
        return None
    def resize(_w, _h):
        """None QGraphicsWidget.resize(float _w, float _h)"""
        return None
    def setPalette(_palette):
        """None QGraphicsWidget.setPalette(QPalette _palette)"""
        return None
    def palette():
        """QPalette QGraphicsWidget.palette()"""
        return QPalette()
    def setFont(_font):
        """None QGraphicsWidget.setFont(QFont _font)"""
        return None
    def font():
        """QFont QGraphicsWidget.font()"""
        return QFont()
    def setStyle(_style):
        """None QGraphicsWidget.setStyle(QStyle _style)"""
        return None
    def style():
        """QStyle QGraphicsWidget.style()"""
        return QStyle()
    def unsetLayoutDirection():
        """None QGraphicsWidget.unsetLayoutDirection()"""
        return None
    def setLayoutDirection(_direction):
        """None QGraphicsWidget.setLayoutDirection(Qt.LayoutDirection _direction)"""
        return None
    def layoutDirection():
        """Qt.LayoutDirection QGraphicsWidget.layoutDirection()"""
        return Qt.LayoutDirection()
    def adjustSize():
        """None QGraphicsWidget.adjustSize()"""
        return None
    def setLayout(_layout):
        """None QGraphicsWidget.setLayout(QGraphicsLayout _layout)"""
        return None
    def layout():
        """QGraphicsLayout QGraphicsWidget.layout()"""
        return QGraphicsLayout()


class QGraphicsProxyWidget(QGraphicsWidget):
    """"""
    def __init__(_parent, _flags):
        """None QGraphicsProxyWidget.__init__(QGraphicsItem _parent, Qt.WindowFlags _flags)"""
        return None
    def newProxyWidget():
        """QWidget QGraphicsProxyWidget.newProxyWidget()"""
        return QWidget()
    def dropEvent(_event):
        """None QGraphicsProxyWidget.dropEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragMoveEvent(_event):
        """None QGraphicsProxyWidget.dragMoveEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragLeaveEvent(_event):
        """None QGraphicsProxyWidget.dragLeaveEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragEnterEvent(_event):
        """None QGraphicsProxyWidget.dragEnterEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def resizeEvent(_event):
        """None QGraphicsProxyWidget.resizeEvent(QGraphicsSceneResizeEvent _event)"""
        return None
    def sizeHint(_which, _constraint):
        """QSizeF QGraphicsProxyWidget.sizeHint(Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def focusNextPrevChild(_next):
        """bool QGraphicsProxyWidget.focusNextPrevChild(bool _next)"""
        return bool()
    def focusOutEvent(_event):
        """None QGraphicsProxyWidget.focusOutEvent(QFocusEvent _event)"""
        return None
    def focusInEvent(_event):
        """None QGraphicsProxyWidget.focusInEvent(QFocusEvent _event)"""
        return None
    def keyReleaseEvent(_event):
        """None QGraphicsProxyWidget.keyReleaseEvent(QKeyEvent _event)"""
        return None
    def keyPressEvent(_event):
        """None QGraphicsProxyWidget.keyPressEvent(QKeyEvent _event)"""
        return None
    def wheelEvent(_event):
        """None QGraphicsProxyWidget.wheelEvent(QGraphicsSceneWheelEvent _event)"""
        return None
    def mouseDoubleClickEvent(_event):
        """None QGraphicsProxyWidget.mouseDoubleClickEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseReleaseEvent(_event):
        """None QGraphicsProxyWidget.mouseReleaseEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mousePressEvent(_event):
        """None QGraphicsProxyWidget.mousePressEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseMoveEvent(_event):
        """None QGraphicsProxyWidget.mouseMoveEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def ungrabMouseEvent(_event):
        """None QGraphicsProxyWidget.ungrabMouseEvent(QEvent _event)"""
        return None
    def grabMouseEvent(_event):
        """None QGraphicsProxyWidget.grabMouseEvent(QEvent _event)"""
        return None
    def hoverMoveEvent(_event):
        """None QGraphicsProxyWidget.hoverMoveEvent(QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverLeaveEvent(_event):
        """None QGraphicsProxyWidget.hoverLeaveEvent(QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverEnterEvent(_event):
        """None QGraphicsProxyWidget.hoverEnterEvent(QGraphicsSceneHoverEvent _event)"""
        return None
    def contextMenuEvent(_event):
        """None QGraphicsProxyWidget.contextMenuEvent(QGraphicsSceneContextMenuEvent _event)"""
        return None
    def hideEvent(_event):
        """None QGraphicsProxyWidget.hideEvent(QHideEvent _event)"""
        return None
    def showEvent(_event):
        """None QGraphicsProxyWidget.showEvent(QShowEvent _event)"""
        return None
    def eventFilter(_object, _event):
        """bool QGraphicsProxyWidget.eventFilter(QObject _object, QEvent _event)"""
        return bool()
    def event(_event):
        """bool QGraphicsProxyWidget.event(QEvent _event)"""
        return bool()
    def itemChange(_change, _value):
        """QVariant QGraphicsProxyWidget.itemChange(QGraphicsItem.GraphicsItemChange _change, QVariant _value)"""
        return QVariant()
    def createProxyForChildWidget(_child):
        """QGraphicsProxyWidget QGraphicsProxyWidget.createProxyForChildWidget(QWidget _child)"""
        return QGraphicsProxyWidget()
    def type():
        """int QGraphicsProxyWidget.type()"""
        return int()
    def paint(_painter, _option, _widget):
        """None QGraphicsProxyWidget.paint(QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def setGeometry(_rect):
        """None QGraphicsProxyWidget.setGeometry(QRectF _rect)"""
        return None
    def subWidgetRect(_widget):
        """QRectF QGraphicsProxyWidget.subWidgetRect(QWidget _widget)"""
        return QRectF()
    def widget():
        """QWidget QGraphicsProxyWidget.widget()"""
        return QWidget()
    def setWidget(_widget):
        """None QGraphicsProxyWidget.setWidget(QWidget _widget)"""
        return None


class QGraphicsScene(QObject):
    """"""
    ItemLayer = int() # QGraphicsScene.SceneLayer enum
    BackgroundLayer = int() # QGraphicsScene.SceneLayer enum
    ForegroundLayer = int() # QGraphicsScene.SceneLayer enum
    AllLayers = int() # QGraphicsScene.SceneLayer enum

    BspTreeIndex = int() # QGraphicsScene.ItemIndexMethod enum
    NoIndex = int() # QGraphicsScene.ItemIndexMethod enum

    def __init__(_parent):
        """None QGraphicsScene.__init__(QObject _parent)"""
        return None
    def __init__(_sceneRect, _parent):
        """None QGraphicsScene.__init__(QRectF _sceneRect, QObject _parent)"""
        return None
    def __init__(_x, _y, _width, _height, _parent):
        """None QGraphicsScene.__init__(float _x, float _y, float _width, float _height, QObject _parent)"""
        return None
    def sendEvent(_item, _event):
        """bool QGraphicsScene.sendEvent(QGraphicsItem _item, QEvent _event)"""
        return bool()
    def setActivePanel(_item):
        """None QGraphicsScene.setActivePanel(QGraphicsItem _item)"""
        return None
    def activePanel():
        """QGraphicsItem QGraphicsScene.activePanel()"""
        return QGraphicsItem()
    def isActive():
        """bool QGraphicsScene.isActive()"""
        return bool()
    def stickyFocus():
        """bool QGraphicsScene.stickyFocus()"""
        return bool()
    def setStickyFocus(_enabled):
        """None QGraphicsScene.setStickyFocus(bool _enabled)"""
        return None
    def setSortCacheEnabled(_enabled):
        """None QGraphicsScene.setSortCacheEnabled(bool _enabled)"""
        return None
    def isSortCacheEnabled():
        """bool QGraphicsScene.isSortCacheEnabled()"""
        return bool()
    def focusNextPrevChild(_next):
        """bool QGraphicsScene.focusNextPrevChild(bool _next)"""
        return bool()
    def eventFilter(_watched, _event):
        """bool QGraphicsScene.eventFilter(QObject _watched, QEvent _event)"""
        return bool()
    def setActiveWindow(_widget):
        """None QGraphicsScene.setActiveWindow(QGraphicsWidget _widget)"""
        return None
    def activeWindow():
        """QGraphicsWidget QGraphicsScene.activeWindow()"""
        return QGraphicsWidget()
    def setPalette(_palette):
        """None QGraphicsScene.setPalette(QPalette _palette)"""
        return None
    def palette():
        """QPalette QGraphicsScene.palette()"""
        return QPalette()
    def setFont(_font):
        """None QGraphicsScene.setFont(QFont _font)"""
        return None
    def font():
        """QFont QGraphicsScene.font()"""
        return QFont()
    def setStyle(_style):
        """None QGraphicsScene.setStyle(QStyle _style)"""
        return None
    def style():
        """QStyle QGraphicsScene.style()"""
        return QStyle()
    def addWidget(_widget, _flags):
        """QGraphicsProxyWidget QGraphicsScene.addWidget(QWidget _widget, Qt.WindowFlags _flags)"""
        return QGraphicsProxyWidget()
    def selectionArea():
        """QPainterPath QGraphicsScene.selectionArea()"""
        return QPainterPath()
    def setBspTreeDepth(_depth):
        """None QGraphicsScene.setBspTreeDepth(int _depth)"""
        return None
    def bspTreeDepth():
        """int QGraphicsScene.bspTreeDepth()"""
        return int()
    def drawItems(_painter, _items, _options, _widget):
        """None QGraphicsScene.drawItems(QPainter _painter, list-of-QGraphicsItem _items, list-of-QStyleOptionGraphicsItem _options, QWidget _widget)"""
        return None
    def drawForeground(_painter, _rect):
        """None QGraphicsScene.drawForeground(QPainter _painter, QRectF _rect)"""
        return None
    def drawBackground(_painter, _rect):
        """None QGraphicsScene.drawBackground(QPainter _painter, QRectF _rect)"""
        return None
    def inputMethodEvent(_event):
        """None QGraphicsScene.inputMethodEvent(QInputMethodEvent _event)"""
        return None
    def wheelEvent(_event):
        """None QGraphicsScene.wheelEvent(QGraphicsSceneWheelEvent _event)"""
        return None
    def mouseDoubleClickEvent(_event):
        """None QGraphicsScene.mouseDoubleClickEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseReleaseEvent(_event):
        """None QGraphicsScene.mouseReleaseEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseMoveEvent(_event):
        """None QGraphicsScene.mouseMoveEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def mousePressEvent(_event):
        """None QGraphicsScene.mousePressEvent(QGraphicsSceneMouseEvent _event)"""
        return None
    def keyReleaseEvent(_event):
        """None QGraphicsScene.keyReleaseEvent(QKeyEvent _event)"""
        return None
    def keyPressEvent(_event):
        """None QGraphicsScene.keyPressEvent(QKeyEvent _event)"""
        return None
    def helpEvent(_event):
        """None QGraphicsScene.helpEvent(QGraphicsSceneHelpEvent _event)"""
        return None
    def focusOutEvent(_event):
        """None QGraphicsScene.focusOutEvent(QFocusEvent _event)"""
        return None
    def focusInEvent(_event):
        """None QGraphicsScene.focusInEvent(QFocusEvent _event)"""
        return None
    def dropEvent(_event):
        """None QGraphicsScene.dropEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragLeaveEvent(_event):
        """None QGraphicsScene.dragLeaveEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragMoveEvent(_event):
        """None QGraphicsScene.dragMoveEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragEnterEvent(_event):
        """None QGraphicsScene.dragEnterEvent(QGraphicsSceneDragDropEvent _event)"""
        return None
    def contextMenuEvent(_event):
        """None QGraphicsScene.contextMenuEvent(QGraphicsSceneContextMenuEvent _event)"""
        return None
    def event(_event):
        """bool QGraphicsScene.event(QEvent _event)"""
        return bool()
    def clear():
        """None QGraphicsScene.clear()"""
        return None
    def invalidate(_rect, _layers):
        """None QGraphicsScene.invalidate(QRectF _rect, QGraphicsScene.SceneLayers _layers)"""
        return None
    def invalidate(_x, _y, _w, _h, _layers):
        """None QGraphicsScene.invalidate(float _x, float _y, float _w, float _h, QGraphicsScene.SceneLayers _layers)"""
        return None
    def update(_rect):
        """None QGraphicsScene.update(QRectF _rect)"""
        return None
    def update(_x, _y, _w, _h):
        """None QGraphicsScene.update(float _x, float _y, float _w, float _h)"""
        return None
    def advance():
        """None QGraphicsScene.advance()"""
        return None
    def views():
        """list-of-QGraphicsView QGraphicsScene.views()"""
        return [QGraphicsView()]
    def inputMethodQuery(_query):
        """QVariant QGraphicsScene.inputMethodQuery(Qt.InputMethodQuery _query)"""
        return QVariant()
    def setForegroundBrush(_brush):
        """None QGraphicsScene.setForegroundBrush(QBrush _brush)"""
        return None
    def foregroundBrush():
        """QBrush QGraphicsScene.foregroundBrush()"""
        return QBrush()
    def setBackgroundBrush(_brush):
        """None QGraphicsScene.setBackgroundBrush(QBrush _brush)"""
        return None
    def backgroundBrush():
        """QBrush QGraphicsScene.backgroundBrush()"""
        return QBrush()
    def mouseGrabberItem():
        """QGraphicsItem QGraphicsScene.mouseGrabberItem()"""
        return QGraphicsItem()
    def clearFocus():
        """None QGraphicsScene.clearFocus()"""
        return None
    def setFocus(_focusReason):
        """None QGraphicsScene.setFocus(Qt.FocusReason _focusReason)"""
        return None
    def hasFocus():
        """bool QGraphicsScene.hasFocus()"""
        return bool()
    def setFocusItem(_item, _focusReason):
        """None QGraphicsScene.setFocusItem(QGraphicsItem _item, Qt.FocusReason _focusReason)"""
        return None
    def focusItem():
        """QGraphicsItem QGraphicsScene.focusItem()"""
        return QGraphicsItem()
    def removeItem(_item):
        """None QGraphicsScene.removeItem(QGraphicsItem _item)"""
        return None
    def addText(_text, _font):
        """QGraphicsTextItem QGraphicsScene.addText(QString _text, QFont _font)"""
        return QGraphicsTextItem()
    def addSimpleText(_text, _font):
        """QGraphicsSimpleTextItem QGraphicsScene.addSimpleText(QString _text, QFont _font)"""
        return QGraphicsSimpleTextItem()
    def addRect(_rect, _pen, _brush):
        """QGraphicsRectItem QGraphicsScene.addRect(QRectF _rect, QPen _pen, QBrush _brush)"""
        return QGraphicsRectItem()
    def addRect(_x, _y, _w, _h, _pen, _brush):
        """QGraphicsRectItem QGraphicsScene.addRect(float _x, float _y, float _w, float _h, QPen _pen, QBrush _brush)"""
        return QGraphicsRectItem()
    def addPolygon(_polygon, _pen, _brush):
        """QGraphicsPolygonItem QGraphicsScene.addPolygon(QPolygonF _polygon, QPen _pen, QBrush _brush)"""
        return QGraphicsPolygonItem()
    def addPixmap(_pixmap):
        """QGraphicsPixmapItem QGraphicsScene.addPixmap(QPixmap _pixmap)"""
        return QGraphicsPixmapItem()
    def addPath(_path, _pen, _brush):
        """QGraphicsPathItem QGraphicsScene.addPath(QPainterPath _path, QPen _pen, QBrush _brush)"""
        return QGraphicsPathItem()
    def addLine(_line, _pen):
        """QGraphicsLineItem QGraphicsScene.addLine(QLineF _line, QPen _pen)"""
        return QGraphicsLineItem()
    def addLine(_x1, _y1, _x2, _y2, _pen):
        """QGraphicsLineItem QGraphicsScene.addLine(float _x1, float _y1, float _x2, float _y2, QPen _pen)"""
        return QGraphicsLineItem()
    def addEllipse(_rect, _pen, _brush):
        """QGraphicsEllipseItem QGraphicsScene.addEllipse(QRectF _rect, QPen _pen, QBrush _brush)"""
        return QGraphicsEllipseItem()
    def addEllipse(_x, _y, _w, _h, _pen, _brush):
        """QGraphicsEllipseItem QGraphicsScene.addEllipse(float _x, float _y, float _w, float _h, QPen _pen, QBrush _brush)"""
        return QGraphicsEllipseItem()
    def addItem(_item):
        """None QGraphicsScene.addItem(QGraphicsItem _item)"""
        return None
    def destroyItemGroup(_group):
        """None QGraphicsScene.destroyItemGroup(QGraphicsItemGroup _group)"""
        return None
    def createItemGroup(_items):
        """QGraphicsItemGroup QGraphicsScene.createItemGroup(list-of-QGraphicsItem _items)"""
        return QGraphicsItemGroup()
    def clearSelection():
        """None QGraphicsScene.clearSelection()"""
        return None
    def setSelectionArea(_path):
        """None QGraphicsScene.setSelectionArea(QPainterPath _path)"""
        return None
    def setSelectionArea(_path):
        """Qt.ItemSelectionMode QGraphicsScene.setSelectionArea(QPainterPath _path)"""
        return Qt.ItemSelectionMode()
    def setSelectionArea(_path, _deviceTransform):
        """None QGraphicsScene.setSelectionArea(QPainterPath _path, QTransform _deviceTransform)"""
        return None
    def setSelectionArea(_path, _mode, _deviceTransform):
        """None QGraphicsScene.setSelectionArea(QPainterPath _path, Qt.ItemSelectionMode _mode, QTransform _deviceTransform)"""
        return None
    def selectedItems():
        """list-of-QGraphicsItem QGraphicsScene.selectedItems()"""
        return [QGraphicsItem()]
    def itemAt(_pos):
        """QGraphicsItem QGraphicsScene.itemAt(QPointF _pos)"""
        return QGraphicsItem()
    def itemAt(_x, _y):
        """QGraphicsItem QGraphicsScene.itemAt(float _x, float _y)"""
        return QGraphicsItem()
    def itemAt(_pos, _deviceTransform):
        """QGraphicsItem QGraphicsScene.itemAt(QPointF _pos, QTransform _deviceTransform)"""
        return QGraphicsItem()
    def itemAt(_x, _y, _deviceTransform):
        """QGraphicsItem QGraphicsScene.itemAt(float _x, float _y, QTransform _deviceTransform)"""
        return QGraphicsItem()
    def collidingItems(_item, _mode):
        """list-of-QGraphicsItem QGraphicsScene.collidingItems(QGraphicsItem _item, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items():
        """list-of-QGraphicsItem QGraphicsScene.items()"""
        return [QGraphicsItem()]
    def items(_pos):
        """list-of-QGraphicsItem QGraphicsScene.items(QPointF _pos)"""
        return [QGraphicsItem()]
    def items(_rectangle, _mode):
        """list-of-QGraphicsItem QGraphicsScene.items(QRectF _rectangle, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(_polygon, _mode):
        """list-of-QGraphicsItem QGraphicsScene.items(QPolygonF _polygon, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(_path, _mode):
        """list-of-QGraphicsItem QGraphicsScene.items(QPainterPath _path, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(_x, _y, _w, _h, _mode):
        """list-of-QGraphicsItem QGraphicsScene.items(float _x, float _y, float _w, float _h, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(_order):
        """list-of-QGraphicsItem QGraphicsScene.items(Qt.SortOrder _order)"""
        return [QGraphicsItem()]
    def items(_pos, _mode, _order, _deviceTransform):
        """list-of-QGraphicsItem QGraphicsScene.items(QPointF _pos, Qt.ItemSelectionMode _mode, Qt.SortOrder _order, QTransform _deviceTransform)"""
        return [QGraphicsItem()]
    def items(_rect, _mode, _order, _deviceTransform):
        """list-of-QGraphicsItem QGraphicsScene.items(QRectF _rect, Qt.ItemSelectionMode _mode, Qt.SortOrder _order, QTransform _deviceTransform)"""
        return [QGraphicsItem()]
    def items(_polygon, _mode, _order, _deviceTransform):
        """list-of-QGraphicsItem QGraphicsScene.items(QPolygonF _polygon, Qt.ItemSelectionMode _mode, Qt.SortOrder _order, QTransform _deviceTransform)"""
        return [QGraphicsItem()]
    def items(_path, _mode, _order, _deviceTransform):
        """list-of-QGraphicsItem QGraphicsScene.items(QPainterPath _path, Qt.ItemSelectionMode _mode, Qt.SortOrder _order, QTransform _deviceTransform)"""
        return [QGraphicsItem()]
    def items(_x, _y, _w, _h, _mode, _order, _deviceTransform):
        """list-of-QGraphicsItem QGraphicsScene.items(float _x, float _y, float _w, float _h, Qt.ItemSelectionMode _mode, Qt.SortOrder _order, QTransform _deviceTransform)"""
        return [QGraphicsItem()]
    def itemsBoundingRect():
        """QRectF QGraphicsScene.itemsBoundingRect()"""
        return QRectF()
    def setItemIndexMethod(_method):
        """None QGraphicsScene.setItemIndexMethod(QGraphicsScene.ItemIndexMethod _method)"""
        return None
    def itemIndexMethod():
        """QGraphicsScene.ItemIndexMethod QGraphicsScene.itemIndexMethod()"""
        return QGraphicsScene.ItemIndexMethod()
    def render(_painter, _target, _source, _mode):
        """None QGraphicsScene.render(QPainter _painter, QRectF _target, QRectF _source, Qt.AspectRatioMode _mode)"""
        return None
    def setSceneRect(_rect):
        """None QGraphicsScene.setSceneRect(QRectF _rect)"""
        return None
    def setSceneRect(_x, _y, _w, _h):
        """None QGraphicsScene.setSceneRect(float _x, float _y, float _w, float _h)"""
        return None
    def height():
        """float QGraphicsScene.height()"""
        return float()
    def width():
        """float QGraphicsScene.width()"""
        return float()
    def sceneRect():
        """QRectF QGraphicsScene.sceneRect()"""
        return QRectF()


class QGraphicsSceneEvent(QEvent):
    """"""
    def setWidget(_widget):
        """None QGraphicsSceneEvent.setWidget(QWidget _widget)"""
        return None
    def widget():
        """QWidget QGraphicsSceneEvent.widget()"""
        return QWidget()


class QGraphicsSceneMouseEvent(QGraphicsSceneEvent):
    """"""
    def modifiers():
        """Qt.KeyboardModifiers QGraphicsSceneMouseEvent.modifiers()"""
        return Qt.KeyboardModifiers()
    def button():
        """Qt.MouseButton QGraphicsSceneMouseEvent.button()"""
        return Qt.MouseButton()
    def buttons():
        """Qt.MouseButtons QGraphicsSceneMouseEvent.buttons()"""
        return Qt.MouseButtons()
    def lastScreenPos():
        """QPoint QGraphicsSceneMouseEvent.lastScreenPos()"""
        return QPoint()
    def lastScenePos():
        """QPointF QGraphicsSceneMouseEvent.lastScenePos()"""
        return QPointF()
    def lastPos():
        """QPointF QGraphicsSceneMouseEvent.lastPos()"""
        return QPointF()
    def buttonDownScreenPos(_button):
        """QPoint QGraphicsSceneMouseEvent.buttonDownScreenPos(Qt.MouseButton _button)"""
        return QPoint()
    def buttonDownScenePos(_button):
        """QPointF QGraphicsSceneMouseEvent.buttonDownScenePos(Qt.MouseButton _button)"""
        return QPointF()
    def buttonDownPos(_button):
        """QPointF QGraphicsSceneMouseEvent.buttonDownPos(Qt.MouseButton _button)"""
        return QPointF()
    def screenPos():
        """QPoint QGraphicsSceneMouseEvent.screenPos()"""
        return QPoint()
    def scenePos():
        """QPointF QGraphicsSceneMouseEvent.scenePos()"""
        return QPointF()
    def pos():
        """QPointF QGraphicsSceneMouseEvent.pos()"""
        return QPointF()


class QGraphicsSceneWheelEvent(QGraphicsSceneEvent):
    """"""
    def orientation():
        """Qt.Orientation QGraphicsSceneWheelEvent.orientation()"""
        return Qt.Orientation()
    def delta():
        """int QGraphicsSceneWheelEvent.delta()"""
        return int()
    def modifiers():
        """Qt.KeyboardModifiers QGraphicsSceneWheelEvent.modifiers()"""
        return Qt.KeyboardModifiers()
    def buttons():
        """Qt.MouseButtons QGraphicsSceneWheelEvent.buttons()"""
        return Qt.MouseButtons()
    def screenPos():
        """QPoint QGraphicsSceneWheelEvent.screenPos()"""
        return QPoint()
    def scenePos():
        """QPointF QGraphicsSceneWheelEvent.scenePos()"""
        return QPointF()
    def pos():
        """QPointF QGraphicsSceneWheelEvent.pos()"""
        return QPointF()


class QGraphicsSceneContextMenuEvent(QGraphicsSceneEvent):
    """"""
    Mouse = int() # QGraphicsSceneContextMenuEvent.Reason enum
    Keyboard = int() # QGraphicsSceneContextMenuEvent.Reason enum
    Other = int() # QGraphicsSceneContextMenuEvent.Reason enum

    def reason():
        """QGraphicsSceneContextMenuEvent.Reason QGraphicsSceneContextMenuEvent.reason()"""
        return QGraphicsSceneContextMenuEvent.Reason()
    def modifiers():
        """Qt.KeyboardModifiers QGraphicsSceneContextMenuEvent.modifiers()"""
        return Qt.KeyboardModifiers()
    def screenPos():
        """QPoint QGraphicsSceneContextMenuEvent.screenPos()"""
        return QPoint()
    def scenePos():
        """QPointF QGraphicsSceneContextMenuEvent.scenePos()"""
        return QPointF()
    def pos():
        """QPointF QGraphicsSceneContextMenuEvent.pos()"""
        return QPointF()


class QGraphicsSceneHoverEvent(QGraphicsSceneEvent):
    """"""
    def modifiers():
        """Qt.KeyboardModifiers QGraphicsSceneHoverEvent.modifiers()"""
        return Qt.KeyboardModifiers()
    def lastScreenPos():
        """QPoint QGraphicsSceneHoverEvent.lastScreenPos()"""
        return QPoint()
    def lastScenePos():
        """QPointF QGraphicsSceneHoverEvent.lastScenePos()"""
        return QPointF()
    def lastPos():
        """QPointF QGraphicsSceneHoverEvent.lastPos()"""
        return QPointF()
    def screenPos():
        """QPoint QGraphicsSceneHoverEvent.screenPos()"""
        return QPoint()
    def scenePos():
        """QPointF QGraphicsSceneHoverEvent.scenePos()"""
        return QPointF()
    def pos():
        """QPointF QGraphicsSceneHoverEvent.pos()"""
        return QPointF()


class QGraphicsSceneHelpEvent(QGraphicsSceneEvent):
    """"""
    def screenPos():
        """QPoint QGraphicsSceneHelpEvent.screenPos()"""
        return QPoint()
    def scenePos():
        """QPointF QGraphicsSceneHelpEvent.scenePos()"""
        return QPointF()


class QGraphicsSceneDragDropEvent(QGraphicsSceneEvent):
    """"""
    def mimeData():
        """QMimeData QGraphicsSceneDragDropEvent.mimeData()"""
        return QMimeData()
    def source():
        """QWidget QGraphicsSceneDragDropEvent.source()"""
        return QWidget()
    def setDropAction(_action):
        """None QGraphicsSceneDragDropEvent.setDropAction(Qt.DropAction _action)"""
        return None
    def dropAction():
        """Qt.DropAction QGraphicsSceneDragDropEvent.dropAction()"""
        return Qt.DropAction()
    def acceptProposedAction():
        """None QGraphicsSceneDragDropEvent.acceptProposedAction()"""
        return None
    def proposedAction():
        """Qt.DropAction QGraphicsSceneDragDropEvent.proposedAction()"""
        return Qt.DropAction()
    def possibleActions():
        """Qt.DropActions QGraphicsSceneDragDropEvent.possibleActions()"""
        return Qt.DropActions()
    def modifiers():
        """Qt.KeyboardModifiers QGraphicsSceneDragDropEvent.modifiers()"""
        return Qt.KeyboardModifiers()
    def buttons():
        """Qt.MouseButtons QGraphicsSceneDragDropEvent.buttons()"""
        return Qt.MouseButtons()
    def screenPos():
        """QPoint QGraphicsSceneDragDropEvent.screenPos()"""
        return QPoint()
    def scenePos():
        """QPointF QGraphicsSceneDragDropEvent.scenePos()"""
        return QPointF()
    def pos():
        """QPointF QGraphicsSceneDragDropEvent.pos()"""
        return QPointF()


class QGraphicsSceneResizeEvent(QGraphicsSceneEvent):
    """"""
    def __init__():
        """None QGraphicsSceneResizeEvent.__init__()"""
        return None
    def newSize():
        """QSizeF QGraphicsSceneResizeEvent.newSize()"""
        return QSizeF()
    def oldSize():
        """QSizeF QGraphicsSceneResizeEvent.oldSize()"""
        return QSizeF()


class QGraphicsSceneMoveEvent(QGraphicsSceneEvent):
    """"""
    def __init__():
        """None QGraphicsSceneMoveEvent.__init__()"""
        return None
    def newPos():
        """QPointF QGraphicsSceneMoveEvent.newPos()"""
        return QPointF()
    def oldPos():
        """QPointF QGraphicsSceneMoveEvent.oldPos()"""
        return QPointF()


class QGraphicsTransform(QObject):
    """"""
    def __init__(_parent):
        """None QGraphicsTransform.__init__(QObject _parent)"""
        return None
    def update():
        """None QGraphicsTransform.update()"""
        return None
    def applyTo(_matrix):
        """abstract None QGraphicsTransform.applyTo(QMatrix4x4 _matrix)"""
        return None


class QGraphicsScale(QGraphicsTransform):
    """"""
    def __init__(_parent):
        """None QGraphicsScale.__init__(QObject _parent)"""
        return None
    def applyTo(_matrix):
        """None QGraphicsScale.applyTo(QMatrix4x4 _matrix)"""
        return None
    def setZScale():
        """float QGraphicsScale.setZScale()"""
        return float()
    def zScale():
        """float QGraphicsScale.zScale()"""
        return float()
    def setYScale():
        """float QGraphicsScale.setYScale()"""
        return float()
    def yScale():
        """float QGraphicsScale.yScale()"""
        return float()
    def setXScale():
        """float QGraphicsScale.setXScale()"""
        return float()
    def xScale():
        """float QGraphicsScale.xScale()"""
        return float()
    def setOrigin(_point):
        """None QGraphicsScale.setOrigin(QVector3D _point)"""
        return None
    def origin():
        """QVector3D QGraphicsScale.origin()"""
        return QVector3D()


class QGraphicsRotation(QGraphicsTransform):
    """"""
    def __init__(_parent):
        """None QGraphicsRotation.__init__(QObject _parent)"""
        return None
    def applyTo(_matrix):
        """None QGraphicsRotation.applyTo(QMatrix4x4 _matrix)"""
        return None
    def setAxis(_axis):
        """None QGraphicsRotation.setAxis(QVector3D _axis)"""
        return None
    def setAxis(_axis):
        """None QGraphicsRotation.setAxis(Qt.Axis _axis)"""
        return None
    def axis():
        """QVector3D QGraphicsRotation.axis()"""
        return QVector3D()
    def setAngle():
        """float QGraphicsRotation.setAngle()"""
        return float()
    def angle():
        """float QGraphicsRotation.angle()"""
        return float()
    def setOrigin(_point):
        """None QGraphicsRotation.setOrigin(QVector3D _point)"""
        return None
    def origin():
        """QVector3D QGraphicsRotation.origin()"""
        return QVector3D()


class QGraphicsView(QAbstractScrollArea):
    """"""
    DontClipPainter = int() # QGraphicsView.OptimizationFlag enum
    DontSavePainterState = int() # QGraphicsView.OptimizationFlag enum
    DontAdjustForAntialiasing = int() # QGraphicsView.OptimizationFlag enum

    FullViewportUpdate = int() # QGraphicsView.ViewportUpdateMode enum
    MinimalViewportUpdate = int() # QGraphicsView.ViewportUpdateMode enum
    SmartViewportUpdate = int() # QGraphicsView.ViewportUpdateMode enum
    BoundingRectViewportUpdate = int() # QGraphicsView.ViewportUpdateMode enum
    NoViewportUpdate = int() # QGraphicsView.ViewportUpdateMode enum

    NoAnchor = int() # QGraphicsView.ViewportAnchor enum
    AnchorViewCenter = int() # QGraphicsView.ViewportAnchor enum
    AnchorUnderMouse = int() # QGraphicsView.ViewportAnchor enum

    NoDrag = int() # QGraphicsView.DragMode enum
    ScrollHandDrag = int() # QGraphicsView.DragMode enum
    RubberBandDrag = int() # QGraphicsView.DragMode enum

    CacheNone = int() # QGraphicsView.CacheModeFlag enum
    CacheBackground = int() # QGraphicsView.CacheModeFlag enum

    def __init__(_parent):
        """None QGraphicsView.__init__(QWidget _parent)"""
        return None
    def __init__(_scene, _parent):
        """None QGraphicsView.__init__(QGraphicsScene _scene, QWidget _parent)"""
        return None
    def isTransformed():
        """bool QGraphicsView.isTransformed()"""
        return bool()
    def resetTransform():
        """None QGraphicsView.resetTransform()"""
        return None
    def setTransform(_matrix, _combine):
        """None QGraphicsView.setTransform(QTransform _matrix, bool _combine)"""
        return None
    def viewportTransform():
        """QTransform QGraphicsView.viewportTransform()"""
        return QTransform()
    def transform():
        """QTransform QGraphicsView.transform()"""
        return QTransform()
    def setRubberBandSelectionMode(_mode):
        """None QGraphicsView.setRubberBandSelectionMode(Qt.ItemSelectionMode _mode)"""
        return None
    def rubberBandSelectionMode():
        """Qt.ItemSelectionMode QGraphicsView.rubberBandSelectionMode()"""
        return Qt.ItemSelectionMode()
    def setOptimizationFlags(_flags):
        """None QGraphicsView.setOptimizationFlags(QGraphicsView.OptimizationFlags _flags)"""
        return None
    def setOptimizationFlag(_flag, _enabled):
        """None QGraphicsView.setOptimizationFlag(QGraphicsView.OptimizationFlag _flag, bool _enabled)"""
        return None
    def optimizationFlags():
        """QGraphicsView.OptimizationFlags QGraphicsView.optimizationFlags()"""
        return QGraphicsView.OptimizationFlags()
    def setViewportUpdateMode(_mode):
        """None QGraphicsView.setViewportUpdateMode(QGraphicsView.ViewportUpdateMode _mode)"""
        return None
    def viewportUpdateMode():
        """QGraphicsView.ViewportUpdateMode QGraphicsView.viewportUpdateMode()"""
        return QGraphicsView.ViewportUpdateMode()
    def drawItems(_painter, _items, _options):
        """None QGraphicsView.drawItems(QPainter _painter, list-of-QGraphicsItem _items, list-of-QStyleOptionGraphicsItem _options)"""
        return None
    def drawForeground(_painter, _rect):
        """None QGraphicsView.drawForeground(QPainter _painter, QRectF _rect)"""
        return None
    def drawBackground(_painter, _rect):
        """None QGraphicsView.drawBackground(QPainter _painter, QRectF _rect)"""
        return None
    def inputMethodEvent(_event):
        """None QGraphicsView.inputMethodEvent(QInputMethodEvent _event)"""
        return None
    def showEvent(_event):
        """None QGraphicsView.showEvent(QShowEvent _event)"""
        return None
    def scrollContentsBy(_dx, _dy):
        """None QGraphicsView.scrollContentsBy(int _dx, int _dy)"""
        return None
    def resizeEvent(_event):
        """None QGraphicsView.resizeEvent(QResizeEvent _event)"""
        return None
    def paintEvent(_event):
        """None QGraphicsView.paintEvent(QPaintEvent _event)"""
        return None
    def wheelEvent(_event):
        """None QGraphicsView.wheelEvent(QWheelEvent _event)"""
        return None
    def mouseReleaseEvent(_event):
        """None QGraphicsView.mouseReleaseEvent(QMouseEvent _event)"""
        return None
    def mouseMoveEvent(_event):
        """None QGraphicsView.mouseMoveEvent(QMouseEvent _event)"""
        return None
    def mousePressEvent(_event):
        """None QGraphicsView.mousePressEvent(QMouseEvent _event)"""
        return None
    def mouseDoubleClickEvent(_event):
        """None QGraphicsView.mouseDoubleClickEvent(QMouseEvent _event)"""
        return None
    def keyReleaseEvent(_event):
        """None QGraphicsView.keyReleaseEvent(QKeyEvent _event)"""
        return None
    def keyPressEvent(_event):
        """None QGraphicsView.keyPressEvent(QKeyEvent _event)"""
        return None
    def focusNextPrevChild(_next):
        """bool QGraphicsView.focusNextPrevChild(bool _next)"""
        return bool()
    def focusOutEvent(_event):
        """None QGraphicsView.focusOutEvent(QFocusEvent _event)"""
        return None
    def focusInEvent(_event):
        """None QGraphicsView.focusInEvent(QFocusEvent _event)"""
        return None
    def dropEvent(_event):
        """None QGraphicsView.dropEvent(QDropEvent _event)"""
        return None
    def dragMoveEvent(_event):
        """None QGraphicsView.dragMoveEvent(QDragMoveEvent _event)"""
        return None
    def dragLeaveEvent(_event):
        """None QGraphicsView.dragLeaveEvent(QDragLeaveEvent _event)"""
        return None
    def dragEnterEvent(_event):
        """None QGraphicsView.dragEnterEvent(QDragEnterEvent _event)"""
        return None
    def contextMenuEvent(_event):
        """None QGraphicsView.contextMenuEvent(QContextMenuEvent _event)"""
        return None
    def viewportEvent(_event):
        """bool QGraphicsView.viewportEvent(QEvent _event)"""
        return bool()
    def event(_event):
        """bool QGraphicsView.event(QEvent _event)"""
        return bool()
    def setupViewport(_widget):
        """None QGraphicsView.setupViewport(QWidget _widget)"""
        return None
    def updateSceneRect(_rect):
        """None QGraphicsView.updateSceneRect(QRectF _rect)"""
        return None
    def updateScene(_rects):
        """None QGraphicsView.updateScene(list-of-QRectF _rects)"""
        return None
    def invalidateScene(_rect, _layers):
        """None QGraphicsView.invalidateScene(QRectF _rect, QGraphicsScene.SceneLayers _layers)"""
        return None
    def setForegroundBrush(_brush):
        """None QGraphicsView.setForegroundBrush(QBrush _brush)"""
        return None
    def foregroundBrush():
        """QBrush QGraphicsView.foregroundBrush()"""
        return QBrush()
    def setBackgroundBrush(_brush):
        """None QGraphicsView.setBackgroundBrush(QBrush _brush)"""
        return None
    def backgroundBrush():
        """QBrush QGraphicsView.backgroundBrush()"""
        return QBrush()
    def inputMethodQuery(_query):
        """QVariant QGraphicsView.inputMethodQuery(Qt.InputMethodQuery _query)"""
        return QVariant()
    def mapFromScene(_point):
        """QPoint QGraphicsView.mapFromScene(QPointF _point)"""
        return QPoint()
    def mapFromScene(_rect):
        """QPolygon QGraphicsView.mapFromScene(QRectF _rect)"""
        return QPolygon()
    def mapFromScene(_polygon):
        """QPolygon QGraphicsView.mapFromScene(QPolygonF _polygon)"""
        return QPolygon()
    def mapFromScene(_path):
        """QPainterPath QGraphicsView.mapFromScene(QPainterPath _path)"""
        return QPainterPath()
    def mapFromScene(_ax, _ay):
        """QPoint QGraphicsView.mapFromScene(float _ax, float _ay)"""
        return QPoint()
    def mapFromScene(_ax, _ay, _w, _h):
        """QPolygon QGraphicsView.mapFromScene(float _ax, float _ay, float _w, float _h)"""
        return QPolygon()
    def mapToScene(_point):
        """QPointF QGraphicsView.mapToScene(QPoint _point)"""
        return QPointF()
    def mapToScene(_rect):
        """QPolygonF QGraphicsView.mapToScene(QRect _rect)"""
        return QPolygonF()
    def mapToScene(_polygon):
        """QPolygonF QGraphicsView.mapToScene(QPolygon _polygon)"""
        return QPolygonF()
    def mapToScene(_path):
        """QPainterPath QGraphicsView.mapToScene(QPainterPath _path)"""
        return QPainterPath()
    def mapToScene(_ax, _ay):
        """QPointF QGraphicsView.mapToScene(int _ax, int _ay)"""
        return QPointF()
    def mapToScene(_ax, _ay, _w, _h):
        """QPolygonF QGraphicsView.mapToScene(int _ax, int _ay, int _w, int _h)"""
        return QPolygonF()
    def itemAt(_pos):
        """QGraphicsItem QGraphicsView.itemAt(QPoint _pos)"""
        return QGraphicsItem()
    def itemAt(_ax, _ay):
        """QGraphicsItem QGraphicsView.itemAt(int _ax, int _ay)"""
        return QGraphicsItem()
    def items():
        """list-of-QGraphicsItem QGraphicsView.items()"""
        return [QGraphicsItem()]
    def items(_pos):
        """list-of-QGraphicsItem QGraphicsView.items(QPoint _pos)"""
        return [QGraphicsItem()]
    def items(_ax, _ay):
        """list-of-QGraphicsItem QGraphicsView.items(int _ax, int _ay)"""
        return [QGraphicsItem()]
    def items(_x, _y, _w, _h, _mode):
        """list-of-QGraphicsItem QGraphicsView.items(int _x, int _y, int _w, int _h, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(_rect, _mode):
        """list-of-QGraphicsItem QGraphicsView.items(QRect _rect, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(_polygon, _mode):
        """list-of-QGraphicsItem QGraphicsView.items(QPolygon _polygon, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(_path, _mode):
        """list-of-QGraphicsItem QGraphicsView.items(QPainterPath _path, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def render(_painter, _target, _source, _mode):
        """None QGraphicsView.render(QPainter _painter, QRectF _target, QRect _source, Qt.AspectRatioMode _mode)"""
        return None
    def fitInView(_rect, _mode):
        """None QGraphicsView.fitInView(QRectF _rect, Qt.AspectRatioMode _mode)"""
        return None
    def fitInView(_item, _mode):
        """None QGraphicsView.fitInView(QGraphicsItem _item, Qt.AspectRatioMode _mode)"""
        return None
    def fitInView(_x, _y, _w, _h, _mode):
        """None QGraphicsView.fitInView(float _x, float _y, float _w, float _h, Qt.AspectRatioMode _mode)"""
        return None
    def ensureVisible(_rect, _xMargin, _yMargin):
        """None QGraphicsView.ensureVisible(QRectF _rect, int _xMargin, int _yMargin)"""
        return None
    def ensureVisible(_item, _xMargin, _yMargin):
        """None QGraphicsView.ensureVisible(QGraphicsItem _item, int _xMargin, int _yMargin)"""
        return None
    def ensureVisible(_x, _y, _w, _h, _xMargin, _yMargin):
        """None QGraphicsView.ensureVisible(float _x, float _y, float _w, float _h, int _xMargin, int _yMargin)"""
        return None
    def centerOn(_pos):
        """None QGraphicsView.centerOn(QPointF _pos)"""
        return None
    def centerOn(_item):
        """None QGraphicsView.centerOn(QGraphicsItem _item)"""
        return None
    def centerOn(_ax, _ay):
        """None QGraphicsView.centerOn(float _ax, float _ay)"""
        return None
    def translate(_dx, _dy):
        """None QGraphicsView.translate(float _dx, float _dy)"""
        return None
    def shear(_sh, _sv):
        """None QGraphicsView.shear(float _sh, float _sv)"""
        return None
    def scale(_sx, _sy):
        """None QGraphicsView.scale(float _sx, float _sy)"""
        return None
    def rotate(_angle):
        """None QGraphicsView.rotate(float _angle)"""
        return None
    def resetMatrix():
        """None QGraphicsView.resetMatrix()"""
        return None
    def setMatrix(_matrix, _combine):
        """None QGraphicsView.setMatrix(QMatrix _matrix, bool _combine)"""
        return None
    def matrix():
        """QMatrix QGraphicsView.matrix()"""
        return QMatrix()
    def setSceneRect(_rect):
        """None QGraphicsView.setSceneRect(QRectF _rect)"""
        return None
    def setSceneRect(_ax, _ay, _aw, _ah):
        """None QGraphicsView.setSceneRect(float _ax, float _ay, float _aw, float _ah)"""
        return None
    def sceneRect():
        """QRectF QGraphicsView.sceneRect()"""
        return QRectF()
    def setScene(_scene):
        """None QGraphicsView.setScene(QGraphicsScene _scene)"""
        return None
    def scene():
        """QGraphicsScene QGraphicsView.scene()"""
        return QGraphicsScene()
    def setInteractive(_allowed):
        """None QGraphicsView.setInteractive(bool _allowed)"""
        return None
    def isInteractive():
        """bool QGraphicsView.isInteractive()"""
        return bool()
    def resetCachedContent():
        """None QGraphicsView.resetCachedContent()"""
        return None
    def setCacheMode(_mode):
        """None QGraphicsView.setCacheMode(QGraphicsView.CacheMode _mode)"""
        return None
    def cacheMode():
        """QGraphicsView.CacheMode QGraphicsView.cacheMode()"""
        return QGraphicsView.CacheMode()
    def setDragMode(_mode):
        """None QGraphicsView.setDragMode(QGraphicsView.DragMode _mode)"""
        return None
    def dragMode():
        """QGraphicsView.DragMode QGraphicsView.dragMode()"""
        return QGraphicsView.DragMode()
    def setResizeAnchor(_anchor):
        """None QGraphicsView.setResizeAnchor(QGraphicsView.ViewportAnchor _anchor)"""
        return None
    def resizeAnchor():
        """QGraphicsView.ViewportAnchor QGraphicsView.resizeAnchor()"""
        return QGraphicsView.ViewportAnchor()
    def setTransformationAnchor(_anchor):
        """None QGraphicsView.setTransformationAnchor(QGraphicsView.ViewportAnchor _anchor)"""
        return None
    def transformationAnchor():
        """QGraphicsView.ViewportAnchor QGraphicsView.transformationAnchor()"""
        return QGraphicsView.ViewportAnchor()
    def setAlignment(_alignment):
        """None QGraphicsView.setAlignment(Qt.Alignment _alignment)"""
        return None
    def alignment():
        """Qt.Alignment QGraphicsView.alignment()"""
        return Qt.Alignment()
    def setRenderHints(_hints):
        """None QGraphicsView.setRenderHints(QPainter.RenderHints _hints)"""
        return None
    def setRenderHint(_hint, _on):
        """None QGraphicsView.setRenderHint(QPainter.RenderHint _hint, bool _on)"""
        return None
    def renderHints():
        """QPainter.RenderHints QGraphicsView.renderHints()"""
        return QPainter.RenderHints()
    def sizeHint():
        """QSize QGraphicsView.sizeHint()"""
        return QSize()


class QGridLayout(QLayout):
    """"""
    def __init__(_parent):
        """None QGridLayout.__init__(QWidget _parent)"""
        return None
    def __init__():
        """None QGridLayout.__init__()"""
        return None
    def itemAtPosition(_row, _column):
        """QLayoutItem QGridLayout.itemAtPosition(int _row, int _column)"""
        return QLayoutItem()
    def spacing():
        """int QGridLayout.spacing()"""
        return int()
    def setSpacing(_spacing):
        """None QGridLayout.setSpacing(int _spacing)"""
        return None
    def verticalSpacing():
        """int QGridLayout.verticalSpacing()"""
        return int()
    def setVerticalSpacing(_spacing):
        """None QGridLayout.setVerticalSpacing(int _spacing)"""
        return None
    def horizontalSpacing():
        """int QGridLayout.horizontalSpacing()"""
        return int()
    def setHorizontalSpacing(_spacing):
        """None QGridLayout.setHorizontalSpacing(int _spacing)"""
        return None
    def getItemPosition(_idx, _row, _column, _rowSpan, _columnSpan):
        """None QGridLayout.getItemPosition(int _idx, int _row, int _column, int _rowSpan, int _columnSpan)"""
        return None
    def setDefaultPositioning(_n, _orient):
        """None QGridLayout.setDefaultPositioning(int _n, Qt.Orientation _orient)"""
        return None
    def addItem(_item, _row, _column, _rowSpan, _columnSpan, _alignment):
        """None QGridLayout.addItem(QLayoutItem _item, int _row, int _column, int _rowSpan, int _columnSpan, Qt.Alignment _alignment)"""
        return None
    def addItem():
        """QLayoutItem QGridLayout.addItem()"""
        return QLayoutItem()
    def setGeometry():
        """QRect QGridLayout.setGeometry()"""
        return QRect()
    def count():
        """int QGridLayout.count()"""
        return int()
    def takeAt():
        """int QGridLayout.takeAt()"""
        return int()
    def itemAt():
        """int QGridLayout.itemAt()"""
        return int()
    def originCorner():
        """Qt.Corner QGridLayout.originCorner()"""
        return Qt.Corner()
    def setOriginCorner():
        """Qt.Corner QGridLayout.setOriginCorner()"""
        return Qt.Corner()
    def addLayout(_row, _column, _alignment):
        """QLayout QGridLayout.addLayout(int _row, int _column, Qt.Alignment _alignment)"""
        return QLayout()
    def addLayout(_row, _column, _rowSpan, _columnSpan, _alignment):
        """QLayout QGridLayout.addLayout(int _row, int _column, int _rowSpan, int _columnSpan, Qt.Alignment _alignment)"""
        return QLayout()
    def addWidget(_w):
        """None QGridLayout.addWidget(QWidget _w)"""
        return None
    def addWidget(_row, _column, _alignment):
        """QWidget QGridLayout.addWidget(int _row, int _column, Qt.Alignment _alignment)"""
        return QWidget()
    def addWidget(_row, _column, _rowSpan, _columnSpan, _alignment):
        """QWidget QGridLayout.addWidget(int _row, int _column, int _rowSpan, int _columnSpan, Qt.Alignment _alignment)"""
        return QWidget()
    def invalidate():
        """None QGridLayout.invalidate()"""
        return None
    def expandingDirections():
        """Qt.Orientations QGridLayout.expandingDirections()"""
        return Qt.Orientations()
    def minimumHeightForWidth():
        """int QGridLayout.minimumHeightForWidth()"""
        return int()
    def heightForWidth():
        """int QGridLayout.heightForWidth()"""
        return int()
    def hasHeightForWidth():
        """bool QGridLayout.hasHeightForWidth()"""
        return bool()
    def cellRect(_row, _column):
        """QRect QGridLayout.cellRect(int _row, int _column)"""
        return QRect()
    def rowCount():
        """int QGridLayout.rowCount()"""
        return int()
    def columnCount():
        """int QGridLayout.columnCount()"""
        return int()
    def columnMinimumWidth(_column):
        """int QGridLayout.columnMinimumWidth(int _column)"""
        return int()
    def rowMinimumHeight(_row):
        """int QGridLayout.rowMinimumHeight(int _row)"""
        return int()
    def setColumnMinimumWidth(_column, _minSize):
        """None QGridLayout.setColumnMinimumWidth(int _column, int _minSize)"""
        return None
    def setRowMinimumHeight(_row, _minSize):
        """None QGridLayout.setRowMinimumHeight(int _row, int _minSize)"""
        return None
    def columnStretch(_column):
        """int QGridLayout.columnStretch(int _column)"""
        return int()
    def rowStretch(_row):
        """int QGridLayout.rowStretch(int _row)"""
        return int()
    def setColumnStretch(_column, _stretch):
        """None QGridLayout.setColumnStretch(int _column, int _stretch)"""
        return None
    def setRowStretch(_row, _stretch):
        """None QGridLayout.setRowStretch(int _row, int _stretch)"""
        return None
    def maximumSize():
        """QSize QGridLayout.maximumSize()"""
        return QSize()
    def minimumSize():
        """QSize QGridLayout.minimumSize()"""
        return QSize()
    def sizeHint():
        """QSize QGridLayout.sizeHint()"""
        return QSize()


class QGroupBox(QWidget):
    """"""
    def __init__(_parent):
        """None QGroupBox.__init__(QWidget _parent)"""
        return None
    def __init__(_title, _parent):
        """None QGroupBox.__init__(QString _title, QWidget _parent)"""
        return None
    def mouseReleaseEvent(_event):
        """None QGroupBox.mouseReleaseEvent(QMouseEvent _event)"""
        return None
    def mouseMoveEvent(_event):
        """None QGroupBox.mouseMoveEvent(QMouseEvent _event)"""
        return None
    def mousePressEvent(_event):
        """None QGroupBox.mousePressEvent(QMouseEvent _event)"""
        return None
    def changeEvent():
        """QEvent QGroupBox.changeEvent()"""
        return QEvent()
    def focusInEvent():
        """QFocusEvent QGroupBox.focusInEvent()"""
        return QFocusEvent()
    def paintEvent():
        """QPaintEvent QGroupBox.paintEvent()"""
        return QPaintEvent()
    def resizeEvent():
        """QResizeEvent QGroupBox.resizeEvent()"""
        return QResizeEvent()
    def childEvent():
        """QChildEvent QGroupBox.childEvent()"""
        return QChildEvent()
    def event():
        """QEvent QGroupBox.event()"""
        return QEvent()
    def initStyleOption(_option):
        """None QGroupBox.initStyleOption(QStyleOptionGroupBox _option)"""
        return None
    def setChecked(_b):
        """None QGroupBox.setChecked(bool _b)"""
        return None
    def isChecked():
        """bool QGroupBox.isChecked()"""
        return bool()
    def setCheckable(_b):
        """None QGroupBox.setCheckable(bool _b)"""
        return None
    def isCheckable():
        """bool QGroupBox.isCheckable()"""
        return bool()
    def setFlat(_b):
        """None QGroupBox.setFlat(bool _b)"""
        return None
    def isFlat():
        """bool QGroupBox.isFlat()"""
        return bool()
    def minimumSizeHint():
        """QSize QGroupBox.minimumSizeHint()"""
        return QSize()
    def setAlignment():
        """int QGroupBox.setAlignment()"""
        return int()
    def alignment():
        """Qt.Alignment QGroupBox.alignment()"""
        return Qt.Alignment()
    def setTitle():
        """QString QGroupBox.setTitle()"""
        return QString()
    def title():
        """QString QGroupBox.title()"""
        return QString()


class QHeaderView(QAbstractItemView):
    """"""
    Interactive = int() # QHeaderView.ResizeMode enum
    Fixed = int() # QHeaderView.ResizeMode enum
    Stretch = int() # QHeaderView.ResizeMode enum
    ResizeToContents = int() # QHeaderView.ResizeMode enum
    Custom = int() # QHeaderView.ResizeMode enum

    def __init__(_orientation, _parent):
        """None QHeaderView.__init__(Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def initStyleOption(_option):
        """None QHeaderView.initStyleOption(QStyleOptionHeader _option)"""
        return None
    def setOffsetToLastSection():
        """None QHeaderView.setOffsetToLastSection()"""
        return None
    def reset():
        """None QHeaderView.reset()"""
        return None
    def restoreState(_state):
        """bool QHeaderView.restoreState(QByteArray _state)"""
        return bool()
    def saveState():
        """QByteArray QHeaderView.saveState()"""
        return QByteArray()
    def setMinimumSectionSize(_size):
        """None QHeaderView.setMinimumSectionSize(int _size)"""
        return None
    def minimumSectionSize():
        """int QHeaderView.minimumSectionSize()"""
        return int()
    def setCascadingSectionResizes(_enable):
        """None QHeaderView.setCascadingSectionResizes(bool _enable)"""
        return None
    def cascadingSectionResizes():
        """bool QHeaderView.cascadingSectionResizes()"""
        return bool()
    def swapSections(_first, _second):
        """None QHeaderView.swapSections(int _first, int _second)"""
        return None
    def sectionsHidden():
        """bool QHeaderView.sectionsHidden()"""
        return bool()
    def setDefaultAlignment(_alignment):
        """None QHeaderView.setDefaultAlignment(Qt.Alignment _alignment)"""
        return None
    def defaultAlignment():
        """Qt.Alignment QHeaderView.defaultAlignment()"""
        return Qt.Alignment()
    def setDefaultSectionSize(_size):
        """None QHeaderView.setDefaultSectionSize(int _size)"""
        return None
    def defaultSectionSize():
        """int QHeaderView.defaultSectionSize()"""
        return int()
    def hiddenSectionCount():
        """int QHeaderView.hiddenSectionCount()"""
        return int()
    def showSection(_alogicalIndex):
        """None QHeaderView.showSection(int _alogicalIndex)"""
        return None
    def hideSection(_alogicalIndex):
        """None QHeaderView.hideSection(int _alogicalIndex)"""
        return None
    def visualRegionForSelection(_selection):
        """QRegion QHeaderView.visualRegionForSelection(QItemSelection _selection)"""
        return QRegion()
    def setSelection():
        """QItemSelectionModel.SelectionFlags QHeaderView.setSelection()"""
        return QItemSelectionModel.SelectionFlags()
    def moveCursor():
        """Qt.KeyboardModifiers QHeaderView.moveCursor()"""
        return Qt.KeyboardModifiers()
    def isIndexHidden(_index):
        """bool QHeaderView.isIndexHidden(QModelIndex _index)"""
        return bool()
    def indexAt(_p):
        """QModelIndex QHeaderView.indexAt(QPoint _p)"""
        return QModelIndex()
    def scrollTo(_index, _hint):
        """None QHeaderView.scrollTo(QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def visualRect(_index):
        """QRect QHeaderView.visualRect(QModelIndex _index)"""
        return QRect()
    def rowsInserted(_parent, _start, _end):
        """None QHeaderView.rowsInserted(QModelIndex _parent, int _start, int _end)"""
        return None
    def dataChanged(_topLeft, _bottomRight):
        """None QHeaderView.dataChanged(QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None
    def scrollContentsBy(_dx, _dy):
        """None QHeaderView.scrollContentsBy(int _dx, int _dy)"""
        return None
    def updateGeometries():
        """None QHeaderView.updateGeometries()"""
        return None
    def verticalOffset():
        """int QHeaderView.verticalOffset()"""
        return int()
    def horizontalOffset():
        """int QHeaderView.horizontalOffset()"""
        return int()
    def sectionSizeFromContents(_logicalIndex):
        """QSize QHeaderView.sectionSizeFromContents(int _logicalIndex)"""
        return QSize()
    def paintSection(_painter, _rect, _logicalIndex):
        """None QHeaderView.paintSection(QPainter _painter, QRect _rect, int _logicalIndex)"""
        return None
    def mouseDoubleClickEvent(_e):
        """None QHeaderView.mouseDoubleClickEvent(QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(_e):
        """None QHeaderView.mouseReleaseEvent(QMouseEvent _e)"""
        return None
    def mouseMoveEvent(_e):
        """None QHeaderView.mouseMoveEvent(QMouseEvent _e)"""
        return None
    def mousePressEvent(_e):
        """None QHeaderView.mousePressEvent(QMouseEvent _e)"""
        return None
    def paintEvent(_e):
        """None QHeaderView.paintEvent(QPaintEvent _e)"""
        return None
    def viewportEvent(_e):
        """bool QHeaderView.viewportEvent(QEvent _e)"""
        return bool()
    def event(_e):
        """bool QHeaderView.event(QEvent _e)"""
        return bool()
    def currentChanged(_current, _old):
        """None QHeaderView.currentChanged(QModelIndex _current, QModelIndex _old)"""
        return None
    def initializeSections():
        """None QHeaderView.initializeSections()"""
        return None
    def initializeSections(_start, _end):
        """None QHeaderView.initializeSections(int _start, int _end)"""
        return None
    def initialize():
        """None QHeaderView.initialize()"""
        return None
    def sectionsAboutToBeRemoved(_parent, _logicalFirst, _logicalLast):
        """None QHeaderView.sectionsAboutToBeRemoved(QModelIndex _parent, int _logicalFirst, int _logicalLast)"""
        return None
    def sectionsInserted(_parent, _logicalFirst, _logicalLast):
        """None QHeaderView.sectionsInserted(QModelIndex _parent, int _logicalFirst, int _logicalLast)"""
        return None
    def resizeSections():
        """None QHeaderView.resizeSections()"""
        return None
    def resizeSections(_mode):
        """None QHeaderView.resizeSections(QHeaderView.ResizeMode _mode)"""
        return None
    def updateSection(_logicalIndex):
        """None QHeaderView.updateSection(int _logicalIndex)"""
        return None
    def setOffsetToSectionPosition(_visualIndex):
        """None QHeaderView.setOffsetToSectionPosition(int _visualIndex)"""
        return None
    def headerDataChanged(_orientation, _logicalFirst, _logicalLast):
        """None QHeaderView.headerDataChanged(Qt.Orientation _orientation, int _logicalFirst, int _logicalLast)"""
        return None
    def setOffset(_offset):
        """None QHeaderView.setOffset(int _offset)"""
        return None
    def sectionsMoved():
        """bool QHeaderView.sectionsMoved()"""
        return bool()
    def doItemsLayout():
        """None QHeaderView.doItemsLayout()"""
        return None
    def setStretchLastSection(_stretch):
        """None QHeaderView.setStretchLastSection(bool _stretch)"""
        return None
    def stretchLastSection():
        """bool QHeaderView.stretchLastSection()"""
        return bool()
    def sortIndicatorOrder():
        """Qt.SortOrder QHeaderView.sortIndicatorOrder()"""
        return Qt.SortOrder()
    def sortIndicatorSection():
        """int QHeaderView.sortIndicatorSection()"""
        return int()
    def setSortIndicator(_logicalIndex, _order):
        """None QHeaderView.setSortIndicator(int _logicalIndex, Qt.SortOrder _order)"""
        return None
    def isSortIndicatorShown():
        """bool QHeaderView.isSortIndicatorShown()"""
        return bool()
    def setSortIndicatorShown(_show):
        """None QHeaderView.setSortIndicatorShown(bool _show)"""
        return None
    def stretchSectionCount():
        """int QHeaderView.stretchSectionCount()"""
        return int()
    def resizeMode(_logicalIndex):
        """QHeaderView.ResizeMode QHeaderView.resizeMode(int _logicalIndex)"""
        return QHeaderView.ResizeMode()
    def setResizeMode(_mode):
        """None QHeaderView.setResizeMode(QHeaderView.ResizeMode _mode)"""
        return None
    def setResizeMode(_logicalIndex, _mode):
        """None QHeaderView.setResizeMode(int _logicalIndex, QHeaderView.ResizeMode _mode)"""
        return None
    def highlightSections():
        """bool QHeaderView.highlightSections()"""
        return bool()
    def setHighlightSections(_highlight):
        """None QHeaderView.setHighlightSections(bool _highlight)"""
        return None
    def isClickable():
        """bool QHeaderView.isClickable()"""
        return bool()
    def setClickable(_clickable):
        """None QHeaderView.setClickable(bool _clickable)"""
        return None
    def isMovable():
        """bool QHeaderView.isMovable()"""
        return bool()
    def setMovable(_movable):
        """None QHeaderView.setMovable(bool _movable)"""
        return None
    def logicalIndex(_visualIndex):
        """int QHeaderView.logicalIndex(int _visualIndex)"""
        return int()
    def visualIndex(_logicalIndex):
        """int QHeaderView.visualIndex(int _logicalIndex)"""
        return int()
    def __len__():
        """ QHeaderView.__len__()"""
        return ()
    def count():
        """int QHeaderView.count()"""
        return int()
    def setSectionHidden(_logicalIndex, _hide):
        """None QHeaderView.setSectionHidden(int _logicalIndex, bool _hide)"""
        return None
    def isSectionHidden(_logicalIndex):
        """bool QHeaderView.isSectionHidden(int _logicalIndex)"""
        return bool()
    def resizeSection(_logicalIndex, _size):
        """None QHeaderView.resizeSection(int _logicalIndex, int _size)"""
        return None
    def moveSection(_from, _to):
        """None QHeaderView.moveSection(int _from, int _to)"""
        return None
    def sectionViewportPosition(_logicalIndex):
        """int QHeaderView.sectionViewportPosition(int _logicalIndex)"""
        return int()
    def sectionPosition(_logicalIndex):
        """int QHeaderView.sectionPosition(int _logicalIndex)"""
        return int()
    def sectionSize(_logicalIndex):
        """int QHeaderView.sectionSize(int _logicalIndex)"""
        return int()
    def logicalIndexAt(_position):
        """int QHeaderView.logicalIndexAt(int _position)"""
        return int()
    def logicalIndexAt(_ax, _ay):
        """int QHeaderView.logicalIndexAt(int _ax, int _ay)"""
        return int()
    def logicalIndexAt(_apos):
        """int QHeaderView.logicalIndexAt(QPoint _apos)"""
        return int()
    def visualIndexAt(_position):
        """int QHeaderView.visualIndexAt(int _position)"""
        return int()
    def sectionSizeHint(_logicalIndex):
        """int QHeaderView.sectionSizeHint(int _logicalIndex)"""
        return int()
    def sizeHint():
        """QSize QHeaderView.sizeHint()"""
        return QSize()
    def length():
        """int QHeaderView.length()"""
        return int()
    def offset():
        """int QHeaderView.offset()"""
        return int()
    def orientation():
        """Qt.Orientation QHeaderView.orientation()"""
        return Qt.Orientation()
    def setModel(_model):
        """None QHeaderView.setModel(QAbstractItemModel _model)"""
        return None


class QIcon():
    """"""
    On = int() # QIcon.State enum
    Off = int() # QIcon.State enum

    Normal = int() # QIcon.Mode enum
    Disabled = int() # QIcon.Mode enum
    Active = int() # QIcon.Mode enum
    Selected = int() # QIcon.Mode enum

    def __init__():
        """None QIcon.__init__()"""
        return None
    def __init__(_pixmap):
        """None QIcon.__init__(QPixmap _pixmap)"""
        return None
    def __init__(_other):
        """None QIcon.__init__(QIcon _other)"""
        return None
    def __init__(_fileName):
        """None QIcon.__init__(QString _fileName)"""
        return None
    def __init__(_engine):
        """None QIcon.__init__(QIconEngine _engine)"""
        return None
    def __init__(_engine):
        """None QIcon.__init__(QIconEngineV2 _engine)"""
        return None
    def __init__(_variant):
        """None QIcon.__init__(QVariant _variant)"""
        return None
    def name():
        """QString QIcon.name()"""
        return QString()
    def setThemeName(_path):
        """None QIcon.setThemeName(QString _path)"""
        return None
    def themeName():
        """QString QIcon.themeName()"""
        return QString()
    def setThemeSearchPaths(_searchpath):
        """None QIcon.setThemeSearchPaths(QStringList _searchpath)"""
        return None
    def themeSearchPaths():
        """QStringList QIcon.themeSearchPaths()"""
        return QStringList()
    def hasThemeIcon(_name):
        """bool QIcon.hasThemeIcon(QString _name)"""
        return bool()
    def fromTheme(_name, _fallback):
        """QIcon QIcon.fromTheme(QString _name, QIcon _fallback)"""
        return QIcon()
    def cacheKey():
        """int QIcon.cacheKey()"""
        return int()
    def addFile(_fileName, _size, _mode, _state):
        """None QIcon.addFile(QString _fileName, QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def addPixmap(_pixmap, _mode, _state):
        """None QIcon.addPixmap(QPixmap _pixmap, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def serialNumber():
        """int QIcon.serialNumber()"""
        return int()
    def isDetached():
        """bool QIcon.isDetached()"""
        return bool()
    def isNull():
        """bool QIcon.isNull()"""
        return bool()
    def paint(_painter, _rect, _alignment, _mode, _state):
        """None QIcon.paint(QPainter _painter, QRect _rect, Qt.Alignment _alignment, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def paint(_painter, _x, _y, _w, _h, _alignment, _mode, _state):
        """None QIcon.paint(QPainter _painter, int _x, int _y, int _w, int _h, Qt.Alignment _alignment, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def availableSizes(_mode, _state):
        """list-of-QSize QIcon.availableSizes(QIcon.Mode _mode, QIcon.State _state)"""
        return [QSize()]
    def actualSize(_size, _mode, _state):
        """QSize QIcon.actualSize(QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return QSize()
    def pixmap(_size, _mode, _state):
        """QPixmap QIcon.pixmap(QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return QPixmap()
    def pixmap(_w, _h, _mode, _state):
        """QPixmap QIcon.pixmap(int _w, int _h, QIcon.Mode _mode, QIcon.State _state)"""
        return QPixmap()
    def pixmap(_extent, _mode, _state):
        """QPixmap QIcon.pixmap(int _extent, QIcon.Mode _mode, QIcon.State _state)"""
        return QPixmap()


class QIconEngine():
    """"""
    def __init__():
        """None QIconEngine.__init__()"""
        return None
    def __init__():
        """QIconEngine QIconEngine.__init__()"""
        return QIconEngine()
    def addFile(_fileName, _size, _mode, _state):
        """None QIconEngine.addFile(QString _fileName, QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def addPixmap(_pixmap, _mode, _state):
        """None QIconEngine.addPixmap(QPixmap _pixmap, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def pixmap(_size, _mode, _state):
        """QPixmap QIconEngine.pixmap(QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return QPixmap()
    def actualSize(_size, _mode, _state):
        """QSize QIconEngine.actualSize(QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return QSize()
    def paint(_painter, _rect, _mode, _state):
        """abstract None QIconEngine.paint(QPainter _painter, QRect _rect, QIcon.Mode _mode, QIcon.State _state)"""
        return None


class QIconEngineV2(QIconEngine):
    """"""
    AvailableSizesHook = int() # QIconEngineV2.IconEngineHook enum
    IconNameHook = int() # QIconEngineV2.IconEngineHook enum

    def __init__():
        """None QIconEngineV2.__init__()"""
        return None
    def __init__():
        """QIconEngineV2 QIconEngineV2.__init__()"""
        return QIconEngineV2()
    def iconName():
        """QString QIconEngineV2.iconName()"""
        return QString()
    def availableSizes(_mode, _state):
        """list-of-QSize QIconEngineV2.availableSizes(QIcon.Mode _mode, QIcon.State _state)"""
        return [QSize()]
    def write(_out):
        """bool QIconEngineV2.write(QDataStream _out)"""
        return bool()
    def read(_in):
        """bool QIconEngineV2.read(QDataStream _in)"""
        return bool()
    def clone():
        """QIconEngineV2 QIconEngineV2.clone()"""
        return QIconEngineV2()
    def key():
        """QString QIconEngineV2.key()"""
        return QString()


class QImage(QPaintDevice):
    """"""
    Format_Invalid = int() # QImage.Format enum
    Format_Mono = int() # QImage.Format enum
    Format_MonoLSB = int() # QImage.Format enum
    Format_Indexed8 = int() # QImage.Format enum
    Format_RGB32 = int() # QImage.Format enum
    Format_ARGB32 = int() # QImage.Format enum
    Format_ARGB32_Premultiplied = int() # QImage.Format enum
    Format_RGB16 = int() # QImage.Format enum
    Format_ARGB8565_Premultiplied = int() # QImage.Format enum
    Format_RGB666 = int() # QImage.Format enum
    Format_ARGB6666_Premultiplied = int() # QImage.Format enum
    Format_RGB555 = int() # QImage.Format enum
    Format_ARGB8555_Premultiplied = int() # QImage.Format enum
    Format_RGB888 = int() # QImage.Format enum
    Format_RGB444 = int() # QImage.Format enum
    Format_ARGB4444_Premultiplied = int() # QImage.Format enum

    InvertRgb = int() # QImage.InvertMode enum
    InvertRgba = int() # QImage.InvertMode enum

    def __init__():
        """None QImage.__init__()"""
        return None
    def __init__(_size, _format):
        """None QImage.__init__(QSize _size, QImage.Format _format)"""
        return None
    def __init__(_width, _height, _format):
        """None QImage.__init__(int _width, int _height, QImage.Format _format)"""
        return None
    def __init__(_data, _width, _height, _format):
        """None QImage.__init__(str _data, int _width, int _height, QImage.Format _format)"""
        return None
    def __init__(_data, _width, _height, _format):
        """None QImage.__init__(sip.voidptr _data, int _width, int _height, QImage.Format _format)"""
        return None
    def __init__(_data, _width, _height, _bytesPerLine, _format):
        """None QImage.__init__(str _data, int _width, int _height, int _bytesPerLine, QImage.Format _format)"""
        return None
    def __init__(_data, _width, _height, _bytesPerLine, _format):
        """None QImage.__init__(sip.voidptr _data, int _width, int _height, int _bytesPerLine, QImage.Format _format)"""
        return None
    def __init__(_xpm):
        """None QImage.__init__(list-of-str _xpm)"""
        return None
    def __init__(_fileName, _format):
        """None QImage.__init__(QString _fileName, str _format)"""
        return None
    def __init__():
        """QImage QImage.__init__()"""
        return QImage()
    def __init__(_variant):
        """None QImage.__init__(QVariant _variant)"""
        return None
    def bitPlaneCount():
        """int QImage.bitPlaneCount()"""
        return int()
    def byteCount():
        """int QImage.byteCount()"""
        return int()
    def setColorCount():
        """int QImage.setColorCount()"""
        return int()
    def colorCount():
        """int QImage.colorCount()"""
        return int()
    def cacheKey():
        """int QImage.cacheKey()"""
        return int()
    def createMaskFromColor(_color, _mode):
        """QImage QImage.createMaskFromColor(int _color, Qt.MaskMode _mode)"""
        return QImage()
    def metric(_metric):
        """int QImage.metric(QPaintDevice.PaintDeviceMetric _metric)"""
        return int()
    def setText(_key, _value):
        """None QImage.setText(QString _key, QString _value)"""
        return None
    def text(_key):
        """QString QImage.text(QString _key)"""
        return QString()
    def textKeys():
        """QStringList QImage.textKeys()"""
        return QStringList()
    def setOffset():
        """QPoint QImage.setOffset()"""
        return QPoint()
    def offset():
        """QPoint QImage.offset()"""
        return QPoint()
    def setDotsPerMeterY():
        """int QImage.setDotsPerMeterY()"""
        return int()
    def setDotsPerMeterX():
        """int QImage.setDotsPerMeterX()"""
        return int()
    def dotsPerMeterY():
        """int QImage.dotsPerMeterY()"""
        return int()
    def dotsPerMeterX():
        """int QImage.dotsPerMeterX()"""
        return int()
    def paintEngine():
        """QPaintEngine QImage.paintEngine()"""
        return QPaintEngine()
    def serialNumber():
        """int QImage.serialNumber()"""
        return int()
    def fromData(_data, _format):
        """QImage QImage.fromData(str _data, str _format)"""
        return QImage()
    def fromData(_data, _format):
        """QImage QImage.fromData(QByteArray _data, str _format)"""
        return QImage()
    def save(_fileName, _format, _quality):
        """bool QImage.save(QString _fileName, str _format, int _quality)"""
        return bool()
    def save(_device, _format, _quality):
        """bool QImage.save(QIODevice _device, str _format, int _quality)"""
        return bool()
    def loadFromData(_data, _format):
        """bool QImage.loadFromData(str _data, str _format)"""
        return bool()
    def loadFromData(_data, _format):
        """bool QImage.loadFromData(QByteArray _data, str _format)"""
        return bool()
    def load(_device, _format):
        """bool QImage.load(QIODevice _device, str _format)"""
        return bool()
    def load(_fileName, _format):
        """bool QImage.load(QString _fileName, str _format)"""
        return bool()
    def invertPixels(_mode):
        """None QImage.invertPixels(QImage.InvertMode _mode)"""
        return None
    def rgbSwapped():
        """QImage QImage.rgbSwapped()"""
        return QImage()
    def mirrored(_horizontal, _vertical):
        """QImage QImage.mirrored(bool _horizontal, bool _vertical)"""
        return QImage()
    def trueMatrix(_w, _h):
        """QMatrix QImage.trueMatrix(int _w, int _h)"""
        return QMatrix()
    def trueMatrix(_w, _h):
        """QTransform QImage.trueMatrix(int _w, int _h)"""
        return QTransform()
    def transformed(_matrix, _mode):
        """QImage QImage.transformed(QMatrix _matrix, Qt.TransformationMode _mode)"""
        return QImage()
    def transformed(_matrix, _mode):
        """QImage QImage.transformed(QTransform _matrix, Qt.TransformationMode _mode)"""
        return QImage()
    def scaledToHeight(_height, _mode):
        """QImage QImage.scaledToHeight(int _height, Qt.TransformationMode _mode)"""
        return QImage()
    def scaledToWidth(_width, _mode):
        """QImage QImage.scaledToWidth(int _width, Qt.TransformationMode _mode)"""
        return QImage()
    def scaled(_width, _height, _aspectRatioMode, _transformMode):
        """QImage QImage.scaled(int _width, int _height, Qt.AspectRatioMode _aspectRatioMode, Qt.TransformationMode _transformMode)"""
        return QImage()
    def scaled(_size, _aspectRatioMode, _transformMode):
        """QImage QImage.scaled(QSize _size, Qt.AspectRatioMode _aspectRatioMode, Qt.TransformationMode _transformMode)"""
        return QImage()
    def createHeuristicMask(_clipTight):
        """QImage QImage.createHeuristicMask(bool _clipTight)"""
        return QImage()
    def createAlphaMask(_flags):
        """QImage QImage.createAlphaMask(Qt.ImageConversionFlags _flags)"""
        return QImage()
    def alphaChannel():
        """QImage QImage.alphaChannel()"""
        return QImage()
    def setAlphaChannel(_alphaChannel):
        """None QImage.setAlphaChannel(QImage _alphaChannel)"""
        return None
    def hasAlphaChannel():
        """bool QImage.hasAlphaChannel()"""
        return bool()
    def fill(_pixel):
        """None QImage.fill(int _pixel)"""
        return None
    def setColorTable(_colors):
        """None QImage.setColorTable(list-of-int _colors)"""
        return None
    def colorTable():
        """list-of-int QImage.colorTable()"""
        return [int()]
    def setPixel(_pt, _index_or_rgb):
        """None QImage.setPixel(QPoint _pt, int _index_or_rgb)"""
        return None
    def setPixel(_x, _y, _index_or_rgb):
        """None QImage.setPixel(int _x, int _y, int _index_or_rgb)"""
        return None
    def pixel(_pt):
        """int QImage.pixel(QPoint _pt)"""
        return int()
    def pixel(_x, _y):
        """int QImage.pixel(int _x, int _y)"""
        return int()
    def pixelIndex(_pt):
        """int QImage.pixelIndex(QPoint _pt)"""
        return int()
    def pixelIndex(_x, _y):
        """int QImage.pixelIndex(int _x, int _y)"""
        return int()
    def valid(_pt):
        """bool QImage.valid(QPoint _pt)"""
        return bool()
    def valid(_x, _y):
        """bool QImage.valid(int _x, int _y)"""
        return bool()
    def bytesPerLine():
        """int QImage.bytesPerLine()"""
        return int()
    def scanLine():
        """int QImage.scanLine()"""
        return int()
    def numBytes():
        """int QImage.numBytes()"""
        return int()
    def bits():
        """sip.voidptr QImage.bits()"""
        return sip.voidptr()
    def isGrayscale():
        """bool QImage.isGrayscale()"""
        return bool()
    def allGray():
        """bool QImage.allGray()"""
        return bool()
    def setNumColors():
        """int QImage.setNumColors()"""
        return int()
    def setColor(_i, _c):
        """None QImage.setColor(int _i, int _c)"""
        return None
    def color(_i):
        """int QImage.color(int _i)"""
        return int()
    def numColors():
        """int QImage.numColors()"""
        return int()
    def depth():
        """int QImage.depth()"""
        return int()
    def rect():
        """QRect QImage.rect()"""
        return QRect()
    def size():
        """QSize QImage.size()"""
        return QSize()
    def height():
        """int QImage.height()"""
        return int()
    def width():
        """int QImage.width()"""
        return int()
    def convertToFormat(_format, _flags):
        """QImage QImage.convertToFormat(QImage.Format _format, Qt.ImageConversionFlags _flags)"""
        return QImage()
    def convertToFormat(_format, _colorTable, _flags):
        """QImage QImage.convertToFormat(QImage.Format _format, list-of-int _colorTable, Qt.ImageConversionFlags _flags)"""
        return QImage()
    def format():
        """QImage.Format QImage.format()"""
        return QImage.Format()
    def copy(_rect):
        """QImage QImage.copy(QRect _rect)"""
        return QImage()
    def copy(_x, _y, _w, _h):
        """QImage QImage.copy(int _x, int _y, int _w, int _h)"""
        return QImage()
    def isDetached():
        """bool QImage.isDetached()"""
        return bool()
    def detach():
        """None QImage.detach()"""
        return None
    def __ne__():
        """QImage QImage.__ne__()"""
        return QImage()
    def __eq__():
        """QImage QImage.__eq__()"""
        return QImage()
    def devType():
        """int QImage.devType()"""
        return int()
    def isNull():
        """bool QImage.isNull()"""
        return bool()


class QImageIOHandler():
    """"""
    Size = int() # QImageIOHandler.ImageOption enum
    ClipRect = int() # QImageIOHandler.ImageOption enum
    Description = int() # QImageIOHandler.ImageOption enum
    ScaledClipRect = int() # QImageIOHandler.ImageOption enum
    ScaledSize = int() # QImageIOHandler.ImageOption enum
    CompressionRatio = int() # QImageIOHandler.ImageOption enum
    Gamma = int() # QImageIOHandler.ImageOption enum
    Quality = int() # QImageIOHandler.ImageOption enum
    Name = int() # QImageIOHandler.ImageOption enum
    SubType = int() # QImageIOHandler.ImageOption enum
    IncrementalReading = int() # QImageIOHandler.ImageOption enum
    Endianness = int() # QImageIOHandler.ImageOption enum
    Animation = int() # QImageIOHandler.ImageOption enum
    BackgroundColor = int() # QImageIOHandler.ImageOption enum

    def __init__():
        """None QImageIOHandler.__init__()"""
        return None
    def currentImageRect():
        """QRect QImageIOHandler.currentImageRect()"""
        return QRect()
    def currentImageNumber():
        """int QImageIOHandler.currentImageNumber()"""
        return int()
    def nextImageDelay():
        """int QImageIOHandler.nextImageDelay()"""
        return int()
    def imageCount():
        """int QImageIOHandler.imageCount()"""
        return int()
    def loopCount():
        """int QImageIOHandler.loopCount()"""
        return int()
    def jumpToImage(_imageNumber):
        """bool QImageIOHandler.jumpToImage(int _imageNumber)"""
        return bool()
    def jumpToNextImage():
        """bool QImageIOHandler.jumpToNextImage()"""
        return bool()
    def supportsOption(_option):
        """bool QImageIOHandler.supportsOption(QImageIOHandler.ImageOption _option)"""
        return bool()
    def setOption(_option, _value):
        """None QImageIOHandler.setOption(QImageIOHandler.ImageOption _option, QVariant _value)"""
        return None
    def option(_option):
        """QVariant QImageIOHandler.option(QImageIOHandler.ImageOption _option)"""
        return QVariant()
    def write(_image):
        """bool QImageIOHandler.write(QImage _image)"""
        return bool()
    def read(_image):
        """abstract bool QImageIOHandler.read(QImage _image)"""
        return bool()
    def canRead():
        """abstract bool QImageIOHandler.canRead()"""
        return bool()
    def name():
        """QByteArray QImageIOHandler.name()"""
        return QByteArray()
    def format():
        """QByteArray QImageIOHandler.format()"""
        return QByteArray()
    def setFormat(_format):
        """None QImageIOHandler.setFormat(QByteArray _format)"""
        return None
    def device():
        """QIODevice QImageIOHandler.device()"""
        return QIODevice()
    def setDevice(_device):
        """None QImageIOHandler.setDevice(QIODevice _device)"""
        return None


class QImageReader():
    """"""
    UnknownError = int() # QImageReader.ImageReaderError enum
    FileNotFoundError = int() # QImageReader.ImageReaderError enum
    DeviceError = int() # QImageReader.ImageReaderError enum
    UnsupportedFormatError = int() # QImageReader.ImageReaderError enum
    InvalidDataError = int() # QImageReader.ImageReaderError enum

    def __init__():
        """None QImageReader.__init__()"""
        return None
    def __init__(_device, _format):
        """None QImageReader.__init__(QIODevice _device, QByteArray _format)"""
        return None
    def __init__(_fileName, _format):
        """None QImageReader.__init__(QString _fileName, QByteArray _format)"""
        return None
    def decideFormatFromContent():
        """bool QImageReader.decideFormatFromContent()"""
        return bool()
    def setDecideFormatFromContent(_ignored):
        """None QImageReader.setDecideFormatFromContent(bool _ignored)"""
        return None
    def autoDetectImageFormat():
        """bool QImageReader.autoDetectImageFormat()"""
        return bool()
    def setAutoDetectImageFormat(_enabled):
        """None QImageReader.setAutoDetectImageFormat(bool _enabled)"""
        return None
    def supportsOption(_option):
        """bool QImageReader.supportsOption(QImageIOHandler.ImageOption _option)"""
        return bool()
    def quality():
        """int QImageReader.quality()"""
        return int()
    def setQuality(_quality):
        """None QImageReader.setQuality(int _quality)"""
        return None
    def supportsAnimation():
        """bool QImageReader.supportsAnimation()"""
        return bool()
    def backgroundColor():
        """QColor QImageReader.backgroundColor()"""
        return QColor()
    def setBackgroundColor(_color):
        """None QImageReader.setBackgroundColor(QColor _color)"""
        return None
    def text(_key):
        """QString QImageReader.text(QString _key)"""
        return QString()
    def textKeys():
        """QStringList QImageReader.textKeys()"""
        return QStringList()
    def supportedImageFormats():
        """list-of-QByteArray QImageReader.supportedImageFormats()"""
        return [QByteArray()]
    def imageFormat(_fileName):
        """QByteArray QImageReader.imageFormat(QString _fileName)"""
        return QByteArray()
    def imageFormat(_device):
        """QByteArray QImageReader.imageFormat(QIODevice _device)"""
        return QByteArray()
    def imageFormat():
        """QImage.Format QImageReader.imageFormat()"""
        return QImage.Format()
    def errorString():
        """QString QImageReader.errorString()"""
        return QString()
    def error():
        """QImageReader.ImageReaderError QImageReader.error()"""
        return QImageReader.ImageReaderError()
    def currentImageRect():
        """QRect QImageReader.currentImageRect()"""
        return QRect()
    def currentImageNumber():
        """int QImageReader.currentImageNumber()"""
        return int()
    def nextImageDelay():
        """int QImageReader.nextImageDelay()"""
        return int()
    def imageCount():
        """int QImageReader.imageCount()"""
        return int()
    def loopCount():
        """int QImageReader.loopCount()"""
        return int()
    def jumpToImage(_imageNumber):
        """bool QImageReader.jumpToImage(int _imageNumber)"""
        return bool()
    def jumpToNextImage():
        """bool QImageReader.jumpToNextImage()"""
        return bool()
    def read():
        """QImage QImageReader.read()"""
        return QImage()
    def read(_image):
        """bool QImageReader.read(QImage _image)"""
        return bool()
    def canRead():
        """bool QImageReader.canRead()"""
        return bool()
    def scaledClipRect():
        """QRect QImageReader.scaledClipRect()"""
        return QRect()
    def setScaledClipRect(_rect):
        """None QImageReader.setScaledClipRect(QRect _rect)"""
        return None
    def scaledSize():
        """QSize QImageReader.scaledSize()"""
        return QSize()
    def setScaledSize(_size):
        """None QImageReader.setScaledSize(QSize _size)"""
        return None
    def clipRect():
        """QRect QImageReader.clipRect()"""
        return QRect()
    def setClipRect(_rect):
        """None QImageReader.setClipRect(QRect _rect)"""
        return None
    def size():
        """QSize QImageReader.size()"""
        return QSize()
    def fileName():
        """QString QImageReader.fileName()"""
        return QString()
    def setFileName(_fileName):
        """None QImageReader.setFileName(QString _fileName)"""
        return None
    def device():
        """QIODevice QImageReader.device()"""
        return QIODevice()
    def setDevice(_device):
        """None QImageReader.setDevice(QIODevice _device)"""
        return None
    def format():
        """QByteArray QImageReader.format()"""
        return QByteArray()
    def setFormat(_format):
        """None QImageReader.setFormat(QByteArray _format)"""
        return None


class QImageWriter():
    """"""
    UnknownError = int() # QImageWriter.ImageWriterError enum
    DeviceError = int() # QImageWriter.ImageWriterError enum
    UnsupportedFormatError = int() # QImageWriter.ImageWriterError enum

    def __init__():
        """None QImageWriter.__init__()"""
        return None
    def __init__(_device, _format):
        """None QImageWriter.__init__(QIODevice _device, QByteArray _format)"""
        return None
    def __init__(_fileName, _format):
        """None QImageWriter.__init__(QString _fileName, QByteArray _format)"""
        return None
    def compression():
        """int QImageWriter.compression()"""
        return int()
    def setCompression(_compression):
        """None QImageWriter.setCompression(int _compression)"""
        return None
    def supportsOption(_option):
        """bool QImageWriter.supportsOption(QImageIOHandler.ImageOption _option)"""
        return bool()
    def setText(_key, _text):
        """None QImageWriter.setText(QString _key, QString _text)"""
        return None
    def supportedImageFormats():
        """list-of-QByteArray QImageWriter.supportedImageFormats()"""
        return [QByteArray()]
    def errorString():
        """QString QImageWriter.errorString()"""
        return QString()
    def error():
        """QImageWriter.ImageWriterError QImageWriter.error()"""
        return QImageWriter.ImageWriterError()
    def write(_image):
        """bool QImageWriter.write(QImage _image)"""
        return bool()
    def canWrite():
        """bool QImageWriter.canWrite()"""
        return bool()
    def description():
        """QString QImageWriter.description()"""
        return QString()
    def setDescription(_description):
        """None QImageWriter.setDescription(QString _description)"""
        return None
    def gamma():
        """float QImageWriter.gamma()"""
        return float()
    def setGamma(_gamma):
        """None QImageWriter.setGamma(float _gamma)"""
        return None
    def quality():
        """int QImageWriter.quality()"""
        return int()
    def setQuality(_quality):
        """None QImageWriter.setQuality(int _quality)"""
        return None
    def fileName():
        """QString QImageWriter.fileName()"""
        return QString()
    def setFileName(_fileName):
        """None QImageWriter.setFileName(QString _fileName)"""
        return None
    def device():
        """QIODevice QImageWriter.device()"""
        return QIODevice()
    def setDevice(_device):
        """None QImageWriter.setDevice(QIODevice _device)"""
        return None
    def format():
        """QByteArray QImageWriter.format()"""
        return QByteArray()
    def setFormat(_format):
        """None QImageWriter.setFormat(QByteArray _format)"""
        return None


class QInputContext(QObject):
    """"""
    PreeditFormat = int() # QInputContext.StandardFormat enum
    SelectionFormat = int() # QInputContext.StandardFormat enum

    def __init__(_parent):
        """None QInputContext.__init__(QObject _parent)"""
        return None
    def standardFormat(_s):
        """QTextFormat QInputContext.standardFormat(QInputContext.StandardFormat _s)"""
        return QTextFormat()
    def sendEvent(_event):
        """None QInputContext.sendEvent(QInputMethodEvent _event)"""
        return None
    def filterEvent(_event):
        """bool QInputContext.filterEvent(QEvent _event)"""
        return bool()
    def actions():
        """list-of-QAction QInputContext.actions()"""
        return [QAction()]
    def widgetDestroyed(_w):
        """None QInputContext.widgetDestroyed(QWidget _w)"""
        return None
    def setFocusWidget(_w):
        """None QInputContext.setFocusWidget(QWidget _w)"""
        return None
    def focusWidget():
        """QWidget QInputContext.focusWidget()"""
        return QWidget()
    def isComposing():
        """abstract bool QInputContext.isComposing()"""
        return bool()
    def font():
        """QFont QInputContext.font()"""
        return QFont()
    def mouseHandler(_x, _event):
        """None QInputContext.mouseHandler(int _x, QMouseEvent _event)"""
        return None
    def update():
        """None QInputContext.update()"""
        return None
    def reset():
        """abstract None QInputContext.reset()"""
        return None
    def language():
        """abstract QString QInputContext.language()"""
        return QString()
    def identifierName():
        """abstract QString QInputContext.identifierName()"""
        return QString()


class QInputContextFactory():
    """"""
    def __init__():
        """None QInputContextFactory.__init__()"""
        return None
    def __init__():
        """QInputContextFactory QInputContextFactory.__init__()"""
        return QInputContextFactory()
    def description(_key):
        """QString QInputContextFactory.description(QString _key)"""
        return QString()
    def displayName(_key):
        """QString QInputContextFactory.displayName(QString _key)"""
        return QString()
    def languages(_key):
        """QStringList QInputContextFactory.languages(QString _key)"""
        return QStringList()
    def create(_key, _parent):
        """QInputContext QInputContextFactory.create(QString _key, QObject _parent)"""
        return QInputContext()
    def keys():
        """QStringList QInputContextFactory.keys()"""
        return QStringList()


class QInputDialog(QDialog):
    """"""
    TextInput = int() # QInputDialog.InputMode enum
    IntInput = int() # QInputDialog.InputMode enum
    DoubleInput = int() # QInputDialog.InputMode enum

    NoButtons = int() # QInputDialog.InputDialogOption enum
    UseListViewForComboBoxItems = int() # QInputDialog.InputDialogOption enum

    def __init__(_parent, _flags):
        """None QInputDialog.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def done(_result):
        """None QInputDialog.done(int _result)"""
        return None
    def setVisible(_visible):
        """None QInputDialog.setVisible(bool _visible)"""
        return None
    def sizeHint():
        """QSize QInputDialog.sizeHint()"""
        return QSize()
    def minimumSizeHint():
        """QSize QInputDialog.minimumSizeHint()"""
        return QSize()
    def open():
        """None QInputDialog.open()"""
        return None
    def open(_receiver, _member):
        """None QInputDialog.open(QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(_receiver):
        """None QInputDialog.open(callable _receiver)"""
        return None
    def cancelButtonText():
        """QString QInputDialog.cancelButtonText()"""
        return QString()
    def setCancelButtonText(_text):
        """None QInputDialog.setCancelButtonText(QString _text)"""
        return None
    def okButtonText():
        """QString QInputDialog.okButtonText()"""
        return QString()
    def setOkButtonText(_text):
        """None QInputDialog.setOkButtonText(QString _text)"""
        return None
    def doubleDecimals():
        """int QInputDialog.doubleDecimals()"""
        return int()
    def setDoubleDecimals(_decimals):
        """None QInputDialog.setDoubleDecimals(int _decimals)"""
        return None
    def setDoubleRange(_min, _max):
        """None QInputDialog.setDoubleRange(float _min, float _max)"""
        return None
    def doubleMaximum():
        """float QInputDialog.doubleMaximum()"""
        return float()
    def setDoubleMaximum(_max):
        """None QInputDialog.setDoubleMaximum(float _max)"""
        return None
    def doubleMinimum():
        """float QInputDialog.doubleMinimum()"""
        return float()
    def setDoubleMinimum(_min):
        """None QInputDialog.setDoubleMinimum(float _min)"""
        return None
    def doubleValue():
        """float QInputDialog.doubleValue()"""
        return float()
    def setDoubleValue(_value):
        """None QInputDialog.setDoubleValue(float _value)"""
        return None
    def intStep():
        """int QInputDialog.intStep()"""
        return int()
    def setIntStep(_step):
        """None QInputDialog.setIntStep(int _step)"""
        return None
    def setIntRange(_min, _max):
        """None QInputDialog.setIntRange(int _min, int _max)"""
        return None
    def intMaximum():
        """int QInputDialog.intMaximum()"""
        return int()
    def setIntMaximum(_max):
        """None QInputDialog.setIntMaximum(int _max)"""
        return None
    def intMinimum():
        """int QInputDialog.intMinimum()"""
        return int()
    def setIntMinimum(_min):
        """None QInputDialog.setIntMinimum(int _min)"""
        return None
    def intValue():
        """int QInputDialog.intValue()"""
        return int()
    def setIntValue(_value):
        """None QInputDialog.setIntValue(int _value)"""
        return None
    def comboBoxItems():
        """QStringList QInputDialog.comboBoxItems()"""
        return QStringList()
    def setComboBoxItems(_items):
        """None QInputDialog.setComboBoxItems(QStringList _items)"""
        return None
    def isComboBoxEditable():
        """bool QInputDialog.isComboBoxEditable()"""
        return bool()
    def setComboBoxEditable(_editable):
        """None QInputDialog.setComboBoxEditable(bool _editable)"""
        return None
    def textEchoMode():
        """QLineEdit.EchoMode QInputDialog.textEchoMode()"""
        return QLineEdit.EchoMode()
    def setTextEchoMode(_mode):
        """None QInputDialog.setTextEchoMode(QLineEdit.EchoMode _mode)"""
        return None
    def textValue():
        """QString QInputDialog.textValue()"""
        return QString()
    def setTextValue(_text):
        """None QInputDialog.setTextValue(QString _text)"""
        return None
    def options():
        """QInputDialog.InputDialogOptions QInputDialog.options()"""
        return QInputDialog.InputDialogOptions()
    def setOptions(_options):
        """None QInputDialog.setOptions(QInputDialog.InputDialogOptions _options)"""
        return None
    def testOption(_option):
        """bool QInputDialog.testOption(QInputDialog.InputDialogOption _option)"""
        return bool()
    def setOption(_option, _on):
        """None QInputDialog.setOption(QInputDialog.InputDialogOption _option, bool _on)"""
        return None
    def labelText():
        """QString QInputDialog.labelText()"""
        return QString()
    def setLabelText(_text):
        """None QInputDialog.setLabelText(QString _text)"""
        return None
    def inputMode():
        """QInputDialog.InputMode QInputDialog.inputMode()"""
        return QInputDialog.InputMode()
    def setInputMode(_mode):
        """None QInputDialog.setInputMode(QInputDialog.InputMode _mode)"""
        return None
    def getItem(_parent, _title, _label, _list, _current, _editable, _ok, _flags):
        """QString QInputDialog.getItem(QWidget _parent, QString _title, QString _label, QStringList _list, int _current, bool _editable, bool _ok, Qt.WindowFlags _flags)"""
        return QString()
    def getDouble(_parent, _title, _label, _value, _min, _max, _decimals, _ok, _flags):
        """float QInputDialog.getDouble(QWidget _parent, QString _title, QString _label, float _value, float _min, float _max, int _decimals, bool _ok, Qt.WindowFlags _flags)"""
        return float()
    def getInteger(_parent, _title, _label, _value, _min, _max, _step, _ok, _flags):
        """int QInputDialog.getInteger(QWidget _parent, QString _title, QString _label, int _value, int _min, int _max, int _step, bool _ok, Qt.WindowFlags _flags)"""
        return int()
    def getInt(_parent, _title, _label, _value, _min, _max, _step, _ok, _flags):
        """int QInputDialog.getInt(QWidget _parent, QString _title, QString _label, int _value, int _min, int _max, int _step, bool _ok, Qt.WindowFlags _flags)"""
        return int()
    def getText(_parent, _title, _label, _mode, _text, _ok, _flags):
        """QString QInputDialog.getText(QWidget _parent, QString _title, QString _label, QLineEdit.EchoMode _mode, QString _text, bool _ok, Qt.WindowFlags _flags)"""
        return QString()


class QItemDelegate(QAbstractItemDelegate):
    """"""
    def __init__(_parent):
        """None QItemDelegate.__init__(QObject _parent)"""
        return None
    def editorEvent(_event, _model, _option, _index):
        """bool QItemDelegate.editorEvent(QEvent _event, QAbstractItemModel _model, QStyleOptionViewItem _option, QModelIndex _index)"""
        return bool()
    def eventFilter(_object, _event):
        """bool QItemDelegate.eventFilter(QObject _object, QEvent _event)"""
        return bool()
    def drawFocus(_painter, _option, _rect):
        """None QItemDelegate.drawFocus(QPainter _painter, QStyleOptionViewItem _option, QRect _rect)"""
        return None
    def drawDisplay(_painter, _option, _rect, _text):
        """None QItemDelegate.drawDisplay(QPainter _painter, QStyleOptionViewItem _option, QRect _rect, QString _text)"""
        return None
    def drawDecoration(_painter, _option, _rect, _pixmap):
        """None QItemDelegate.drawDecoration(QPainter _painter, QStyleOptionViewItem _option, QRect _rect, QPixmap _pixmap)"""
        return None
    def drawCheck(_painter, _option, _rect, _state):
        """None QItemDelegate.drawCheck(QPainter _painter, QStyleOptionViewItem _option, QRect _rect, Qt.CheckState _state)"""
        return None
    def drawBackground(_painter, _option, _index):
        """None QItemDelegate.drawBackground(QPainter _painter, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None
    def setClipping(_clip):
        """None QItemDelegate.setClipping(bool _clip)"""
        return None
    def hasClipping():
        """bool QItemDelegate.hasClipping()"""
        return bool()
    def setItemEditorFactory(_factory):
        """None QItemDelegate.setItemEditorFactory(QItemEditorFactory _factory)"""
        return None
    def itemEditorFactory():
        """QItemEditorFactory QItemDelegate.itemEditorFactory()"""
        return QItemEditorFactory()
    def updateEditorGeometry(_editor, _option, _index):
        """None QItemDelegate.updateEditorGeometry(QWidget _editor, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None
    def setModelData(_editor, _model, _index):
        """None QItemDelegate.setModelData(QWidget _editor, QAbstractItemModel _model, QModelIndex _index)"""
        return None
    def setEditorData(_editor, _index):
        """None QItemDelegate.setEditorData(QWidget _editor, QModelIndex _index)"""
        return None
    def createEditor(_parent, _option, _index):
        """QWidget QItemDelegate.createEditor(QWidget _parent, QStyleOptionViewItem _option, QModelIndex _index)"""
        return QWidget()
    def sizeHint(_option, _index):
        """QSize QItemDelegate.sizeHint(QStyleOptionViewItem _option, QModelIndex _index)"""
        return QSize()
    def paint(_painter, _option, _index):
        """None QItemDelegate.paint(QPainter _painter, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None


class QItemEditorCreatorBase():
    """"""
    def __init__():
        """None QItemEditorCreatorBase.__init__()"""
        return None
    def __init__():
        """QItemEditorCreatorBase QItemEditorCreatorBase.__init__()"""
        return QItemEditorCreatorBase()
    def valuePropertyName():
        """abstract QByteArray QItemEditorCreatorBase.valuePropertyName()"""
        return QByteArray()
    def createWidget(_parent):
        """abstract QWidget QItemEditorCreatorBase.createWidget(QWidget _parent)"""
        return QWidget()


class QItemEditorFactory():
    """"""
    def __init__():
        """None QItemEditorFactory.__init__()"""
        return None
    def __init__():
        """QItemEditorFactory QItemEditorFactory.__init__()"""
        return QItemEditorFactory()
    def setDefaultFactory(_factory):
        """None QItemEditorFactory.setDefaultFactory(QItemEditorFactory _factory)"""
        return None
    def defaultFactory():
        """QItemEditorFactory QItemEditorFactory.defaultFactory()"""
        return QItemEditorFactory()
    def registerEditor(_type, _creator):
        """None QItemEditorFactory.registerEditor(Type _type, QItemEditorCreatorBase _creator)"""
        return None
    def valuePropertyName(_type):
        """QByteArray QItemEditorFactory.valuePropertyName(Type _type)"""
        return QByteArray()
    def createEditor(_type, _parent):
        """QWidget QItemEditorFactory.createEditor(Type _type, QWidget _parent)"""
        return QWidget()


class QItemSelectionRange():
    """"""
    def __init__():
        """None QItemSelectionRange.__init__()"""
        return None
    def __init__(_other):
        """None QItemSelectionRange.__init__(QItemSelectionRange _other)"""
        return None
    def __init__(_atopLeft, _abottomRight):
        """None QItemSelectionRange.__init__(QModelIndex _atopLeft, QModelIndex _abottomRight)"""
        return None
    def __init__(_index):
        """None QItemSelectionRange.__init__(QModelIndex _index)"""
        return None
    def isEmpty():
        """bool QItemSelectionRange.isEmpty()"""
        return bool()
    def __hash__():
        """int QItemSelectionRange.__hash__()"""
        return int()
    def intersected(_other):
        """QItemSelectionRange QItemSelectionRange.intersected(QItemSelectionRange _other)"""
        return QItemSelectionRange()
    def indexes():
        """list-of-QModelIndex QItemSelectionRange.indexes()"""
        return [QModelIndex()]
    def isValid():
        """bool QItemSelectionRange.isValid()"""
        return bool()
    def __ne__(_other):
        """bool QItemSelectionRange.__ne__(QItemSelectionRange _other)"""
        return bool()
    def __eq__(_other):
        """bool QItemSelectionRange.__eq__(QItemSelectionRange _other)"""
        return bool()
    def intersect(_other):
        """QItemSelectionRange QItemSelectionRange.intersect(QItemSelectionRange _other)"""
        return QItemSelectionRange()
    def intersects(_other):
        """bool QItemSelectionRange.intersects(QItemSelectionRange _other)"""
        return bool()
    def contains(_index):
        """bool QItemSelectionRange.contains(QModelIndex _index)"""
        return bool()
    def contains(_row, _column, _parentIndex):
        """bool QItemSelectionRange.contains(int _row, int _column, QModelIndex _parentIndex)"""
        return bool()
    def model():
        """QAbstractItemModel QItemSelectionRange.model()"""
        return QAbstractItemModel()
    def parent():
        """QModelIndex QItemSelectionRange.parent()"""
        return QModelIndex()
    def bottomRight():
        """QModelIndex QItemSelectionRange.bottomRight()"""
        return QModelIndex()
    def topLeft():
        """QModelIndex QItemSelectionRange.topLeft()"""
        return QModelIndex()
    def height():
        """int QItemSelectionRange.height()"""
        return int()
    def width():
        """int QItemSelectionRange.width()"""
        return int()
    def right():
        """int QItemSelectionRange.right()"""
        return int()
    def bottom():
        """int QItemSelectionRange.bottom()"""
        return int()
    def left():
        """int QItemSelectionRange.left()"""
        return int()
    def top():
        """int QItemSelectionRange.top()"""
        return int()


class QItemSelectionModel(QObject):
    """"""
    NoUpdate = int() # QItemSelectionModel.SelectionFlag enum
    Clear = int() # QItemSelectionModel.SelectionFlag enum
    Select = int() # QItemSelectionModel.SelectionFlag enum
    Deselect = int() # QItemSelectionModel.SelectionFlag enum
    Toggle = int() # QItemSelectionModel.SelectionFlag enum
    Current = int() # QItemSelectionModel.SelectionFlag enum
    Rows = int() # QItemSelectionModel.SelectionFlag enum
    Columns = int() # QItemSelectionModel.SelectionFlag enum
    SelectCurrent = int() # QItemSelectionModel.SelectionFlag enum
    ToggleCurrent = int() # QItemSelectionModel.SelectionFlag enum
    ClearAndSelect = int() # QItemSelectionModel.SelectionFlag enum

    def __init__(_model):
        """None QItemSelectionModel.__init__(QAbstractItemModel _model)"""
        return None
    def __init__(_model, _parent):
        """None QItemSelectionModel.__init__(QAbstractItemModel _model, QObject _parent)"""
        return None
    def selectedColumns(_row):
        """list-of-QModelIndex QItemSelectionModel.selectedColumns(int _row)"""
        return [QModelIndex()]
    def selectedRows(_column):
        """list-of-QModelIndex QItemSelectionModel.selectedRows(int _column)"""
        return [QModelIndex()]
    def hasSelection():
        """bool QItemSelectionModel.hasSelection()"""
        return bool()
    def emitSelectionChanged(_newSelection, _oldSelection):
        """None QItemSelectionModel.emitSelectionChanged(QItemSelection _newSelection, QItemSelection _oldSelection)"""
        return None
    def setCurrentIndex(_index, _command):
        """None QItemSelectionModel.setCurrentIndex(QModelIndex _index, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def select(_index, _command):
        """None QItemSelectionModel.select(QModelIndex _index, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def select(_selection, _command):
        """None QItemSelectionModel.select(QItemSelection _selection, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def reset():
        """None QItemSelectionModel.reset()"""
        return None
    def clearSelection():
        """None QItemSelectionModel.clearSelection()"""
        return None
    def clear():
        """None QItemSelectionModel.clear()"""
        return None
    def model():
        """QAbstractItemModel QItemSelectionModel.model()"""
        return QAbstractItemModel()
    def selection():
        """QItemSelection QItemSelectionModel.selection()"""
        return QItemSelection()
    def selectedIndexes():
        """list-of-QModelIndex QItemSelectionModel.selectedIndexes()"""
        return [QModelIndex()]
    def columnIntersectsSelection(_column, _parent):
        """bool QItemSelectionModel.columnIntersectsSelection(int _column, QModelIndex _parent)"""
        return bool()
    def rowIntersectsSelection(_row, _parent):
        """bool QItemSelectionModel.rowIntersectsSelection(int _row, QModelIndex _parent)"""
        return bool()
    def isColumnSelected(_column, _parent):
        """bool QItemSelectionModel.isColumnSelected(int _column, QModelIndex _parent)"""
        return bool()
    def isRowSelected(_row, _parent):
        """bool QItemSelectionModel.isRowSelected(int _row, QModelIndex _parent)"""
        return bool()
    def isSelected(_index):
        """bool QItemSelectionModel.isSelected(QModelIndex _index)"""
        return bool()
    def currentIndex():
        """QModelIndex QItemSelectionModel.currentIndex()"""
        return QModelIndex()


class QItemSelection():
    """"""
    def __init__():
        """None QItemSelection.__init__()"""
        return None
    def __init__(_topLeft, _bottomRight):
        """None QItemSelection.__init__(QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None
    def __init__():
        """QItemSelection QItemSelection.__init__()"""
        return QItemSelection()
    def __iadd__(_other):
        """QItemSelection QItemSelection.__iadd__(QItemSelection _other)"""
        return QItemSelection()
    def __iadd__(_value):
        """QItemSelection QItemSelection.__iadd__(QItemSelectionRange _value)"""
        return QItemSelection()
    def lastIndexOf(_value, _from):
        """int QItemSelection.lastIndexOf(QItemSelectionRange _value, int _from)"""
        return int()
    def indexOf(_value, _from):
        """int QItemSelection.indexOf(QItemSelectionRange _value, int _from)"""
        return int()
    def last():
        """QItemSelectionRange QItemSelection.last()"""
        return QItemSelectionRange()
    def first():
        """QItemSelectionRange QItemSelection.first()"""
        return QItemSelectionRange()
    def __len__():
        """ QItemSelection.__len__()"""
        return ()
    def count(_range):
        """int QItemSelection.count(QItemSelectionRange _range)"""
        return int()
    def count():
        """int QItemSelection.count()"""
        return int()
    def swap(_i, _j):
        """None QItemSelection.swap(int _i, int _j)"""
        return None
    def move(_from, _to):
        """None QItemSelection.move(int _from, int _to)"""
        return None
    def takeLast():
        """QItemSelectionRange QItemSelection.takeLast()"""
        return QItemSelectionRange()
    def takeFirst():
        """QItemSelectionRange QItemSelection.takeFirst()"""
        return QItemSelectionRange()
    def takeAt(_i):
        """QItemSelectionRange QItemSelection.takeAt(int _i)"""
        return QItemSelectionRange()
    def removeAll(_range):
        """int QItemSelection.removeAll(QItemSelectionRange _range)"""
        return int()
    def removeAt(_i):
        """None QItemSelection.removeAt(int _i)"""
        return None
    def replace(_i, _range):
        """None QItemSelection.replace(int _i, QItemSelectionRange _range)"""
        return None
    def insert(_i, _range):
        """None QItemSelection.insert(int _i, QItemSelectionRange _range)"""
        return None
    def prepend(_range):
        """None QItemSelection.prepend(QItemSelectionRange _range)"""
        return None
    def append(_range):
        """None QItemSelection.append(QItemSelectionRange _range)"""
        return None
    def isEmpty():
        """bool QItemSelection.isEmpty()"""
        return bool()
    def clear():
        """None QItemSelection.clear()"""
        return None
    def __eq__(_other):
        """bool QItemSelection.__eq__(QItemSelection _other)"""
        return bool()
    def __ne__(_other):
        """bool QItemSelection.__ne__(QItemSelection _other)"""
        return bool()
    def __getitem__(_i):
        """QItemSelectionRange QItemSelection.__getitem__(int _i)"""
        return QItemSelectionRange()
    def __getitem__(_slice):
        """QItemSelection QItemSelection.__getitem__(slice _slice)"""
        return QItemSelection()
    def __delitem__(_i):
        """None QItemSelection.__delitem__(int _i)"""
        return None
    def __delitem__(_slice):
        """None QItemSelection.__delitem__(slice _slice)"""
        return None
    def __setitem__(_i, _range):
        """None QItemSelection.__setitem__(int _i, QItemSelectionRange _range)"""
        return None
    def __setitem__(_slice, _list):
        """None QItemSelection.__setitem__(slice _slice, QItemSelection _list)"""
        return None
    def split(_range, _other, _result):
        """None QItemSelection.split(QItemSelectionRange _range, QItemSelectionRange _other, QItemSelection _result)"""
        return None
    def merge(_other, _command):
        """None QItemSelection.merge(QItemSelection _other, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def indexes():
        """list-of-QModelIndex QItemSelection.indexes()"""
        return [QModelIndex()]
    def __contains__(_index):
        """int QItemSelection.__contains__(QModelIndex _index)"""
        return int()
    def contains(_index):
        """bool QItemSelection.contains(QModelIndex _index)"""
        return bool()
    def select(_topLeft, _bottomRight):
        """None QItemSelection.select(QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None


class QKeyEventTransition(QEventTransition):
    """"""
    def __init__(_sourceState):
        """None QKeyEventTransition.__init__(QState _sourceState)"""
        return None
    def __init__(_object, _type, _key, _sourceState):
        """None QKeyEventTransition.__init__(QObject _object, QEvent.Type _type, int _key, QState _sourceState)"""
        return None
    def eventTest(_event):
        """bool QKeyEventTransition.eventTest(QEvent _event)"""
        return bool()
    def onTransition(_event):
        """None QKeyEventTransition.onTransition(QEvent _event)"""
        return None
    def setModifierMask(_modifiers):
        """None QKeyEventTransition.setModifierMask(Qt.KeyboardModifiers _modifiers)"""
        return None
    def modifierMask():
        """Qt.KeyboardModifiers QKeyEventTransition.modifierMask()"""
        return Qt.KeyboardModifiers()
    def setKey(_key):
        """None QKeyEventTransition.setKey(int _key)"""
        return None
    def key():
        """int QKeyEventTransition.key()"""
        return int()


class QKeySequence():
    """"""
    UnknownKey = int() # QKeySequence.StandardKey enum
    HelpContents = int() # QKeySequence.StandardKey enum
    WhatsThis = int() # QKeySequence.StandardKey enum
    Open = int() # QKeySequence.StandardKey enum
    Close = int() # QKeySequence.StandardKey enum
    Save = int() # QKeySequence.StandardKey enum
    New = int() # QKeySequence.StandardKey enum
    Delete = int() # QKeySequence.StandardKey enum
    Cut = int() # QKeySequence.StandardKey enum
    Copy = int() # QKeySequence.StandardKey enum
    Paste = int() # QKeySequence.StandardKey enum
    Undo = int() # QKeySequence.StandardKey enum
    Redo = int() # QKeySequence.StandardKey enum
    Back = int() # QKeySequence.StandardKey enum
    Forward = int() # QKeySequence.StandardKey enum
    Refresh = int() # QKeySequence.StandardKey enum
    ZoomIn = int() # QKeySequence.StandardKey enum
    ZoomOut = int() # QKeySequence.StandardKey enum
    Print = int() # QKeySequence.StandardKey enum
    AddTab = int() # QKeySequence.StandardKey enum
    NextChild = int() # QKeySequence.StandardKey enum
    PreviousChild = int() # QKeySequence.StandardKey enum
    Find = int() # QKeySequence.StandardKey enum
    FindNext = int() # QKeySequence.StandardKey enum
    FindPrevious = int() # QKeySequence.StandardKey enum
    Replace = int() # QKeySequence.StandardKey enum
    SelectAll = int() # QKeySequence.StandardKey enum
    Bold = int() # QKeySequence.StandardKey enum
    Italic = int() # QKeySequence.StandardKey enum
    Underline = int() # QKeySequence.StandardKey enum
    MoveToNextChar = int() # QKeySequence.StandardKey enum
    MoveToPreviousChar = int() # QKeySequence.StandardKey enum
    MoveToNextWord = int() # QKeySequence.StandardKey enum
    MoveToPreviousWord = int() # QKeySequence.StandardKey enum
    MoveToNextLine = int() # QKeySequence.StandardKey enum
    MoveToPreviousLine = int() # QKeySequence.StandardKey enum
    MoveToNextPage = int() # QKeySequence.StandardKey enum
    MoveToPreviousPage = int() # QKeySequence.StandardKey enum
    MoveToStartOfLine = int() # QKeySequence.StandardKey enum
    MoveToEndOfLine = int() # QKeySequence.StandardKey enum
    MoveToStartOfBlock = int() # QKeySequence.StandardKey enum
    MoveToEndOfBlock = int() # QKeySequence.StandardKey enum
    MoveToStartOfDocument = int() # QKeySequence.StandardKey enum
    MoveToEndOfDocument = int() # QKeySequence.StandardKey enum
    SelectNextChar = int() # QKeySequence.StandardKey enum
    SelectPreviousChar = int() # QKeySequence.StandardKey enum
    SelectNextWord = int() # QKeySequence.StandardKey enum
    SelectPreviousWord = int() # QKeySequence.StandardKey enum
    SelectNextLine = int() # QKeySequence.StandardKey enum
    SelectPreviousLine = int() # QKeySequence.StandardKey enum
    SelectNextPage = int() # QKeySequence.StandardKey enum
    SelectPreviousPage = int() # QKeySequence.StandardKey enum
    SelectStartOfLine = int() # QKeySequence.StandardKey enum
    SelectEndOfLine = int() # QKeySequence.StandardKey enum
    SelectStartOfBlock = int() # QKeySequence.StandardKey enum
    SelectEndOfBlock = int() # QKeySequence.StandardKey enum
    SelectStartOfDocument = int() # QKeySequence.StandardKey enum
    SelectEndOfDocument = int() # QKeySequence.StandardKey enum
    DeleteStartOfWord = int() # QKeySequence.StandardKey enum
    DeleteEndOfWord = int() # QKeySequence.StandardKey enum
    DeleteEndOfLine = int() # QKeySequence.StandardKey enum
    InsertParagraphSeparator = int() # QKeySequence.StandardKey enum
    InsertLineSeparator = int() # QKeySequence.StandardKey enum
    SaveAs = int() # QKeySequence.StandardKey enum
    Preferences = int() # QKeySequence.StandardKey enum
    Quit = int() # QKeySequence.StandardKey enum

    NoMatch = int() # QKeySequence.SequenceMatch enum
    PartialMatch = int() # QKeySequence.SequenceMatch enum
    ExactMatch = int() # QKeySequence.SequenceMatch enum

    NativeText = int() # QKeySequence.SequenceFormat enum
    PortableText = int() # QKeySequence.SequenceFormat enum

    def __init__():
        """None QKeySequence.__init__()"""
        return None
    def __init__(_ks):
        """None QKeySequence.__init__(QKeySequence _ks)"""
        return None
    def __init__(_key, _format):
        """None QKeySequence.__init__(QString _key, QKeySequence.SequenceFormat _format)"""
        return None
    def __init__(_k1, _key2, _key3, _key4):
        """None QKeySequence.__init__(int _k1, int _key2, int _key3, int _key4)"""
        return None
    def __init__(_variant):
        """None QKeySequence.__init__(QVariant _variant)"""
        return None
    def keyBindings(_key):
        """list-of-QKeySequence QKeySequence.keyBindings(QKeySequence.StandardKey _key)"""
        return [QKeySequence()]
    def fromString(_str, _format):
        """QKeySequence QKeySequence.fromString(QString _str, QKeySequence.SequenceFormat _format)"""
        return QKeySequence()
    def toString(_format):
        """QString QKeySequence.toString(QKeySequence.SequenceFormat _format)"""
        return QString()
    def isDetached():
        """bool QKeySequence.isDetached()"""
        return bool()
    def __ge__(_other):
        """bool QKeySequence.__ge__(QKeySequence _other)"""
        return bool()
    def __le__(_other):
        """bool QKeySequence.__le__(QKeySequence _other)"""
        return bool()
    def __gt__(_other):
        """bool QKeySequence.__gt__(QKeySequence _other)"""
        return bool()
    def __lt__(_ks):
        """bool QKeySequence.__lt__(QKeySequence _ks)"""
        return bool()
    def __ne__(_other):
        """bool QKeySequence.__ne__(QKeySequence _other)"""
        return bool()
    def __eq__(_other):
        """bool QKeySequence.__eq__(QKeySequence _other)"""
        return bool()
    def __getitem__(_i):
        """int QKeySequence.__getitem__(int _i)"""
        return int()
    def __int__():
        """int QKeySequence.__int__()"""
        return int()
    def mnemonic(_text):
        """QKeySequence QKeySequence.mnemonic(QString _text)"""
        return QKeySequence()
    def matches(_seq):
        """QKeySequence.SequenceMatch QKeySequence.matches(QKeySequence _seq)"""
        return QKeySequence.SequenceMatch()
    def isEmpty():
        """bool QKeySequence.isEmpty()"""
        return bool()
    def __len__():
        """ QKeySequence.__len__()"""
        return ()
    def count():
        """int QKeySequence.count()"""
        return int()


class QLabel(QFrame):
    """"""
    def __init__(_parent, _flags):
        """None QLabel.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(_text, _parent, _flags):
        """None QLabel.__init__(QString _text, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def selectionStart():
        """int QLabel.selectionStart()"""
        return int()
    def selectedText():
        """QString QLabel.selectedText()"""
        return QString()
    def hasSelectedText():
        """bool QLabel.hasSelectedText()"""
        return bool()
    def setSelection():
        """int QLabel.setSelection()"""
        return int()
    def focusNextPrevChild(_next):
        """bool QLabel.focusNextPrevChild(bool _next)"""
        return bool()
    def focusOutEvent(_ev):
        """None QLabel.focusOutEvent(QFocusEvent _ev)"""
        return None
    def focusInEvent(_ev):
        """None QLabel.focusInEvent(QFocusEvent _ev)"""
        return None
    def contextMenuEvent(_ev):
        """None QLabel.contextMenuEvent(QContextMenuEvent _ev)"""
        return None
    def mouseReleaseEvent(_ev):
        """None QLabel.mouseReleaseEvent(QMouseEvent _ev)"""
        return None
    def mouseMoveEvent(_ev):
        """None QLabel.mouseMoveEvent(QMouseEvent _ev)"""
        return None
    def mousePressEvent(_ev):
        """None QLabel.mousePressEvent(QMouseEvent _ev)"""
        return None
    def keyPressEvent(_ev):
        """None QLabel.keyPressEvent(QKeyEvent _ev)"""
        return None
    def changeEvent():
        """QEvent QLabel.changeEvent()"""
        return QEvent()
    def paintEvent():
        """QPaintEvent QLabel.paintEvent()"""
        return QPaintEvent()
    def event(_e):
        """bool QLabel.event(QEvent _e)"""
        return bool()
    def setText():
        """QString QLabel.setText()"""
        return QString()
    def setPixmap():
        """QPixmap QLabel.setPixmap()"""
        return QPixmap()
    def setPicture():
        """QPicture QLabel.setPicture()"""
        return QPicture()
    def setNum():
        """float QLabel.setNum()"""
        return float()
    def setNum():
        """int QLabel.setNum()"""
        return int()
    def setMovie(_movie):
        """None QLabel.setMovie(QMovie _movie)"""
        return None
    def clear():
        """None QLabel.clear()"""
        return None
    def setOpenExternalLinks(_open):
        """None QLabel.setOpenExternalLinks(bool _open)"""
        return None
    def textInteractionFlags():
        """Qt.TextInteractionFlags QLabel.textInteractionFlags()"""
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(_flags):
        """None QLabel.setTextInteractionFlags(Qt.TextInteractionFlags _flags)"""
        return None
    def openExternalLinks():
        """bool QLabel.openExternalLinks()"""
        return bool()
    def heightForWidth():
        """int QLabel.heightForWidth()"""
        return int()
    def buddy():
        """QWidget QLabel.buddy()"""
        return QWidget()
    def setBuddy():
        """QWidget QLabel.setBuddy()"""
        return QWidget()
    def minimumSizeHint():
        """QSize QLabel.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QLabel.sizeHint()"""
        return QSize()
    def setScaledContents():
        """bool QLabel.setScaledContents()"""
        return bool()
    def hasScaledContents():
        """bool QLabel.hasScaledContents()"""
        return bool()
    def setMargin():
        """int QLabel.setMargin()"""
        return int()
    def margin():
        """int QLabel.margin()"""
        return int()
    def setIndent():
        """int QLabel.setIndent()"""
        return int()
    def indent():
        """int QLabel.indent()"""
        return int()
    def wordWrap():
        """bool QLabel.wordWrap()"""
        return bool()
    def setWordWrap(_on):
        """None QLabel.setWordWrap(bool _on)"""
        return None
    def setAlignment():
        """Qt.Alignment QLabel.setAlignment()"""
        return Qt.Alignment()
    def alignment():
        """Qt.Alignment QLabel.alignment()"""
        return Qt.Alignment()
    def setTextFormat():
        """Qt.TextFormat QLabel.setTextFormat()"""
        return Qt.TextFormat()
    def textFormat():
        """Qt.TextFormat QLabel.textFormat()"""
        return Qt.TextFormat()
    def movie():
        """QMovie QLabel.movie()"""
        return QMovie()
    def picture():
        """QPicture QLabel.picture()"""
        return QPicture()
    def pixmap():
        """QPixmap QLabel.pixmap()"""
        return QPixmap()
    def text():
        """QString QLabel.text()"""
        return QString()


class QSpacerItem(QLayoutItem):
    """"""
    def __init__(_w, _h, _hPolicy, _vPolicy):
        """None QSpacerItem.__init__(int _w, int _h, QSizePolicy.Policy _hPolicy, QSizePolicy.Policy _vPolicy)"""
        return None
    def __init__():
        """QSpacerItem QSpacerItem.__init__()"""
        return QSpacerItem()
    def spacerItem():
        """QSpacerItem QSpacerItem.spacerItem()"""
        return QSpacerItem()
    def geometry():
        """QRect QSpacerItem.geometry()"""
        return QRect()
    def setGeometry():
        """QRect QSpacerItem.setGeometry()"""
        return QRect()
    def isEmpty():
        """bool QSpacerItem.isEmpty()"""
        return bool()
    def expandingDirections():
        """Qt.Orientations QSpacerItem.expandingDirections()"""
        return Qt.Orientations()
    def maximumSize():
        """QSize QSpacerItem.maximumSize()"""
        return QSize()
    def minimumSize():
        """QSize QSpacerItem.minimumSize()"""
        return QSize()
    def sizeHint():
        """QSize QSpacerItem.sizeHint()"""
        return QSize()
    def changeSize(_w, _h, _hPolicy, _vPolicy):
        """None QSpacerItem.changeSize(int _w, int _h, QSizePolicy.Policy _hPolicy, QSizePolicy.Policy _vPolicy)"""
        return None


class QWidgetItem(QLayoutItem):
    """"""
    def __init__(_w):
        """None QWidgetItem.__init__(QWidget _w)"""
        return None
    def heightForWidth():
        """int QWidgetItem.heightForWidth()"""
        return int()
    def hasHeightForWidth():
        """bool QWidgetItem.hasHeightForWidth()"""
        return bool()
    def widget():
        """QWidget QWidgetItem.widget()"""
        return QWidget()
    def geometry():
        """QRect QWidgetItem.geometry()"""
        return QRect()
    def setGeometry():
        """QRect QWidgetItem.setGeometry()"""
        return QRect()
    def isEmpty():
        """bool QWidgetItem.isEmpty()"""
        return bool()
    def expandingDirections():
        """Qt.Orientations QWidgetItem.expandingDirections()"""
        return Qt.Orientations()
    def maximumSize():
        """QSize QWidgetItem.maximumSize()"""
        return QSize()
    def minimumSize():
        """QSize QWidgetItem.minimumSize()"""
        return QSize()
    def sizeHint():
        """QSize QWidgetItem.sizeHint()"""
        return QSize()


class QLCDNumber(QFrame):
    """"""
    Outline = int() # QLCDNumber.SegmentStyle enum
    Filled = int() # QLCDNumber.SegmentStyle enum
    Flat = int() # QLCDNumber.SegmentStyle enum

    Hex = int() # QLCDNumber.Mode enum
    Dec = int() # QLCDNumber.Mode enum
    Oct = int() # QLCDNumber.Mode enum
    Bin = int() # QLCDNumber.Mode enum

    def __init__(_parent):
        """None QLCDNumber.__init__(QWidget _parent)"""
        return None
    def __init__(_numDigits, _parent):
        """None QLCDNumber.__init__(int _numDigits, QWidget _parent)"""
        return None
    def setDigitCount(_nDigits):
        """None QLCDNumber.setDigitCount(int _nDigits)"""
        return None
    def digitCount():
        """int QLCDNumber.digitCount()"""
        return int()
    def paintEvent():
        """QPaintEvent QLCDNumber.paintEvent()"""
        return QPaintEvent()
    def event(_e):
        """bool QLCDNumber.event(QEvent _e)"""
        return bool()
    def setSmallDecimalPoint():
        """bool QLCDNumber.setSmallDecimalPoint()"""
        return bool()
    def setBinMode():
        """None QLCDNumber.setBinMode()"""
        return None
    def setOctMode():
        """None QLCDNumber.setOctMode()"""
        return None
    def setDecMode():
        """None QLCDNumber.setDecMode()"""
        return None
    def setHexMode():
        """None QLCDNumber.setHexMode()"""
        return None
    def display(_str):
        """None QLCDNumber.display(QString _str)"""
        return None
    def display(_num):
        """None QLCDNumber.display(float _num)"""
        return None
    def display(_num):
        """None QLCDNumber.display(int _num)"""
        return None
    def sizeHint():
        """QSize QLCDNumber.sizeHint()"""
        return QSize()
    def intValue():
        """int QLCDNumber.intValue()"""
        return int()
    def value():
        """float QLCDNumber.value()"""
        return float()
    def setSegmentStyle():
        """QLCDNumber.SegmentStyle QLCDNumber.setSegmentStyle()"""
        return QLCDNumber.SegmentStyle()
    def segmentStyle():
        """QLCDNumber.SegmentStyle QLCDNumber.segmentStyle()"""
        return QLCDNumber.SegmentStyle()
    def setMode():
        """QLCDNumber.Mode QLCDNumber.setMode()"""
        return QLCDNumber.Mode()
    def mode():
        """QLCDNumber.Mode QLCDNumber.mode()"""
        return QLCDNumber.Mode()
    def checkOverflow(_num):
        """bool QLCDNumber.checkOverflow(float _num)"""
        return bool()
    def checkOverflow(_num):
        """bool QLCDNumber.checkOverflow(int _num)"""
        return bool()
    def setNumDigits(_nDigits):
        """None QLCDNumber.setNumDigits(int _nDigits)"""
        return None
    def numDigits():
        """int QLCDNumber.numDigits()"""
        return int()
    def smallDecimalPoint():
        """bool QLCDNumber.smallDecimalPoint()"""
        return bool()


class QLineEdit(QWidget):
    """"""
    Normal = int() # QLineEdit.EchoMode enum
    NoEcho = int() # QLineEdit.EchoMode enum
    Password = int() # QLineEdit.EchoMode enum
    PasswordEchoOnEdit = int() # QLineEdit.EchoMode enum

    def __init__(_parent):
        """None QLineEdit.__init__(QWidget _parent)"""
        return None
    def __init__(_contents, _parent):
        """None QLineEdit.__init__(QString _contents, QWidget _parent)"""
        return None
    def setPlaceholderText():
        """QString QLineEdit.setPlaceholderText()"""
        return QString()
    def placeholderText():
        """QString QLineEdit.placeholderText()"""
        return QString()
    def textMargins():
        """QMargins QLineEdit.textMargins()"""
        return QMargins()
    def getTextMargins(_left, _top, _right, _bottom):
        """None QLineEdit.getTextMargins(int _left, int _top, int _right, int _bottom)"""
        return None
    def setTextMargins(_left, _top, _right, _bottom):
        """None QLineEdit.setTextMargins(int _left, int _top, int _right, int _bottom)"""
        return None
    def setTextMargins(_margins):
        """None QLineEdit.setTextMargins(QMargins _margins)"""
        return None
    def completer():
        """QCompleter QLineEdit.completer()"""
        return QCompleter()
    def setCompleter(_completer):
        """None QLineEdit.setCompleter(QCompleter _completer)"""
        return None
    def event():
        """QEvent QLineEdit.event()"""
        return QEvent()
    def inputMethodQuery():
        """Qt.InputMethodQuery QLineEdit.inputMethodQuery()"""
        return Qt.InputMethodQuery()
    def cursorRect():
        """QRect QLineEdit.cursorRect()"""
        return QRect()
    def inputMethodEvent():
        """QInputMethodEvent QLineEdit.inputMethodEvent()"""
        return QInputMethodEvent()
    def contextMenuEvent():
        """QContextMenuEvent QLineEdit.contextMenuEvent()"""
        return QContextMenuEvent()
    def changeEvent():
        """QEvent QLineEdit.changeEvent()"""
        return QEvent()
    def dropEvent():
        """QDropEvent QLineEdit.dropEvent()"""
        return QDropEvent()
    def dragLeaveEvent(_e):
        """None QLineEdit.dragLeaveEvent(QDragLeaveEvent _e)"""
        return None
    def dragMoveEvent(_e):
        """None QLineEdit.dragMoveEvent(QDragMoveEvent _e)"""
        return None
    def dragEnterEvent():
        """QDragEnterEvent QLineEdit.dragEnterEvent()"""
        return QDragEnterEvent()
    def paintEvent():
        """QPaintEvent QLineEdit.paintEvent()"""
        return QPaintEvent()
    def focusOutEvent():
        """QFocusEvent QLineEdit.focusOutEvent()"""
        return QFocusEvent()
    def focusInEvent():
        """QFocusEvent QLineEdit.focusInEvent()"""
        return QFocusEvent()
    def keyPressEvent():
        """QKeyEvent QLineEdit.keyPressEvent()"""
        return QKeyEvent()
    def mouseDoubleClickEvent():
        """QMouseEvent QLineEdit.mouseDoubleClickEvent()"""
        return QMouseEvent()
    def mouseReleaseEvent():
        """QMouseEvent QLineEdit.mouseReleaseEvent()"""
        return QMouseEvent()
    def mouseMoveEvent():
        """QMouseEvent QLineEdit.mouseMoveEvent()"""
        return QMouseEvent()
    def mousePressEvent():
        """QMouseEvent QLineEdit.mousePressEvent()"""
        return QMouseEvent()
    def initStyleOption(_option):
        """None QLineEdit.initStyleOption(QStyleOptionFrame _option)"""
        return None
    def createStandardContextMenu():
        """QMenu QLineEdit.createStandardContextMenu()"""
        return QMenu()
    def insert():
        """QString QLineEdit.insert()"""
        return QString()
    def deselect():
        """None QLineEdit.deselect()"""
        return None
    def paste():
        """None QLineEdit.paste()"""
        return None
    def copy():
        """None QLineEdit.copy()"""
        return None
    def cut():
        """None QLineEdit.cut()"""
        return None
    def redo():
        """None QLineEdit.redo()"""
        return None
    def undo():
        """None QLineEdit.undo()"""
        return None
    def selectAll():
        """None QLineEdit.selectAll()"""
        return None
    def clear():
        """None QLineEdit.clear()"""
        return None
    def setText():
        """QString QLineEdit.setText()"""
        return QString()
    def hasAcceptableInput():
        """bool QLineEdit.hasAcceptableInput()"""
        return bool()
    def setInputMask(_inputMask):
        """None QLineEdit.setInputMask(QString _inputMask)"""
        return None
    def inputMask():
        """QString QLineEdit.inputMask()"""
        return QString()
    def dragEnabled():
        """bool QLineEdit.dragEnabled()"""
        return bool()
    def setDragEnabled(_b):
        """None QLineEdit.setDragEnabled(bool _b)"""
        return None
    def isRedoAvailable():
        """bool QLineEdit.isRedoAvailable()"""
        return bool()
    def isUndoAvailable():
        """bool QLineEdit.isUndoAvailable()"""
        return bool()
    def selectionStart():
        """int QLineEdit.selectionStart()"""
        return int()
    def selectedText():
        """QString QLineEdit.selectedText()"""
        return QString()
    def hasSelectedText():
        """bool QLineEdit.hasSelectedText()"""
        return bool()
    def setSelection():
        """int QLineEdit.setSelection()"""
        return int()
    def setModified():
        """bool QLineEdit.setModified()"""
        return bool()
    def isModified():
        """bool QLineEdit.isModified()"""
        return bool()
    def end(_mark):
        """None QLineEdit.end(bool _mark)"""
        return None
    def home(_mark):
        """None QLineEdit.home(bool _mark)"""
        return None
    def del_():
        """None QLineEdit.del_()"""
        return None
    def backspace():
        """None QLineEdit.backspace()"""
        return None
    def cursorWordBackward(_mark):
        """None QLineEdit.cursorWordBackward(bool _mark)"""
        return None
    def cursorWordForward(_mark):
        """None QLineEdit.cursorWordForward(bool _mark)"""
        return None
    def cursorBackward(_mark, _steps):
        """None QLineEdit.cursorBackward(bool _mark, int _steps)"""
        return None
    def cursorForward(_mark, _steps):
        """None QLineEdit.cursorForward(bool _mark, int _steps)"""
        return None
    def alignment():
        """Qt.Alignment QLineEdit.alignment()"""
        return Qt.Alignment()
    def setAlignment(_flag):
        """None QLineEdit.setAlignment(Qt.Alignment _flag)"""
        return None
    def cursorPositionAt(_pos):
        """int QLineEdit.cursorPositionAt(QPoint _pos)"""
        return int()
    def setCursorPosition():
        """int QLineEdit.setCursorPosition()"""
        return int()
    def cursorPosition():
        """int QLineEdit.cursorPosition()"""
        return int()
    def minimumSizeHint():
        """QSize QLineEdit.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QLineEdit.sizeHint()"""
        return QSize()
    def validator():
        """QValidator QLineEdit.validator()"""
        return QValidator()
    def setValidator():
        """QValidator QLineEdit.setValidator()"""
        return QValidator()
    def setReadOnly():
        """bool QLineEdit.setReadOnly()"""
        return bool()
    def isReadOnly():
        """bool QLineEdit.isReadOnly()"""
        return bool()
    def setEchoMode():
        """QLineEdit.EchoMode QLineEdit.setEchoMode()"""
        return QLineEdit.EchoMode()
    def echoMode():
        """QLineEdit.EchoMode QLineEdit.echoMode()"""
        return QLineEdit.EchoMode()
    def hasFrame():
        """bool QLineEdit.hasFrame()"""
        return bool()
    def setFrame():
        """bool QLineEdit.setFrame()"""
        return bool()
    def setMaxLength():
        """int QLineEdit.setMaxLength()"""
        return int()
    def maxLength():
        """int QLineEdit.maxLength()"""
        return int()
    def displayText():
        """QString QLineEdit.displayText()"""
        return QString()
    def text():
        """QString QLineEdit.text()"""
        return QString()


class QListView(QAbstractItemView):
    """"""
    ListMode = int() # QListView.ViewMode enum
    IconMode = int() # QListView.ViewMode enum

    SinglePass = int() # QListView.LayoutMode enum
    Batched = int() # QListView.LayoutMode enum

    Fixed = int() # QListView.ResizeMode enum
    Adjust = int() # QListView.ResizeMode enum

    LeftToRight = int() # QListView.Flow enum
    TopToBottom = int() # QListView.Flow enum

    Static = int() # QListView.Movement enum
    Free = int() # QListView.Movement enum
    Snap = int() # QListView.Movement enum

    def __init__(_parent):
        """None QListView.__init__(QWidget _parent)"""
        return None
    def currentChanged(_current, _previous):
        """None QListView.currentChanged(QModelIndex _current, QModelIndex _previous)"""
        return None
    def selectionChanged(_selected, _deselected):
        """None QListView.selectionChanged(QItemSelection _selected, QItemSelection _deselected)"""
        return None
    def isSelectionRectVisible():
        """bool QListView.isSelectionRectVisible()"""
        return bool()
    def setSelectionRectVisible(_show):
        """None QListView.setSelectionRectVisible(bool _show)"""
        return None
    def wordWrap():
        """bool QListView.wordWrap()"""
        return bool()
    def setWordWrap(_on):
        """None QListView.setWordWrap(bool _on)"""
        return None
    def batchSize():
        """int QListView.batchSize()"""
        return int()
    def setBatchSize(_batchSize):
        """None QListView.setBatchSize(int _batchSize)"""
        return None
    def isIndexHidden(_index):
        """bool QListView.isIndexHidden(QModelIndex _index)"""
        return bool()
    def updateGeometries():
        """None QListView.updateGeometries()"""
        return None
    def selectedIndexes():
        """list-of-QModelIndex QListView.selectedIndexes()"""
        return [QModelIndex()]
    def visualRegionForSelection(_selection):
        """QRegion QListView.visualRegionForSelection(QItemSelection _selection)"""
        return QRegion()
    def setSelection(_rect, _command):
        """None QListView.setSelection(QRect _rect, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def setPositionForIndex(_position, _index):
        """None QListView.setPositionForIndex(QPoint _position, QModelIndex _index)"""
        return None
    def rectForIndex(_index):
        """QRect QListView.rectForIndex(QModelIndex _index)"""
        return QRect()
    def moveCursor(_cursorAction, _modifiers):
        """QModelIndex QListView.moveCursor(QAbstractItemView.CursorAction _cursorAction, Qt.KeyboardModifiers _modifiers)"""
        return QModelIndex()
    def verticalOffset():
        """int QListView.verticalOffset()"""
        return int()
    def horizontalOffset():
        """int QListView.horizontalOffset()"""
        return int()
    def paintEvent(_e):
        """None QListView.paintEvent(QPaintEvent _e)"""
        return None
    def viewOptions():
        """QStyleOptionViewItem QListView.viewOptions()"""
        return QStyleOptionViewItem()
    def startDrag(_supportedActions):
        """None QListView.startDrag(Qt.DropActions _supportedActions)"""
        return None
    def dropEvent(_e):
        """None QListView.dropEvent(QDropEvent _e)"""
        return None
    def dragLeaveEvent(_e):
        """None QListView.dragLeaveEvent(QDragLeaveEvent _e)"""
        return None
    def dragMoveEvent(_e):
        """None QListView.dragMoveEvent(QDragMoveEvent _e)"""
        return None
    def resizeEvent(_e):
        """None QListView.resizeEvent(QResizeEvent _e)"""
        return None
    def timerEvent(_e):
        """None QListView.timerEvent(QTimerEvent _e)"""
        return None
    def mouseReleaseEvent(_e):
        """None QListView.mouseReleaseEvent(QMouseEvent _e)"""
        return None
    def mouseMoveEvent(_e):
        """None QListView.mouseMoveEvent(QMouseEvent _e)"""
        return None
    def event(_e):
        """bool QListView.event(QEvent _e)"""
        return bool()
    def rowsAboutToBeRemoved(_parent, _start, _end):
        """None QListView.rowsAboutToBeRemoved(QModelIndex _parent, int _start, int _end)"""
        return None
    def rowsInserted(_parent, _start, _end):
        """None QListView.rowsInserted(QModelIndex _parent, int _start, int _end)"""
        return None
    def dataChanged(_topLeft, _bottomRight):
        """None QListView.dataChanged(QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None
    def scrollContentsBy(_dx, _dy):
        """None QListView.scrollContentsBy(int _dx, int _dy)"""
        return None
    def setRootIndex(_index):
        """None QListView.setRootIndex(QModelIndex _index)"""
        return None
    def reset():
        """None QListView.reset()"""
        return None
    def doItemsLayout():
        """None QListView.doItemsLayout()"""
        return None
    def indexAt(_p):
        """QModelIndex QListView.indexAt(QPoint _p)"""
        return QModelIndex()
    def scrollTo(_index, _hint):
        """None QListView.scrollTo(QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def visualRect(_index):
        """QRect QListView.visualRect(QModelIndex _index)"""
        return QRect()
    def uniformItemSizes():
        """bool QListView.uniformItemSizes()"""
        return bool()
    def setUniformItemSizes(_enable):
        """None QListView.setUniformItemSizes(bool _enable)"""
        return None
    def modelColumn():
        """int QListView.modelColumn()"""
        return int()
    def setModelColumn(_column):
        """None QListView.setModelColumn(int _column)"""
        return None
    def setRowHidden(_row, _hide):
        """None QListView.setRowHidden(int _row, bool _hide)"""
        return None
    def isRowHidden(_row):
        """bool QListView.isRowHidden(int _row)"""
        return bool()
    def clearPropertyFlags():
        """None QListView.clearPropertyFlags()"""
        return None
    def viewMode():
        """QListView.ViewMode QListView.viewMode()"""
        return QListView.ViewMode()
    def setViewMode(_mode):
        """None QListView.setViewMode(QListView.ViewMode _mode)"""
        return None
    def gridSize():
        """QSize QListView.gridSize()"""
        return QSize()
    def setGridSize(_size):
        """None QListView.setGridSize(QSize _size)"""
        return None
    def spacing():
        """int QListView.spacing()"""
        return int()
    def setSpacing(_space):
        """None QListView.setSpacing(int _space)"""
        return None
    def layoutMode():
        """QListView.LayoutMode QListView.layoutMode()"""
        return QListView.LayoutMode()
    def setLayoutMode(_mode):
        """None QListView.setLayoutMode(QListView.LayoutMode _mode)"""
        return None
    def resizeMode():
        """QListView.ResizeMode QListView.resizeMode()"""
        return QListView.ResizeMode()
    def setResizeMode(_mode):
        """None QListView.setResizeMode(QListView.ResizeMode _mode)"""
        return None
    def isWrapping():
        """bool QListView.isWrapping()"""
        return bool()
    def setWrapping(_enable):
        """None QListView.setWrapping(bool _enable)"""
        return None
    def flow():
        """QListView.Flow QListView.flow()"""
        return QListView.Flow()
    def setFlow(_flow):
        """None QListView.setFlow(QListView.Flow _flow)"""
        return None
    def movement():
        """QListView.Movement QListView.movement()"""
        return QListView.Movement()
    def setMovement(_movement):
        """None QListView.setMovement(QListView.Movement _movement)"""
        return None


class QListWidgetItem():
    """"""
    Type = int() # QListWidgetItem.ItemType enum
    UserType = int() # QListWidgetItem.ItemType enum

    def __init__(_parent, _type):
        """None QListWidgetItem.__init__(QListWidget _parent, int _type)"""
        return None
    def __init__(_text, _parent, _type):
        """None QListWidgetItem.__init__(QString _text, QListWidget _parent, int _type)"""
        return None
    def __init__(_icon, _text, _parent, _type):
        """None QListWidgetItem.__init__(QIcon _icon, QString _text, QListWidget _parent, int _type)"""
        return None
    def __init__(_other):
        """None QListWidgetItem.__init__(QListWidgetItem _other)"""
        return None
    def __ge__(_other):
        """bool QListWidgetItem.__ge__(QListWidgetItem _other)"""
        return bool()
    def isHidden():
        """bool QListWidgetItem.isHidden()"""
        return bool()
    def setHidden(_ahide):
        """None QListWidgetItem.setHidden(bool _ahide)"""
        return None
    def isSelected():
        """bool QListWidgetItem.isSelected()"""
        return bool()
    def setSelected(_aselect):
        """None QListWidgetItem.setSelected(bool _aselect)"""
        return None
    def setForeground(_brush):
        """None QListWidgetItem.setForeground(QBrush _brush)"""
        return None
    def foreground():
        """QBrush QListWidgetItem.foreground()"""
        return QBrush()
    def setBackground(_brush):
        """None QListWidgetItem.setBackground(QBrush _brush)"""
        return None
    def background():
        """QBrush QListWidgetItem.background()"""
        return QBrush()
    def setFont(_afont):
        """None QListWidgetItem.setFont(QFont _afont)"""
        return None
    def setWhatsThis(_awhatsThis):
        """None QListWidgetItem.setWhatsThis(QString _awhatsThis)"""
        return None
    def setToolTip(_atoolTip):
        """None QListWidgetItem.setToolTip(QString _atoolTip)"""
        return None
    def setStatusTip(_astatusTip):
        """None QListWidgetItem.setStatusTip(QString _astatusTip)"""
        return None
    def setIcon(_aicon):
        """None QListWidgetItem.setIcon(QIcon _aicon)"""
        return None
    def setText(_atext):
        """None QListWidgetItem.setText(QString _atext)"""
        return None
    def setFlags(_aflags):
        """None QListWidgetItem.setFlags(Qt.ItemFlags _aflags)"""
        return None
    def type():
        """int QListWidgetItem.type()"""
        return int()
    def write(_out):
        """None QListWidgetItem.write(QDataStream _out)"""
        return None
    def read(_in):
        """None QListWidgetItem.read(QDataStream _in)"""
        return None
    def __lt__(_other):
        """bool QListWidgetItem.__lt__(QListWidgetItem _other)"""
        return bool()
    def setData(_role, _value):
        """None QListWidgetItem.setData(int _role, QVariant _value)"""
        return None
    def data(_role):
        """QVariant QListWidgetItem.data(int _role)"""
        return QVariant()
    def setSizeHint(_size):
        """None QListWidgetItem.setSizeHint(QSize _size)"""
        return None
    def sizeHint():
        """QSize QListWidgetItem.sizeHint()"""
        return QSize()
    def setCheckState(_state):
        """None QListWidgetItem.setCheckState(Qt.CheckState _state)"""
        return None
    def checkState():
        """Qt.CheckState QListWidgetItem.checkState()"""
        return Qt.CheckState()
    def setTextColor(_color):
        """None QListWidgetItem.setTextColor(QColor _color)"""
        return None
    def textColor():
        """QColor QListWidgetItem.textColor()"""
        return QColor()
    def setBackgroundColor(_color):
        """None QListWidgetItem.setBackgroundColor(QColor _color)"""
        return None
    def backgroundColor():
        """QColor QListWidgetItem.backgroundColor()"""
        return QColor()
    def setTextAlignment(_alignment):
        """None QListWidgetItem.setTextAlignment(int _alignment)"""
        return None
    def textAlignment():
        """int QListWidgetItem.textAlignment()"""
        return int()
    def font():
        """QFont QListWidgetItem.font()"""
        return QFont()
    def whatsThis():
        """QString QListWidgetItem.whatsThis()"""
        return QString()
    def toolTip():
        """QString QListWidgetItem.toolTip()"""
        return QString()
    def statusTip():
        """QString QListWidgetItem.statusTip()"""
        return QString()
    def icon():
        """QIcon QListWidgetItem.icon()"""
        return QIcon()
    def text():
        """QString QListWidgetItem.text()"""
        return QString()
    def flags():
        """Qt.ItemFlags QListWidgetItem.flags()"""
        return Qt.ItemFlags()
    def listWidget():
        """QListWidget QListWidgetItem.listWidget()"""
        return QListWidget()
    def clone():
        """QListWidgetItem QListWidgetItem.clone()"""
        return QListWidgetItem()


class QListWidget(QListView):
    """"""
    def __init__(_parent):
        """None QListWidget.__init__(QWidget _parent)"""
        return None
    def removeItemWidget(_aItem):
        """None QListWidget.removeItemWidget(QListWidgetItem _aItem)"""
        return None
    def dropEvent(_event):
        """None QListWidget.dropEvent(QDropEvent _event)"""
        return None
    def isSortingEnabled():
        """bool QListWidget.isSortingEnabled()"""
        return bool()
    def setSortingEnabled(_enable):
        """None QListWidget.setSortingEnabled(bool _enable)"""
        return None
    def event(_e):
        """bool QListWidget.event(QEvent _e)"""
        return bool()
    def itemFromIndex(_index):
        """QListWidgetItem QListWidget.itemFromIndex(QModelIndex _index)"""
        return QListWidgetItem()
    def indexFromItem(_item):
        """QModelIndex QListWidget.indexFromItem(QListWidgetItem _item)"""
        return QModelIndex()
    def items(_data):
        """list-of-QListWidgetItem QListWidget.items(QMimeData _data)"""
        return [QListWidgetItem()]
    def supportedDropActions():
        """Qt.DropActions QListWidget.supportedDropActions()"""
        return Qt.DropActions()
    def dropMimeData(_index, _data, _action):
        """bool QListWidget.dropMimeData(int _index, QMimeData _data, Qt.DropAction _action)"""
        return bool()
    def mimeData(_items):
        """QMimeData QListWidget.mimeData(list-of-QListWidgetItem _items)"""
        return QMimeData()
    def mimeTypes():
        """QStringList QListWidget.mimeTypes()"""
        return QStringList()
    def scrollToItem(_item, _hint):
        """None QListWidget.scrollToItem(QListWidgetItem _item, QAbstractItemView.ScrollHint _hint)"""
        return None
    def clear():
        """None QListWidget.clear()"""
        return None
    def setItemHidden(_item, _hide):
        """None QListWidget.setItemHidden(QListWidgetItem _item, bool _hide)"""
        return None
    def isItemHidden(_item):
        """bool QListWidget.isItemHidden(QListWidgetItem _item)"""
        return bool()
    def findItems(_text, _flags):
        """list-of-QListWidgetItem QListWidget.findItems(QString _text, Qt.MatchFlags _flags)"""
        return [QListWidgetItem()]
    def selectedItems():
        """list-of-QListWidgetItem QListWidget.selectedItems()"""
        return [QListWidgetItem()]
    def setItemSelected(_item, _select):
        """None QListWidget.setItemSelected(QListWidgetItem _item, bool _select)"""
        return None
    def isItemSelected(_item):
        """bool QListWidget.isItemSelected(QListWidgetItem _item)"""
        return bool()
    def closePersistentEditor(_item):
        """None QListWidget.closePersistentEditor(QListWidgetItem _item)"""
        return None
    def openPersistentEditor(_item):
        """None QListWidget.openPersistentEditor(QListWidgetItem _item)"""
        return None
    def editItem(_item):
        """None QListWidget.editItem(QListWidgetItem _item)"""
        return None
    def sortItems(_order):
        """None QListWidget.sortItems(Qt.SortOrder _order)"""
        return None
    def visualItemRect(_item):
        """QRect QListWidget.visualItemRect(QListWidgetItem _item)"""
        return QRect()
    def setItemWidget(_item, _widget):
        """None QListWidget.setItemWidget(QListWidgetItem _item, QWidget _widget)"""
        return None
    def itemWidget(_item):
        """QWidget QListWidget.itemWidget(QListWidgetItem _item)"""
        return QWidget()
    def itemAt(_p):
        """QListWidgetItem QListWidget.itemAt(QPoint _p)"""
        return QListWidgetItem()
    def itemAt(_ax, _ay):
        """QListWidgetItem QListWidget.itemAt(int _ax, int _ay)"""
        return QListWidgetItem()
    def setCurrentRow(_row):
        """None QListWidget.setCurrentRow(int _row)"""
        return None
    def setCurrentRow(_row, _command):
        """None QListWidget.setCurrentRow(int _row, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def currentRow():
        """int QListWidget.currentRow()"""
        return int()
    def setCurrentItem(_item):
        """None QListWidget.setCurrentItem(QListWidgetItem _item)"""
        return None
    def setCurrentItem(_item, _command):
        """None QListWidget.setCurrentItem(QListWidgetItem _item, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def currentItem():
        """QListWidgetItem QListWidget.currentItem()"""
        return QListWidgetItem()
    def __len__():
        """ QListWidget.__len__()"""
        return ()
    def count():
        """int QListWidget.count()"""
        return int()
    def takeItem(_row):
        """QListWidgetItem QListWidget.takeItem(int _row)"""
        return QListWidgetItem()
    def addItems(_labels):
        """None QListWidget.addItems(QStringList _labels)"""
        return None
    def addItem(_aitem):
        """None QListWidget.addItem(QListWidgetItem _aitem)"""
        return None
    def addItem(_label):
        """None QListWidget.addItem(QString _label)"""
        return None
    def insertItems(_row, _labels):
        """None QListWidget.insertItems(int _row, QStringList _labels)"""
        return None
    def insertItem(_row, _item):
        """None QListWidget.insertItem(int _row, QListWidgetItem _item)"""
        return None
    def insertItem(_row, _label):
        """None QListWidget.insertItem(int _row, QString _label)"""
        return None
    def row(_item):
        """int QListWidget.row(QListWidgetItem _item)"""
        return int()
    def item(_row):
        """QListWidgetItem QListWidget.item(int _row)"""
        return QListWidgetItem()


class QMainWindow(QWidget):
    """"""
    AnimatedDocks = int() # QMainWindow.DockOption enum
    AllowNestedDocks = int() # QMainWindow.DockOption enum
    AllowTabbedDocks = int() # QMainWindow.DockOption enum
    ForceTabbedDocks = int() # QMainWindow.DockOption enum
    VerticalTabs = int() # QMainWindow.DockOption enum

    def __init__(_parent, _flags):
        """None QMainWindow.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def tabifiedDockWidgets(_dockwidget):
        """list-of-QDockWidget QMainWindow.tabifiedDockWidgets(QDockWidget _dockwidget)"""
        return [QDockWidget()]
    def setTabPosition(_areas, _tabPosition):
        """None QMainWindow.setTabPosition(Qt.DockWidgetAreas _areas, QTabWidget.TabPosition _tabPosition)"""
        return None
    def tabPosition(_area):
        """QTabWidget.TabPosition QMainWindow.tabPosition(Qt.DockWidgetArea _area)"""
        return QTabWidget.TabPosition()
    def setTabShape(_tabShape):
        """None QMainWindow.setTabShape(QTabWidget.TabShape _tabShape)"""
        return None
    def tabShape():
        """QTabWidget.TabShape QMainWindow.tabShape()"""
        return QTabWidget.TabShape()
    def setDocumentMode(_enabled):
        """None QMainWindow.setDocumentMode(bool _enabled)"""
        return None
    def documentMode():
        """bool QMainWindow.documentMode()"""
        return bool()
    def restoreDockWidget(_dockwidget):
        """bool QMainWindow.restoreDockWidget(QDockWidget _dockwidget)"""
        return bool()
    def unifiedTitleAndToolBarOnMac():
        """bool QMainWindow.unifiedTitleAndToolBarOnMac()"""
        return bool()
    def setUnifiedTitleAndToolBarOnMac(_set):
        """None QMainWindow.setUnifiedTitleAndToolBarOnMac(bool _set)"""
        return None
    def toolBarBreak(_toolbar):
        """bool QMainWindow.toolBarBreak(QToolBar _toolbar)"""
        return bool()
    def removeToolBarBreak(_before):
        """None QMainWindow.removeToolBarBreak(QToolBar _before)"""
        return None
    def dockOptions():
        """QMainWindow.DockOptions QMainWindow.dockOptions()"""
        return QMainWindow.DockOptions()
    def setDockOptions(_options):
        """None QMainWindow.setDockOptions(QMainWindow.DockOptions _options)"""
        return None
    def tabifyDockWidget(_first, _second):
        """None QMainWindow.tabifyDockWidget(QDockWidget _first, QDockWidget _second)"""
        return None
    def setMenuWidget(_menubar):
        """None QMainWindow.setMenuWidget(QWidget _menubar)"""
        return None
    def menuWidget():
        """QWidget QMainWindow.menuWidget()"""
        return QWidget()
    def isSeparator(_pos):
        """bool QMainWindow.isSeparator(QPoint _pos)"""
        return bool()
    def isDockNestingEnabled():
        """bool QMainWindow.isDockNestingEnabled()"""
        return bool()
    def isAnimated():
        """bool QMainWindow.isAnimated()"""
        return bool()
    def event(_event):
        """bool QMainWindow.event(QEvent _event)"""
        return bool()
    def contextMenuEvent(_event):
        """None QMainWindow.contextMenuEvent(QContextMenuEvent _event)"""
        return None
    def setDockNestingEnabled(_enabled):
        """None QMainWindow.setDockNestingEnabled(bool _enabled)"""
        return None
    def setAnimated(_enabled):
        """None QMainWindow.setAnimated(bool _enabled)"""
        return None
    def createPopupMenu():
        """QMenu QMainWindow.createPopupMenu()"""
        return QMenu()
    def restoreState(_state, _version):
        """bool QMainWindow.restoreState(QByteArray _state, int _version)"""
        return bool()
    def saveState(_version):
        """QByteArray QMainWindow.saveState(int _version)"""
        return QByteArray()
    def dockWidgetArea(_dockwidget):
        """Qt.DockWidgetArea QMainWindow.dockWidgetArea(QDockWidget _dockwidget)"""
        return Qt.DockWidgetArea()
    def removeDockWidget(_dockwidget):
        """None QMainWindow.removeDockWidget(QDockWidget _dockwidget)"""
        return None
    def splitDockWidget(_after, _dockwidget, _orientation):
        """None QMainWindow.splitDockWidget(QDockWidget _after, QDockWidget _dockwidget, Qt.Orientation _orientation)"""
        return None
    def addDockWidget(_area, _dockwidget):
        """None QMainWindow.addDockWidget(Qt.DockWidgetArea _area, QDockWidget _dockwidget)"""
        return None
    def addDockWidget(_area, _dockwidget, _orientation):
        """None QMainWindow.addDockWidget(Qt.DockWidgetArea _area, QDockWidget _dockwidget, Qt.Orientation _orientation)"""
        return None
    def toolBarArea(_toolbar):
        """Qt.ToolBarArea QMainWindow.toolBarArea(QToolBar _toolbar)"""
        return Qt.ToolBarArea()
    def removeToolBar(_toolbar):
        """None QMainWindow.removeToolBar(QToolBar _toolbar)"""
        return None
    def insertToolBar(_before, _toolbar):
        """None QMainWindow.insertToolBar(QToolBar _before, QToolBar _toolbar)"""
        return None
    def addToolBar(_area, _toolbar):
        """None QMainWindow.addToolBar(Qt.ToolBarArea _area, QToolBar _toolbar)"""
        return None
    def addToolBar(_toolbar):
        """None QMainWindow.addToolBar(QToolBar _toolbar)"""
        return None
    def addToolBar(_title):
        """QToolBar QMainWindow.addToolBar(QString _title)"""
        return QToolBar()
    def insertToolBarBreak(_before):
        """None QMainWindow.insertToolBarBreak(QToolBar _before)"""
        return None
    def addToolBarBreak(_area):
        """None QMainWindow.addToolBarBreak(Qt.ToolBarArea _area)"""
        return None
    def corner(_corner):
        """Qt.DockWidgetArea QMainWindow.corner(Qt.Corner _corner)"""
        return Qt.DockWidgetArea()
    def setCorner(_corner, _area):
        """None QMainWindow.setCorner(Qt.Corner _corner, Qt.DockWidgetArea _area)"""
        return None
    def setCentralWidget(_widget):
        """None QMainWindow.setCentralWidget(QWidget _widget)"""
        return None
    def centralWidget():
        """QWidget QMainWindow.centralWidget()"""
        return QWidget()
    def setStatusBar(_statusbar):
        """None QMainWindow.setStatusBar(QStatusBar _statusbar)"""
        return None
    def statusBar():
        """QStatusBar QMainWindow.statusBar()"""
        return QStatusBar()
    def setMenuBar(_menubar):
        """None QMainWindow.setMenuBar(QMenuBar _menubar)"""
        return None
    def menuBar():
        """QMenuBar QMainWindow.menuBar()"""
        return QMenuBar()
    def setToolButtonStyle(_toolButtonStyle):
        """None QMainWindow.setToolButtonStyle(Qt.ToolButtonStyle _toolButtonStyle)"""
        return None
    def toolButtonStyle():
        """Qt.ToolButtonStyle QMainWindow.toolButtonStyle()"""
        return Qt.ToolButtonStyle()
    def setIconSize(_iconSize):
        """None QMainWindow.setIconSize(QSize _iconSize)"""
        return None
    def iconSize():
        """QSize QMainWindow.iconSize()"""
        return QSize()


class QMatrix():
    """"""
    def __init__():
        """None QMatrix.__init__()"""
        return None
    def __init__(_m11, _m12, _m21, _m22, _dx, _dy):
        """None QMatrix.__init__(float _m11, float _m12, float _m21, float _m22, float _dx, float _dy)"""
        return None
    def __init__(_matrix):
        """None QMatrix.__init__(QMatrix _matrix)"""
        return None
    def determinant():
        """float QMatrix.determinant()"""
        return float()
    def isIdentity():
        """bool QMatrix.isIdentity()"""
        return bool()
    def __mul__(_o):
        """QMatrix QMatrix.__mul__(QMatrix _o)"""
        return QMatrix()
    def __imul__():
        """QMatrix QMatrix.__imul__()"""
        return QMatrix()
    def __ne__():
        """QMatrix QMatrix.__ne__()"""
        return QMatrix()
    def __eq__():
        """QMatrix QMatrix.__eq__()"""
        return QMatrix()
    def inverted(_invertible):
        """QMatrix QMatrix.inverted(bool _invertible)"""
        return QMatrix()
    def det():
        """float QMatrix.det()"""
        return float()
    def isInvertible():
        """bool QMatrix.isInvertible()"""
        return bool()
    def rotate(_a):
        """QMatrix QMatrix.rotate(float _a)"""
        return QMatrix()
    def shear(_sh, _sv):
        """QMatrix QMatrix.shear(float _sh, float _sv)"""
        return QMatrix()
    def scale(_sx, _sy):
        """QMatrix QMatrix.scale(float _sx, float _sy)"""
        return QMatrix()
    def translate(_dx, _dy):
        """QMatrix QMatrix.translate(float _dx, float _dy)"""
        return QMatrix()
    def reset():
        """None QMatrix.reset()"""
        return None
    def mapToPolygon(_r):
        """QPolygon QMatrix.mapToPolygon(QRect _r)"""
        return QPolygon()
    def mapRect():
        """QRect QMatrix.mapRect()"""
        return QRect()
    def mapRect():
        """QRectF QMatrix.mapRect()"""
        return QRectF()
    def map(_x, _y, _tx, _ty):
        """None QMatrix.map(int _x, int _y, int _tx, int _ty)"""
        return None
    def map(_x, _y, _tx, _ty):
        """None QMatrix.map(float _x, float _y, float _tx, float _ty)"""
        return None
    def map(_p):
        """QPoint QMatrix.map(QPoint _p)"""
        return QPoint()
    def map(_p):
        """QPointF QMatrix.map(QPointF _p)"""
        return QPointF()
    def map(_l):
        """QLine QMatrix.map(QLine _l)"""
        return QLine()
    def map(_l):
        """QLineF QMatrix.map(QLineF _l)"""
        return QLineF()
    def map(_a):
        """QPolygonF QMatrix.map(QPolygonF _a)"""
        return QPolygonF()
    def map(_a):
        """QPolygon QMatrix.map(QPolygon _a)"""
        return QPolygon()
    def map(_r):
        """QRegion QMatrix.map(QRegion _r)"""
        return QRegion()
    def map(_p):
        """QPainterPath QMatrix.map(QPainterPath _p)"""
        return QPainterPath()
    def dy():
        """float QMatrix.dy()"""
        return float()
    def dx():
        """float QMatrix.dx()"""
        return float()
    def m22():
        """float QMatrix.m22()"""
        return float()
    def m21():
        """float QMatrix.m21()"""
        return float()
    def m12():
        """float QMatrix.m12()"""
        return float()
    def m11():
        """float QMatrix.m11()"""
        return float()
    def setMatrix(_m11, _m12, _m21, _m22, _dx, _dy):
        """None QMatrix.setMatrix(float _m11, float _m12, float _m21, float _m22, float _dx, float _dy)"""
        return None


class QMatrix4x4():
    """"""
    def __init__():
        """None QMatrix4x4.__init__()"""
        return None
    def __init__(_values):
        """None QMatrix4x4.__init__(sequence-of-float _values)"""
        return None
    def __init__(_m11, _m12, _m13, _m14, _m21, _m22, _m23, _m24, _m31, _m32, _m33, _m34, _m41, _m42, _m43, _m44):
        """None QMatrix4x4.__init__(float _m11, float _m12, float _m13, float _m14, float _m21, float _m22, float _m23, float _m24, float _m31, float _m32, float _m33, float _m34, float _m41, float _m42, float _m43, float _m44)"""
        return None
    def __init__(_transform):
        """None QMatrix4x4.__init__(QTransform _transform)"""
        return None
    def __init__(_matrix):
        """None QMatrix4x4.__init__(QMatrix _matrix)"""
        return None
    def __init__():
        """QMatrix4x4 QMatrix4x4.__init__()"""
        return QMatrix4x4()
    def __mul__(_m2):
        """QMatrix4x4 QMatrix4x4.__mul__(QMatrix4x4 _m2)"""
        return QMatrix4x4()
    def __mul__(_vector):
        """QVector3D QMatrix4x4.__mul__(QVector3D _vector)"""
        return QVector3D()
    def __mul__(_vector):
        """QVector4D QMatrix4x4.__mul__(QVector4D _vector)"""
        return QVector4D()
    def __mul__(_point):
        """QPoint QMatrix4x4.__mul__(QPoint _point)"""
        return QPoint()
    def __mul__(_point):
        """QPointF QMatrix4x4.__mul__(QPointF _point)"""
        return QPointF()
    def __mul__(_matrix):
        """QMatrix4x4 QMatrix4x4.__mul__(QMatrix4x4 _matrix)"""
        return QMatrix4x4()
    def __mul__(_factor):
        """QMatrix4x4 QMatrix4x4.__mul__(float _factor)"""
        return QMatrix4x4()
    def __div__(_divisor):
        """QMatrix4x4 QMatrix4x4.__div__(float _divisor)"""
        return QMatrix4x4()
    def __add__(_m2):
        """QMatrix4x4 QMatrix4x4.__add__(QMatrix4x4 _m2)"""
        return QMatrix4x4()
    def __sub__(_m2):
        """QMatrix4x4 QMatrix4x4.__sub__(QMatrix4x4 _m2)"""
        return QMatrix4x4()
    def __neg__():
        """QMatrix4x4 QMatrix4x4.__neg__()"""
        return QMatrix4x4()
    def mapVector(_vector):
        """QVector3D QMatrix4x4.mapVector(QVector3D _vector)"""
        return QVector3D()
    def map(_point):
        """QPoint QMatrix4x4.map(QPoint _point)"""
        return QPoint()
    def map(_point):
        """QPointF QMatrix4x4.map(QPointF _point)"""
        return QPointF()
    def map(_point):
        """QVector3D QMatrix4x4.map(QVector3D _point)"""
        return QVector3D()
    def map(_point):
        """QVector4D QMatrix4x4.map(QVector4D _point)"""
        return QVector4D()
    def __ne__(_other):
        """bool QMatrix4x4.__ne__(QMatrix4x4 _other)"""
        return bool()
    def __eq__(_other):
        """bool QMatrix4x4.__eq__(QMatrix4x4 _other)"""
        return bool()
    def __idiv__(_divisor):
        """QMatrix4x4 QMatrix4x4.__idiv__(float _divisor)"""
        return QMatrix4x4()
    def __imul__(_other):
        """QMatrix4x4 QMatrix4x4.__imul__(QMatrix4x4 _other)"""
        return QMatrix4x4()
    def __imul__(_factor):
        """QMatrix4x4 QMatrix4x4.__imul__(float _factor)"""
        return QMatrix4x4()
    def __isub__(_other):
        """QMatrix4x4 QMatrix4x4.__isub__(QMatrix4x4 _other)"""
        return QMatrix4x4()
    def __iadd__(_other):
        """QMatrix4x4 QMatrix4x4.__iadd__(QMatrix4x4 _other)"""
        return QMatrix4x4()
    def fill(_value):
        """None QMatrix4x4.fill(float _value)"""
        return None
    def setToIdentity():
        """None QMatrix4x4.setToIdentity()"""
        return None
    def isIdentity():
        """bool QMatrix4x4.isIdentity()"""
        return bool()
    def setRow(_index, _value):
        """None QMatrix4x4.setRow(int _index, QVector4D _value)"""
        return None
    def row(_index):
        """QVector4D QMatrix4x4.row(int _index)"""
        return QVector4D()
    def setColumn(_index, _value):
        """None QMatrix4x4.setColumn(int _index, QVector4D _value)"""
        return None
    def column(_index):
        """QVector4D QMatrix4x4.column(int _index)"""
        return QVector4D()
    def __setitem__():
        """float QMatrix4x4.__setitem__()"""
        return float()
    def __getitem__():
        """object QMatrix4x4.__getitem__()"""
        return object()
    def optimize():
        """None QMatrix4x4.optimize()"""
        return None
    def data():
        """list-of-float QMatrix4x4.data()"""
        return [float()]
    def mapRect(_rect):
        """QRect QMatrix4x4.mapRect(QRect _rect)"""
        return QRect()
    def mapRect(_rect):
        """QRectF QMatrix4x4.mapRect(QRectF _rect)"""
        return QRectF()
    def toTransform():
        """QTransform QMatrix4x4.toTransform()"""
        return QTransform()
    def toTransform(_distanceToPlane):
        """QTransform QMatrix4x4.toTransform(float _distanceToPlane)"""
        return QTransform()
    def toAffine():
        """QMatrix QMatrix4x4.toAffine()"""
        return QMatrix()
    def copyDataTo():
        """list-of-float QMatrix4x4.copyDataTo()"""
        return [float()]
    def flipCoordinates():
        """None QMatrix4x4.flipCoordinates()"""
        return None
    def lookAt(_eye, _center, _up):
        """None QMatrix4x4.lookAt(QVector3D _eye, QVector3D _center, QVector3D _up)"""
        return None
    def perspective(_angle, _aspect, _nearPlane, _farPlane):
        """None QMatrix4x4.perspective(float _angle, float _aspect, float _nearPlane, float _farPlane)"""
        return None
    def frustum(_left, _right, _bottom, _top, _nearPlane, _farPlane):
        """None QMatrix4x4.frustum(float _left, float _right, float _bottom, float _top, float _nearPlane, float _farPlane)"""
        return None
    def ortho(_rect):
        """None QMatrix4x4.ortho(QRect _rect)"""
        return None
    def ortho(_rect):
        """None QMatrix4x4.ortho(QRectF _rect)"""
        return None
    def ortho(_left, _right, _bottom, _top, _nearPlane, _farPlane):
        """None QMatrix4x4.ortho(float _left, float _right, float _bottom, float _top, float _nearPlane, float _farPlane)"""
        return None
    def rotate(_angle, _vector):
        """None QMatrix4x4.rotate(float _angle, QVector3D _vector)"""
        return None
    def rotate(_angle, _x, _y, _z):
        """None QMatrix4x4.rotate(float _angle, float _x, float _y, float _z)"""
        return None
    def rotate(_quaternion):
        """None QMatrix4x4.rotate(QQuaternion _quaternion)"""
        return None
    def translate(_vector):
        """None QMatrix4x4.translate(QVector3D _vector)"""
        return None
    def translate(_x, _y):
        """None QMatrix4x4.translate(float _x, float _y)"""
        return None
    def translate(_x, _y, _z):
        """None QMatrix4x4.translate(float _x, float _y, float _z)"""
        return None
    def scale(_vector):
        """None QMatrix4x4.scale(QVector3D _vector)"""
        return None
    def scale(_x, _y):
        """None QMatrix4x4.scale(float _x, float _y)"""
        return None
    def scale(_x, _y, _z):
        """None QMatrix4x4.scale(float _x, float _y, float _z)"""
        return None
    def scale(_factor):
        """None QMatrix4x4.scale(float _factor)"""
        return None
    def normalMatrix():
        """QMatrix3x3 QMatrix4x4.normalMatrix()"""
        return QMatrix3x3()
    def transposed():
        """QMatrix4x4 QMatrix4x4.transposed()"""
        return QMatrix4x4()
    def inverted(_invertible):
        """QMatrix4x4 QMatrix4x4.inverted(bool _invertible)"""
        return QMatrix4x4()
    def determinant():
        """float QMatrix4x4.determinant()"""
        return float()
    def __repr__():
        """str QMatrix4x4.__repr__()"""
        return str()


class QMdiArea(QAbstractScrollArea):
    """"""
    CreationOrder = int() # QMdiArea.WindowOrder enum
    StackingOrder = int() # QMdiArea.WindowOrder enum
    ActivationHistoryOrder = int() # QMdiArea.WindowOrder enum

    SubWindowView = int() # QMdiArea.ViewMode enum
    TabbedView = int() # QMdiArea.ViewMode enum

    DontMaximizeSubWindowOnActivation = int() # QMdiArea.AreaOption enum

    def __init__(_parent):
        """None QMdiArea.__init__(QWidget _parent)"""
        return None
    def setDocumentMode(_enabled):
        """None QMdiArea.setDocumentMode(bool _enabled)"""
        return None
    def documentMode():
        """bool QMdiArea.documentMode()"""
        return bool()
    def tabPosition():
        """QTabWidget.TabPosition QMdiArea.tabPosition()"""
        return QTabWidget.TabPosition()
    def setTabPosition(_position):
        """None QMdiArea.setTabPosition(QTabWidget.TabPosition _position)"""
        return None
    def tabShape():
        """QTabWidget.TabShape QMdiArea.tabShape()"""
        return QTabWidget.TabShape()
    def setTabShape(_shape):
        """None QMdiArea.setTabShape(QTabWidget.TabShape _shape)"""
        return None
    def viewMode():
        """QMdiArea.ViewMode QMdiArea.viewMode()"""
        return QMdiArea.ViewMode()
    def setViewMode(_mode):
        """None QMdiArea.setViewMode(QMdiArea.ViewMode _mode)"""
        return None
    def setActivationOrder(_order):
        """None QMdiArea.setActivationOrder(QMdiArea.WindowOrder _order)"""
        return None
    def activationOrder():
        """QMdiArea.WindowOrder QMdiArea.activationOrder()"""
        return QMdiArea.WindowOrder()
    def scrollContentsBy(_dx, _dy):
        """None QMdiArea.scrollContentsBy(int _dx, int _dy)"""
        return None
    def viewportEvent(_event):
        """bool QMdiArea.viewportEvent(QEvent _event)"""
        return bool()
    def showEvent(_showEvent):
        """None QMdiArea.showEvent(QShowEvent _showEvent)"""
        return None
    def timerEvent(_timerEvent):
        """None QMdiArea.timerEvent(QTimerEvent _timerEvent)"""
        return None
    def resizeEvent(_resizeEvent):
        """None QMdiArea.resizeEvent(QResizeEvent _resizeEvent)"""
        return None
    def childEvent(_childEvent):
        """None QMdiArea.childEvent(QChildEvent _childEvent)"""
        return None
    def paintEvent(_paintEvent):
        """None QMdiArea.paintEvent(QPaintEvent _paintEvent)"""
        return None
    def eventFilter(_object, _event):
        """bool QMdiArea.eventFilter(QObject _object, QEvent _event)"""
        return bool()
    def event(_event):
        """bool QMdiArea.event(QEvent _event)"""
        return bool()
    def setupViewport(_viewport):
        """None QMdiArea.setupViewport(QWidget _viewport)"""
        return None
    def activatePreviousSubWindow():
        """None QMdiArea.activatePreviousSubWindow()"""
        return None
    def activateNextSubWindow():
        """None QMdiArea.activateNextSubWindow()"""
        return None
    def closeAllSubWindows():
        """None QMdiArea.closeAllSubWindows()"""
        return None
    def closeActiveSubWindow():
        """None QMdiArea.closeActiveSubWindow()"""
        return None
    def cascadeSubWindows():
        """None QMdiArea.cascadeSubWindows()"""
        return None
    def tileSubWindows():
        """None QMdiArea.tileSubWindows()"""
        return None
    def setActiveSubWindow(_window):
        """None QMdiArea.setActiveSubWindow(QMdiSubWindow _window)"""
        return None
    def testOption(_opton):
        """bool QMdiArea.testOption(QMdiArea.AreaOption _opton)"""
        return bool()
    def setOption(_option, _on):
        """None QMdiArea.setOption(QMdiArea.AreaOption _option, bool _on)"""
        return None
    def setBackground(_background):
        """None QMdiArea.setBackground(QBrush _background)"""
        return None
    def background():
        """QBrush QMdiArea.background()"""
        return QBrush()
    def removeSubWindow(_widget):
        """None QMdiArea.removeSubWindow(QWidget _widget)"""
        return None
    def currentSubWindow():
        """QMdiSubWindow QMdiArea.currentSubWindow()"""
        return QMdiSubWindow()
    def subWindowList(_order):
        """list-of-QMdiSubWindow QMdiArea.subWindowList(QMdiArea.WindowOrder _order)"""
        return [QMdiSubWindow()]
    def addSubWindow(_widget, _flags):
        """QMdiSubWindow QMdiArea.addSubWindow(QWidget _widget, Qt.WindowFlags _flags)"""
        return QMdiSubWindow()
    def activeSubWindow():
        """QMdiSubWindow QMdiArea.activeSubWindow()"""
        return QMdiSubWindow()
    def minimumSizeHint():
        """QSize QMdiArea.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QMdiArea.sizeHint()"""
        return QSize()


class QMdiSubWindow(QWidget):
    """"""
    RubberBandResize = int() # QMdiSubWindow.SubWindowOption enum
    RubberBandMove = int() # QMdiSubWindow.SubWindowOption enum

    def __init__(_parent, _flags):
        """None QMdiSubWindow.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def childEvent(_childEvent):
        """None QMdiSubWindow.childEvent(QChildEvent _childEvent)"""
        return None
    def focusOutEvent(_focusOutEvent):
        """None QMdiSubWindow.focusOutEvent(QFocusEvent _focusOutEvent)"""
        return None
    def focusInEvent(_focusInEvent):
        """None QMdiSubWindow.focusInEvent(QFocusEvent _focusInEvent)"""
        return None
    def contextMenuEvent(_contextMenuEvent):
        """None QMdiSubWindow.contextMenuEvent(QContextMenuEvent _contextMenuEvent)"""
        return None
    def keyPressEvent(_keyEvent):
        """None QMdiSubWindow.keyPressEvent(QKeyEvent _keyEvent)"""
        return None
    def mouseMoveEvent(_mouseEvent):
        """None QMdiSubWindow.mouseMoveEvent(QMouseEvent _mouseEvent)"""
        return None
    def mouseReleaseEvent(_mouseEvent):
        """None QMdiSubWindow.mouseReleaseEvent(QMouseEvent _mouseEvent)"""
        return None
    def mouseDoubleClickEvent(_mouseEvent):
        """None QMdiSubWindow.mouseDoubleClickEvent(QMouseEvent _mouseEvent)"""
        return None
    def mousePressEvent(_mouseEvent):
        """None QMdiSubWindow.mousePressEvent(QMouseEvent _mouseEvent)"""
        return None
    def paintEvent(_paintEvent):
        """None QMdiSubWindow.paintEvent(QPaintEvent _paintEvent)"""
        return None
    def moveEvent(_moveEvent):
        """None QMdiSubWindow.moveEvent(QMoveEvent _moveEvent)"""
        return None
    def timerEvent(_timerEvent):
        """None QMdiSubWindow.timerEvent(QTimerEvent _timerEvent)"""
        return None
    def resizeEvent(_resizeEvent):
        """None QMdiSubWindow.resizeEvent(QResizeEvent _resizeEvent)"""
        return None
    def leaveEvent(_leaveEvent):
        """None QMdiSubWindow.leaveEvent(QEvent _leaveEvent)"""
        return None
    def closeEvent(_closeEvent):
        """None QMdiSubWindow.closeEvent(QCloseEvent _closeEvent)"""
        return None
    def changeEvent(_changeEvent):
        """None QMdiSubWindow.changeEvent(QEvent _changeEvent)"""
        return None
    def hideEvent(_hideEvent):
        """None QMdiSubWindow.hideEvent(QHideEvent _hideEvent)"""
        return None
    def showEvent(_showEvent):
        """None QMdiSubWindow.showEvent(QShowEvent _showEvent)"""
        return None
    def event(_event):
        """bool QMdiSubWindow.event(QEvent _event)"""
        return bool()
    def eventFilter(_object, _event):
        """bool QMdiSubWindow.eventFilter(QObject _object, QEvent _event)"""
        return bool()
    def showShaded():
        """None QMdiSubWindow.showShaded()"""
        return None
    def showSystemMenu():
        """None QMdiSubWindow.showSystemMenu()"""
        return None
    def mdiArea():
        """QMdiArea QMdiSubWindow.mdiArea()"""
        return QMdiArea()
    def systemMenu():
        """QMenu QMdiSubWindow.systemMenu()"""
        return QMenu()
    def setSystemMenu(_systemMenu):
        """None QMdiSubWindow.setSystemMenu(QMenu _systemMenu)"""
        return None
    def keyboardPageStep():
        """int QMdiSubWindow.keyboardPageStep()"""
        return int()
    def setKeyboardPageStep(_step):
        """None QMdiSubWindow.setKeyboardPageStep(int _step)"""
        return None
    def keyboardSingleStep():
        """int QMdiSubWindow.keyboardSingleStep()"""
        return int()
    def setKeyboardSingleStep(_step):
        """None QMdiSubWindow.setKeyboardSingleStep(int _step)"""
        return None
    def testOption():
        """QMdiSubWindow.SubWindowOption QMdiSubWindow.testOption()"""
        return QMdiSubWindow.SubWindowOption()
    def setOption(_option, _on):
        """None QMdiSubWindow.setOption(QMdiSubWindow.SubWindowOption _option, bool _on)"""
        return None
    def isShaded():
        """bool QMdiSubWindow.isShaded()"""
        return bool()
    def widget():
        """QWidget QMdiSubWindow.widget()"""
        return QWidget()
    def setWidget(_widget):
        """None QMdiSubWindow.setWidget(QWidget _widget)"""
        return None
    def minimumSizeHint():
        """QSize QMdiSubWindow.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QMdiSubWindow.sizeHint()"""
        return QSize()


class QMenu(QWidget):
    """"""
    def __init__(_parent):
        """None QMenu.__init__(QWidget _parent)"""
        return None
    def __init__(_title, _parent):
        """None QMenu.__init__(QString _title, QWidget _parent)"""
        return None
    def setSeparatorsCollapsible(_collapse):
        """None QMenu.setSeparatorsCollapsible(bool _collapse)"""
        return None
    def separatorsCollapsible():
        """bool QMenu.separatorsCollapsible()"""
        return bool()
    def isEmpty():
        """bool QMenu.isEmpty()"""
        return bool()
    def focusNextPrevChild(_next):
        """bool QMenu.focusNextPrevChild(bool _next)"""
        return bool()
    def event():
        """QEvent QMenu.event()"""
        return QEvent()
    def timerEvent():
        """QTimerEvent QMenu.timerEvent()"""
        return QTimerEvent()
    def actionEvent():
        """QActionEvent QMenu.actionEvent()"""
        return QActionEvent()
    def paintEvent():
        """QPaintEvent QMenu.paintEvent()"""
        return QPaintEvent()
    def hideEvent():
        """QHideEvent QMenu.hideEvent()"""
        return QHideEvent()
    def leaveEvent():
        """QEvent QMenu.leaveEvent()"""
        return QEvent()
    def enterEvent():
        """QEvent QMenu.enterEvent()"""
        return QEvent()
    def wheelEvent():
        """QWheelEvent QMenu.wheelEvent()"""
        return QWheelEvent()
    def mouseMoveEvent():
        """QMouseEvent QMenu.mouseMoveEvent()"""
        return QMouseEvent()
    def mousePressEvent():
        """QMouseEvent QMenu.mousePressEvent()"""
        return QMouseEvent()
    def mouseReleaseEvent():
        """QMouseEvent QMenu.mouseReleaseEvent()"""
        return QMouseEvent()
    def keyPressEvent():
        """QKeyEvent QMenu.keyPressEvent()"""
        return QKeyEvent()
    def changeEvent():
        """QEvent QMenu.changeEvent()"""
        return QEvent()
    def initStyleOption(_option, _action):
        """None QMenu.initStyleOption(QStyleOptionMenuItem _option, QAction _action)"""
        return None
    def columnCount():
        """int QMenu.columnCount()"""
        return int()
    def setNoReplayFor(_widget):
        """None QMenu.setNoReplayFor(QWidget _widget)"""
        return None
    def setIcon(_icon):
        """None QMenu.setIcon(QIcon _icon)"""
        return None
    def icon():
        """QIcon QMenu.icon()"""
        return QIcon()
    def setTitle(_title):
        """None QMenu.setTitle(QString _title)"""
        return None
    def title():
        """QString QMenu.title()"""
        return QString()
    def menuAction():
        """QAction QMenu.menuAction()"""
        return QAction()
    def actionAt():
        """QPoint QMenu.actionAt()"""
        return QPoint()
    def actionGeometry():
        """QAction QMenu.actionGeometry()"""
        return QAction()
    def sizeHint():
        """QSize QMenu.sizeHint()"""
        return QSize()
    def exec_():
        """QAction QMenu.exec_()"""
        return QAction()
    def exec_(_p, _action):
        """QAction QMenu.exec_(QPoint _p, QAction _action)"""
        return QAction()
    def exec_(_actions, _pos, _action):
        """QAction QMenu.exec_(list-of-QAction _actions, QPoint _pos, QAction _action)"""
        return QAction()
    def exec_(_actions, _pos, _at, _parent):
        """QAction QMenu.exec_(list-of-QAction _actions, QPoint _pos, QAction _at, QWidget _parent)"""
        return QAction()
    def popup(_p, _action):
        """None QMenu.popup(QPoint _p, QAction _action)"""
        return None
    def activeAction():
        """QAction QMenu.activeAction()"""
        return QAction()
    def setActiveAction(_act):
        """None QMenu.setActiveAction(QAction _act)"""
        return None
    def defaultAction():
        """QAction QMenu.defaultAction()"""
        return QAction()
    def setDefaultAction():
        """QAction QMenu.setDefaultAction()"""
        return QAction()
    def hideTearOffMenu():
        """None QMenu.hideTearOffMenu()"""
        return None
    def isTearOffMenuVisible():
        """bool QMenu.isTearOffMenuVisible()"""
        return bool()
    def isTearOffEnabled():
        """bool QMenu.isTearOffEnabled()"""
        return bool()
    def setTearOffEnabled():
        """bool QMenu.setTearOffEnabled()"""
        return bool()
    def clear():
        """None QMenu.clear()"""
        return None
    def insertSeparator(_before):
        """QAction QMenu.insertSeparator(QAction _before)"""
        return QAction()
    def insertMenu(_before, _menu):
        """QAction QMenu.insertMenu(QAction _before, QMenu _menu)"""
        return QAction()
    def addSeparator():
        """QAction QMenu.addSeparator()"""
        return QAction()
    def addMenu(_menu):
        """QAction QMenu.addMenu(QMenu _menu)"""
        return QAction()
    def addMenu(_title):
        """QMenu QMenu.addMenu(QString _title)"""
        return QMenu()
    def addMenu(_icon, _title):
        """QMenu QMenu.addMenu(QIcon _icon, QString _title)"""
        return QMenu()
    def addAction(_action):
        """None QMenu.addAction(QAction _action)"""
        return None
    def addAction(_text):
        """QAction QMenu.addAction(QString _text)"""
        return QAction()
    def addAction(_icon, _text):
        """QAction QMenu.addAction(QIcon _icon, QString _text)"""
        return QAction()
    def addAction(_text, _receiver, _member, _shortcut):
        """QAction QMenu.addAction(QString _text, QObject _receiver, SLOT()SLOT() _member, QKeySequence _shortcut)"""
        return QAction()
    def addAction(_text, _receiver, _shortcut):
        """QAction QMenu.addAction(QString _text, callable _receiver, QKeySequence _shortcut)"""
        return QAction()
    def addAction(_icon, _text, _receiver, _member, _shortcut):
        """QAction QMenu.addAction(QIcon _icon, QString _text, QObject _receiver, SLOT()SLOT() _member, QKeySequence _shortcut)"""
        return QAction()
    def addAction(_icon, _text, _receiver, _shortcut):
        """QAction QMenu.addAction(QIcon _icon, QString _text, callable _receiver, QKeySequence _shortcut)"""
        return QAction()


class QMenuBar(QWidget):
    """"""
    def __init__(_parent):
        """None QMenuBar.__init__(QWidget _parent)"""
        return None
    def setNativeMenuBar(_nativeMenuBar):
        """None QMenuBar.setNativeMenuBar(bool _nativeMenuBar)"""
        return None
    def isNativeMenuBar():
        """bool QMenuBar.isNativeMenuBar()"""
        return bool()
    def timerEvent():
        """QTimerEvent QMenuBar.timerEvent()"""
        return QTimerEvent()
    def event():
        """QEvent QMenuBar.event()"""
        return QEvent()
    def eventFilter():
        """QEvent QMenuBar.eventFilter()"""
        return QEvent()
    def focusInEvent():
        """QFocusEvent QMenuBar.focusInEvent()"""
        return QFocusEvent()
    def focusOutEvent():
        """QFocusEvent QMenuBar.focusOutEvent()"""
        return QFocusEvent()
    def actionEvent():
        """QActionEvent QMenuBar.actionEvent()"""
        return QActionEvent()
    def resizeEvent():
        """QResizeEvent QMenuBar.resizeEvent()"""
        return QResizeEvent()
    def paintEvent():
        """QPaintEvent QMenuBar.paintEvent()"""
        return QPaintEvent()
    def leaveEvent():
        """QEvent QMenuBar.leaveEvent()"""
        return QEvent()
    def mouseMoveEvent():
        """QMouseEvent QMenuBar.mouseMoveEvent()"""
        return QMouseEvent()
    def mousePressEvent():
        """QMouseEvent QMenuBar.mousePressEvent()"""
        return QMouseEvent()
    def mouseReleaseEvent():
        """QMouseEvent QMenuBar.mouseReleaseEvent()"""
        return QMouseEvent()
    def keyPressEvent():
        """QKeyEvent QMenuBar.keyPressEvent()"""
        return QKeyEvent()
    def changeEvent():
        """QEvent QMenuBar.changeEvent()"""
        return QEvent()
    def initStyleOption(_option, _action):
        """None QMenuBar.initStyleOption(QStyleOptionMenuItem _option, QAction _action)"""
        return None
    def setVisible(_visible):
        """None QMenuBar.setVisible(bool _visible)"""
        return None
    def actionAt():
        """QPoint QMenuBar.actionAt()"""
        return QPoint()
    def actionGeometry():
        """QAction QMenuBar.actionGeometry()"""
        return QAction()
    def heightForWidth():
        """int QMenuBar.heightForWidth()"""
        return int()
    def minimumSizeHint():
        """QSize QMenuBar.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QMenuBar.sizeHint()"""
        return QSize()
    def isDefaultUp():
        """bool QMenuBar.isDefaultUp()"""
        return bool()
    def setDefaultUp():
        """bool QMenuBar.setDefaultUp()"""
        return bool()
    def setActiveAction(_action):
        """None QMenuBar.setActiveAction(QAction _action)"""
        return None
    def activeAction():
        """QAction QMenuBar.activeAction()"""
        return QAction()
    def clear():
        """None QMenuBar.clear()"""
        return None
    def insertSeparator(_before):
        """QAction QMenuBar.insertSeparator(QAction _before)"""
        return QAction()
    def insertMenu(_before, _menu):
        """QAction QMenuBar.insertMenu(QAction _before, QMenu _menu)"""
        return QAction()
    def addSeparator():
        """QAction QMenuBar.addSeparator()"""
        return QAction()
    def addMenu(_menu):
        """QAction QMenuBar.addMenu(QMenu _menu)"""
        return QAction()
    def addMenu(_title):
        """QMenu QMenuBar.addMenu(QString _title)"""
        return QMenu()
    def addMenu(_icon, _title):
        """QMenu QMenuBar.addMenu(QIcon _icon, QString _title)"""
        return QMenu()
    def addAction(_action):
        """None QMenuBar.addAction(QAction _action)"""
        return None
    def addAction(_text):
        """QAction QMenuBar.addAction(QString _text)"""
        return QAction()
    def addAction(_text, _receiver, _member):
        """QAction QMenuBar.addAction(QString _text, QObject _receiver, SLOT()SLOT() _member)"""
        return QAction()
    def addAction(_text, _receiver):
        """QAction QMenuBar.addAction(QString _text, callable _receiver)"""
        return QAction()


class QMessageBox(QDialog):
    """"""
    NoButton = int() # QMessageBox.StandardButton enum
    Ok = int() # QMessageBox.StandardButton enum
    Save = int() # QMessageBox.StandardButton enum
    SaveAll = int() # QMessageBox.StandardButton enum
    Open = int() # QMessageBox.StandardButton enum
    Yes = int() # QMessageBox.StandardButton enum
    YesToAll = int() # QMessageBox.StandardButton enum
    No = int() # QMessageBox.StandardButton enum
    NoToAll = int() # QMessageBox.StandardButton enum
    Abort = int() # QMessageBox.StandardButton enum
    Retry = int() # QMessageBox.StandardButton enum
    Ignore = int() # QMessageBox.StandardButton enum
    Close = int() # QMessageBox.StandardButton enum
    Cancel = int() # QMessageBox.StandardButton enum
    Discard = int() # QMessageBox.StandardButton enum
    Help = int() # QMessageBox.StandardButton enum
    Apply = int() # QMessageBox.StandardButton enum
    Reset = int() # QMessageBox.StandardButton enum
    RestoreDefaults = int() # QMessageBox.StandardButton enum
    FirstButton = int() # QMessageBox.StandardButton enum
    LastButton = int() # QMessageBox.StandardButton enum
    YesAll = int() # QMessageBox.StandardButton enum
    NoAll = int() # QMessageBox.StandardButton enum
    Default = int() # QMessageBox.StandardButton enum
    Escape = int() # QMessageBox.StandardButton enum
    FlagMask = int() # QMessageBox.StandardButton enum
    ButtonMask = int() # QMessageBox.StandardButton enum

    NoIcon = int() # QMessageBox.Icon enum
    Information = int() # QMessageBox.Icon enum
    Warning = int() # QMessageBox.Icon enum
    Critical = int() # QMessageBox.Icon enum
    Question = int() # QMessageBox.Icon enum

    InvalidRole = int() # QMessageBox.ButtonRole enum
    AcceptRole = int() # QMessageBox.ButtonRole enum
    RejectRole = int() # QMessageBox.ButtonRole enum
    DestructiveRole = int() # QMessageBox.ButtonRole enum
    ActionRole = int() # QMessageBox.ButtonRole enum
    HelpRole = int() # QMessageBox.ButtonRole enum
    YesRole = int() # QMessageBox.ButtonRole enum
    NoRole = int() # QMessageBox.ButtonRole enum
    ResetRole = int() # QMessageBox.ButtonRole enum
    ApplyRole = int() # QMessageBox.ButtonRole enum

    def __init__(_parent):
        """None QMessageBox.__init__(QWidget _parent)"""
        return None
    def __init__(_icon, _title, _text, _buttons, _parent, _flags):
        """None QMessageBox.__init__(QMessageBox.Icon _icon, QString _title, QString _text, QMessageBox.StandardButtons _buttons, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(_title, _text, _icon, _button0, _button1, _button2, _parent, _flags):
        """None QMessageBox.__init__(QString _title, QString _text, QMessageBox.Icon _icon, int _button0, int _button1, int _button2, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def buttonRole(_button):
        """QMessageBox.ButtonRole QMessageBox.buttonRole(QAbstractButton _button)"""
        return QMessageBox.ButtonRole()
    def buttons():
        """list-of-QAbstractButton QMessageBox.buttons()"""
        return [QAbstractButton()]
    def open():
        """None QMessageBox.open()"""
        return None
    def open(_receiver, _member):
        """None QMessageBox.open(QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(_receiver):
        """None QMessageBox.open(callable _receiver)"""
        return None
    def setWindowModality(_windowModality):
        """None QMessageBox.setWindowModality(Qt.WindowModality _windowModality)"""
        return None
    def setWindowTitle(_title):
        """None QMessageBox.setWindowTitle(QString _title)"""
        return None
    def setDetailedText(_text):
        """None QMessageBox.setDetailedText(QString _text)"""
        return None
    def detailedText():
        """QString QMessageBox.detailedText()"""
        return QString()
    def setInformativeText(_text):
        """None QMessageBox.setInformativeText(QString _text)"""
        return None
    def informativeText():
        """QString QMessageBox.informativeText()"""
        return QString()
    def clickedButton():
        """QAbstractButton QMessageBox.clickedButton()"""
        return QAbstractButton()
    def setEscapeButton(_button):
        """None QMessageBox.setEscapeButton(QAbstractButton _button)"""
        return None
    def setEscapeButton(_button):
        """None QMessageBox.setEscapeButton(QMessageBox.StandardButton _button)"""
        return None
    def escapeButton():
        """QAbstractButton QMessageBox.escapeButton()"""
        return QAbstractButton()
    def setDefaultButton(_button):
        """None QMessageBox.setDefaultButton(QPushButton _button)"""
        return None
    def setDefaultButton(_button):
        """None QMessageBox.setDefaultButton(QMessageBox.StandardButton _button)"""
        return None
    def defaultButton():
        """QPushButton QMessageBox.defaultButton()"""
        return QPushButton()
    def button(_which):
        """QAbstractButton QMessageBox.button(QMessageBox.StandardButton _which)"""
        return QAbstractButton()
    def standardButton(_button):
        """QMessageBox.StandardButton QMessageBox.standardButton(QAbstractButton _button)"""
        return QMessageBox.StandardButton()
    def standardButtons():
        """QMessageBox.StandardButtons QMessageBox.standardButtons()"""
        return QMessageBox.StandardButtons()
    def setStandardButtons(_buttons):
        """None QMessageBox.setStandardButtons(QMessageBox.StandardButtons _buttons)"""
        return None
    def removeButton(_button):
        """None QMessageBox.removeButton(QAbstractButton _button)"""
        return None
    def addButton(_button, _role):
        """None QMessageBox.addButton(QAbstractButton _button, QMessageBox.ButtonRole _role)"""
        return None
    def addButton(_text, _role):
        """QPushButton QMessageBox.addButton(QString _text, QMessageBox.ButtonRole _role)"""
        return QPushButton()
    def addButton(_button):
        """QPushButton QMessageBox.addButton(QMessageBox.StandardButton _button)"""
        return QPushButton()
    def changeEvent():
        """QEvent QMessageBox.changeEvent()"""
        return QEvent()
    def keyPressEvent():
        """QKeyEvent QMessageBox.keyPressEvent()"""
        return QKeyEvent()
    def closeEvent():
        """QCloseEvent QMessageBox.closeEvent()"""
        return QCloseEvent()
    def showEvent():
        """QShowEvent QMessageBox.showEvent()"""
        return QShowEvent()
    def resizeEvent():
        """QResizeEvent QMessageBox.resizeEvent()"""
        return QResizeEvent()
    def event(_e):
        """bool QMessageBox.event(QEvent _e)"""
        return bool()
    def standardIcon(_icon):
        """QPixmap QMessageBox.standardIcon(QMessageBox.Icon _icon)"""
        return QPixmap()
    def sizeHint():
        """QSize QMessageBox.sizeHint()"""
        return QSize()
    def aboutQt(_parent, _title):
        """None QMessageBox.aboutQt(QWidget _parent, QString _title)"""
        return None
    def about(_parent, _caption, _text):
        """None QMessageBox.about(QWidget _parent, QString _caption, QString _text)"""
        return None
    def critical(_parent, _title, _text, _buttons, _defaultButton):
        """QMessageBox.StandardButton QMessageBox.critical(QWidget _parent, QString _title, QString _text, QMessageBox.StandardButtons _buttons, QMessageBox.StandardButton _defaultButton)"""
        return QMessageBox.StandardButton()
    def critical(_parent, _title, _text, _button0, _button1, _button2):
        """int QMessageBox.critical(QWidget _parent, QString _title, QString _text, int _button0, int _button1, int _button2)"""
        return int()
    def critical(_parent, _title, _text, _button0Text, _button1Text, _button2Text, _defaultButtonNumber, _escapeButtonNumber):
        """int QMessageBox.critical(QWidget _parent, QString _title, QString _text, QString _button0Text, QString _button1Text, QString _button2Text, int _defaultButtonNumber, int _escapeButtonNumber)"""
        return int()
    def warning(_parent, _title, _text, _buttons, _defaultButton):
        """QMessageBox.StandardButton QMessageBox.warning(QWidget _parent, QString _title, QString _text, QMessageBox.StandardButtons _buttons, QMessageBox.StandardButton _defaultButton)"""
        return QMessageBox.StandardButton()
    def warning(_parent, _title, _text, _button0, _button1, _button2):
        """int QMessageBox.warning(QWidget _parent, QString _title, QString _text, int _button0, int _button1, int _button2)"""
        return int()
    def warning(_parent, _title, _text, _button0Text, _button1Text, _button2Text, _defaultButtonNumber, _escapeButtonNumber):
        """int QMessageBox.warning(QWidget _parent, QString _title, QString _text, QString _button0Text, QString _button1Text, QString _button2Text, int _defaultButtonNumber, int _escapeButtonNumber)"""
        return int()
    def question(_parent, _title, _text, _buttons, _defaultButton):
        """QMessageBox.StandardButton QMessageBox.question(QWidget _parent, QString _title, QString _text, QMessageBox.StandardButtons _buttons, QMessageBox.StandardButton _defaultButton)"""
        return QMessageBox.StandardButton()
    def question(_parent, _title, _text, _button0, _button1, _button2):
        """int QMessageBox.question(QWidget _parent, QString _title, QString _text, int _button0, int _button1, int _button2)"""
        return int()
    def question(_parent, _title, _text, _button0Text, _button1Text, _button2Text, _defaultButtonNumber, _escapeButtonNumber):
        """int QMessageBox.question(QWidget _parent, QString _title, QString _text, QString _button0Text, QString _button1Text, QString _button2Text, int _defaultButtonNumber, int _escapeButtonNumber)"""
        return int()
    def information(_parent, _title, _text, _buttons, _defaultButton):
        """QMessageBox.StandardButton QMessageBox.information(QWidget _parent, QString _title, QString _text, QMessageBox.StandardButtons _buttons, QMessageBox.StandardButton _defaultButton)"""
        return QMessageBox.StandardButton()
    def information(_parent, _title, _text, _button0, _button1, _button2):
        """int QMessageBox.information(QWidget _parent, QString _title, QString _text, int _button0, int _button1, int _button2)"""
        return int()
    def information(_parent, _title, _text, _button0Text, _button1Text, _button2Text, _defaultButtonNumber, _escapeButtonNumber):
        """int QMessageBox.information(QWidget _parent, QString _title, QString _text, QString _button0Text, QString _button1Text, QString _button2Text, int _defaultButtonNumber, int _escapeButtonNumber)"""
        return int()
    def setTextFormat():
        """Qt.TextFormat QMessageBox.setTextFormat()"""
        return Qt.TextFormat()
    def textFormat():
        """Qt.TextFormat QMessageBox.textFormat()"""
        return Qt.TextFormat()
    def setButtonText(_button):
        """QString QMessageBox.setButtonText(int _button)"""
        return QString()
    def buttonText(_button):
        """QString QMessageBox.buttonText(int _button)"""
        return QString()
    def setIconPixmap():
        """QPixmap QMessageBox.setIconPixmap()"""
        return QPixmap()
    def iconPixmap():
        """QPixmap QMessageBox.iconPixmap()"""
        return QPixmap()
    def setIcon():
        """QMessageBox.Icon QMessageBox.setIcon()"""
        return QMessageBox.Icon()
    def icon():
        """QMessageBox.Icon QMessageBox.icon()"""
        return QMessageBox.Icon()
    def setText():
        """QString QMessageBox.setText()"""
        return QString()
    def text():
        """QString QMessageBox.text()"""
        return QString()


class QMouseEventTransition(QEventTransition):
    """"""
    def __init__(_sourceState):
        """None QMouseEventTransition.__init__(QState _sourceState)"""
        return None
    def __init__(_object, _type, _button, _sourceState):
        """None QMouseEventTransition.__init__(QObject _object, QEvent.Type _type, Qt.MouseButton _button, QState _sourceState)"""
        return None
    def eventTest(_event):
        """bool QMouseEventTransition.eventTest(QEvent _event)"""
        return bool()
    def onTransition(_event):
        """None QMouseEventTransition.onTransition(QEvent _event)"""
        return None
    def setHitTestPath(_path):
        """None QMouseEventTransition.setHitTestPath(QPainterPath _path)"""
        return None
    def hitTestPath():
        """QPainterPath QMouseEventTransition.hitTestPath()"""
        return QPainterPath()
    def setModifierMask(_modifiers):
        """None QMouseEventTransition.setModifierMask(Qt.KeyboardModifiers _modifiers)"""
        return None
    def modifierMask():
        """Qt.KeyboardModifiers QMouseEventTransition.modifierMask()"""
        return Qt.KeyboardModifiers()
    def setButton(_button):
        """None QMouseEventTransition.setButton(Qt.MouseButton _button)"""
        return None
    def button():
        """Qt.MouseButton QMouseEventTransition.button()"""
        return Qt.MouseButton()


class QMovie(QObject):
    """"""
    CacheNone = int() # QMovie.CacheMode enum
    CacheAll = int() # QMovie.CacheMode enum

    NotRunning = int() # QMovie.MovieState enum
    Paused = int() # QMovie.MovieState enum
    Running = int() # QMovie.MovieState enum

    def __init__(_parent):
        """None QMovie.__init__(QObject _parent)"""
        return None
    def __init__(_device, _format, _parent):
        """None QMovie.__init__(QIODevice _device, QByteArray _format, QObject _parent)"""
        return None
    def __init__(_fileName, _format, _parent):
        """None QMovie.__init__(QString _fileName, QByteArray _format, QObject _parent)"""
        return None
    def stop():
        """None QMovie.stop()"""
        return None
    def setPaused(_paused):
        """None QMovie.setPaused(bool _paused)"""
        return None
    def jumpToNextFrame():
        """bool QMovie.jumpToNextFrame()"""
        return bool()
    def start():
        """None QMovie.start()"""
        return None
    def setCacheMode(_mode):
        """None QMovie.setCacheMode(QMovie.CacheMode _mode)"""
        return None
    def cacheMode():
        """QMovie.CacheMode QMovie.cacheMode()"""
        return QMovie.CacheMode()
    def setScaledSize(_size):
        """None QMovie.setScaledSize(QSize _size)"""
        return None
    def scaledSize():
        """QSize QMovie.scaledSize()"""
        return QSize()
    def speed():
        """int QMovie.speed()"""
        return int()
    def setSpeed(_percentSpeed):
        """None QMovie.setSpeed(int _percentSpeed)"""
        return None
    def currentFrameNumber():
        """int QMovie.currentFrameNumber()"""
        return int()
    def nextFrameDelay():
        """int QMovie.nextFrameDelay()"""
        return int()
    def frameCount():
        """int QMovie.frameCount()"""
        return int()
    def loopCount():
        """int QMovie.loopCount()"""
        return int()
    def jumpToFrame(_frameNumber):
        """bool QMovie.jumpToFrame(int _frameNumber)"""
        return bool()
    def isValid():
        """bool QMovie.isValid()"""
        return bool()
    def currentPixmap():
        """QPixmap QMovie.currentPixmap()"""
        return QPixmap()
    def currentImage():
        """QImage QMovie.currentImage()"""
        return QImage()
    def frameRect():
        """QRect QMovie.frameRect()"""
        return QRect()
    def state():
        """QMovie.MovieState QMovie.state()"""
        return QMovie.MovieState()
    def backgroundColor():
        """QColor QMovie.backgroundColor()"""
        return QColor()
    def setBackgroundColor(_color):
        """None QMovie.setBackgroundColor(QColor _color)"""
        return None
    def format():
        """QByteArray QMovie.format()"""
        return QByteArray()
    def setFormat(_format):
        """None QMovie.setFormat(QByteArray _format)"""
        return None
    def fileName():
        """QString QMovie.fileName()"""
        return QString()
    def setFileName(_fileName):
        """None QMovie.setFileName(QString _fileName)"""
        return None
    def device():
        """QIODevice QMovie.device()"""
        return QIODevice()
    def setDevice(_device):
        """None QMovie.setDevice(QIODevice _device)"""
        return None
    def supportedFormats():
        """list-of-QByteArray QMovie.supportedFormats()"""
        return [QByteArray()]


class QPageSetupDialog(QDialog):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QPageSetupDialog.PageSetupDialogOption enum
    DontUseSheet = int() # QPageSetupDialog.PageSetupDialogOption enum

    def __init__(_parent):
        """None QPageSetupDialog.__init__(QWidget _parent)"""
        return None
    def __init__(_printer, _parent):
        """None QPageSetupDialog.__init__(QPrinter _printer, QWidget _parent)"""
        return None
    def open():
        """None QPageSetupDialog.open()"""
        return None
    def open(_receiver, _member):
        """None QPageSetupDialog.open(QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(_receiver):
        """None QPageSetupDialog.open(callable _receiver)"""
        return None
    def options():
        """QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.options()"""
        return QPageSetupDialog.PageSetupDialogOptions()
    def setOptions(_options):
        """None QPageSetupDialog.setOptions(QPageSetupDialog.PageSetupDialogOptions _options)"""
        return None
    def testOption(_option):
        """bool QPageSetupDialog.testOption(QPageSetupDialog.PageSetupDialogOption _option)"""
        return bool()
    def setOption(_option, _on):
        """None QPageSetupDialog.setOption(QPageSetupDialog.PageSetupDialogOption _option, bool _on)"""
        return None
    def isOptionEnabled(_option):
        """bool QPageSetupDialog.isOptionEnabled(QPageSetupDialog.PageSetupDialogOption _option)"""
        return bool()
    def enabledOptions():
        """QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.enabledOptions()"""
        return QPageSetupDialog.PageSetupDialogOptions()
    def setEnabledOptions(_options):
        """None QPageSetupDialog.setEnabledOptions(QPageSetupDialog.PageSetupDialogOptions _options)"""
        return None
    def addEnabledOption(_option):
        """None QPageSetupDialog.addEnabledOption(QPageSetupDialog.PageSetupDialogOption _option)"""
        return None
    def printer():
        """QPrinter QPageSetupDialog.printer()"""
        return QPrinter()
    def exec_():
        """int QPageSetupDialog.exec_()"""
        return int()


class QPainter():
    """"""
    OpaqueHint = int() # QPainter.PixmapFragmentHint enum

    CompositionMode_SourceOver = int() # QPainter.CompositionMode enum
    CompositionMode_DestinationOver = int() # QPainter.CompositionMode enum
    CompositionMode_Clear = int() # QPainter.CompositionMode enum
    CompositionMode_Source = int() # QPainter.CompositionMode enum
    CompositionMode_Destination = int() # QPainter.CompositionMode enum
    CompositionMode_SourceIn = int() # QPainter.CompositionMode enum
    CompositionMode_DestinationIn = int() # QPainter.CompositionMode enum
    CompositionMode_SourceOut = int() # QPainter.CompositionMode enum
    CompositionMode_DestinationOut = int() # QPainter.CompositionMode enum
    CompositionMode_SourceAtop = int() # QPainter.CompositionMode enum
    CompositionMode_DestinationAtop = int() # QPainter.CompositionMode enum
    CompositionMode_Xor = int() # QPainter.CompositionMode enum
    CompositionMode_Plus = int() # QPainter.CompositionMode enum
    CompositionMode_Multiply = int() # QPainter.CompositionMode enum
    CompositionMode_Screen = int() # QPainter.CompositionMode enum
    CompositionMode_Overlay = int() # QPainter.CompositionMode enum
    CompositionMode_Darken = int() # QPainter.CompositionMode enum
    CompositionMode_Lighten = int() # QPainter.CompositionMode enum
    CompositionMode_ColorDodge = int() # QPainter.CompositionMode enum
    CompositionMode_ColorBurn = int() # QPainter.CompositionMode enum
    CompositionMode_HardLight = int() # QPainter.CompositionMode enum
    CompositionMode_SoftLight = int() # QPainter.CompositionMode enum
    CompositionMode_Difference = int() # QPainter.CompositionMode enum
    CompositionMode_Exclusion = int() # QPainter.CompositionMode enum
    RasterOp_SourceOrDestination = int() # QPainter.CompositionMode enum
    RasterOp_SourceAndDestination = int() # QPainter.CompositionMode enum
    RasterOp_SourceXorDestination = int() # QPainter.CompositionMode enum
    RasterOp_NotSourceAndNotDestination = int() # QPainter.CompositionMode enum
    RasterOp_NotSourceOrNotDestination = int() # QPainter.CompositionMode enum
    RasterOp_NotSourceXorDestination = int() # QPainter.CompositionMode enum
    RasterOp_NotSource = int() # QPainter.CompositionMode enum
    RasterOp_NotSourceAndDestination = int() # QPainter.CompositionMode enum
    RasterOp_SourceAndNotDestination = int() # QPainter.CompositionMode enum

    Antialiasing = int() # QPainter.RenderHint enum
    TextAntialiasing = int() # QPainter.RenderHint enum
    SmoothPixmapTransform = int() # QPainter.RenderHint enum
    HighQualityAntialiasing = int() # QPainter.RenderHint enum
    NonCosmeticDefaultPen = int() # QPainter.RenderHint enum

    def __init__():
        """None QPainter.__init__()"""
        return None
    def __init__():
        """QPaintDevice QPainter.__init__()"""
        return QPaintDevice()
    def drawStaticText(_topLeftPosition, _staticText):
        """None QPainter.drawStaticText(QPointF _topLeftPosition, QStaticText _staticText)"""
        return None
    def drawStaticText(_p, _staticText):
        """None QPainter.drawStaticText(QPoint _p, QStaticText _staticText)"""
        return None
    def drawStaticText(_x, _y, _staticText):
        """None QPainter.drawStaticText(int _x, int _y, QStaticText _staticText)"""
        return None
    def drawPixmapFragments(_fragments, _pixmap, _hints):
        """None QPainter.drawPixmapFragments(list _fragments, QPixmap _pixmap, QPainter.PixmapFragmentHints _hints)"""
        return None
    def endNativePainting():
        """None QPainter.endNativePainting()"""
        return None
    def beginNativePainting():
        """None QPainter.beginNativePainting()"""
        return None
    def drawRoundedRect(_rect, _xRadius, _yRadius, _mode):
        """None QPainter.drawRoundedRect(QRectF _rect, float _xRadius, float _yRadius, Qt.SizeMode _mode)"""
        return None
    def drawRoundedRect(_x, _y, _w, _h, _xRadius, _yRadius, _mode):
        """None QPainter.drawRoundedRect(int _x, int _y, int _w, int _h, float _xRadius, float _yRadius, Qt.SizeMode _mode)"""
        return None
    def drawRoundedRect(_rect, _xRadius, _yRadius, _mode):
        """None QPainter.drawRoundedRect(QRect _rect, float _xRadius, float _yRadius, Qt.SizeMode _mode)"""
        return None
    def testRenderHint(_hint):
        """bool QPainter.testRenderHint(QPainter.RenderHint _hint)"""
        return bool()
    def combinedTransform():
        """QTransform QPainter.combinedTransform()"""
        return QTransform()
    def worldTransform():
        """QTransform QPainter.worldTransform()"""
        return QTransform()
    def setWorldTransform(_matrix, _combine):
        """None QPainter.setWorldTransform(QTransform _matrix, bool _combine)"""
        return None
    def resetTransform():
        """None QPainter.resetTransform()"""
        return None
    def deviceTransform():
        """QTransform QPainter.deviceTransform()"""
        return QTransform()
    def transform():
        """QTransform QPainter.transform()"""
        return QTransform()
    def setTransform(_transform, _combine):
        """None QPainter.setTransform(QTransform _transform, bool _combine)"""
        return None
    def setWorldMatrixEnabled(_enabled):
        """None QPainter.setWorldMatrixEnabled(bool _enabled)"""
        return None
    def worldMatrixEnabled():
        """bool QPainter.worldMatrixEnabled()"""
        return bool()
    def setWorldMatrix(_matrix, _combine):
        """None QPainter.setWorldMatrix(QMatrix _matrix, bool _combine)"""
        return None
    def worldMatrix():
        """QMatrix QPainter.worldMatrix()"""
        return QMatrix()
    def setOpacity(_opacity):
        """None QPainter.setOpacity(float _opacity)"""
        return None
    def opacity():
        """float QPainter.opacity()"""
        return float()
    def combinedMatrix():
        """QMatrix QPainter.combinedMatrix()"""
        return QMatrix()
    def drawImage(_targetRect, _image, _sourceRect, _flags):
        """None QPainter.drawImage(QRectF _targetRect, QImage _image, QRectF _sourceRect, Qt.ImageConversionFlags _flags)"""
        return None
    def drawImage(_targetRect, _image, _sourceRect, _flags):
        """None QPainter.drawImage(QRect _targetRect, QImage _image, QRect _sourceRect, Qt.ImageConversionFlags _flags)"""
        return None
    def drawImage(_p, _image, _sr, _flags):
        """None QPainter.drawImage(QPointF _p, QImage _image, QRectF _sr, Qt.ImageConversionFlags _flags)"""
        return None
    def drawImage(_p, _image, _sr, _flags):
        """None QPainter.drawImage(QPoint _p, QImage _image, QRect _sr, Qt.ImageConversionFlags _flags)"""
        return None
    def drawImage(_r, _image):
        """None QPainter.drawImage(QRectF _r, QImage _image)"""
        return None
    def drawImage(_r, _image):
        """None QPainter.drawImage(QRect _r, QImage _image)"""
        return None
    def drawImage(_p, _image):
        """None QPainter.drawImage(QPointF _p, QImage _image)"""
        return None
    def drawImage(_p, _image):
        """None QPainter.drawImage(QPoint _p, QImage _image)"""
        return None
    def drawImage(_x, _y, _image, _sx, _sy, _sw, _sh, _flags):
        """None QPainter.drawImage(int _x, int _y, QImage _image, int _sx, int _sy, int _sw, int _sh, Qt.ImageConversionFlags _flags)"""
        return None
    def drawPoint(_p):
        """None QPainter.drawPoint(QPointF _p)"""
        return None
    def drawPoint(_x, _y):
        """None QPainter.drawPoint(int _x, int _y)"""
        return None
    def drawPoint(_p):
        """None QPainter.drawPoint(QPoint _p)"""
        return None
    def drawRect(_rect):
        """None QPainter.drawRect(QRectF _rect)"""
        return None
    def drawRect(_x, _y, _w, _h):
        """None QPainter.drawRect(int _x, int _y, int _w, int _h)"""
        return None
    def drawRect(_r):
        """None QPainter.drawRect(QRect _r)"""
        return None
    def drawLine(_l):
        """None QPainter.drawLine(QLineF _l)"""
        return None
    def drawLine(_line):
        """None QPainter.drawLine(QLine _line)"""
        return None
    def drawLine(_x1, _y1, _x2, _y2):
        """None QPainter.drawLine(int _x1, int _y1, int _x2, int _y2)"""
        return None
    def drawLine(_p1, _p2):
        """None QPainter.drawLine(QPoint _p1, QPoint _p2)"""
        return None
    def drawLine(_p1, _p2):
        """None QPainter.drawLine(QPointF _p1, QPointF _p2)"""
        return None
    def restoreRedirected(_device):
        """None QPainter.restoreRedirected(QPaintDevice _device)"""
        return None
    def redirected(_device, _offset):
        """QPaintDevice QPainter.redirected(QPaintDevice _device, QPoint _offset)"""
        return QPaintDevice()
    def setRedirected(_device, _replacement, _offset):
        """None QPainter.setRedirected(QPaintDevice _device, QPaintDevice _replacement, QPoint _offset)"""
        return None
    def paintEngine():
        """QPaintEngine QPainter.paintEngine()"""
        return QPaintEngine()
    def setRenderHints(_hints, _on):
        """None QPainter.setRenderHints(QPainter.RenderHints _hints, bool _on)"""
        return None
    def renderHints():
        """QPainter.RenderHints QPainter.renderHints()"""
        return QPainter.RenderHints()
    def setRenderHint(_hint, _on):
        """None QPainter.setRenderHint(QPainter.RenderHint _hint, bool _on)"""
        return None
    def eraseRect():
        """QRectF QPainter.eraseRect()"""
        return QRectF()
    def eraseRect(_rect):
        """None QPainter.eraseRect(QRect _rect)"""
        return None
    def eraseRect(_x, _y, _w, _h):
        """None QPainter.eraseRect(int _x, int _y, int _w, int _h)"""
        return None
    def fillRect():
        """QBrush QPainter.fillRect()"""
        return QBrush()
    def fillRect():
        """QBrush QPainter.fillRect()"""
        return QBrush()
    def fillRect(_x, _y, _w, _h, _b):
        """None QPainter.fillRect(int _x, int _y, int _w, int _h, QBrush _b)"""
        return None
    def fillRect(_color):
        """QRectF QPainter.fillRect(QColor _color)"""
        return QRectF()
    def fillRect(_color):
        """QRect QPainter.fillRect(QColor _color)"""
        return QRect()
    def fillRect(_x, _y, _w, _h, _b):
        """None QPainter.fillRect(int _x, int _y, int _w, int _h, QColor _b)"""
        return None
    def fillRect(_x, _y, _w, _h, _c):
        """None QPainter.fillRect(int _x, int _y, int _w, int _h, Qt.GlobalColor _c)"""
        return None
    def fillRect(_r, _c):
        """None QPainter.fillRect(QRect _r, Qt.GlobalColor _c)"""
        return None
    def fillRect(_r, _c):
        """None QPainter.fillRect(QRectF _r, Qt.GlobalColor _c)"""
        return None
    def fillRect(_x, _y, _w, _h, _style):
        """None QPainter.fillRect(int _x, int _y, int _w, int _h, Qt.BrushStyle _style)"""
        return None
    def fillRect(_r, _style):
        """None QPainter.fillRect(QRect _r, Qt.BrushStyle _style)"""
        return None
    def fillRect(_r, _style):
        """None QPainter.fillRect(QRectF _r, Qt.BrushStyle _style)"""
        return None
    def boundingRect(_rect, _flags, _text):
        """QRectF QPainter.boundingRect(QRectF _rect, int _flags, QString _text)"""
        return QRectF()
    def boundingRect(_rect, _flags, _text):
        """QRect QPainter.boundingRect(QRect _rect, int _flags, QString _text)"""
        return QRect()
    def boundingRect(_rectangle, _text, _option):
        """QRectF QPainter.boundingRect(QRectF _rectangle, QString _text, QTextOption _option)"""
        return QRectF()
    def boundingRect(_x, _y, _w, _h, _flags, _text):
        """QRect QPainter.boundingRect(int _x, int _y, int _w, int _h, int _flags, QString _text)"""
        return QRect()
    def drawText(_p, _s):
        """None QPainter.drawText(QPointF _p, QString _s)"""
        return None
    def drawText(_rectangle, _flags, _text, _boundingRect):
        """None QPainter.drawText(QRectF _rectangle, int _flags, QString _text, QRectF _boundingRect)"""
        return None
    def drawText(_rectangle, _flags, _text, _boundingRect):
        """None QPainter.drawText(QRect _rectangle, int _flags, QString _text, QRect _boundingRect)"""
        return None
    def drawText(_rectangle, _text, _option):
        """None QPainter.drawText(QRectF _rectangle, QString _text, QTextOption _option)"""
        return None
    def drawText(_p, _s):
        """None QPainter.drawText(QPoint _p, QString _s)"""
        return None
    def drawText(_x, _y, _width, _height, _flags, _text, _boundingRect):
        """None QPainter.drawText(int _x, int _y, int _width, int _height, int _flags, QString _text, QRect _boundingRect)"""
        return None
    def drawText(_x, _y, _s):
        """None QPainter.drawText(int _x, int _y, QString _s)"""
        return None
    def layoutDirection():
        """Qt.LayoutDirection QPainter.layoutDirection()"""
        return Qt.LayoutDirection()
    def setLayoutDirection(_direction):
        """None QPainter.setLayoutDirection(Qt.LayoutDirection _direction)"""
        return None
    def drawPixmap(_targetRect, _pixmap, _sourceRect):
        """None QPainter.drawPixmap(QRectF _targetRect, QPixmap _pixmap, QRectF _sourceRect)"""
        return None
    def drawPixmap(_targetRect, _pixmap, _sourceRect):
        """None QPainter.drawPixmap(QRect _targetRect, QPixmap _pixmap, QRect _sourceRect)"""
        return None
    def drawPixmap(_p, _pm):
        """None QPainter.drawPixmap(QPointF _p, QPixmap _pm)"""
        return None
    def drawPixmap(_p, _pm):
        """None QPainter.drawPixmap(QPoint _p, QPixmap _pm)"""
        return None
    def drawPixmap(_r, _pm):
        """None QPainter.drawPixmap(QRect _r, QPixmap _pm)"""
        return None
    def drawPixmap(_x, _y, _pm):
        """None QPainter.drawPixmap(int _x, int _y, QPixmap _pm)"""
        return None
    def drawPixmap(_x, _y, _w, _h, _pm):
        """None QPainter.drawPixmap(int _x, int _y, int _w, int _h, QPixmap _pm)"""
        return None
    def drawPixmap(_x, _y, _w, _h, _pm, _sx, _sy, _sw, _sh):
        """None QPainter.drawPixmap(int _x, int _y, int _w, int _h, QPixmap _pm, int _sx, int _sy, int _sw, int _sh)"""
        return None
    def drawPixmap(_x, _y, _pm, _sx, _sy, _sw, _sh):
        """None QPainter.drawPixmap(int _x, int _y, QPixmap _pm, int _sx, int _sy, int _sw, int _sh)"""
        return None
    def drawPixmap(_p, _pm, _sr):
        """None QPainter.drawPixmap(QPointF _p, QPixmap _pm, QRectF _sr)"""
        return None
    def drawPixmap(_p, _pm, _sr):
        """None QPainter.drawPixmap(QPoint _p, QPixmap _pm, QRect _sr)"""
        return None
    def drawPicture(_p, _picture):
        """None QPainter.drawPicture(QPointF _p, QPicture _picture)"""
        return None
    def drawPicture(_x, _y, _p):
        """None QPainter.drawPicture(int _x, int _y, QPicture _p)"""
        return None
    def drawPicture(_pt, _p):
        """None QPainter.drawPicture(QPoint _pt, QPicture _p)"""
        return None
    def drawTiledPixmap(_rectangle, _pixmap, _pos):
        """None QPainter.drawTiledPixmap(QRectF _rectangle, QPixmap _pixmap, QPointF _pos)"""
        return None
    def drawTiledPixmap(_rectangle, _pixmap, _pos):
        """None QPainter.drawTiledPixmap(QRect _rectangle, QPixmap _pixmap, QPoint _pos)"""
        return None
    def drawTiledPixmap(_x, _y, _width, _height, _pixmap, _sx, _sy):
        """None QPainter.drawTiledPixmap(int _x, int _y, int _width, int _height, QPixmap _pixmap, int _sx, int _sy)"""
        return None
    def drawRoundRect(_r, _xRound, _yRound):
        """None QPainter.drawRoundRect(QRectF _r, int _xRound, int _yRound)"""
        return None
    def drawRoundRect(_x, _y, _w, _h, _xRound, _yRound):
        """None QPainter.drawRoundRect(int _x, int _y, int _w, int _h, int _xRound, int _yRound)"""
        return None
    def drawRoundRect(_r, _xRound, _yRound):
        """None QPainter.drawRoundRect(QRect _r, int _xRound, int _yRound)"""
        return None
    def drawChord(_rect, _a, _alen):
        """None QPainter.drawChord(QRectF _rect, int _a, int _alen)"""
        return None
    def drawChord(_rect, _a, _alen):
        """None QPainter.drawChord(QRect _rect, int _a, int _alen)"""
        return None
    def drawChord(_x, _y, _w, _h, _a, _alen):
        """None QPainter.drawChord(int _x, int _y, int _w, int _h, int _a, int _alen)"""
        return None
    def drawPie(_rect, _a, _alen):
        """None QPainter.drawPie(QRectF _rect, int _a, int _alen)"""
        return None
    def drawPie(_rect, _a, _alen):
        """None QPainter.drawPie(QRect _rect, int _a, int _alen)"""
        return None
    def drawPie(_x, _y, _w, _h, _a, _alen):
        """None QPainter.drawPie(int _x, int _y, int _w, int _h, int _a, int _alen)"""
        return None
    def drawArc(_rect, _a, _alen):
        """None QPainter.drawArc(QRectF _rect, int _a, int _alen)"""
        return None
    def drawArc(_r, _a, _alen):
        """None QPainter.drawArc(QRect _r, int _a, int _alen)"""
        return None
    def drawArc(_x, _y, _w, _h, _a, _alen):
        """None QPainter.drawArc(int _x, int _y, int _w, int _h, int _a, int _alen)"""
        return None
    def drawConvexPolygon(_point, *args):
        """None QPainter.drawConvexPolygon(QPointF _point, ... *args)"""
        return None
    def drawConvexPolygon(_poly):
        """None QPainter.drawConvexPolygon(QPolygonF _poly)"""
        return None
    def drawConvexPolygon(_point, *args):
        """None QPainter.drawConvexPolygon(QPoint _point, ... *args)"""
        return None
    def drawConvexPolygon(_poly):
        """None QPainter.drawConvexPolygon(QPolygon _poly)"""
        return None
    def drawPolygon(_point, *args):
        """None QPainter.drawPolygon(QPointF _point, ... *args)"""
        return None
    def drawPolygon(_points, _fillRule):
        """None QPainter.drawPolygon(QPolygonF _points, Qt.FillRule _fillRule)"""
        return None
    def drawPolygon(_point, *args):
        """None QPainter.drawPolygon(QPoint _point, ... *args)"""
        return None
    def drawPolygon(_points, _fillRule):
        """None QPainter.drawPolygon(QPolygon _points, Qt.FillRule _fillRule)"""
        return None
    def drawPolyline(_point, *args):
        """None QPainter.drawPolyline(QPointF _point, ... *args)"""
        return None
    def drawPolyline(_polyline):
        """None QPainter.drawPolyline(QPolygonF _polyline)"""
        return None
    def drawPolyline(_point, *args):
        """None QPainter.drawPolyline(QPoint _point, ... *args)"""
        return None
    def drawPolyline(_polyline):
        """None QPainter.drawPolyline(QPolygon _polyline)"""
        return None
    def drawEllipse(_r):
        """None QPainter.drawEllipse(QRectF _r)"""
        return None
    def drawEllipse(_r):
        """None QPainter.drawEllipse(QRect _r)"""
        return None
    def drawEllipse(_x, _y, _w, _h):
        """None QPainter.drawEllipse(int _x, int _y, int _w, int _h)"""
        return None
    def drawEllipse(_center, _rx, _ry):
        """None QPainter.drawEllipse(QPointF _center, float _rx, float _ry)"""
        return None
    def drawEllipse(_center, _rx, _ry):
        """None QPainter.drawEllipse(QPoint _center, int _rx, int _ry)"""
        return None
    def drawRects(_rect, *args):
        """None QPainter.drawRects(QRectF _rect, ... *args)"""
        return None
    def drawRects(_rects):
        """None QPainter.drawRects(list-of-QRectF _rects)"""
        return None
    def drawRects(_rect, *args):
        """None QPainter.drawRects(QRect _rect, ... *args)"""
        return None
    def drawRects(_rects):
        """None QPainter.drawRects(list-of-QRect _rects)"""
        return None
    def drawLines(_line, *args):
        """None QPainter.drawLines(QLineF _line, ... *args)"""
        return None
    def drawLines(_lines):
        """None QPainter.drawLines(list-of-QLineF _lines)"""
        return None
    def drawLines(_pointPair, *args):
        """None QPainter.drawLines(QPointF _pointPair, ... *args)"""
        return None
    def drawLines(_pointPairs):
        """None QPainter.drawLines(list-of-QPointF _pointPairs)"""
        return None
    def drawLines(_line, *args):
        """None QPainter.drawLines(QLine _line, ... *args)"""
        return None
    def drawLines(_lines):
        """None QPainter.drawLines(list-of-QLine _lines)"""
        return None
    def drawLines(_pointPair, *args):
        """None QPainter.drawLines(QPoint _pointPair, ... *args)"""
        return None
    def drawLines(_pointPairs):
        """None QPainter.drawLines(list-of-QPoint _pointPairs)"""
        return None
    def drawPoints(_point, *args):
        """None QPainter.drawPoints(QPointF _point, ... *args)"""
        return None
    def drawPoints(_points):
        """None QPainter.drawPoints(QPolygonF _points)"""
        return None
    def drawPoints(_point, *args):
        """None QPainter.drawPoints(QPoint _point, ... *args)"""
        return None
    def drawPoints(_points):
        """None QPainter.drawPoints(QPolygon _points)"""
        return None
    def drawPath(_path):
        """None QPainter.drawPath(QPainterPath _path)"""
        return None
    def fillPath(_path, _brush):
        """None QPainter.fillPath(QPainterPath _path, QBrush _brush)"""
        return None
    def strokePath(_path, _pen):
        """None QPainter.strokePath(QPainterPath _path, QPen _pen)"""
        return None
    def viewTransformEnabled():
        """bool QPainter.viewTransformEnabled()"""
        return bool()
    def setViewTransformEnabled(_enable):
        """None QPainter.setViewTransformEnabled(bool _enable)"""
        return None
    def setViewport(_viewport):
        """None QPainter.setViewport(QRect _viewport)"""
        return None
    def setViewport(_x, _y, _w, _h):
        """None QPainter.setViewport(int _x, int _y, int _w, int _h)"""
        return None
    def viewport():
        """QRect QPainter.viewport()"""
        return QRect()
    def setWindow(_window):
        """None QPainter.setWindow(QRect _window)"""
        return None
    def setWindow(_x, _y, _w, _h):
        """None QPainter.setWindow(int _x, int _y, int _w, int _h)"""
        return None
    def window():
        """QRect QPainter.window()"""
        return QRect()
    def translate(_offset):
        """None QPainter.translate(QPointF _offset)"""
        return None
    def translate(_dx, _dy):
        """None QPainter.translate(float _dx, float _dy)"""
        return None
    def translate(_offset):
        """None QPainter.translate(QPoint _offset)"""
        return None
    def rotate(_a):
        """None QPainter.rotate(float _a)"""
        return None
    def shear(_sh, _sv):
        """None QPainter.shear(float _sh, float _sv)"""
        return None
    def scale(_sx, _sy):
        """None QPainter.scale(float _sx, float _sy)"""
        return None
    def matrixEnabled():
        """bool QPainter.matrixEnabled()"""
        return bool()
    def setMatrixEnabled(_enabled):
        """None QPainter.setMatrixEnabled(bool _enabled)"""
        return None
    def resetMatrix():
        """None QPainter.resetMatrix()"""
        return None
    def deviceMatrix():
        """QMatrix QPainter.deviceMatrix()"""
        return QMatrix()
    def matrix():
        """QMatrix QPainter.matrix()"""
        return QMatrix()
    def setMatrix(_matrix, _combine):
        """None QPainter.setMatrix(QMatrix _matrix, bool _combine)"""
        return None
    def restore():
        """None QPainter.restore()"""
        return None
    def save():
        """None QPainter.save()"""
        return None
    def hasClipping():
        """bool QPainter.hasClipping()"""
        return bool()
    def setClipping(_enable):
        """None QPainter.setClipping(bool _enable)"""
        return None
    def setClipPath(_path, _operation):
        """None QPainter.setClipPath(QPainterPath _path, Qt.ClipOperation _operation)"""
        return None
    def setClipRegion(_region, _operation):
        """None QPainter.setClipRegion(QRegion _region, Qt.ClipOperation _operation)"""
        return None
    def setClipRect(_rectangle, _operation):
        """None QPainter.setClipRect(QRectF _rectangle, Qt.ClipOperation _operation)"""
        return None
    def setClipRect(_x, _y, _width, _height, _operation):
        """None QPainter.setClipRect(int _x, int _y, int _width, int _height, Qt.ClipOperation _operation)"""
        return None
    def setClipRect(_rectangle, _operation):
        """None QPainter.setClipRect(QRect _rectangle, Qt.ClipOperation _operation)"""
        return None
    def clipPath():
        """QPainterPath QPainter.clipPath()"""
        return QPainterPath()
    def clipRegion():
        """QRegion QPainter.clipRegion()"""
        return QRegion()
    def background():
        """QBrush QPainter.background()"""
        return QBrush()
    def setBackground(_bg):
        """None QPainter.setBackground(QBrush _bg)"""
        return None
    def setBrushOrigin():
        """QPointF QPainter.setBrushOrigin()"""
        return QPointF()
    def setBrushOrigin(_x, _y):
        """None QPainter.setBrushOrigin(int _x, int _y)"""
        return None
    def setBrushOrigin(_p):
        """None QPainter.setBrushOrigin(QPoint _p)"""
        return None
    def brushOrigin():
        """QPoint QPainter.brushOrigin()"""
        return QPoint()
    def backgroundMode():
        """Qt.BGMode QPainter.backgroundMode()"""
        return Qt.BGMode()
    def setBackgroundMode(_mode):
        """None QPainter.setBackgroundMode(Qt.BGMode _mode)"""
        return None
    def brush():
        """QBrush QPainter.brush()"""
        return QBrush()
    def setBrush(_brush):
        """None QPainter.setBrush(QBrush _brush)"""
        return None
    def setBrush(_style):
        """None QPainter.setBrush(Qt.BrushStyle _style)"""
        return None
    def pen():
        """QPen QPainter.pen()"""
        return QPen()
    def setPen(_color):
        """None QPainter.setPen(QColor _color)"""
        return None
    def setPen(_pen):
        """None QPainter.setPen(QPen _pen)"""
        return None
    def setPen(_style):
        """None QPainter.setPen(Qt.PenStyle _style)"""
        return None
    def fontInfo():
        """QFontInfo QPainter.fontInfo()"""
        return QFontInfo()
    def fontMetrics():
        """QFontMetrics QPainter.fontMetrics()"""
        return QFontMetrics()
    def setFont(_f):
        """None QPainter.setFont(QFont _f)"""
        return None
    def font():
        """QFont QPainter.font()"""
        return QFont()
    def compositionMode():
        """QPainter.CompositionMode QPainter.compositionMode()"""
        return QPainter.CompositionMode()
    def setCompositionMode(_mode):
        """None QPainter.setCompositionMode(QPainter.CompositionMode _mode)"""
        return None
    def initFrom(_widget):
        """None QPainter.initFrom(QWidget _widget)"""
        return None
    def isActive():
        """bool QPainter.isActive()"""
        return bool()
    def end():
        """bool QPainter.end()"""
        return bool()
    def begin():
        """QPaintDevice QPainter.begin()"""
        return QPaintDevice()
    def device():
        """QPaintDevice QPainter.device()"""
        return QPaintDevice()


class QTextItem():
    """"""
    RightToLeft = int() # QTextItem.RenderFlag enum
    Overline = int() # QTextItem.RenderFlag enum
    Underline = int() # QTextItem.RenderFlag enum
    StrikeOut = int() # QTextItem.RenderFlag enum

    def __init__():
        """None QTextItem.__init__()"""
        return None
    def __init__():
        """QTextItem QTextItem.__init__()"""
        return QTextItem()
    def font():
        """QFont QTextItem.font()"""
        return QFont()
    def text():
        """QString QTextItem.text()"""
        return QString()
    def renderFlags():
        """QTextItem.RenderFlags QTextItem.renderFlags()"""
        return QTextItem.RenderFlags()
    def width():
        """float QTextItem.width()"""
        return float()
    def ascent():
        """float QTextItem.ascent()"""
        return float()
    def descent():
        """float QTextItem.descent()"""
        return float()


class QPaintEngine():
    """"""
    X11 = int() # QPaintEngine.Type enum
    Windows = int() # QPaintEngine.Type enum
    QuickDraw = int() # QPaintEngine.Type enum
    CoreGraphics = int() # QPaintEngine.Type enum
    MacPrinter = int() # QPaintEngine.Type enum
    QWindowSystem = int() # QPaintEngine.Type enum
    PostScript = int() # QPaintEngine.Type enum
    OpenGL = int() # QPaintEngine.Type enum
    Picture = int() # QPaintEngine.Type enum
    SVG = int() # QPaintEngine.Type enum
    Raster = int() # QPaintEngine.Type enum
    Direct3D = int() # QPaintEngine.Type enum
    Pdf = int() # QPaintEngine.Type enum
    OpenVG = int() # QPaintEngine.Type enum
    OpenGL2 = int() # QPaintEngine.Type enum
    PaintBuffer = int() # QPaintEngine.Type enum
    User = int() # QPaintEngine.Type enum
    MaxUser = int() # QPaintEngine.Type enum

    OddEvenMode = int() # QPaintEngine.PolygonDrawMode enum
    WindingMode = int() # QPaintEngine.PolygonDrawMode enum
    ConvexMode = int() # QPaintEngine.PolygonDrawMode enum
    PolylineMode = int() # QPaintEngine.PolygonDrawMode enum

    DirtyPen = int() # QPaintEngine.DirtyFlag enum
    DirtyBrush = int() # QPaintEngine.DirtyFlag enum
    DirtyBrushOrigin = int() # QPaintEngine.DirtyFlag enum
    DirtyFont = int() # QPaintEngine.DirtyFlag enum
    DirtyBackground = int() # QPaintEngine.DirtyFlag enum
    DirtyBackgroundMode = int() # QPaintEngine.DirtyFlag enum
    DirtyTransform = int() # QPaintEngine.DirtyFlag enum
    DirtyClipRegion = int() # QPaintEngine.DirtyFlag enum
    DirtyClipPath = int() # QPaintEngine.DirtyFlag enum
    DirtyHints = int() # QPaintEngine.DirtyFlag enum
    DirtyCompositionMode = int() # QPaintEngine.DirtyFlag enum
    DirtyClipEnabled = int() # QPaintEngine.DirtyFlag enum
    DirtyOpacity = int() # QPaintEngine.DirtyFlag enum
    AllDirty = int() # QPaintEngine.DirtyFlag enum

    PrimitiveTransform = int() # QPaintEngine.PaintEngineFeature enum
    PatternTransform = int() # QPaintEngine.PaintEngineFeature enum
    PixmapTransform = int() # QPaintEngine.PaintEngineFeature enum
    PatternBrush = int() # QPaintEngine.PaintEngineFeature enum
    LinearGradientFill = int() # QPaintEngine.PaintEngineFeature enum
    RadialGradientFill = int() # QPaintEngine.PaintEngineFeature enum
    ConicalGradientFill = int() # QPaintEngine.PaintEngineFeature enum
    AlphaBlend = int() # QPaintEngine.PaintEngineFeature enum
    PorterDuff = int() # QPaintEngine.PaintEngineFeature enum
    PainterPaths = int() # QPaintEngine.PaintEngineFeature enum
    Antialiasing = int() # QPaintEngine.PaintEngineFeature enum
    BrushStroke = int() # QPaintEngine.PaintEngineFeature enum
    ConstantOpacity = int() # QPaintEngine.PaintEngineFeature enum
    MaskedBrush = int() # QPaintEngine.PaintEngineFeature enum
    PaintOutsidePaintEvent = int() # QPaintEngine.PaintEngineFeature enum
    PerspectiveTransform = int() # QPaintEngine.PaintEngineFeature enum
    BlendModes = int() # QPaintEngine.PaintEngineFeature enum
    ObjectBoundingModeGradients = int() # QPaintEngine.PaintEngineFeature enum
    RasterOpModes = int() # QPaintEngine.PaintEngineFeature enum
    AllFeatures = int() # QPaintEngine.PaintEngineFeature enum

    def __init__(_features):
        """None QPaintEngine.__init__(QPaintEngine.PaintEngineFeatures _features)"""
        return None
    def painter():
        """QPainter QPaintEngine.painter()"""
        return QPainter()
    def hasFeature(_feature):
        """bool QPaintEngine.hasFeature(QPaintEngine.PaintEngineFeatures _feature)"""
        return bool()
    def type():
        """abstract QPaintEngine.Type QPaintEngine.type()"""
        return QPaintEngine.Type()
    def paintDevice():
        """QPaintDevice QPaintEngine.paintDevice()"""
        return QPaintDevice()
    def setPaintDevice(_device):
        """None QPaintEngine.setPaintDevice(QPaintDevice _device)"""
        return None
    def drawImage(_r, _pm, _sr, _flags):
        """None QPaintEngine.drawImage(QRectF _r, QImage _pm, QRectF _sr, Qt.ImageConversionFlags _flags)"""
        return None
    def drawTiledPixmap(_r, _pixmap, _s):
        """None QPaintEngine.drawTiledPixmap(QRectF _r, QPixmap _pixmap, QPointF _s)"""
        return None
    def drawTextItem(_p, _textItem):
        """None QPaintEngine.drawTextItem(QPointF _p, QTextItem _textItem)"""
        return None
    def drawPixmap(_r, _pm, _sr):
        """abstract None QPaintEngine.drawPixmap(QRectF _r, QPixmap _pm, QRectF _sr)"""
        return None
    def drawPolygon(_points, _mode):
        """None QPaintEngine.drawPolygon(QPointF _points, QPaintEngine.PolygonDrawMode _mode)"""
        return None
    def drawPolygon(_points, _mode):
        """None QPaintEngine.drawPolygon(QPoint _points, QPaintEngine.PolygonDrawMode _mode)"""
        return None
    def drawPoints(_points):
        """None QPaintEngine.drawPoints(QPointF _points)"""
        return None
    def drawPoints(_points):
        """None QPaintEngine.drawPoints(QPoint _points)"""
        return None
    def drawPath(_path):
        """None QPaintEngine.drawPath(QPainterPath _path)"""
        return None
    def drawEllipse(_r):
        """None QPaintEngine.drawEllipse(QRectF _r)"""
        return None
    def drawEllipse(_r):
        """None QPaintEngine.drawEllipse(QRect _r)"""
        return None
    def drawLines(_lines):
        """None QPaintEngine.drawLines(QLine _lines)"""
        return None
    def drawLines(_lines):
        """None QPaintEngine.drawLines(QLineF _lines)"""
        return None
    def drawRects(_rects):
        """None QPaintEngine.drawRects(QRect _rects)"""
        return None
    def drawRects(_rects):
        """None QPaintEngine.drawRects(QRectF _rects)"""
        return None
    def updateState(_state):
        """abstract None QPaintEngine.updateState(QPaintEngineState _state)"""
        return None
    def end():
        """abstract bool QPaintEngine.end()"""
        return bool()
    def begin(_pdev):
        """abstract bool QPaintEngine.begin(QPaintDevice _pdev)"""
        return bool()
    def setActive(_newState):
        """None QPaintEngine.setActive(bool _newState)"""
        return None
    def isActive():
        """bool QPaintEngine.isActive()"""
        return bool()


class QPaintEngineState():
    """"""
    def __init__():
        """None QPaintEngineState.__init__()"""
        return None
    def __init__():
        """QPaintEngineState QPaintEngineState.__init__()"""
        return QPaintEngineState()
    def penNeedsResolving():
        """bool QPaintEngineState.penNeedsResolving()"""
        return bool()
    def brushNeedsResolving():
        """bool QPaintEngineState.brushNeedsResolving()"""
        return bool()
    def transform():
        """QTransform QPaintEngineState.transform()"""
        return QTransform()
    def painter():
        """QPainter QPaintEngineState.painter()"""
        return QPainter()
    def compositionMode():
        """QPainter.CompositionMode QPaintEngineState.compositionMode()"""
        return QPainter.CompositionMode()
    def renderHints():
        """QPainter.RenderHints QPaintEngineState.renderHints()"""
        return QPainter.RenderHints()
    def isClipEnabled():
        """bool QPaintEngineState.isClipEnabled()"""
        return bool()
    def clipPath():
        """QPainterPath QPaintEngineState.clipPath()"""
        return QPainterPath()
    def clipRegion():
        """QRegion QPaintEngineState.clipRegion()"""
        return QRegion()
    def clipOperation():
        """Qt.ClipOperation QPaintEngineState.clipOperation()"""
        return Qt.ClipOperation()
    def opacity():
        """float QPaintEngineState.opacity()"""
        return float()
    def matrix():
        """QMatrix QPaintEngineState.matrix()"""
        return QMatrix()
    def font():
        """QFont QPaintEngineState.font()"""
        return QFont()
    def backgroundMode():
        """Qt.BGMode QPaintEngineState.backgroundMode()"""
        return Qt.BGMode()
    def backgroundBrush():
        """QBrush QPaintEngineState.backgroundBrush()"""
        return QBrush()
    def brushOrigin():
        """QPointF QPaintEngineState.brushOrigin()"""
        return QPointF()
    def brush():
        """QBrush QPaintEngineState.brush()"""
        return QBrush()
    def pen():
        """QPen QPaintEngineState.pen()"""
        return QPen()
    def state():
        """QPaintEngine.DirtyFlags QPaintEngineState.state()"""
        return QPaintEngine.DirtyFlags()


class QPainterPath():
    """"""
    MoveToElement = int() # QPainterPath.ElementType enum
    LineToElement = int() # QPainterPath.ElementType enum
    CurveToElement = int() # QPainterPath.ElementType enum
    CurveToDataElement = int() # QPainterPath.ElementType enum

    def __init__():
        """None QPainterPath.__init__()"""
        return None
    def __init__(_startPoint):
        """None QPainterPath.__init__(QPointF _startPoint)"""
        return None
    def __init__(_other):
        """None QPainterPath.__init__(QPainterPath _other)"""
        return None
    def __mul__(_m):
        """QPainterPath QPainterPath.__mul__(QMatrix _m)"""
        return QPainterPath()
    def __mul__(_m):
        """QPainterPath QPainterPath.__mul__(QTransform _m)"""
        return QPainterPath()
    def translated(_dx, _dy):
        """QPainterPath QPainterPath.translated(float _dx, float _dy)"""
        return QPainterPath()
    def translated(_offset):
        """QPainterPath QPainterPath.translated(QPointF _offset)"""
        return QPainterPath()
    def translate(_dx, _dy):
        """None QPainterPath.translate(float _dx, float _dy)"""
        return None
    def translate(_offset):
        """None QPainterPath.translate(QPointF _offset)"""
        return None
    def __isub__(_other):
        """QPainterPath QPainterPath.__isub__(QPainterPath _other)"""
        return QPainterPath()
    def __iadd__(_other):
        """QPainterPath QPainterPath.__iadd__(QPainterPath _other)"""
        return QPainterPath()
    def __ior__(_other):
        """QPainterPath QPainterPath.__ior__(QPainterPath _other)"""
        return QPainterPath()
    def __iand__(_other):
        """QPainterPath QPainterPath.__iand__(QPainterPath _other)"""
        return QPainterPath()
    def __sub__(_other):
        """QPainterPath QPainterPath.__sub__(QPainterPath _other)"""
        return QPainterPath()
    def __add__(_other):
        """QPainterPath QPainterPath.__add__(QPainterPath _other)"""
        return QPainterPath()
    def __or__(_other):
        """QPainterPath QPainterPath.__or__(QPainterPath _other)"""
        return QPainterPath()
    def __and__(_other):
        """QPainterPath QPainterPath.__and__(QPainterPath _other)"""
        return QPainterPath()
    def simplified():
        """QPainterPath QPainterPath.simplified()"""
        return QPainterPath()
    def addRoundedRect(_rect, _xRadius, _yRadius, _mode):
        """None QPainterPath.addRoundedRect(QRectF _rect, float _xRadius, float _yRadius, Qt.SizeMode _mode)"""
        return None
    def addRoundedRect(_x, _y, _w, _h, _xRadius, _yRadius, _mode):
        """None QPainterPath.addRoundedRect(float _x, float _y, float _w, float _h, float _xRadius, float _yRadius, Qt.SizeMode _mode)"""
        return None
    def subtractedInverted(_r):
        """QPainterPath QPainterPath.subtractedInverted(QPainterPath _r)"""
        return QPainterPath()
    def subtracted(_r):
        """QPainterPath QPainterPath.subtracted(QPainterPath _r)"""
        return QPainterPath()
    def intersected(_r):
        """QPainterPath QPainterPath.intersected(QPainterPath _r)"""
        return QPainterPath()
    def united(_r):
        """QPainterPath QPainterPath.united(QPainterPath _r)"""
        return QPainterPath()
    def slopeAtPercent(_t):
        """float QPainterPath.slopeAtPercent(float _t)"""
        return float()
    def angleAtPercent(_t):
        """float QPainterPath.angleAtPercent(float _t)"""
        return float()
    def pointAtPercent(_t):
        """QPointF QPainterPath.pointAtPercent(float _t)"""
        return QPointF()
    def percentAtLength(_t):
        """float QPainterPath.percentAtLength(float _t)"""
        return float()
    def length():
        """float QPainterPath.length()"""
        return float()
    def addRoundRect(_rect, _xRnd, _yRnd):
        """None QPainterPath.addRoundRect(QRectF _rect, int _xRnd, int _yRnd)"""
        return None
    def addRoundRect(_x, _y, _w, _h, _xRnd, _yRnd):
        """None QPainterPath.addRoundRect(float _x, float _y, float _w, float _h, int _xRnd, int _yRnd)"""
        return None
    def addRoundRect(_rect, _roundness):
        """None QPainterPath.addRoundRect(QRectF _rect, int _roundness)"""
        return None
    def addRoundRect(_x, _y, _w, _h, _roundness):
        """None QPainterPath.addRoundRect(float _x, float _y, float _w, float _h, int _roundness)"""
        return None
    def setElementPositionAt(_i, _x, _y):
        """None QPainterPath.setElementPositionAt(int _i, float _x, float _y)"""
        return None
    def elementAt(_i):
        """QPainterPath.Element QPainterPath.elementAt(int _i)"""
        return QPainterPath.Element()
    def elementCount():
        """int QPainterPath.elementCount()"""
        return int()
    def isEmpty():
        """bool QPainterPath.isEmpty()"""
        return bool()
    def arcMoveTo(_rect, _angle):
        """None QPainterPath.arcMoveTo(QRectF _rect, float _angle)"""
        return None
    def arcMoveTo(_x, _y, _w, _h, _angle):
        """None QPainterPath.arcMoveTo(float _x, float _y, float _w, float _h, float _angle)"""
        return None
    def __ne__(_other):
        """bool QPainterPath.__ne__(QPainterPath _other)"""
        return bool()
    def __eq__(_other):
        """bool QPainterPath.__eq__(QPainterPath _other)"""
        return bool()
    def toFillPolygon(_matrix):
        """QPolygonF QPainterPath.toFillPolygon(QMatrix _matrix)"""
        return QPolygonF()
    def toFillPolygon(_matrix):
        """QPolygonF QPainterPath.toFillPolygon(QTransform _matrix)"""
        return QPolygonF()
    def toFillPolygons(_matrix):
        """list-of-QPolygonF QPainterPath.toFillPolygons(QMatrix _matrix)"""
        return [QPolygonF()]
    def toFillPolygons(_matrix):
        """list-of-QPolygonF QPainterPath.toFillPolygons(QTransform _matrix)"""
        return [QPolygonF()]
    def toSubpathPolygons(_matrix):
        """list-of-QPolygonF QPainterPath.toSubpathPolygons(QMatrix _matrix)"""
        return [QPolygonF()]
    def toSubpathPolygons(_matrix):
        """list-of-QPolygonF QPainterPath.toSubpathPolygons(QTransform _matrix)"""
        return [QPolygonF()]
    def toReversed():
        """QPainterPath QPainterPath.toReversed()"""
        return QPainterPath()
    def setFillRule(_fillRule):
        """None QPainterPath.setFillRule(Qt.FillRule _fillRule)"""
        return None
    def fillRule():
        """Qt.FillRule QPainterPath.fillRule()"""
        return Qt.FillRule()
    def controlPointRect():
        """QRectF QPainterPath.controlPointRect()"""
        return QRectF()
    def boundingRect():
        """QRectF QPainterPath.boundingRect()"""
        return QRectF()
    def intersects(_rect):
        """bool QPainterPath.intersects(QRectF _rect)"""
        return bool()
    def intersects(_p):
        """bool QPainterPath.intersects(QPainterPath _p)"""
        return bool()
    def contains(_pt):
        """bool QPainterPath.contains(QPointF _pt)"""
        return bool()
    def contains(_rect):
        """bool QPainterPath.contains(QRectF _rect)"""
        return bool()
    def contains(_p):
        """bool QPainterPath.contains(QPainterPath _p)"""
        return bool()
    def connectPath(_path):
        """None QPainterPath.connectPath(QPainterPath _path)"""
        return None
    def addRegion(_region):
        """None QPainterPath.addRegion(QRegion _region)"""
        return None
    def addPath(_path):
        """None QPainterPath.addPath(QPainterPath _path)"""
        return None
    def addText(_point, _f, _text):
        """None QPainterPath.addText(QPointF _point, QFont _f, QString _text)"""
        return None
    def addText(_x, _y, _f, _text):
        """None QPainterPath.addText(float _x, float _y, QFont _f, QString _text)"""
        return None
    def addPolygon(_polygon):
        """None QPainterPath.addPolygon(QPolygonF _polygon)"""
        return None
    def addEllipse(_rect):
        """None QPainterPath.addEllipse(QRectF _rect)"""
        return None
    def addEllipse(_x, _y, _w, _h):
        """None QPainterPath.addEllipse(float _x, float _y, float _w, float _h)"""
        return None
    def addEllipse(_center, _rx, _ry):
        """None QPainterPath.addEllipse(QPointF _center, float _rx, float _ry)"""
        return None
    def addRect(_rect):
        """None QPainterPath.addRect(QRectF _rect)"""
        return None
    def addRect(_x, _y, _w, _h):
        """None QPainterPath.addRect(float _x, float _y, float _w, float _h)"""
        return None
    def currentPosition():
        """QPointF QPainterPath.currentPosition()"""
        return QPointF()
    def quadTo(_ctrlPt, _endPt):
        """None QPainterPath.quadTo(QPointF _ctrlPt, QPointF _endPt)"""
        return None
    def quadTo(_ctrlPtx, _ctrlPty, _endPtx, _endPty):
        """None QPainterPath.quadTo(float _ctrlPtx, float _ctrlPty, float _endPtx, float _endPty)"""
        return None
    def cubicTo(_ctrlPt1, _ctrlPt2, _endPt):
        """None QPainterPath.cubicTo(QPointF _ctrlPt1, QPointF _ctrlPt2, QPointF _endPt)"""
        return None
    def cubicTo(_ctrlPt1x, _ctrlPt1y, _ctrlPt2x, _ctrlPt2y, _endPtx, _endPty):
        """None QPainterPath.cubicTo(float _ctrlPt1x, float _ctrlPt1y, float _ctrlPt2x, float _ctrlPt2y, float _endPtx, float _endPty)"""
        return None
    def arcTo(_rect, _startAngle, _arcLength):
        """None QPainterPath.arcTo(QRectF _rect, float _startAngle, float _arcLength)"""
        return None
    def arcTo(_x, _y, _w, _h, _startAngle, _arcLenght):
        """None QPainterPath.arcTo(float _x, float _y, float _w, float _h, float _startAngle, float _arcLenght)"""
        return None
    def lineTo(_p):
        """None QPainterPath.lineTo(QPointF _p)"""
        return None
    def lineTo(_x, _y):
        """None QPainterPath.lineTo(float _x, float _y)"""
        return None
    def moveTo(_p):
        """None QPainterPath.moveTo(QPointF _p)"""
        return None
    def moveTo(_x, _y):
        """None QPainterPath.moveTo(float _x, float _y)"""
        return None
    def closeSubpath():
        """None QPainterPath.closeSubpath()"""
        return None


class QPainterPathStroker():
    """"""
    def __init__():
        """None QPainterPathStroker.__init__()"""
        return None
    def dashPattern():
        """list-of-float QPainterPathStroker.dashPattern()"""
        return [float()]
    def dashOffset():
        """float QPainterPathStroker.dashOffset()"""
        return float()
    def setDashOffset(_offset):
        """None QPainterPathStroker.setDashOffset(float _offset)"""
        return None
    def createStroke(_path):
        """QPainterPath QPainterPathStroker.createStroke(QPainterPath _path)"""
        return QPainterPath()
    def setDashPattern():
        """Qt.PenStyle QPainterPathStroker.setDashPattern()"""
        return Qt.PenStyle()
    def setDashPattern(_dashPattern):
        """None QPainterPathStroker.setDashPattern(list-of-float _dashPattern)"""
        return None
    def curveThreshold():
        """float QPainterPathStroker.curveThreshold()"""
        return float()
    def setCurveThreshold(_threshold):
        """None QPainterPathStroker.setCurveThreshold(float _threshold)"""
        return None
    def miterLimit():
        """float QPainterPathStroker.miterLimit()"""
        return float()
    def setMiterLimit(_length):
        """None QPainterPathStroker.setMiterLimit(float _length)"""
        return None
    def joinStyle():
        """Qt.PenJoinStyle QPainterPathStroker.joinStyle()"""
        return Qt.PenJoinStyle()
    def setJoinStyle(_style):
        """None QPainterPathStroker.setJoinStyle(Qt.PenJoinStyle _style)"""
        return None
    def capStyle():
        """Qt.PenCapStyle QPainterPathStroker.capStyle()"""
        return Qt.PenCapStyle()
    def setCapStyle(_style):
        """None QPainterPathStroker.setCapStyle(Qt.PenCapStyle _style)"""
        return None
    def width():
        """float QPainterPathStroker.width()"""
        return float()
    def setWidth(_width):
        """None QPainterPathStroker.setWidth(float _width)"""
        return None


class QPalette():
    """"""
    WindowText = int() # QPalette.ColorRole enum
    Foreground = int() # QPalette.ColorRole enum
    Button = int() # QPalette.ColorRole enum
    Light = int() # QPalette.ColorRole enum
    Midlight = int() # QPalette.ColorRole enum
    Dark = int() # QPalette.ColorRole enum
    Mid = int() # QPalette.ColorRole enum
    Text = int() # QPalette.ColorRole enum
    BrightText = int() # QPalette.ColorRole enum
    ButtonText = int() # QPalette.ColorRole enum
    Base = int() # QPalette.ColorRole enum
    Window = int() # QPalette.ColorRole enum
    Background = int() # QPalette.ColorRole enum
    Shadow = int() # QPalette.ColorRole enum
    Highlight = int() # QPalette.ColorRole enum
    HighlightedText = int() # QPalette.ColorRole enum
    Link = int() # QPalette.ColorRole enum
    LinkVisited = int() # QPalette.ColorRole enum
    AlternateBase = int() # QPalette.ColorRole enum
    ToolTipBase = int() # QPalette.ColorRole enum
    ToolTipText = int() # QPalette.ColorRole enum
    NColorRoles = int() # QPalette.ColorRole enum
    NoRole = int() # QPalette.ColorRole enum

    Active = int() # QPalette.ColorGroup enum
    Disabled = int() # QPalette.ColorGroup enum
    Inactive = int() # QPalette.ColorGroup enum
    NColorGroups = int() # QPalette.ColorGroup enum
    Current = int() # QPalette.ColorGroup enum
    All = int() # QPalette.ColorGroup enum
    Normal = int() # QPalette.ColorGroup enum

    def __init__():
        """None QPalette.__init__()"""
        return None
    def __init__(_button):
        """None QPalette.__init__(QColor _button)"""
        return None
    def __init__(_button):
        """None QPalette.__init__(Qt.GlobalColor _button)"""
        return None
    def __init__(_button, _background):
        """None QPalette.__init__(QColor _button, QColor _background)"""
        return None
    def __init__(_foreground, _button, _light, _dark, _mid, _text, _bright_text, _base, _background):
        """None QPalette.__init__(QBrush _foreground, QBrush _button, QBrush _light, QBrush _dark, QBrush _mid, QBrush _text, QBrush _bright_text, QBrush _base, QBrush _background)"""
        return None
    def __init__(_foreground, _background, _light, _dark, _mid, _text, _base):
        """None QPalette.__init__(QColor _foreground, QColor _background, QColor _light, QColor _dark, QColor _mid, QColor _text, QColor _base)"""
        return None
    def __init__(_palette):
        """None QPalette.__init__(QPalette _palette)"""
        return None
    def __init__(_variant):
        """None QPalette.__init__(QVariant _variant)"""
        return None
    def cacheKey():
        """int QPalette.cacheKey()"""
        return int()
    def isBrushSet(_cg, _cr):
        """bool QPalette.isBrushSet(QPalette.ColorGroup _cg, QPalette.ColorRole _cr)"""
        return bool()
    def setColor(_acg, _acr, _acolor):
        """None QPalette.setColor(QPalette.ColorGroup _acg, QPalette.ColorRole _acr, QColor _acolor)"""
        return None
    def setColor(_acr, _acolor):
        """None QPalette.setColor(QPalette.ColorRole _acr, QColor _acolor)"""
        return None
    def resolve():
        """QPalette QPalette.resolve()"""
        return QPalette()
    def resolve():
        """int QPalette.resolve()"""
        return int()
    def resolve(_mask):
        """None QPalette.resolve(int _mask)"""
        return None
    def serialNumber():
        """int QPalette.serialNumber()"""
        return int()
    def isCopyOf(_p):
        """bool QPalette.isCopyOf(QPalette _p)"""
        return bool()
    def __ne__(_p):
        """bool QPalette.__ne__(QPalette _p)"""
        return bool()
    def __eq__(_p):
        """bool QPalette.__eq__(QPalette _p)"""
        return bool()
    def toolTipText():
        """QBrush QPalette.toolTipText()"""
        return QBrush()
    def toolTipBase():
        """QBrush QPalette.toolTipBase()"""
        return QBrush()
    def linkVisited():
        """QBrush QPalette.linkVisited()"""
        return QBrush()
    def link():
        """QBrush QPalette.link()"""
        return QBrush()
    def highlightedText():
        """QBrush QPalette.highlightedText()"""
        return QBrush()
    def highlight():
        """QBrush QPalette.highlight()"""
        return QBrush()
    def shadow():
        """QBrush QPalette.shadow()"""
        return QBrush()
    def buttonText():
        """QBrush QPalette.buttonText()"""
        return QBrush()
    def brightText():
        """QBrush QPalette.brightText()"""
        return QBrush()
    def midlight():
        """QBrush QPalette.midlight()"""
        return QBrush()
    def background():
        """QBrush QPalette.background()"""
        return QBrush()
    def window():
        """QBrush QPalette.window()"""
        return QBrush()
    def alternateBase():
        """QBrush QPalette.alternateBase()"""
        return QBrush()
    def base():
        """QBrush QPalette.base()"""
        return QBrush()
    def text():
        """QBrush QPalette.text()"""
        return QBrush()
    def mid():
        """QBrush QPalette.mid()"""
        return QBrush()
    def dark():
        """QBrush QPalette.dark()"""
        return QBrush()
    def light():
        """QBrush QPalette.light()"""
        return QBrush()
    def button():
        """QBrush QPalette.button()"""
        return QBrush()
    def windowText():
        """QBrush QPalette.windowText()"""
        return QBrush()
    def foreground():
        """QBrush QPalette.foreground()"""
        return QBrush()
    def isEqual(_cr1, _cr2):
        """bool QPalette.isEqual(QPalette.ColorGroup _cr1, QPalette.ColorGroup _cr2)"""
        return bool()
    def setColorGroup(_cr, _foreground, _button, _light, _dark, _mid, _text, _bright_text, _base, _background):
        """None QPalette.setColorGroup(QPalette.ColorGroup _cr, QBrush _foreground, QBrush _button, QBrush _light, QBrush _dark, QBrush _mid, QBrush _text, QBrush _bright_text, QBrush _base, QBrush _background)"""
        return None
    def setBrush(_cg, _cr, _brush):
        """None QPalette.setBrush(QPalette.ColorGroup _cg, QPalette.ColorRole _cr, QBrush _brush)"""
        return None
    def setBrush(_acr, _abrush):
        """None QPalette.setBrush(QPalette.ColorRole _acr, QBrush _abrush)"""
        return None
    def brush(_cg, _cr):
        """QBrush QPalette.brush(QPalette.ColorGroup _cg, QPalette.ColorRole _cr)"""
        return QBrush()
    def brush(_cr):
        """QBrush QPalette.brush(QPalette.ColorRole _cr)"""
        return QBrush()
    def color(_cg, _cr):
        """QColor QPalette.color(QPalette.ColorGroup _cg, QPalette.ColorRole _cr)"""
        return QColor()
    def color(_cr):
        """QColor QPalette.color(QPalette.ColorRole _cr)"""
        return QColor()
    def setCurrentColorGroup(_cg):
        """None QPalette.setCurrentColorGroup(QPalette.ColorGroup _cg)"""
        return None
    def currentColorGroup():
        """QPalette.ColorGroup QPalette.currentColorGroup()"""
        return QPalette.ColorGroup()


class QPen():
    """"""
    def __init__():
        """None QPen.__init__()"""
        return None
    def __init__():
        """Qt.PenStyle QPen.__init__()"""
        return Qt.PenStyle()
    def __init__(_color):
        """None QPen.__init__(QColor _color)"""
        return None
    def __init__(_brush, _width, _style, _cap, _join):
        """None QPen.__init__(QBrush _brush, float _width, Qt.PenStyle _style, Qt.PenCapStyle _cap, Qt.PenJoinStyle _join)"""
        return None
    def __init__(_pen):
        """None QPen.__init__(QPen _pen)"""
        return None
    def __init__(_variant):
        """None QPen.__init__(QVariant _variant)"""
        return None
    def setCosmetic(_cosmetic):
        """None QPen.setCosmetic(bool _cosmetic)"""
        return None
    def isCosmetic():
        """bool QPen.isCosmetic()"""
        return bool()
    def setDashOffset(_doffset):
        """None QPen.setDashOffset(float _doffset)"""
        return None
    def dashOffset():
        """float QPen.dashOffset()"""
        return float()
    def __ne__(_p):
        """bool QPen.__ne__(QPen _p)"""
        return bool()
    def __eq__(_p):
        """bool QPen.__eq__(QPen _p)"""
        return bool()
    def setMiterLimit(_limit):
        """None QPen.setMiterLimit(float _limit)"""
        return None
    def miterLimit():
        """float QPen.miterLimit()"""
        return float()
    def setDashPattern(_pattern):
        """None QPen.setDashPattern(list-of-float _pattern)"""
        return None
    def dashPattern():
        """list-of-float QPen.dashPattern()"""
        return [float()]
    def setJoinStyle(_pcs):
        """None QPen.setJoinStyle(Qt.PenJoinStyle _pcs)"""
        return None
    def joinStyle():
        """Qt.PenJoinStyle QPen.joinStyle()"""
        return Qt.PenJoinStyle()
    def setCapStyle(_pcs):
        """None QPen.setCapStyle(Qt.PenCapStyle _pcs)"""
        return None
    def capStyle():
        """Qt.PenCapStyle QPen.capStyle()"""
        return Qt.PenCapStyle()
    def isSolid():
        """bool QPen.isSolid()"""
        return bool()
    def setBrush(_brush):
        """None QPen.setBrush(QBrush _brush)"""
        return None
    def brush():
        """QBrush QPen.brush()"""
        return QBrush()
    def setColor(_color):
        """None QPen.setColor(QColor _color)"""
        return None
    def color():
        """QColor QPen.color()"""
        return QColor()
    def setWidth(_width):
        """None QPen.setWidth(int _width)"""
        return None
    def width():
        """int QPen.width()"""
        return int()
    def setWidthF(_width):
        """None QPen.setWidthF(float _width)"""
        return None
    def widthF():
        """float QPen.widthF()"""
        return float()
    def setStyle():
        """Qt.PenStyle QPen.setStyle()"""
        return Qt.PenStyle()
    def style():
        """Qt.PenStyle QPen.style()"""
        return Qt.PenStyle()


class QPicture(QPaintDevice):
    """"""
    def __init__(_formatVersion):
        """None QPicture.__init__(int _formatVersion)"""
        return None
    def __init__():
        """QPicture QPicture.__init__()"""
        return QPicture()
    def metric(_m):
        """int QPicture.metric(QPaintDevice.PaintDeviceMetric _m)"""
        return int()
    def paintEngine():
        """QPaintEngine QPicture.paintEngine()"""
        return QPaintEngine()
    def outputFormatList():
        """QStringList QPicture.outputFormatList()"""
        return QStringList()
    def inputFormatList():
        """QStringList QPicture.inputFormatList()"""
        return QStringList()
    def outputFormats():
        """list-of-QByteArray QPicture.outputFormats()"""
        return [QByteArray()]
    def inputFormats():
        """list-of-QByteArray QPicture.inputFormats()"""
        return [QByteArray()]
    def pictureFormat(_fileName):
        """str QPicture.pictureFormat(QString _fileName)"""
        return str()
    def isDetached():
        """bool QPicture.isDetached()"""
        return bool()
    def detach():
        """None QPicture.detach()"""
        return None
    def setBoundingRect(_r):
        """None QPicture.setBoundingRect(QRect _r)"""
        return None
    def boundingRect():
        """QRect QPicture.boundingRect()"""
        return QRect()
    def save(_dev, _format):
        """bool QPicture.save(QIODevice _dev, str _format)"""
        return bool()
    def save(_fileName, _format):
        """bool QPicture.save(QString _fileName, str _format)"""
        return bool()
    def load(_dev, _format):
        """bool QPicture.load(QIODevice _dev, str _format)"""
        return bool()
    def load(_fileName, _format):
        """bool QPicture.load(QString _fileName, str _format)"""
        return bool()
    def play(_p):
        """bool QPicture.play(QPainter _p)"""
        return bool()
    def setData(_data):
        """None QPicture.setData(str _data)"""
        return None
    def data():
        """str QPicture.data()"""
        return str()
    def size():
        """int QPicture.size()"""
        return int()
    def devType():
        """int QPicture.devType()"""
        return int()
    def isNull():
        """bool QPicture.isNull()"""
        return bool()


class QPictureIO():
    """"""
    def __init__():
        """None QPictureIO.__init__()"""
        return None
    def __init__(_ioDevice, _format):
        """None QPictureIO.__init__(QIODevice _ioDevice, str _format)"""
        return None
    def __init__(_fileName, _format):
        """None QPictureIO.__init__(QString _fileName, str _format)"""
        return None
    def defineIOHandler(_format, _header, _flags, _read_picture, _write_picture):
        """None QPictureIO.defineIOHandler(str _format, str _header, str _flags, callable _read_picture, callable _write_picture)"""
        return None
    def outputFormats():
        """list-of-QByteArray QPictureIO.outputFormats()"""
        return [QByteArray()]
    def inputFormats():
        """list-of-QByteArray QPictureIO.inputFormats()"""
        return [QByteArray()]
    def pictureFormat(_fileName):
        """QByteArray QPictureIO.pictureFormat(QString _fileName)"""
        return QByteArray()
    def pictureFormat():
        """QIODevice QPictureIO.pictureFormat()"""
        return QIODevice()
    def write():
        """bool QPictureIO.write()"""
        return bool()
    def read():
        """bool QPictureIO.read()"""
        return bool()
    def setGamma():
        """float QPictureIO.setGamma()"""
        return float()
    def setParameters():
        """str QPictureIO.setParameters()"""
        return str()
    def setDescription():
        """QString QPictureIO.setDescription()"""
        return QString()
    def setQuality():
        """int QPictureIO.setQuality()"""
        return int()
    def setFileName():
        """QString QPictureIO.setFileName()"""
        return QString()
    def setIODevice():
        """QIODevice QPictureIO.setIODevice()"""
        return QIODevice()
    def setFormat():
        """str QPictureIO.setFormat()"""
        return str()
    def setStatus():
        """int QPictureIO.setStatus()"""
        return int()
    def setPicture():
        """QPicture QPictureIO.setPicture()"""
        return QPicture()
    def gamma():
        """float QPictureIO.gamma()"""
        return float()
    def parameters():
        """str QPictureIO.parameters()"""
        return str()
    def description():
        """QString QPictureIO.description()"""
        return QString()
    def quality():
        """int QPictureIO.quality()"""
        return int()
    def fileName():
        """QString QPictureIO.fileName()"""
        return QString()
    def ioDevice():
        """QIODevice QPictureIO.ioDevice()"""
        return QIODevice()
    def format():
        """str QPictureIO.format()"""
        return str()
    def status():
        """int QPictureIO.status()"""
        return int()
    def picture():
        """QPicture QPictureIO.picture()"""
        return QPicture()


class QPixmapCache():
    """"""
    def __init__():
        """None QPixmapCache.__init__()"""
        return None
    def __init__():
        """QPixmapCache QPixmapCache.__init__()"""
        return QPixmapCache()
    def setCacheLimit():
        """int QPixmapCache.setCacheLimit()"""
        return int()
    def replace(_key, _pixmap):
        """bool QPixmapCache.replace(QPixmapCache.Key _key, QPixmap _pixmap)"""
        return bool()
    def remove(_key):
        """None QPixmapCache.remove(QString _key)"""
        return None
    def remove(_key):
        """None QPixmapCache.remove(QPixmapCache.Key _key)"""
        return None
    def insert(_key):
        """QPixmap QPixmapCache.insert(QString _key)"""
        return QPixmap()
    def insert(_pixmap):
        """QPixmapCache.Key QPixmapCache.insert(QPixmap _pixmap)"""
        return QPixmapCache.Key()
    def find(_key):
        """QPixmap QPixmapCache.find(QString _key)"""
        return QPixmap()
    def find(_key, _pixmap):
        """bool QPixmapCache.find(QString _key, QPixmap _pixmap)"""
        return bool()
    def find(_key, _pixmap):
        """bool QPixmapCache.find(QPixmapCache.Key _key, QPixmap _pixmap)"""
        return bool()
    def clear():
        """None QPixmapCache.clear()"""
        return None
    def cacheLimit():
        """int QPixmapCache.cacheLimit()"""
        return int()


class QPlainTextEdit(QAbstractScrollArea):
    """"""
    NoWrap = int() # QPlainTextEdit.LineWrapMode enum
    WidgetWidth = int() # QPlainTextEdit.LineWrapMode enum

    def __init__(_parent):
        """None QPlainTextEdit.__init__(QWidget _parent)"""
        return None
    def __init__(_text, _parent):
        """None QPlainTextEdit.__init__(QString _text, QWidget _parent)"""
        return None
    def anchorAt(_pos):
        """QString QPlainTextEdit.anchorAt(QPoint _pos)"""
        return QString()
    def getPaintContext():
        """QAbstractTextDocumentLayout.PaintContext QPlainTextEdit.getPaintContext()"""
        return QAbstractTextDocumentLayout.PaintContext()
    def blockBoundingGeometry(_block):
        """QRectF QPlainTextEdit.blockBoundingGeometry(QTextBlock _block)"""
        return QRectF()
    def blockBoundingRect(_block):
        """QRectF QPlainTextEdit.blockBoundingRect(QTextBlock _block)"""
        return QRectF()
    def contentOffset():
        """QPointF QPlainTextEdit.contentOffset()"""
        return QPointF()
    def firstVisibleBlock():
        """QTextBlock QPlainTextEdit.firstVisibleBlock()"""
        return QTextBlock()
    def scrollContentsBy(_dx, _dy):
        """None QPlainTextEdit.scrollContentsBy(int _dx, int _dy)"""
        return None
    def insertFromMimeData(_source):
        """None QPlainTextEdit.insertFromMimeData(QMimeData _source)"""
        return None
    def canInsertFromMimeData(_source):
        """bool QPlainTextEdit.canInsertFromMimeData(QMimeData _source)"""
        return bool()
    def createMimeDataFromSelection():
        """QMimeData QPlainTextEdit.createMimeDataFromSelection()"""
        return QMimeData()
    def inputMethodQuery(_property):
        """QVariant QPlainTextEdit.inputMethodQuery(Qt.InputMethodQuery _property)"""
        return QVariant()
    def inputMethodEvent():
        """QInputMethodEvent QPlainTextEdit.inputMethodEvent()"""
        return QInputMethodEvent()
    def wheelEvent(_e):
        """None QPlainTextEdit.wheelEvent(QWheelEvent _e)"""
        return None
    def changeEvent(_e):
        """None QPlainTextEdit.changeEvent(QEvent _e)"""
        return None
    def showEvent():
        """QShowEvent QPlainTextEdit.showEvent()"""
        return QShowEvent()
    def focusOutEvent(_e):
        """None QPlainTextEdit.focusOutEvent(QFocusEvent _e)"""
        return None
    def focusInEvent(_e):
        """None QPlainTextEdit.focusInEvent(QFocusEvent _e)"""
        return None
    def dropEvent(_e):
        """None QPlainTextEdit.dropEvent(QDropEvent _e)"""
        return None
    def dragMoveEvent(_e):
        """None QPlainTextEdit.dragMoveEvent(QDragMoveEvent _e)"""
        return None
    def dragLeaveEvent(_e):
        """None QPlainTextEdit.dragLeaveEvent(QDragLeaveEvent _e)"""
        return None
    def dragEnterEvent(_e):
        """None QPlainTextEdit.dragEnterEvent(QDragEnterEvent _e)"""
        return None
    def contextMenuEvent(_e):
        """None QPlainTextEdit.contextMenuEvent(QContextMenuEvent _e)"""
        return None
    def focusNextPrevChild(_next):
        """bool QPlainTextEdit.focusNextPrevChild(bool _next)"""
        return bool()
    def mouseDoubleClickEvent(_e):
        """None QPlainTextEdit.mouseDoubleClickEvent(QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(_e):
        """None QPlainTextEdit.mouseReleaseEvent(QMouseEvent _e)"""
        return None
    def mouseMoveEvent(_e):
        """None QPlainTextEdit.mouseMoveEvent(QMouseEvent _e)"""
        return None
    def mousePressEvent(_e):
        """None QPlainTextEdit.mousePressEvent(QMouseEvent _e)"""
        return None
    def paintEvent(_e):
        """None QPlainTextEdit.paintEvent(QPaintEvent _e)"""
        return None
    def resizeEvent(_e):
        """None QPlainTextEdit.resizeEvent(QResizeEvent _e)"""
        return None
    def keyReleaseEvent(_e):
        """None QPlainTextEdit.keyReleaseEvent(QKeyEvent _e)"""
        return None
    def keyPressEvent(_e):
        """None QPlainTextEdit.keyPressEvent(QKeyEvent _e)"""
        return None
    def timerEvent(_e):
        """None QPlainTextEdit.timerEvent(QTimerEvent _e)"""
        return None
    def event(_e):
        """bool QPlainTextEdit.event(QEvent _e)"""
        return bool()
    def centerCursor():
        """None QPlainTextEdit.centerCursor()"""
        return None
    def appendHtml(_html):
        """None QPlainTextEdit.appendHtml(QString _html)"""
        return None
    def appendPlainText(_text):
        """None QPlainTextEdit.appendPlainText(QString _text)"""
        return None
    def insertPlainText(_text):
        """None QPlainTextEdit.insertPlainText(QString _text)"""
        return None
    def selectAll():
        """None QPlainTextEdit.selectAll()"""
        return None
    def clear():
        """None QPlainTextEdit.clear()"""
        return None
    def redo():
        """None QPlainTextEdit.redo()"""
        return None
    def undo():
        """None QPlainTextEdit.undo()"""
        return None
    def paste():
        """None QPlainTextEdit.paste()"""
        return None
    def copy():
        """None QPlainTextEdit.copy()"""
        return None
    def cut():
        """None QPlainTextEdit.cut()"""
        return None
    def setPlainText(_text):
        """None QPlainTextEdit.setPlainText(QString _text)"""
        return None
    def blockCount():
        """int QPlainTextEdit.blockCount()"""
        return int()
    def print_(_printer):
        """None QPlainTextEdit.print_(QPrinter _printer)"""
        return None
    def canPaste():
        """bool QPlainTextEdit.canPaste()"""
        return bool()
    def moveCursor(_operation, _mode):
        """None QPlainTextEdit.moveCursor(QTextCursor.MoveOperation _operation, QTextCursor.MoveMode _mode)"""
        return None
    def extraSelections():
        """list-of-QTextEdit.ExtraSelection QPlainTextEdit.extraSelections()"""
        return [QTextEdit.ExtraSelection()]
    def setExtraSelections(_selections):
        """None QPlainTextEdit.setExtraSelections(list-of-QTextEdit.ExtraSelection _selections)"""
        return None
    def setCursorWidth(_width):
        """None QPlainTextEdit.setCursorWidth(int _width)"""
        return None
    def cursorWidth():
        """int QPlainTextEdit.cursorWidth()"""
        return int()
    def setTabStopWidth(_width):
        """None QPlainTextEdit.setTabStopWidth(int _width)"""
        return None
    def tabStopWidth():
        """int QPlainTextEdit.tabStopWidth()"""
        return int()
    def setOverwriteMode(_overwrite):
        """None QPlainTextEdit.setOverwriteMode(bool _overwrite)"""
        return None
    def overwriteMode():
        """bool QPlainTextEdit.overwriteMode()"""
        return bool()
    def cursorRect(_cursor):
        """QRect QPlainTextEdit.cursorRect(QTextCursor _cursor)"""
        return QRect()
    def cursorRect():
        """QRect QPlainTextEdit.cursorRect()"""
        return QRect()
    def cursorForPosition(_pos):
        """QTextCursor QPlainTextEdit.cursorForPosition(QPoint _pos)"""
        return QTextCursor()
    def createStandardContextMenu():
        """QMenu QPlainTextEdit.createStandardContextMenu()"""
        return QMenu()
    def loadResource(_type, _name):
        """QVariant QPlainTextEdit.loadResource(int _type, QUrl _name)"""
        return QVariant()
    def ensureCursorVisible():
        """None QPlainTextEdit.ensureCursorVisible()"""
        return None
    def toPlainText():
        """QString QPlainTextEdit.toPlainText()"""
        return QString()
    def find(_exp, _options):
        """bool QPlainTextEdit.find(QString _exp, QTextDocument.FindFlags _options)"""
        return bool()
    def centerOnScroll():
        """bool QPlainTextEdit.centerOnScroll()"""
        return bool()
    def setCenterOnScroll(_enabled):
        """None QPlainTextEdit.setCenterOnScroll(bool _enabled)"""
        return None
    def backgroundVisible():
        """bool QPlainTextEdit.backgroundVisible()"""
        return bool()
    def setBackgroundVisible(_visible):
        """None QPlainTextEdit.setBackgroundVisible(bool _visible)"""
        return None
    def setWordWrapMode(_policy):
        """None QPlainTextEdit.setWordWrapMode(QTextOption.WrapMode _policy)"""
        return None
    def wordWrapMode():
        """QTextOption.WrapMode QPlainTextEdit.wordWrapMode()"""
        return QTextOption.WrapMode()
    def setLineWrapMode(_mode):
        """None QPlainTextEdit.setLineWrapMode(QPlainTextEdit.LineWrapMode _mode)"""
        return None
    def lineWrapMode():
        """QPlainTextEdit.LineWrapMode QPlainTextEdit.lineWrapMode()"""
        return QPlainTextEdit.LineWrapMode()
    def maximumBlockCount():
        """int QPlainTextEdit.maximumBlockCount()"""
        return int()
    def setMaximumBlockCount(_maximum):
        """None QPlainTextEdit.setMaximumBlockCount(int _maximum)"""
        return None
    def setUndoRedoEnabled(_enable):
        """None QPlainTextEdit.setUndoRedoEnabled(bool _enable)"""
        return None
    def isUndoRedoEnabled():
        """bool QPlainTextEdit.isUndoRedoEnabled()"""
        return bool()
    def documentTitle():
        """QString QPlainTextEdit.documentTitle()"""
        return QString()
    def setDocumentTitle(_title):
        """None QPlainTextEdit.setDocumentTitle(QString _title)"""
        return None
    def setTabChangesFocus(_b):
        """None QPlainTextEdit.setTabChangesFocus(bool _b)"""
        return None
    def tabChangesFocus():
        """bool QPlainTextEdit.tabChangesFocus()"""
        return bool()
    def currentCharFormat():
        """QTextCharFormat QPlainTextEdit.currentCharFormat()"""
        return QTextCharFormat()
    def setCurrentCharFormat(_format):
        """None QPlainTextEdit.setCurrentCharFormat(QTextCharFormat _format)"""
        return None
    def mergeCurrentCharFormat(_modifier):
        """None QPlainTextEdit.mergeCurrentCharFormat(QTextCharFormat _modifier)"""
        return None
    def textInteractionFlags():
        """Qt.TextInteractionFlags QPlainTextEdit.textInteractionFlags()"""
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(_flags):
        """None QPlainTextEdit.setTextInteractionFlags(Qt.TextInteractionFlags _flags)"""
        return None
    def setReadOnly(_ro):
        """None QPlainTextEdit.setReadOnly(bool _ro)"""
        return None
    def isReadOnly():
        """bool QPlainTextEdit.isReadOnly()"""
        return bool()
    def textCursor():
        """QTextCursor QPlainTextEdit.textCursor()"""
        return QTextCursor()
    def setTextCursor(_cursor):
        """None QPlainTextEdit.setTextCursor(QTextCursor _cursor)"""
        return None
    def document():
        """QTextDocument QPlainTextEdit.document()"""
        return QTextDocument()
    def setDocument(_document):
        """None QPlainTextEdit.setDocument(QTextDocument _document)"""
        return None


class QPlainTextDocumentLayout(QAbstractTextDocumentLayout):
    """"""
    def __init__(_document):
        """None QPlainTextDocumentLayout.__init__(QTextDocument _document)"""
        return None
    def documentChanged(_from, _charsAdded):
        """int QPlainTextDocumentLayout.documentChanged(int _from, int _charsAdded)"""
        return int()
    def requestUpdate():
        """None QPlainTextDocumentLayout.requestUpdate()"""
        return None
    def cursorWidth():
        """int QPlainTextDocumentLayout.cursorWidth()"""
        return int()
    def setCursorWidth(_width):
        """None QPlainTextDocumentLayout.setCursorWidth(int _width)"""
        return None
    def ensureBlockLayout(_block):
        """None QPlainTextDocumentLayout.ensureBlockLayout(QTextBlock _block)"""
        return None
    def blockBoundingRect(_block):
        """QRectF QPlainTextDocumentLayout.blockBoundingRect(QTextBlock _block)"""
        return QRectF()
    def frameBoundingRect():
        """QTextFrame QPlainTextDocumentLayout.frameBoundingRect()"""
        return QTextFrame()
    def documentSize():
        """QSizeF QPlainTextDocumentLayout.documentSize()"""
        return QSizeF()
    def pageCount():
        """int QPlainTextDocumentLayout.pageCount()"""
        return int()
    def hitTest():
        """Qt.HitTestAccuracy QPlainTextDocumentLayout.hitTest()"""
        return Qt.HitTestAccuracy()
    def draw():
        """QAbstractTextDocumentLayout.PaintContext QPlainTextDocumentLayout.draw()"""
        return QAbstractTextDocumentLayout.PaintContext()


class QPolygon():
    """"""
    def __init__():
        """None QPolygon.__init__()"""
        return None
    def __init__(_a):
        """None QPolygon.__init__(QPolygon _a)"""
        return None
    def __init__(_v):
        """None QPolygon.__init__(list-of-QPoint _v)"""
        return None
    def __init__(_rectangle, _closed):
        """None QPolygon.__init__(QRect _rectangle, bool _closed)"""
        return None
    def __init__(_asize):
        """None QPolygon.__init__(int _asize)"""
        return None
    def __init__(_points):
        """None QPolygon.__init__(list-of-int _points)"""
        return None
    def __init__(_variant):
        """None QPolygon.__init__(QVariant _variant)"""
        return None
    def __mul__(_m):
        """QPolygon QPolygon.__mul__(QMatrix _m)"""
        return QPolygon()
    def __mul__(_m):
        """QPolygon QPolygon.__mul__(QTransform _m)"""
        return QPolygon()
    def __contains__(_value):
        """int QPolygon.__contains__(QPoint _value)"""
        return int()
    def __delitem__(_i):
        """None QPolygon.__delitem__(int _i)"""
        return None
    def __delitem__(_slice):
        """None QPolygon.__delitem__(slice _slice)"""
        return None
    def __setitem__(_i, _value):
        """None QPolygon.__setitem__(int _i, QPoint _value)"""
        return None
    def __setitem__(_slice, _list):
        """None QPolygon.__setitem__(slice _slice, QPolygon _list)"""
        return None
    def __getitem__(_i):
        """QPoint QPolygon.__getitem__(int _i)"""
        return QPoint()
    def __getitem__(_slice):
        """QPolygon QPolygon.__getitem__(slice _slice)"""
        return QPolygon()
    def __lshift__(_value):
        """object QPolygon.__lshift__(QPoint _value)"""
        return object()
    def __eq__(_other):
        """bool QPolygon.__eq__(QPolygon _other)"""
        return bool()
    def __iadd__(_other):
        """QPolygon QPolygon.__iadd__(QPolygon _other)"""
        return QPolygon()
    def __iadd__(_value):
        """QPolygon QPolygon.__iadd__(QPoint _value)"""
        return QPolygon()
    def __add__(_other):
        """QPolygon QPolygon.__add__(QPolygon _other)"""
        return QPolygon()
    def __ne__(_other):
        """bool QPolygon.__ne__(QPolygon _other)"""
        return bool()
    def value(_i):
        """QPoint QPolygon.value(int _i)"""
        return QPoint()
    def value(_i, _defaultValue):
        """QPoint QPolygon.value(int _i, QPoint _defaultValue)"""
        return QPoint()
    def size():
        """int QPolygon.size()"""
        return int()
    def replace(_i, _value):
        """None QPolygon.replace(int _i, QPoint _value)"""
        return None
    def remove(_i):
        """None QPolygon.remove(int _i)"""
        return None
    def remove(_i, _count):
        """None QPolygon.remove(int _i, int _count)"""
        return None
    def prepend(_value):
        """None QPolygon.prepend(QPoint _value)"""
        return None
    def mid(_pos, _length):
        """QPolygon QPolygon.mid(int _pos, int _length)"""
        return QPolygon()
    def lastIndexOf(_value, _from):
        """int QPolygon.lastIndexOf(QPoint _value, int _from)"""
        return int()
    def last():
        """QPoint QPolygon.last()"""
        return QPoint()
    def isEmpty():
        """bool QPolygon.isEmpty()"""
        return bool()
    def insert(_i, _value):
        """None QPolygon.insert(int _i, QPoint _value)"""
        return None
    def indexOf(_value, _from):
        """int QPolygon.indexOf(QPoint _value, int _from)"""
        return int()
    def first():
        """QPoint QPolygon.first()"""
        return QPoint()
    def fill(_value, _size):
        """None QPolygon.fill(QPoint _value, int _size)"""
        return None
    def data():
        """sip.voidptr QPolygon.data()"""
        return sip.voidptr()
    def __len__():
        """ QPolygon.__len__()"""
        return ()
    def count(_value):
        """int QPolygon.count(QPoint _value)"""
        return int()
    def count():
        """int QPolygon.count()"""
        return int()
    def contains(_value):
        """bool QPolygon.contains(QPoint _value)"""
        return bool()
    def clear():
        """None QPolygon.clear()"""
        return None
    def at(_i):
        """QPoint QPolygon.at(int _i)"""
        return QPoint()
    def append(_value):
        """None QPolygon.append(QPoint _value)"""
        return None
    def translated(_dx, _dy):
        """QPolygon QPolygon.translated(int _dx, int _dy)"""
        return QPolygon()
    def translated(_offset):
        """QPolygon QPolygon.translated(QPoint _offset)"""
        return QPolygon()
    def subtracted(_r):
        """QPolygon QPolygon.subtracted(QPolygon _r)"""
        return QPolygon()
    def intersected(_r):
        """QPolygon QPolygon.intersected(QPolygon _r)"""
        return QPolygon()
    def united(_r):
        """QPolygon QPolygon.united(QPolygon _r)"""
        return QPolygon()
    def containsPoint(_pt, _fillRule):
        """bool QPolygon.containsPoint(QPoint _pt, Qt.FillRule _fillRule)"""
        return bool()
    def setPoint(_index, _pt):
        """None QPolygon.setPoint(int _index, QPoint _pt)"""
        return None
    def setPoint(_index, _x, _y):
        """None QPolygon.setPoint(int _index, int _x, int _y)"""
        return None
    def putPoints(_index, _firstx, _firsty, *args):
        """None QPolygon.putPoints(int _index, int _firstx, int _firsty, ... *args)"""
        return None
    def putPoints(_index, _nPoints, _fromPolygon, _from):
        """None QPolygon.putPoints(int _index, int _nPoints, QPolygon _fromPolygon, int _from)"""
        return None
    def setPoints(_points):
        """None QPolygon.setPoints(list-of-int _points)"""
        return None
    def setPoints(_firstx, _firsty, *args):
        """None QPolygon.setPoints(int _firstx, int _firsty, ... *args)"""
        return None
    def point(_index):
        """QPoint QPolygon.point(int _index)"""
        return QPoint()
    def boundingRect():
        """QRect QPolygon.boundingRect()"""
        return QRect()
    def translate(_dx, _dy):
        """None QPolygon.translate(int _dx, int _dy)"""
        return None
    def translate(_offset):
        """None QPolygon.translate(QPoint _offset)"""
        return None


class QPolygonF():
    """"""
    def __init__():
        """None QPolygonF.__init__()"""
        return None
    def __init__(_a):
        """None QPolygonF.__init__(QPolygonF _a)"""
        return None
    def __init__(_v):
        """None QPolygonF.__init__(list-of-QPointF _v)"""
        return None
    def __init__(_r):
        """None QPolygonF.__init__(QRectF _r)"""
        return None
    def __init__(_a):
        """None QPolygonF.__init__(QPolygon _a)"""
        return None
    def __init__(_asize):
        """None QPolygonF.__init__(int _asize)"""
        return None
    def __mul__(_m):
        """QPolygonF QPolygonF.__mul__(QMatrix _m)"""
        return QPolygonF()
    def __mul__(_m):
        """QPolygonF QPolygonF.__mul__(QTransform _m)"""
        return QPolygonF()
    def __contains__(_value):
        """int QPolygonF.__contains__(QPointF _value)"""
        return int()
    def __delitem__(_i):
        """None QPolygonF.__delitem__(int _i)"""
        return None
    def __delitem__(_slice):
        """None QPolygonF.__delitem__(slice _slice)"""
        return None
    def __setitem__(_i, _value):
        """None QPolygonF.__setitem__(int _i, QPointF _value)"""
        return None
    def __setitem__(_slice, _list):
        """None QPolygonF.__setitem__(slice _slice, QPolygonF _list)"""
        return None
    def __getitem__(_i):
        """QPointF QPolygonF.__getitem__(int _i)"""
        return QPointF()
    def __getitem__(_slice):
        """QPolygonF QPolygonF.__getitem__(slice _slice)"""
        return QPolygonF()
    def __lshift__(_value):
        """object QPolygonF.__lshift__(QPointF _value)"""
        return object()
    def __eq__(_other):
        """bool QPolygonF.__eq__(QPolygonF _other)"""
        return bool()
    def __iadd__(_other):
        """QPolygonF QPolygonF.__iadd__(QPolygonF _other)"""
        return QPolygonF()
    def __iadd__(_value):
        """QPolygonF QPolygonF.__iadd__(QPointF _value)"""
        return QPolygonF()
    def __add__(_other):
        """QPolygonF QPolygonF.__add__(QPolygonF _other)"""
        return QPolygonF()
    def __ne__(_other):
        """bool QPolygonF.__ne__(QPolygonF _other)"""
        return bool()
    def value(_i):
        """QPointF QPolygonF.value(int _i)"""
        return QPointF()
    def value(_i, _defaultValue):
        """QPointF QPolygonF.value(int _i, QPointF _defaultValue)"""
        return QPointF()
    def size():
        """int QPolygonF.size()"""
        return int()
    def replace(_i, _value):
        """None QPolygonF.replace(int _i, QPointF _value)"""
        return None
    def remove(_i):
        """None QPolygonF.remove(int _i)"""
        return None
    def remove(_i, _count):
        """None QPolygonF.remove(int _i, int _count)"""
        return None
    def prepend(_value):
        """None QPolygonF.prepend(QPointF _value)"""
        return None
    def mid(_pos, _length):
        """QPolygonF QPolygonF.mid(int _pos, int _length)"""
        return QPolygonF()
    def lastIndexOf(_value, _from):
        """int QPolygonF.lastIndexOf(QPointF _value, int _from)"""
        return int()
    def last():
        """QPointF QPolygonF.last()"""
        return QPointF()
    def isEmpty():
        """bool QPolygonF.isEmpty()"""
        return bool()
    def insert(_i, _value):
        """None QPolygonF.insert(int _i, QPointF _value)"""
        return None
    def indexOf(_value, _from):
        """int QPolygonF.indexOf(QPointF _value, int _from)"""
        return int()
    def first():
        """QPointF QPolygonF.first()"""
        return QPointF()
    def fill(_value, _size):
        """None QPolygonF.fill(QPointF _value, int _size)"""
        return None
    def data():
        """sip.voidptr QPolygonF.data()"""
        return sip.voidptr()
    def __len__():
        """ QPolygonF.__len__()"""
        return ()
    def count(_value):
        """int QPolygonF.count(QPointF _value)"""
        return int()
    def count():
        """int QPolygonF.count()"""
        return int()
    def contains(_value):
        """bool QPolygonF.contains(QPointF _value)"""
        return bool()
    def clear():
        """None QPolygonF.clear()"""
        return None
    def at(_i):
        """QPointF QPolygonF.at(int _i)"""
        return QPointF()
    def append(_value):
        """None QPolygonF.append(QPointF _value)"""
        return None
    def translated(_offset):
        """QPolygonF QPolygonF.translated(QPointF _offset)"""
        return QPolygonF()
    def translated(_dx, _dy):
        """QPolygonF QPolygonF.translated(float _dx, float _dy)"""
        return QPolygonF()
    def subtracted(_r):
        """QPolygonF QPolygonF.subtracted(QPolygonF _r)"""
        return QPolygonF()
    def intersected(_r):
        """QPolygonF QPolygonF.intersected(QPolygonF _r)"""
        return QPolygonF()
    def united(_r):
        """QPolygonF QPolygonF.united(QPolygonF _r)"""
        return QPolygonF()
    def containsPoint(_pt, _fillRule):
        """bool QPolygonF.containsPoint(QPointF _pt, Qt.FillRule _fillRule)"""
        return bool()
    def boundingRect():
        """QRectF QPolygonF.boundingRect()"""
        return QRectF()
    def isClosed():
        """bool QPolygonF.isClosed()"""
        return bool()
    def toPolygon():
        """QPolygon QPolygonF.toPolygon()"""
        return QPolygon()
    def translate(_offset):
        """None QPolygonF.translate(QPointF _offset)"""
        return None
    def translate(_dx, _dy):
        """None QPolygonF.translate(float _dx, float _dy)"""
        return None


class QPrinter(QPaintDevice):
    """"""
    Millimeter = int() # QPrinter.Unit enum
    Point = int() # QPrinter.Unit enum
    Inch = int() # QPrinter.Unit enum
    Pica = int() # QPrinter.Unit enum
    Didot = int() # QPrinter.Unit enum
    Cicero = int() # QPrinter.Unit enum
    DevicePixel = int() # QPrinter.Unit enum

    DuplexNone = int() # QPrinter.DuplexMode enum
    DuplexAuto = int() # QPrinter.DuplexMode enum
    DuplexLongSide = int() # QPrinter.DuplexMode enum
    DuplexShortSide = int() # QPrinter.DuplexMode enum

    AllPages = int() # QPrinter.PrintRange enum
    Selection = int() # QPrinter.PrintRange enum
    PageRange = int() # QPrinter.PrintRange enum
    CurrentPage = int() # QPrinter.PrintRange enum

    NativeFormat = int() # QPrinter.OutputFormat enum
    PdfFormat = int() # QPrinter.OutputFormat enum
    PostScriptFormat = int() # QPrinter.OutputFormat enum

    Idle = int() # QPrinter.PrinterState enum
    Active = int() # QPrinter.PrinterState enum
    Aborted = int() # QPrinter.PrinterState enum
    Error = int() # QPrinter.PrinterState enum

    OnlyOne = int() # QPrinter.PaperSource enum
    Lower = int() # QPrinter.PaperSource enum
    Middle = int() # QPrinter.PaperSource enum
    Manual = int() # QPrinter.PaperSource enum
    Envelope = int() # QPrinter.PaperSource enum
    EnvelopeManual = int() # QPrinter.PaperSource enum
    Auto = int() # QPrinter.PaperSource enum
    Tractor = int() # QPrinter.PaperSource enum
    SmallFormat = int() # QPrinter.PaperSource enum
    LargeFormat = int() # QPrinter.PaperSource enum
    LargeCapacity = int() # QPrinter.PaperSource enum
    Cassette = int() # QPrinter.PaperSource enum
    FormSource = int() # QPrinter.PaperSource enum
    MaxPageSource = int() # QPrinter.PaperSource enum

    GrayScale = int() # QPrinter.ColorMode enum
    Color = int() # QPrinter.ColorMode enum

    FirstPageFirst = int() # QPrinter.PageOrder enum
    LastPageFirst = int() # QPrinter.PageOrder enum

    A4 = int() # QPrinter.PageSize enum
    B5 = int() # QPrinter.PageSize enum
    Letter = int() # QPrinter.PageSize enum
    Legal = int() # QPrinter.PageSize enum
    Executive = int() # QPrinter.PageSize enum
    A0 = int() # QPrinter.PageSize enum
    A1 = int() # QPrinter.PageSize enum
    A2 = int() # QPrinter.PageSize enum
    A3 = int() # QPrinter.PageSize enum
    A5 = int() # QPrinter.PageSize enum
    A6 = int() # QPrinter.PageSize enum
    A7 = int() # QPrinter.PageSize enum
    A8 = int() # QPrinter.PageSize enum
    A9 = int() # QPrinter.PageSize enum
    B0 = int() # QPrinter.PageSize enum
    B1 = int() # QPrinter.PageSize enum
    B10 = int() # QPrinter.PageSize enum
    B2 = int() # QPrinter.PageSize enum
    B3 = int() # QPrinter.PageSize enum
    B4 = int() # QPrinter.PageSize enum
    B6 = int() # QPrinter.PageSize enum
    B7 = int() # QPrinter.PageSize enum
    B8 = int() # QPrinter.PageSize enum
    B9 = int() # QPrinter.PageSize enum
    C5E = int() # QPrinter.PageSize enum
    Comm10E = int() # QPrinter.PageSize enum
    DLE = int() # QPrinter.PageSize enum
    Folio = int() # QPrinter.PageSize enum
    Ledger = int() # QPrinter.PageSize enum
    Tabloid = int() # QPrinter.PageSize enum
    Custom = int() # QPrinter.PageSize enum

    Portrait = int() # QPrinter.Orientation enum
    Landscape = int() # QPrinter.Orientation enum

    ScreenResolution = int() # QPrinter.PrinterMode enum
    PrinterResolution = int() # QPrinter.PrinterMode enum
    HighResolution = int() # QPrinter.PrinterMode enum

    def __init__(_mode):
        """None QPrinter.__init__(QPrinter.PrinterMode _mode)"""
        return None
    def __init__(_printer, _mode):
        """None QPrinter.__init__(QPrinterInfo _printer, QPrinter.PrinterMode _mode)"""
        return None
    def supportsMultipleCopies():
        """bool QPrinter.supportsMultipleCopies()"""
        return bool()
    def copyCount():
        """int QPrinter.copyCount()"""
        return int()
    def setCopyCount():
        """int QPrinter.setCopyCount()"""
        return int()
    def setEngines(_printEngine, _paintEngine):
        """None QPrinter.setEngines(QPrintEngine _printEngine, QPaintEngine _paintEngine)"""
        return None
    def metric():
        """QPaintDevice.PaintDeviceMetric QPrinter.metric()"""
        return QPaintDevice.PaintDeviceMetric()
    def actualNumCopies():
        """int QPrinter.actualNumCopies()"""
        return int()
    def getPageMargins(_left, _top, _right, _bottom, _unit):
        """None QPrinter.getPageMargins(float _left, float _top, float _right, float _bottom, QPrinter.Unit _unit)"""
        return None
    def setPageMargins(_left, _top, _right, _bottom, _unit):
        """None QPrinter.setPageMargins(float _left, float _top, float _right, float _bottom, QPrinter.Unit _unit)"""
        return None
    def duplex():
        """QPrinter.DuplexMode QPrinter.duplex()"""
        return QPrinter.DuplexMode()
    def setDuplex(_duplex):
        """None QPrinter.setDuplex(QPrinter.DuplexMode _duplex)"""
        return None
    def paperSize():
        """QPrinter.PageSize QPrinter.paperSize()"""
        return QPrinter.PageSize()
    def paperSize(_unit):
        """QSizeF QPrinter.paperSize(QPrinter.Unit _unit)"""
        return QSizeF()
    def setPaperSize():
        """QPrinter.PageSize QPrinter.setPaperSize()"""
        return QPrinter.PageSize()
    def setPaperSize(_paperSize, _unit):
        """None QPrinter.setPaperSize(QSizeF _paperSize, QPrinter.Unit _unit)"""
        return None
    def isValid():
        """bool QPrinter.isValid()"""
        return bool()
    def doubleSidedPrinting():
        """bool QPrinter.doubleSidedPrinting()"""
        return bool()
    def setDoubleSidedPrinting(_enable):
        """None QPrinter.setDoubleSidedPrinting(bool _enable)"""
        return None
    def printRange():
        """QPrinter.PrintRange QPrinter.printRange()"""
        return QPrinter.PrintRange()
    def setPrintRange(_range):
        """None QPrinter.setPrintRange(QPrinter.PrintRange _range)"""
        return None
    def toPage():
        """int QPrinter.toPage()"""
        return int()
    def fromPage():
        """int QPrinter.fromPage()"""
        return int()
    def setFromTo(_fromPage, _toPage):
        """None QPrinter.setFromTo(int _fromPage, int _toPage)"""
        return None
    def printEngine():
        """QPrintEngine QPrinter.printEngine()"""
        return QPrintEngine()
    def fontEmbeddingEnabled():
        """bool QPrinter.fontEmbeddingEnabled()"""
        return bool()
    def setFontEmbeddingEnabled(_enable):
        """None QPrinter.setFontEmbeddingEnabled(bool _enable)"""
        return None
    def outputFormat():
        """QPrinter.OutputFormat QPrinter.outputFormat()"""
        return QPrinter.OutputFormat()
    def setOutputFormat(_format):
        """None QPrinter.setOutputFormat(QPrinter.OutputFormat _format)"""
        return None
    def paintEngine():
        """QPaintEngine QPrinter.paintEngine()"""
        return QPaintEngine()
    def printerState():
        """QPrinter.PrinterState QPrinter.printerState()"""
        return QPrinter.PrinterState()
    def abort():
        """bool QPrinter.abort()"""
        return bool()
    def newPage():
        """bool QPrinter.newPage()"""
        return bool()
    def setPrinterSelectionOption():
        """QString QPrinter.setPrinterSelectionOption()"""
        return QString()
    def printerSelectionOption():
        """QString QPrinter.printerSelectionOption()"""
        return QString()
    def pageRect():
        """QRect QPrinter.pageRect()"""
        return QRect()
    def pageRect():
        """QPrinter.Unit QPrinter.pageRect()"""
        return QPrinter.Unit()
    def paperRect():
        """QRect QPrinter.paperRect()"""
        return QRect()
    def paperRect():
        """QPrinter.Unit QPrinter.paperRect()"""
        return QPrinter.Unit()
    def supportedResolutions():
        """list-of-int QPrinter.supportedResolutions()"""
        return [int()]
    def paperSource():
        """QPrinter.PaperSource QPrinter.paperSource()"""
        return QPrinter.PaperSource()
    def setPaperSource():
        """QPrinter.PaperSource QPrinter.setPaperSource()"""
        return QPrinter.PaperSource()
    def numCopies():
        """int QPrinter.numCopies()"""
        return int()
    def setNumCopies():
        """int QPrinter.setNumCopies()"""
        return int()
    def fullPage():
        """bool QPrinter.fullPage()"""
        return bool()
    def setFullPage():
        """bool QPrinter.setFullPage()"""
        return bool()
    def collateCopies():
        """bool QPrinter.collateCopies()"""
        return bool()
    def setCollateCopies(_collate):
        """None QPrinter.setCollateCopies(bool _collate)"""
        return None
    def colorMode():
        """QPrinter.ColorMode QPrinter.colorMode()"""
        return QPrinter.ColorMode()
    def setColorMode():
        """QPrinter.ColorMode QPrinter.setColorMode()"""
        return QPrinter.ColorMode()
    def resolution():
        """int QPrinter.resolution()"""
        return int()
    def setResolution():
        """int QPrinter.setResolution()"""
        return int()
    def pageOrder():
        """QPrinter.PageOrder QPrinter.pageOrder()"""
        return QPrinter.PageOrder()
    def setPageOrder():
        """QPrinter.PageOrder QPrinter.setPageOrder()"""
        return QPrinter.PageOrder()
    def pageSize():
        """QPrinter.PageSize QPrinter.pageSize()"""
        return QPrinter.PageSize()
    def setPageSize():
        """QPrinter.PageSize QPrinter.setPageSize()"""
        return QPrinter.PageSize()
    def orientation():
        """QPrinter.Orientation QPrinter.orientation()"""
        return QPrinter.Orientation()
    def setOrientation():
        """QPrinter.Orientation QPrinter.setOrientation()"""
        return QPrinter.Orientation()
    def creator():
        """QString QPrinter.creator()"""
        return QString()
    def setCreator():
        """QString QPrinter.setCreator()"""
        return QString()
    def docName():
        """QString QPrinter.docName()"""
        return QString()
    def setDocName():
        """QString QPrinter.setDocName()"""
        return QString()
    def printProgram():
        """QString QPrinter.printProgram()"""
        return QString()
    def setPrintProgram():
        """QString QPrinter.setPrintProgram()"""
        return QString()
    def outputFileName():
        """QString QPrinter.outputFileName()"""
        return QString()
    def setOutputFileName():
        """QString QPrinter.setOutputFileName()"""
        return QString()
    def printerName():
        """QString QPrinter.printerName()"""
        return QString()
    def setPrinterName():
        """QString QPrinter.setPrinterName()"""
        return QString()
    def devType():
        """int QPrinter.devType()"""
        return int()


class QPrintDialog(QAbstractPrintDialog):
    """"""
    def __init__(_printer, _parent):
        """None QPrintDialog.__init__(QPrinter _printer, QWidget _parent)"""
        return None
    def __init__(_parent):
        """None QPrintDialog.__init__(QWidget _parent)"""
        return None
    def accepted():
        """None QPrintDialog.accepted()"""
        return None
    def open():
        """None QPrintDialog.open()"""
        return None
    def open(_receiver, _member):
        """None QPrintDialog.open(QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(_receiver):
        """None QPrintDialog.open(callable _receiver)"""
        return None
    def setVisible(_visible):
        """None QPrintDialog.setVisible(bool _visible)"""
        return None
    def options():
        """QAbstractPrintDialog.PrintDialogOptions QPrintDialog.options()"""
        return QAbstractPrintDialog.PrintDialogOptions()
    def setOptions(_options):
        """None QPrintDialog.setOptions(QAbstractPrintDialog.PrintDialogOptions _options)"""
        return None
    def testOption(_option):
        """bool QPrintDialog.testOption(QAbstractPrintDialog.PrintDialogOption _option)"""
        return bool()
    def setOption(_option, _on):
        """None QPrintDialog.setOption(QAbstractPrintDialog.PrintDialogOption _option, bool _on)"""
        return None
    def done(_result):
        """None QPrintDialog.done(int _result)"""
        return None
    def accept():
        """None QPrintDialog.accept()"""
        return None
    def exec_():
        """int QPrintDialog.exec_()"""
        return int()


class QPrintEngine():
    """"""
    PPK_CollateCopies = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_ColorMode = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_Creator = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_DocumentName = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_FullPage = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_NumberOfCopies = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_Orientation = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_OutputFileName = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PageOrder = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PageRect = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PageSize = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PaperRect = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PaperSource = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PrinterName = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PrinterProgram = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_Resolution = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_SelectionOption = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_SupportedResolutions = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_WindowsPageSize = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_FontEmbedding = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_SuppressSystemPrintStatus = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_Duplex = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PaperSources = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_CustomPaperSize = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PageMargins = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PaperSize = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_CopyCount = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_SupportsMultipleCopies = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_CustomBase = int() # QPrintEngine.PrintEnginePropertyKey enum

    def __init__():
        """None QPrintEngine.__init__()"""
        return None
    def __init__():
        """QPrintEngine QPrintEngine.__init__()"""
        return QPrintEngine()
    def printerState():
        """abstract QPrinter.PrinterState QPrintEngine.printerState()"""
        return QPrinter.PrinterState()
    def metric():
        """abstract QPaintDevice.PaintDeviceMetric QPrintEngine.metric()"""
        return QPaintDevice.PaintDeviceMetric()
    def abort():
        """abstract bool QPrintEngine.abort()"""
        return bool()
    def newPage():
        """abstract bool QPrintEngine.newPage()"""
        return bool()
    def property(_key):
        """abstract QVariant QPrintEngine.property(QPrintEngine.PrintEnginePropertyKey _key)"""
        return QVariant()
    def setProperty(_key, _value):
        """abstract None QPrintEngine.setProperty(QPrintEngine.PrintEnginePropertyKey _key, QVariant _value)"""
        return None


class QPrinterInfo():
    """"""
    def __init__():
        """None QPrinterInfo.__init__()"""
        return None
    def __init__(_src):
        """None QPrinterInfo.__init__(QPrinterInfo _src)"""
        return None
    def __init__(_printer):
        """None QPrinterInfo.__init__(QPrinter _printer)"""
        return None
    def defaultPrinter():
        """QPrinterInfo QPrinterInfo.defaultPrinter()"""
        return QPrinterInfo()
    def availablePrinters():
        """list-of-QPrinterInfo QPrinterInfo.availablePrinters()"""
        return [QPrinterInfo()]
    def supportedPaperSizes():
        """list-of-QPrinter.PageSize QPrinterInfo.supportedPaperSizes()"""
        return [QPrinter.PageSize()]
    def isDefault():
        """bool QPrinterInfo.isDefault()"""
        return bool()
    def isNull():
        """bool QPrinterInfo.isNull()"""
        return bool()
    def printerName():
        """QString QPrinterInfo.printerName()"""
        return QString()


class QPrintPreviewDialog(QDialog):
    """"""
    def __init__(_parent, _flags):
        """None QPrintPreviewDialog.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(_printer, _parent, _flags):
        """None QPrintPreviewDialog.__init__(QPrinter _printer, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def done(_result):
        """None QPrintPreviewDialog.done(int _result)"""
        return None
    def printer():
        """QPrinter QPrintPreviewDialog.printer()"""
        return QPrinter()
    def open():
        """None QPrintPreviewDialog.open()"""
        return None
    def open(_receiver, _member):
        """None QPrintPreviewDialog.open(QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(_receiver):
        """None QPrintPreviewDialog.open(callable _receiver)"""
        return None
    def setVisible(_visible):
        """None QPrintPreviewDialog.setVisible(bool _visible)"""
        return None


class QPrintPreviewWidget(QWidget):
    """"""
    CustomZoom = int() # QPrintPreviewWidget.ZoomMode enum
    FitToWidth = int() # QPrintPreviewWidget.ZoomMode enum
    FitInView = int() # QPrintPreviewWidget.ZoomMode enum

    SinglePageView = int() # QPrintPreviewWidget.ViewMode enum
    FacingPagesView = int() # QPrintPreviewWidget.ViewMode enum
    AllPagesView = int() # QPrintPreviewWidget.ViewMode enum

    def __init__(_printer, _parent, _flags):
        """None QPrintPreviewWidget.__init__(QPrinter _printer, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(_parent, _flags):
        """None QPrintPreviewWidget.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def pageCount():
        """int QPrintPreviewWidget.pageCount()"""
        return int()
    def updatePreview():
        """None QPrintPreviewWidget.updatePreview()"""
        return None
    def setAllPagesViewMode():
        """None QPrintPreviewWidget.setAllPagesViewMode()"""
        return None
    def setFacingPagesViewMode():
        """None QPrintPreviewWidget.setFacingPagesViewMode()"""
        return None
    def setSinglePageViewMode():
        """None QPrintPreviewWidget.setSinglePageViewMode()"""
        return None
    def setPortraitOrientation():
        """None QPrintPreviewWidget.setPortraitOrientation()"""
        return None
    def setLandscapeOrientation():
        """None QPrintPreviewWidget.setLandscapeOrientation()"""
        return None
    def fitInView():
        """None QPrintPreviewWidget.fitInView()"""
        return None
    def fitToWidth():
        """None QPrintPreviewWidget.fitToWidth()"""
        return None
    def setCurrentPage(_pageNumber):
        """None QPrintPreviewWidget.setCurrentPage(int _pageNumber)"""
        return None
    def setZoomMode(_zoomMode):
        """None QPrintPreviewWidget.setZoomMode(QPrintPreviewWidget.ZoomMode _zoomMode)"""
        return None
    def setViewMode(_viewMode):
        """None QPrintPreviewWidget.setViewMode(QPrintPreviewWidget.ViewMode _viewMode)"""
        return None
    def setOrientation(_orientation):
        """None QPrintPreviewWidget.setOrientation(QPrinter.Orientation _orientation)"""
        return None
    def setZoomFactor(_zoomFactor):
        """None QPrintPreviewWidget.setZoomFactor(float _zoomFactor)"""
        return None
    def zoomOut(_factor):
        """None QPrintPreviewWidget.zoomOut(float _factor)"""
        return None
    def zoomIn(_factor):
        """None QPrintPreviewWidget.zoomIn(float _factor)"""
        return None
    def print_():
        """None QPrintPreviewWidget.print_()"""
        return None
    def setVisible(_visible):
        """None QPrintPreviewWidget.setVisible(bool _visible)"""
        return None
    def numPages():
        """int QPrintPreviewWidget.numPages()"""
        return int()
    def currentPage():
        """int QPrintPreviewWidget.currentPage()"""
        return int()
    def zoomMode():
        """QPrintPreviewWidget.ZoomMode QPrintPreviewWidget.zoomMode()"""
        return QPrintPreviewWidget.ZoomMode()
    def viewMode():
        """QPrintPreviewWidget.ViewMode QPrintPreviewWidget.viewMode()"""
        return QPrintPreviewWidget.ViewMode()
    def orientation():
        """QPrinter.Orientation QPrintPreviewWidget.orientation()"""
        return QPrinter.Orientation()
    def zoomFactor():
        """float QPrintPreviewWidget.zoomFactor()"""
        return float()


class QProgressBar(QWidget):
    """"""
    TopToBottom = int() # QProgressBar.Direction enum
    BottomToTop = int() # QProgressBar.Direction enum

    def __init__(_parent):
        """None QProgressBar.__init__(QWidget _parent)"""
        return None
    def paintEvent():
        """QPaintEvent QProgressBar.paintEvent()"""
        return QPaintEvent()
    def event(_e):
        """bool QProgressBar.event(QEvent _e)"""
        return bool()
    def initStyleOption(_option):
        """None QProgressBar.initStyleOption(QStyleOptionProgressBar _option)"""
        return None
    def setOrientation():
        """Qt.Orientation QProgressBar.setOrientation()"""
        return Qt.Orientation()
    def setValue(_value):
        """None QProgressBar.setValue(int _value)"""
        return None
    def setMaximum(_maximum):
        """None QProgressBar.setMaximum(int _maximum)"""
        return None
    def setMinimum(_minimum):
        """None QProgressBar.setMinimum(int _minimum)"""
        return None
    def reset():
        """None QProgressBar.reset()"""
        return None
    def format():
        """QString QProgressBar.format()"""
        return QString()
    def setFormat(_format):
        """None QProgressBar.setFormat(QString _format)"""
        return None
    def textDirection():
        """QProgressBar.Direction QProgressBar.textDirection()"""
        return QProgressBar.Direction()
    def setTextDirection(_textDirection):
        """None QProgressBar.setTextDirection(QProgressBar.Direction _textDirection)"""
        return None
    def invertedAppearance():
        """bool QProgressBar.invertedAppearance()"""
        return bool()
    def setInvertedAppearance(_invert):
        """None QProgressBar.setInvertedAppearance(bool _invert)"""
        return None
    def orientation():
        """Qt.Orientation QProgressBar.orientation()"""
        return Qt.Orientation()
    def minimumSizeHint():
        """QSize QProgressBar.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QProgressBar.sizeHint()"""
        return QSize()
    def setAlignment(_alignment):
        """None QProgressBar.setAlignment(Qt.Alignment _alignment)"""
        return None
    def alignment():
        """Qt.Alignment QProgressBar.alignment()"""
        return Qt.Alignment()
    def isTextVisible():
        """bool QProgressBar.isTextVisible()"""
        return bool()
    def setTextVisible(_visible):
        """None QProgressBar.setTextVisible(bool _visible)"""
        return None
    def text():
        """QString QProgressBar.text()"""
        return QString()
    def value():
        """int QProgressBar.value()"""
        return int()
    def setRange(_minimum, _maximum):
        """None QProgressBar.setRange(int _minimum, int _maximum)"""
        return None
    def maximum():
        """int QProgressBar.maximum()"""
        return int()
    def minimum():
        """int QProgressBar.minimum()"""
        return int()


class QProgressDialog(QDialog):
    """"""
    def __init__(_parent, _flags):
        """None QProgressDialog.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(_labelText, _cancelButtonText, _minimum, _maximum, _parent, _flags):
        """None QProgressDialog.__init__(QString _labelText, QString _cancelButtonText, int _minimum, int _maximum, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def open():
        """None QProgressDialog.open()"""
        return None
    def open(_receiver, _member):
        """None QProgressDialog.open(QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(_receiver):
        """None QProgressDialog.open(callable _receiver)"""
        return None
    def forceShow():
        """None QProgressDialog.forceShow()"""
        return None
    def showEvent(_e):
        """None QProgressDialog.showEvent(QShowEvent _e)"""
        return None
    def changeEvent():
        """QEvent QProgressDialog.changeEvent()"""
        return QEvent()
    def closeEvent():
        """QCloseEvent QProgressDialog.closeEvent()"""
        return QCloseEvent()
    def resizeEvent():
        """QResizeEvent QProgressDialog.resizeEvent()"""
        return QResizeEvent()
    def setMinimumDuration(_ms):
        """None QProgressDialog.setMinimumDuration(int _ms)"""
        return None
    def setCancelButtonText():
        """QString QProgressDialog.setCancelButtonText()"""
        return QString()
    def setLabelText():
        """QString QProgressDialog.setLabelText()"""
        return QString()
    def setValue(_progress):
        """None QProgressDialog.setValue(int _progress)"""
        return None
    def setMinimum(_minimum):
        """None QProgressDialog.setMinimum(int _minimum)"""
        return None
    def setMaximum(_maximum):
        """None QProgressDialog.setMaximum(int _maximum)"""
        return None
    def reset():
        """None QProgressDialog.reset()"""
        return None
    def cancel():
        """None QProgressDialog.cancel()"""
        return None
    def autoClose():
        """bool QProgressDialog.autoClose()"""
        return bool()
    def setAutoClose(_b):
        """None QProgressDialog.setAutoClose(bool _b)"""
        return None
    def autoReset():
        """bool QProgressDialog.autoReset()"""
        return bool()
    def setAutoReset(_b):
        """None QProgressDialog.setAutoReset(bool _b)"""
        return None
    def minimumDuration():
        """int QProgressDialog.minimumDuration()"""
        return int()
    def labelText():
        """QString QProgressDialog.labelText()"""
        return QString()
    def sizeHint():
        """QSize QProgressDialog.sizeHint()"""
        return QSize()
    def value():
        """int QProgressDialog.value()"""
        return int()
    def setRange(_minimum, _maximum):
        """None QProgressDialog.setRange(int _minimum, int _maximum)"""
        return None
    def maximum():
        """int QProgressDialog.maximum()"""
        return int()
    def minimum():
        """int QProgressDialog.minimum()"""
        return int()
    def wasCanceled():
        """bool QProgressDialog.wasCanceled()"""
        return bool()
    def setBar(_bar):
        """None QProgressDialog.setBar(QProgressBar _bar)"""
        return None
    def setCancelButton(_button):
        """None QProgressDialog.setCancelButton(QPushButton _button)"""
        return None
    def setLabel(_label):
        """None QProgressDialog.setLabel(QLabel _label)"""
        return None


class QProxyModel(QAbstractItemModel):
    """"""
    def __init__(_parent):
        """None QProxyModel.__init__(QObject _parent)"""
        return None
    def revert():
        """None QProxyModel.revert()"""
        return None
    def submit():
        """bool QProxyModel.submit()"""
        return bool()
    def span(_index):
        """QSize QProxyModel.span(QModelIndex _index)"""
        return QSize()
    def match(_start, _role, _value, _hits, _flags):
        """list-of-QModelIndex QProxyModel.match(QModelIndex _start, int _role, QVariant _value, int _hits, Qt.MatchFlags _flags)"""
        return [QModelIndex()]
    def sort(_column, _order):
        """None QProxyModel.sort(int _column, Qt.SortOrder _order)"""
        return None
    def flags(_index):
        """Qt.ItemFlags QProxyModel.flags(QModelIndex _index)"""
        return Qt.ItemFlags()
    def fetchMore(_parent):
        """None QProxyModel.fetchMore(QModelIndex _parent)"""
        return None
    def insertColumns(_column, _count, _parent):
        """bool QProxyModel.insertColumns(int _column, int _count, QModelIndex _parent)"""
        return bool()
    def insertRows(_row, _count, _parent):
        """bool QProxyModel.insertRows(int _row, int _count, QModelIndex _parent)"""
        return bool()
    def supportedDropActions():
        """Qt.DropActions QProxyModel.supportedDropActions()"""
        return Qt.DropActions()
    def dropMimeData(_data, _action, _row, _column, _parent):
        """bool QProxyModel.dropMimeData(QMimeData _data, Qt.DropAction _action, int _row, int _column, QModelIndex _parent)"""
        return bool()
    def mimeData(_indexes):
        """QMimeData QProxyModel.mimeData(list-of-QModelIndex _indexes)"""
        return QMimeData()
    def mimeTypes():
        """QStringList QProxyModel.mimeTypes()"""
        return QStringList()
    def setHeaderData(_section, _orientation, _value, _role):
        """bool QProxyModel.setHeaderData(int _section, Qt.Orientation _orientation, QVariant _value, int _role)"""
        return bool()
    def headerData(_section, _orientation, _role):
        """QVariant QProxyModel.headerData(int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(_index, _value, _role):
        """bool QProxyModel.setData(QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def data(_index, _role):
        """QVariant QProxyModel.data(QModelIndex _index, int _role)"""
        return QVariant()
    def hasChildren(_parent):
        """bool QProxyModel.hasChildren(QModelIndex _parent)"""
        return bool()
    def columnCount(_parent):
        """int QProxyModel.columnCount(QModelIndex _parent)"""
        return int()
    def rowCount(_parent):
        """int QProxyModel.rowCount(QModelIndex _parent)"""
        return int()
    def parent(_child):
        """QModelIndex QProxyModel.parent(QModelIndex _child)"""
        return QModelIndex()
    def parent():
        """QObject QProxyModel.parent()"""
        return QObject()
    def index(_row, _column, _parent):
        """QModelIndex QProxyModel.index(int _row, int _column, QModelIndex _parent)"""
        return QModelIndex()
    def model():
        """QAbstractItemModel QProxyModel.model()"""
        return QAbstractItemModel()
    def setModel(_model):
        """None QProxyModel.setModel(QAbstractItemModel _model)"""
        return None


class QQuaternion():
    """"""
    def __init__():
        """None QQuaternion.__init__()"""
        return None
    def __init__(_aScalar, _xpos, _ypos, _zpos):
        """None QQuaternion.__init__(float _aScalar, float _xpos, float _ypos, float _zpos)"""
        return None
    def __init__(_aScalar, _aVector):
        """None QQuaternion.__init__(float _aScalar, QVector3D _aVector)"""
        return None
    def __init__(_aVector):
        """None QQuaternion.__init__(QVector4D _aVector)"""
        return None
    def __init__():
        """QQuaternion QQuaternion.__init__()"""
        return QQuaternion()
    def __eq__(_q2):
        """bool QQuaternion.__eq__(QQuaternion _q2)"""
        return bool()
    def __mul__(_q2):
        """QQuaternion QQuaternion.__mul__(QQuaternion _q2)"""
        return QQuaternion()
    def __mul__(_quaternion):
        """QQuaternion QQuaternion.__mul__(QQuaternion _quaternion)"""
        return QQuaternion()
    def __mul__(_factor):
        """QQuaternion QQuaternion.__mul__(float _factor)"""
        return QQuaternion()
    def __div__(_divisor):
        """QQuaternion QQuaternion.__div__(float _divisor)"""
        return QQuaternion()
    def __add__(_q2):
        """QQuaternion QQuaternion.__add__(QQuaternion _q2)"""
        return QQuaternion()
    def __sub__(_q2):
        """QQuaternion QQuaternion.__sub__(QQuaternion _q2)"""
        return QQuaternion()
    def __neg__():
        """QQuaternion QQuaternion.__neg__()"""
        return QQuaternion()
    def __ne__(_q2):
        """bool QQuaternion.__ne__(QQuaternion _q2)"""
        return bool()
    def toVector4D():
        """QVector4D QQuaternion.toVector4D()"""
        return QVector4D()
    def vector():
        """QVector3D QQuaternion.vector()"""
        return QVector3D()
    def setVector(_aVector):
        """None QQuaternion.setVector(QVector3D _aVector)"""
        return None
    def setVector(_aX, _aY, _aZ):
        """None QQuaternion.setVector(float _aX, float _aY, float _aZ)"""
        return None
    def __idiv__(_divisor):
        """QQuaternion QQuaternion.__idiv__(float _divisor)"""
        return QQuaternion()
    def __imul__(_factor):
        """QQuaternion QQuaternion.__imul__(float _factor)"""
        return QQuaternion()
    def __imul__(_quaternion):
        """QQuaternion QQuaternion.__imul__(QQuaternion _quaternion)"""
        return QQuaternion()
    def __isub__(_quaternion):
        """QQuaternion QQuaternion.__isub__(QQuaternion _quaternion)"""
        return QQuaternion()
    def __iadd__(_quaternion):
        """QQuaternion QQuaternion.__iadd__(QQuaternion _quaternion)"""
        return QQuaternion()
    def conjugate():
        """QQuaternion QQuaternion.conjugate()"""
        return QQuaternion()
    def setScalar(_aScalar):
        """None QQuaternion.setScalar(float _aScalar)"""
        return None
    def setZ(_aZ):
        """None QQuaternion.setZ(float _aZ)"""
        return None
    def setY(_aY):
        """None QQuaternion.setY(float _aY)"""
        return None
    def setX(_aX):
        """None QQuaternion.setX(float _aX)"""
        return None
    def scalar():
        """float QQuaternion.scalar()"""
        return float()
    def z():
        """float QQuaternion.z()"""
        return float()
    def y():
        """float QQuaternion.y()"""
        return float()
    def x():
        """float QQuaternion.x()"""
        return float()
    def isIdentity():
        """bool QQuaternion.isIdentity()"""
        return bool()
    def isNull():
        """bool QQuaternion.isNull()"""
        return bool()
    def nlerp(_q1, _q2, _t):
        """QQuaternion QQuaternion.nlerp(QQuaternion _q1, QQuaternion _q2, float _t)"""
        return QQuaternion()
    def slerp(_q1, _q2, _t):
        """QQuaternion QQuaternion.slerp(QQuaternion _q1, QQuaternion _q2, float _t)"""
        return QQuaternion()
    def fromAxisAndAngle(_axis, _angle):
        """QQuaternion QQuaternion.fromAxisAndAngle(QVector3D _axis, float _angle)"""
        return QQuaternion()
    def fromAxisAndAngle(_x, _y, _z, _angle):
        """QQuaternion QQuaternion.fromAxisAndAngle(float _x, float _y, float _z, float _angle)"""
        return QQuaternion()
    def rotatedVector(_vector):
        """QVector3D QQuaternion.rotatedVector(QVector3D _vector)"""
        return QVector3D()
    def normalize():
        """None QQuaternion.normalize()"""
        return None
    def normalized():
        """QQuaternion QQuaternion.normalized()"""
        return QQuaternion()
    def lengthSquared():
        """float QQuaternion.lengthSquared()"""
        return float()
    def length():
        """float QQuaternion.length()"""
        return float()
    def __repr__():
        """str QQuaternion.__repr__()"""
        return str()


class QRadioButton(QAbstractButton):
    """"""
    def __init__(_parent):
        """None QRadioButton.__init__(QWidget _parent)"""
        return None
    def __init__(_text, _parent):
        """None QRadioButton.__init__(QString _text, QWidget _parent)"""
        return None
    def mouseMoveEvent():
        """QMouseEvent QRadioButton.mouseMoveEvent()"""
        return QMouseEvent()
    def paintEvent():
        """QPaintEvent QRadioButton.paintEvent()"""
        return QPaintEvent()
    def event(_e):
        """bool QRadioButton.event(QEvent _e)"""
        return bool()
    def hitButton():
        """QPoint QRadioButton.hitButton()"""
        return QPoint()
    def initStyleOption(_button):
        """None QRadioButton.initStyleOption(QStyleOptionButton _button)"""
        return None
    def sizeHint():
        """QSize QRadioButton.sizeHint()"""
        return QSize()


class QRegion():
    """"""
    Rectangle = int() # QRegion.RegionType enum
    Ellipse = int() # QRegion.RegionType enum

    def __init__():
        """None QRegion.__init__()"""
        return None
    def __init__(_x, _y, _w, _h, _type):
        """None QRegion.__init__(int _x, int _y, int _w, int _h, QRegion.RegionType _type)"""
        return None
    def __init__(_r, _type):
        """None QRegion.__init__(QRect _r, QRegion.RegionType _type)"""
        return None
    def __init__(_a, _fillRule):
        """None QRegion.__init__(QPolygon _a, Qt.FillRule _fillRule)"""
        return None
    def __init__(_bitmap):
        """None QRegion.__init__(QBitmap _bitmap)"""
        return None
    def __init__(_region):
        """None QRegion.__init__(QRegion _region)"""
        return None
    def __init__(_variant):
        """None QRegion.__init__(QVariant _variant)"""
        return None
    def __mul__(_m):
        """QRegion QRegion.__mul__(QMatrix _m)"""
        return QRegion()
    def __mul__(_m):
        """QRegion QRegion.__mul__(QTransform _m)"""
        return QRegion()
    def rectCount():
        """int QRegion.rectCount()"""
        return int()
    def numRects():
        """int QRegion.numRects()"""
        return int()
    def intersects(_r):
        """bool QRegion.intersects(QRegion _r)"""
        return bool()
    def intersects(_r):
        """bool QRegion.intersects(QRect _r)"""
        return bool()
    def xored(_r):
        """QRegion QRegion.xored(QRegion _r)"""
        return QRegion()
    def subtracted(_r):
        """QRegion QRegion.subtracted(QRegion _r)"""
        return QRegion()
    def intersected(_r):
        """QRegion QRegion.intersected(QRegion _r)"""
        return QRegion()
    def intersected(_r):
        """QRegion QRegion.intersected(QRect _r)"""
        return QRegion()
    def __ne__(_r):
        """bool QRegion.__ne__(QRegion _r)"""
        return bool()
    def __eq__(_r):
        """bool QRegion.__eq__(QRegion _r)"""
        return bool()
    def __ixor__(_r):
        """QRegion QRegion.__ixor__(QRegion _r)"""
        return QRegion()
    def __isub__(_r):
        """QRegion QRegion.__isub__(QRegion _r)"""
        return QRegion()
    def __iand__(_r):
        """QRegion QRegion.__iand__(QRegion _r)"""
        return QRegion()
    def __iand__(_r):
        """QRegion QRegion.__iand__(QRect _r)"""
        return QRegion()
    def __iadd__(_r):
        """QRegion QRegion.__iadd__(QRegion _r)"""
        return QRegion()
    def __iadd__(_r):
        """QRegion QRegion.__iadd__(QRect _r)"""
        return QRegion()
    def __ior__(_r):
        """QRegion QRegion.__ior__(QRegion _r)"""
        return QRegion()
    def __xor__(_r):
        """QRegion QRegion.__xor__(QRegion _r)"""
        return QRegion()
    def __sub__(_r):
        """QRegion QRegion.__sub__(QRegion _r)"""
        return QRegion()
    def __and__(_r):
        """QRegion QRegion.__and__(QRegion _r)"""
        return QRegion()
    def __and__(_r):
        """QRegion QRegion.__and__(QRect _r)"""
        return QRegion()
    def __add__(_r):
        """QRegion QRegion.__add__(QRegion _r)"""
        return QRegion()
    def __add__(_r):
        """QRegion QRegion.__add__(QRect _r)"""
        return QRegion()
    def __or__(_r):
        """QRegion QRegion.__or__(QRegion _r)"""
        return QRegion()
    def rects():
        """list-of-QRect QRegion.rects()"""
        return [QRect()]
    def boundingRect():
        """QRect QRegion.boundingRect()"""
        return QRect()
    def eor(_r):
        """QRegion QRegion.eor(QRegion _r)"""
        return QRegion()
    def subtract(_r):
        """QRegion QRegion.subtract(QRegion _r)"""
        return QRegion()
    def intersect(_r):
        """QRegion QRegion.intersect(QRegion _r)"""
        return QRegion()
    def united(_r):
        """QRegion QRegion.united(QRegion _r)"""
        return QRegion()
    def united(_r):
        """QRegion QRegion.united(QRect _r)"""
        return QRegion()
    def unite(_r):
        """QRegion QRegion.unite(QRegion _r)"""
        return QRegion()
    def translated(_dx, _dy):
        """QRegion QRegion.translated(int _dx, int _dy)"""
        return QRegion()
    def translated(_p):
        """QRegion QRegion.translated(QPoint _p)"""
        return QRegion()
    def translate(_dx, _dy):
        """None QRegion.translate(int _dx, int _dy)"""
        return None
    def translate(_p):
        """None QRegion.translate(QPoint _p)"""
        return None
    def __contains__(_p):
        """int QRegion.__contains__(QPoint _p)"""
        return int()
    def __contains__(_r):
        """int QRegion.__contains__(QRect _r)"""
        return int()
    def contains(_p):
        """bool QRegion.contains(QPoint _p)"""
        return bool()
    def contains(_r):
        """bool QRegion.contains(QRect _r)"""
        return bool()
    def __bool__():
        """int QRegion.__bool__()"""
        return int()
    def isEmpty():
        """bool QRegion.isEmpty()"""
        return bool()


class QRubberBand(QWidget):
    """"""
    Line = int() # QRubberBand.Shape enum
    Rectangle = int() # QRubberBand.Shape enum

    def __init__(_parent):
        """QRubberBand.Shape QRubberBand.__init__(QWidget _parent)"""
        return QRubberBand.Shape()
    def moveEvent():
        """QMoveEvent QRubberBand.moveEvent()"""
        return QMoveEvent()
    def resizeEvent():
        """QResizeEvent QRubberBand.resizeEvent()"""
        return QResizeEvent()
    def showEvent():
        """QShowEvent QRubberBand.showEvent()"""
        return QShowEvent()
    def changeEvent():
        """QEvent QRubberBand.changeEvent()"""
        return QEvent()
    def paintEvent():
        """QPaintEvent QRubberBand.paintEvent()"""
        return QPaintEvent()
    def event(_e):
        """bool QRubberBand.event(QEvent _e)"""
        return bool()
    def initStyleOption(_option):
        """None QRubberBand.initStyleOption(QStyleOptionRubberBand _option)"""
        return None
    def resize(_w, _h):
        """None QRubberBand.resize(int _w, int _h)"""
        return None
    def resize(_s):
        """None QRubberBand.resize(QSize _s)"""
        return None
    def move(_p):
        """None QRubberBand.move(QPoint _p)"""
        return None
    def move(_ax, _ay):
        """None QRubberBand.move(int _ax, int _ay)"""
        return None
    def setGeometry(_r):
        """None QRubberBand.setGeometry(QRect _r)"""
        return None
    def setGeometry(_ax, _ay, _aw, _ah):
        """None QRubberBand.setGeometry(int _ax, int _ay, int _aw, int _ah)"""
        return None
    def shape():
        """QRubberBand.Shape QRubberBand.shape()"""
        return QRubberBand.Shape()


class QScrollArea(QAbstractScrollArea):
    """"""
    def __init__(_parent):
        """None QScrollArea.__init__(QWidget _parent)"""
        return None
    def scrollContentsBy(_dx, _dy):
        """None QScrollArea.scrollContentsBy(int _dx, int _dy)"""
        return None
    def resizeEvent():
        """QResizeEvent QScrollArea.resizeEvent()"""
        return QResizeEvent()
    def eventFilter():
        """QEvent QScrollArea.eventFilter()"""
        return QEvent()
    def event():
        """QEvent QScrollArea.event()"""
        return QEvent()
    def ensureWidgetVisible(_childWidget, _xMargin, _yMargin):
        """None QScrollArea.ensureWidgetVisible(QWidget _childWidget, int _xMargin, int _yMargin)"""
        return None
    def ensureVisible(_x, _y, _xMargin, _yMargin):
        """None QScrollArea.ensureVisible(int _x, int _y, int _xMargin, int _yMargin)"""
        return None
    def focusNextPrevChild(_next):
        """bool QScrollArea.focusNextPrevChild(bool _next)"""
        return bool()
    def sizeHint():
        """QSize QScrollArea.sizeHint()"""
        return QSize()
    def setAlignment():
        """Qt.Alignment QScrollArea.setAlignment()"""
        return Qt.Alignment()
    def alignment():
        """Qt.Alignment QScrollArea.alignment()"""
        return Qt.Alignment()
    def setWidgetResizable(_resizable):
        """None QScrollArea.setWidgetResizable(bool _resizable)"""
        return None
    def widgetResizable():
        """bool QScrollArea.widgetResizable()"""
        return bool()
    def takeWidget():
        """QWidget QScrollArea.takeWidget()"""
        return QWidget()
    def setWidget(_w):
        """None QScrollArea.setWidget(QWidget _w)"""
        return None
    def widget():
        """QWidget QScrollArea.widget()"""
        return QWidget()


class QScrollBar(QAbstractSlider):
    """"""
    def __init__(_parent):
        """None QScrollBar.__init__(QWidget _parent)"""
        return None
    def __init__(_orientation, _parent):
        """None QScrollBar.__init__(Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def sliderChange(_change):
        """None QScrollBar.sliderChange(QAbstractSlider.SliderChange _change)"""
        return None
    def contextMenuEvent():
        """QContextMenuEvent QScrollBar.contextMenuEvent()"""
        return QContextMenuEvent()
    def hideEvent():
        """QHideEvent QScrollBar.hideEvent()"""
        return QHideEvent()
    def mouseMoveEvent():
        """QMouseEvent QScrollBar.mouseMoveEvent()"""
        return QMouseEvent()
    def mouseReleaseEvent():
        """QMouseEvent QScrollBar.mouseReleaseEvent()"""
        return QMouseEvent()
    def mousePressEvent():
        """QMouseEvent QScrollBar.mousePressEvent()"""
        return QMouseEvent()
    def paintEvent():
        """QPaintEvent QScrollBar.paintEvent()"""
        return QPaintEvent()
    def initStyleOption(_option):
        """None QScrollBar.initStyleOption(QStyleOptionSlider _option)"""
        return None
    def event(_event):
        """bool QScrollBar.event(QEvent _event)"""
        return bool()
    def sizeHint():
        """QSize QScrollBar.sizeHint()"""
        return QSize()


class QSessionManager(QObject):
    """"""
    RestartIfRunning = int() # QSessionManager.RestartHint enum
    RestartAnyway = int() # QSessionManager.RestartHint enum
    RestartImmediately = int() # QSessionManager.RestartHint enum
    RestartNever = int() # QSessionManager.RestartHint enum

    def requestPhase2():
        """None QSessionManager.requestPhase2()"""
        return None
    def isPhase2():
        """bool QSessionManager.isPhase2()"""
        return bool()
    def setManagerProperty(_name, _value):
        """None QSessionManager.setManagerProperty(QString _name, QString _value)"""
        return None
    def setManagerProperty(_name, _value):
        """None QSessionManager.setManagerProperty(QString _name, QStringList _value)"""
        return None
    def discardCommand():
        """QStringList QSessionManager.discardCommand()"""
        return QStringList()
    def setDiscardCommand():
        """QStringList QSessionManager.setDiscardCommand()"""
        return QStringList()
    def restartCommand():
        """QStringList QSessionManager.restartCommand()"""
        return QStringList()
    def setRestartCommand():
        """QStringList QSessionManager.setRestartCommand()"""
        return QStringList()
    def restartHint():
        """QSessionManager.RestartHint QSessionManager.restartHint()"""
        return QSessionManager.RestartHint()
    def setRestartHint():
        """QSessionManager.RestartHint QSessionManager.setRestartHint()"""
        return QSessionManager.RestartHint()
    def cancel():
        """None QSessionManager.cancel()"""
        return None
    def release():
        """None QSessionManager.release()"""
        return None
    def allowsErrorInteraction():
        """bool QSessionManager.allowsErrorInteraction()"""
        return bool()
    def allowsInteraction():
        """bool QSessionManager.allowsInteraction()"""
        return bool()
    def sessionKey():
        """QString QSessionManager.sessionKey()"""
        return QString()
    def sessionId():
        """QString QSessionManager.sessionId()"""
        return QString()


class QShortcut(QObject):
    """"""
    def __init__(_parent):
        """None QShortcut.__init__(QWidget _parent)"""
        return None
    def __init__(_key, _parent, _member, _ambiguousMember, _context):
        """None QShortcut.__init__(QKeySequence _key, QWidget _parent, SLOT() _member, SLOT() _ambiguousMember, Qt.ShortcutContext _context)"""
        return None
    def event(_e):
        """bool QShortcut.event(QEvent _e)"""
        return bool()
    def autoRepeat():
        """bool QShortcut.autoRepeat()"""
        return bool()
    def setAutoRepeat(_on):
        """None QShortcut.setAutoRepeat(bool _on)"""
        return None
    def parentWidget():
        """QWidget QShortcut.parentWidget()"""
        return QWidget()
    def id():
        """int QShortcut.id()"""
        return int()
    def whatsThis():
        """QString QShortcut.whatsThis()"""
        return QString()
    def setWhatsThis(_text):
        """None QShortcut.setWhatsThis(QString _text)"""
        return None
    def context():
        """Qt.ShortcutContext QShortcut.context()"""
        return Qt.ShortcutContext()
    def setContext(_context):
        """None QShortcut.setContext(Qt.ShortcutContext _context)"""
        return None
    def isEnabled():
        """bool QShortcut.isEnabled()"""
        return bool()
    def setEnabled(_enable):
        """None QShortcut.setEnabled(bool _enable)"""
        return None
    def key():
        """QKeySequence QShortcut.key()"""
        return QKeySequence()
    def setKey(_key):
        """None QShortcut.setKey(QKeySequence _key)"""
        return None


class QSizeGrip(QWidget):
    """"""
    def __init__(_parent):
        """None QSizeGrip.__init__(QWidget _parent)"""
        return None
    def hideEvent(_hideEvent):
        """None QSizeGrip.hideEvent(QHideEvent _hideEvent)"""
        return None
    def showEvent(_showEvent):
        """None QSizeGrip.showEvent(QShowEvent _showEvent)"""
        return None
    def moveEvent(_moveEvent):
        """None QSizeGrip.moveEvent(QMoveEvent _moveEvent)"""
        return None
    def event():
        """QEvent QSizeGrip.event()"""
        return QEvent()
    def eventFilter():
        """QEvent QSizeGrip.eventFilter()"""
        return QEvent()
    def mouseMoveEvent():
        """QMouseEvent QSizeGrip.mouseMoveEvent()"""
        return QMouseEvent()
    def mouseReleaseEvent(_mouseEvent):
        """None QSizeGrip.mouseReleaseEvent(QMouseEvent _mouseEvent)"""
        return None
    def mousePressEvent():
        """QMouseEvent QSizeGrip.mousePressEvent()"""
        return QMouseEvent()
    def paintEvent():
        """QPaintEvent QSizeGrip.paintEvent()"""
        return QPaintEvent()
    def setVisible():
        """bool QSizeGrip.setVisible()"""
        return bool()
    def sizeHint():
        """QSize QSizeGrip.sizeHint()"""
        return QSize()


class QSizePolicy():
    """"""
    DefaultType = int() # QSizePolicy.ControlType enum
    ButtonBox = int() # QSizePolicy.ControlType enum
    CheckBox = int() # QSizePolicy.ControlType enum
    ComboBox = int() # QSizePolicy.ControlType enum
    Frame = int() # QSizePolicy.ControlType enum
    GroupBox = int() # QSizePolicy.ControlType enum
    Label = int() # QSizePolicy.ControlType enum
    Line = int() # QSizePolicy.ControlType enum
    LineEdit = int() # QSizePolicy.ControlType enum
    PushButton = int() # QSizePolicy.ControlType enum
    RadioButton = int() # QSizePolicy.ControlType enum
    Slider = int() # QSizePolicy.ControlType enum
    SpinBox = int() # QSizePolicy.ControlType enum
    TabWidget = int() # QSizePolicy.ControlType enum
    ToolButton = int() # QSizePolicy.ControlType enum

    Fixed = int() # QSizePolicy.Policy enum
    Minimum = int() # QSizePolicy.Policy enum
    Maximum = int() # QSizePolicy.Policy enum
    Preferred = int() # QSizePolicy.Policy enum
    MinimumExpanding = int() # QSizePolicy.Policy enum
    Expanding = int() # QSizePolicy.Policy enum
    Ignored = int() # QSizePolicy.Policy enum

    GrowFlag = int() # QSizePolicy.PolicyFlag enum
    ExpandFlag = int() # QSizePolicy.PolicyFlag enum
    ShrinkFlag = int() # QSizePolicy.PolicyFlag enum
    IgnoreFlag = int() # QSizePolicy.PolicyFlag enum

    def __init__():
        """None QSizePolicy.__init__()"""
        return None
    def __init__(_horizontal, _vertical):
        """None QSizePolicy.__init__(QSizePolicy.Policy _horizontal, QSizePolicy.Policy _vertical)"""
        return None
    def __init__(_variant):
        """None QSizePolicy.__init__(QVariant _variant)"""
        return None
    def __init__(_horizontal, _vertical, _type):
        """None QSizePolicy.__init__(QSizePolicy.Policy _horizontal, QSizePolicy.Policy _vertical, QSizePolicy.ControlType _type)"""
        return None
    def __init__():
        """QSizePolicy QSizePolicy.__init__()"""
        return QSizePolicy()
    def setControlType(_type):
        """None QSizePolicy.setControlType(QSizePolicy.ControlType _type)"""
        return None
    def controlType():
        """QSizePolicy.ControlType QSizePolicy.controlType()"""
        return QSizePolicy.ControlType()
    def transpose():
        """None QSizePolicy.transpose()"""
        return None
    def setVerticalStretch(_stretchFactor):
        """None QSizePolicy.setVerticalStretch(int _stretchFactor)"""
        return None
    def setHorizontalStretch(_stretchFactor):
        """None QSizePolicy.setHorizontalStretch(int _stretchFactor)"""
        return None
    def verticalStretch():
        """int QSizePolicy.verticalStretch()"""
        return int()
    def horizontalStretch():
        """int QSizePolicy.horizontalStretch()"""
        return int()
    def __ne__(_s):
        """bool QSizePolicy.__ne__(QSizePolicy _s)"""
        return bool()
    def __eq__(_s):
        """bool QSizePolicy.__eq__(QSizePolicy _s)"""
        return bool()
    def hasHeightForWidth():
        """bool QSizePolicy.hasHeightForWidth()"""
        return bool()
    def setHeightForWidth(_b):
        """None QSizePolicy.setHeightForWidth(bool _b)"""
        return None
    def expandingDirections():
        """Qt.Orientations QSizePolicy.expandingDirections()"""
        return Qt.Orientations()
    def setVerticalPolicy(_d):
        """None QSizePolicy.setVerticalPolicy(QSizePolicy.Policy _d)"""
        return None
    def setHorizontalPolicy(_d):
        """None QSizePolicy.setHorizontalPolicy(QSizePolicy.Policy _d)"""
        return None
    def verticalPolicy():
        """QSizePolicy.Policy QSizePolicy.verticalPolicy()"""
        return QSizePolicy.Policy()
    def horizontalPolicy():
        """QSizePolicy.Policy QSizePolicy.horizontalPolicy()"""
        return QSizePolicy.Policy()


class QSlider(QAbstractSlider):
    """"""
    NoTicks = int() # QSlider.TickPosition enum
    TicksAbove = int() # QSlider.TickPosition enum
    TicksLeft = int() # QSlider.TickPosition enum
    TicksBelow = int() # QSlider.TickPosition enum
    TicksRight = int() # QSlider.TickPosition enum
    TicksBothSides = int() # QSlider.TickPosition enum

    def __init__(_parent):
        """None QSlider.__init__(QWidget _parent)"""
        return None
    def __init__(_orientation, _parent):
        """None QSlider.__init__(Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def mouseMoveEvent(_ev):
        """None QSlider.mouseMoveEvent(QMouseEvent _ev)"""
        return None
    def mouseReleaseEvent(_ev):
        """None QSlider.mouseReleaseEvent(QMouseEvent _ev)"""
        return None
    def mousePressEvent(_ev):
        """None QSlider.mousePressEvent(QMouseEvent _ev)"""
        return None
    def paintEvent(_ev):
        """None QSlider.paintEvent(QPaintEvent _ev)"""
        return None
    def initStyleOption(_option):
        """None QSlider.initStyleOption(QStyleOptionSlider _option)"""
        return None
    def event(_event):
        """bool QSlider.event(QEvent _event)"""
        return bool()
    def tickInterval():
        """int QSlider.tickInterval()"""
        return int()
    def setTickInterval(_ti):
        """None QSlider.setTickInterval(int _ti)"""
        return None
    def tickPosition():
        """QSlider.TickPosition QSlider.tickPosition()"""
        return QSlider.TickPosition()
    def setTickPosition(_position):
        """None QSlider.setTickPosition(QSlider.TickPosition _position)"""
        return None
    def minimumSizeHint():
        """QSize QSlider.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QSlider.sizeHint()"""
        return QSize()


class QSortFilterProxyModel(QAbstractProxyModel):
    """"""
    def __init__(_parent):
        """None QSortFilterProxyModel.__init__(QObject _parent)"""
        return None
    def invalidateFilter():
        """None QSortFilterProxyModel.invalidateFilter()"""
        return None
    def invalidate():
        """None QSortFilterProxyModel.invalidate()"""
        return None
    def data(_index, _role):
        """QVariant QSortFilterProxyModel.data(QModelIndex _index, int _role)"""
        return QVariant()
    def setSortLocaleAware(_on):
        """None QSortFilterProxyModel.setSortLocaleAware(bool _on)"""
        return None
    def isSortLocaleAware():
        """bool QSortFilterProxyModel.isSortLocaleAware()"""
        return bool()
    def supportedDropActions():
        """Qt.DropActions QSortFilterProxyModel.supportedDropActions()"""
        return Qt.DropActions()
    def mimeTypes():
        """QStringList QSortFilterProxyModel.mimeTypes()"""
        return QStringList()
    def setFilterRole(_role):
        """None QSortFilterProxyModel.setFilterRole(int _role)"""
        return None
    def filterRole():
        """int QSortFilterProxyModel.filterRole()"""
        return int()
    def sortOrder():
        """Qt.SortOrder QSortFilterProxyModel.sortOrder()"""
        return Qt.SortOrder()
    def sortColumn():
        """int QSortFilterProxyModel.sortColumn()"""
        return int()
    def setSortRole(_role):
        """None QSortFilterProxyModel.setSortRole(int _role)"""
        return None
    def sortRole():
        """int QSortFilterProxyModel.sortRole()"""
        return int()
    def setDynamicSortFilter(_enable):
        """None QSortFilterProxyModel.setDynamicSortFilter(bool _enable)"""
        return None
    def dynamicSortFilter():
        """bool QSortFilterProxyModel.dynamicSortFilter()"""
        return bool()
    def setSortCaseSensitivity(_cs):
        """None QSortFilterProxyModel.setSortCaseSensitivity(Qt.CaseSensitivity _cs)"""
        return None
    def sortCaseSensitivity():
        """Qt.CaseSensitivity QSortFilterProxyModel.sortCaseSensitivity()"""
        return Qt.CaseSensitivity()
    def sort(_column, _order):
        """None QSortFilterProxyModel.sort(int _column, Qt.SortOrder _order)"""
        return None
    def match(_start, _role, _value, _hits, _flags):
        """list-of-QModelIndex QSortFilterProxyModel.match(QModelIndex _start, int _role, QVariant _value, int _hits, Qt.MatchFlags _flags)"""
        return [QModelIndex()]
    def span(_index):
        """QSize QSortFilterProxyModel.span(QModelIndex _index)"""
        return QSize()
    def buddy(_index):
        """QModelIndex QSortFilterProxyModel.buddy(QModelIndex _index)"""
        return QModelIndex()
    def flags(_index):
        """Qt.ItemFlags QSortFilterProxyModel.flags(QModelIndex _index)"""
        return Qt.ItemFlags()
    def canFetchMore(_parent):
        """bool QSortFilterProxyModel.canFetchMore(QModelIndex _parent)"""
        return bool()
    def fetchMore(_parent):
        """None QSortFilterProxyModel.fetchMore(QModelIndex _parent)"""
        return None
    def removeColumns(_column, _count, _parent):
        """bool QSortFilterProxyModel.removeColumns(int _column, int _count, QModelIndex _parent)"""
        return bool()
    def removeRows(_row, _count, _parent):
        """bool QSortFilterProxyModel.removeRows(int _row, int _count, QModelIndex _parent)"""
        return bool()
    def insertColumns(_column, _count, _parent):
        """bool QSortFilterProxyModel.insertColumns(int _column, int _count, QModelIndex _parent)"""
        return bool()
    def insertRows(_row, _count, _parent):
        """bool QSortFilterProxyModel.insertRows(int _row, int _count, QModelIndex _parent)"""
        return bool()
    def dropMimeData(_data, _action, _row, _column, _parent):
        """bool QSortFilterProxyModel.dropMimeData(QMimeData _data, Qt.DropAction _action, int _row, int _column, QModelIndex _parent)"""
        return bool()
    def mimeData(_indexes):
        """QMimeData QSortFilterProxyModel.mimeData(list-of-QModelIndex _indexes)"""
        return QMimeData()
    def setHeaderData(_section, _orientation, _value, _role):
        """bool QSortFilterProxyModel.setHeaderData(int _section, Qt.Orientation _orientation, QVariant _value, int _role)"""
        return bool()
    def headerData(_section, _orientation, _role):
        """QVariant QSortFilterProxyModel.headerData(int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(_index, _value, _role):
        """bool QSortFilterProxyModel.setData(QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def hasChildren(_parent):
        """bool QSortFilterProxyModel.hasChildren(QModelIndex _parent)"""
        return bool()
    def columnCount(_parent):
        """int QSortFilterProxyModel.columnCount(QModelIndex _parent)"""
        return int()
    def rowCount(_parent):
        """int QSortFilterProxyModel.rowCount(QModelIndex _parent)"""
        return int()
    def parent(_child):
        """QModelIndex QSortFilterProxyModel.parent(QModelIndex _child)"""
        return QModelIndex()
    def parent():
        """QObject QSortFilterProxyModel.parent()"""
        return QObject()
    def index(_row, _column, _parent):
        """QModelIndex QSortFilterProxyModel.index(int _row, int _column, QModelIndex _parent)"""
        return QModelIndex()
    def lessThan(_left, _right):
        """bool QSortFilterProxyModel.lessThan(QModelIndex _left, QModelIndex _right)"""
        return bool()
    def filterChanged():
        """None QSortFilterProxyModel.filterChanged()"""
        return None
    def filterAcceptsColumn(_source_column, _source_parent):
        """bool QSortFilterProxyModel.filterAcceptsColumn(int _source_column, QModelIndex _source_parent)"""
        return bool()
    def filterAcceptsRow(_source_row, _source_parent):
        """bool QSortFilterProxyModel.filterAcceptsRow(int _source_row, QModelIndex _source_parent)"""
        return bool()
    def clear():
        """None QSortFilterProxyModel.clear()"""
        return None
    def setFilterFixedString(_pattern):
        """None QSortFilterProxyModel.setFilterFixedString(QString _pattern)"""
        return None
    def setFilterWildcard(_pattern):
        """None QSortFilterProxyModel.setFilterWildcard(QString _pattern)"""
        return None
    def setFilterCaseSensitivity(_cs):
        """None QSortFilterProxyModel.setFilterCaseSensitivity(Qt.CaseSensitivity _cs)"""
        return None
    def filterCaseSensitivity():
        """Qt.CaseSensitivity QSortFilterProxyModel.filterCaseSensitivity()"""
        return Qt.CaseSensitivity()
    def setFilterKeyColumn(_column):
        """None QSortFilterProxyModel.setFilterKeyColumn(int _column)"""
        return None
    def filterKeyColumn():
        """int QSortFilterProxyModel.filterKeyColumn()"""
        return int()
    def setFilterRegExp(_regExp):
        """None QSortFilterProxyModel.setFilterRegExp(QRegExp _regExp)"""
        return None
    def setFilterRegExp(_pattern):
        """None QSortFilterProxyModel.setFilterRegExp(QString _pattern)"""
        return None
    def filterRegExp():
        """QRegExp QSortFilterProxyModel.filterRegExp()"""
        return QRegExp()
    def mapSelectionFromSource(_sourceSelection):
        """QItemSelection QSortFilterProxyModel.mapSelectionFromSource(QItemSelection _sourceSelection)"""
        return QItemSelection()
    def mapSelectionToSource(_proxySelection):
        """QItemSelection QSortFilterProxyModel.mapSelectionToSource(QItemSelection _proxySelection)"""
        return QItemSelection()
    def mapFromSource(_sourceIndex):
        """QModelIndex QSortFilterProxyModel.mapFromSource(QModelIndex _sourceIndex)"""
        return QModelIndex()
    def mapToSource(_proxyIndex):
        """QModelIndex QSortFilterProxyModel.mapToSource(QModelIndex _proxyIndex)"""
        return QModelIndex()
    def setSourceModel(_sourceModel):
        """None QSortFilterProxyModel.setSourceModel(QAbstractItemModel _sourceModel)"""
        return None


class QSound(QObject):
    """"""
    def __init__(_filename, _parent):
        """None QSound.__init__(QString _filename, QObject _parent)"""
        return None
    def stop():
        """None QSound.stop()"""
        return None
    def isFinished():
        """bool QSound.isFinished()"""
        return bool()
    def fileName():
        """QString QSound.fileName()"""
        return QString()
    def setLoops():
        """int QSound.setLoops()"""
        return int()
    def loopsRemaining():
        """int QSound.loopsRemaining()"""
        return int()
    def loops():
        """int QSound.loops()"""
        return int()
    def play(_filename):
        """None QSound.play(QString _filename)"""
        return None
    def play():
        """None QSound.play()"""
        return None
    def isAvailable():
        """bool QSound.isAvailable()"""
        return bool()


class QSpinBox(QAbstractSpinBox):
    """"""
    def __init__(_parent):
        """None QSpinBox.__init__(QWidget _parent)"""
        return None
    def setValue(_val):
        """None QSpinBox.setValue(int _val)"""
        return None
    def event(_e):
        """bool QSpinBox.event(QEvent _e)"""
        return bool()
    def fixup(_str):
        """None QSpinBox.fixup(QString _str)"""
        return None
    def fixup(_str):
        """None QSpinBox.fixup(QString _str)"""
        return None
    def textFromValue(_v):
        """QString QSpinBox.textFromValue(int _v)"""
        return QString()
    def valueFromText(_text):
        """int QSpinBox.valueFromText(QString _text)"""
        return int()
    def validate(_input, _pos):
        """QValidator.State QSpinBox.validate(QString _input, int _pos)"""
        return QValidator.State()
    def validate(_input, _pos):
        """QValidator.State QSpinBox.validate(QString _input, int _pos)"""
        return QValidator.State()
    def setRange(_min, _max):
        """None QSpinBox.setRange(int _min, int _max)"""
        return None
    def setMaximum(_max):
        """None QSpinBox.setMaximum(int _max)"""
        return None
    def maximum():
        """int QSpinBox.maximum()"""
        return int()
    def setMinimum(_min):
        """None QSpinBox.setMinimum(int _min)"""
        return None
    def minimum():
        """int QSpinBox.minimum()"""
        return int()
    def setSingleStep(_val):
        """None QSpinBox.setSingleStep(int _val)"""
        return None
    def singleStep():
        """int QSpinBox.singleStep()"""
        return int()
    def cleanText():
        """QString QSpinBox.cleanText()"""
        return QString()
    def setSuffix(_s):
        """None QSpinBox.setSuffix(QString _s)"""
        return None
    def suffix():
        """QString QSpinBox.suffix()"""
        return QString()
    def setPrefix(_p):
        """None QSpinBox.setPrefix(QString _p)"""
        return None
    def prefix():
        """QString QSpinBox.prefix()"""
        return QString()
    def value():
        """int QSpinBox.value()"""
        return int()


class QDoubleSpinBox(QAbstractSpinBox):
    """"""
    def __init__(_parent):
        """None QDoubleSpinBox.__init__(QWidget _parent)"""
        return None
    def setValue(_val):
        """None QDoubleSpinBox.setValue(float _val)"""
        return None
    def fixup(_str):
        """None QDoubleSpinBox.fixup(QString _str)"""
        return None
    def fixup(_str):
        """None QDoubleSpinBox.fixup(QString _str)"""
        return None
    def textFromValue(_v):
        """QString QDoubleSpinBox.textFromValue(float _v)"""
        return QString()
    def valueFromText(_text):
        """float QDoubleSpinBox.valueFromText(QString _text)"""
        return float()
    def validate(_input, _pos):
        """QValidator.State QDoubleSpinBox.validate(QString _input, int _pos)"""
        return QValidator.State()
    def validate(_input, _pos):
        """QValidator.State QDoubleSpinBox.validate(QString _input, int _pos)"""
        return QValidator.State()
    def setDecimals(_prec):
        """None QDoubleSpinBox.setDecimals(int _prec)"""
        return None
    def decimals():
        """int QDoubleSpinBox.decimals()"""
        return int()
    def setRange(_min, _max):
        """None QDoubleSpinBox.setRange(float _min, float _max)"""
        return None
    def setMaximum(_max):
        """None QDoubleSpinBox.setMaximum(float _max)"""
        return None
    def maximum():
        """float QDoubleSpinBox.maximum()"""
        return float()
    def setMinimum(_min):
        """None QDoubleSpinBox.setMinimum(float _min)"""
        return None
    def minimum():
        """float QDoubleSpinBox.minimum()"""
        return float()
    def setSingleStep(_val):
        """None QDoubleSpinBox.setSingleStep(float _val)"""
        return None
    def singleStep():
        """float QDoubleSpinBox.singleStep()"""
        return float()
    def cleanText():
        """QString QDoubleSpinBox.cleanText()"""
        return QString()
    def setSuffix(_s):
        """None QDoubleSpinBox.setSuffix(QString _s)"""
        return None
    def suffix():
        """QString QDoubleSpinBox.suffix()"""
        return QString()
    def setPrefix(_p):
        """None QDoubleSpinBox.setPrefix(QString _p)"""
        return None
    def prefix():
        """QString QDoubleSpinBox.prefix()"""
        return QString()
    def value():
        """float QDoubleSpinBox.value()"""
        return float()


class QSplashScreen(QWidget):
    """"""
    def __init__(_pixmap, _flags):
        """None QSplashScreen.__init__(QPixmap _pixmap, Qt.WindowFlags _flags)"""
        return None
    def __init__(_parent, _pixmap, _flags):
        """None QSplashScreen.__init__(QWidget _parent, QPixmap _pixmap, Qt.WindowFlags _flags)"""
        return None
    def mousePressEvent():
        """QMouseEvent QSplashScreen.mousePressEvent()"""
        return QMouseEvent()
    def event(_e):
        """bool QSplashScreen.event(QEvent _e)"""
        return bool()
    def drawContents(_painter):
        """None QSplashScreen.drawContents(QPainter _painter)"""
        return None
    def clearMessage():
        """None QSplashScreen.clearMessage()"""
        return None
    def showMessage(_message, _alignment, _color):
        """None QSplashScreen.showMessage(QString _message, int _alignment, QColor _color)"""
        return None
    def repaint():
        """None QSplashScreen.repaint()"""
        return None
    def finish(_w):
        """None QSplashScreen.finish(QWidget _w)"""
        return None
    def pixmap():
        """QPixmap QSplashScreen.pixmap()"""
        return QPixmap()
    def setPixmap(_pixmap):
        """None QSplashScreen.setPixmap(QPixmap _pixmap)"""
        return None


class QSplitter(QFrame):
    """"""
    def __init__(_parent):
        """None QSplitter.__init__(QWidget _parent)"""
        return None
    def __init__(_orientation, _parent):
        """None QSplitter.__init__(Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def closestLegalPosition():
        """int QSplitter.closestLegalPosition()"""
        return int()
    def setRubberBand(_position):
        """None QSplitter.setRubberBand(int _position)"""
        return None
    def moveSplitter(_pos, _index):
        """None QSplitter.moveSplitter(int _pos, int _index)"""
        return None
    def changeEvent():
        """QEvent QSplitter.changeEvent()"""
        return QEvent()
    def resizeEvent():
        """QResizeEvent QSplitter.resizeEvent()"""
        return QResizeEvent()
    def event():
        """QEvent QSplitter.event()"""
        return QEvent()
    def childEvent():
        """QChildEvent QSplitter.childEvent()"""
        return QChildEvent()
    def createHandle():
        """QSplitterHandle QSplitter.createHandle()"""
        return QSplitterHandle()
    def setStretchFactor(_index, _stretch):
        """None QSplitter.setStretchFactor(int _index, int _stretch)"""
        return None
    def handle(_index):
        """QSplitterHandle QSplitter.handle(int _index)"""
        return QSplitterHandle()
    def getRange(_index):
        """int QSplitter.getRange(int _index)"""
        return int()
    def __len__():
        """ QSplitter.__len__()"""
        return ()
    def count():
        """int QSplitter.count()"""
        return int()
    def widget(_index):
        """QWidget QSplitter.widget(int _index)"""
        return QWidget()
    def indexOf(_w):
        """int QSplitter.indexOf(QWidget _w)"""
        return int()
    def setHandleWidth():
        """int QSplitter.setHandleWidth()"""
        return int()
    def handleWidth():
        """int QSplitter.handleWidth()"""
        return int()
    def restoreState(_state):
        """bool QSplitter.restoreState(QByteArray _state)"""
        return bool()
    def saveState():
        """QByteArray QSplitter.saveState()"""
        return QByteArray()
    def setSizes(_list):
        """None QSplitter.setSizes(list-of-int _list)"""
        return None
    def sizes():
        """list-of-int QSplitter.sizes()"""
        return [int()]
    def minimumSizeHint():
        """QSize QSplitter.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QSplitter.sizeHint()"""
        return QSize()
    def refresh():
        """None QSplitter.refresh()"""
        return None
    def opaqueResize():
        """bool QSplitter.opaqueResize()"""
        return bool()
    def setOpaqueResize(_opaque):
        """None QSplitter.setOpaqueResize(bool _opaque)"""
        return None
    def isCollapsible(_index):
        """bool QSplitter.isCollapsible(int _index)"""
        return bool()
    def setCollapsible(_index):
        """bool QSplitter.setCollapsible(int _index)"""
        return bool()
    def childrenCollapsible():
        """bool QSplitter.childrenCollapsible()"""
        return bool()
    def setChildrenCollapsible():
        """bool QSplitter.setChildrenCollapsible()"""
        return bool()
    def orientation():
        """Qt.Orientation QSplitter.orientation()"""
        return Qt.Orientation()
    def setOrientation():
        """Qt.Orientation QSplitter.setOrientation()"""
        return Qt.Orientation()
    def insertWidget(_index, _widget):
        """None QSplitter.insertWidget(int _index, QWidget _widget)"""
        return None
    def addWidget(_widget):
        """None QSplitter.addWidget(QWidget _widget)"""
        return None


class QSplitterHandle(QWidget):
    """"""
    def __init__(_o, _parent):
        """None QSplitterHandle.__init__(Qt.Orientation _o, QSplitter _parent)"""
        return None
    def resizeEvent():
        """QResizeEvent QSplitterHandle.resizeEvent()"""
        return QResizeEvent()
    def closestLegalPosition(_p):
        """int QSplitterHandle.closestLegalPosition(int _p)"""
        return int()
    def moveSplitter(_p):
        """None QSplitterHandle.moveSplitter(int _p)"""
        return None
    def event():
        """QEvent QSplitterHandle.event()"""
        return QEvent()
    def mouseReleaseEvent():
        """QMouseEvent QSplitterHandle.mouseReleaseEvent()"""
        return QMouseEvent()
    def mousePressEvent():
        """QMouseEvent QSplitterHandle.mousePressEvent()"""
        return QMouseEvent()
    def mouseMoveEvent():
        """QMouseEvent QSplitterHandle.mouseMoveEvent()"""
        return QMouseEvent()
    def paintEvent():
        """QPaintEvent QSplitterHandle.paintEvent()"""
        return QPaintEvent()
    def sizeHint():
        """QSize QSplitterHandle.sizeHint()"""
        return QSize()
    def splitter():
        """QSplitter QSplitterHandle.splitter()"""
        return QSplitter()
    def opaqueResize():
        """bool QSplitterHandle.opaqueResize()"""
        return bool()
    def orientation():
        """Qt.Orientation QSplitterHandle.orientation()"""
        return Qt.Orientation()
    def setOrientation(_o):
        """None QSplitterHandle.setOrientation(Qt.Orientation _o)"""
        return None


class QStackedLayout(QLayout):
    """"""
    StackOne = int() # QStackedLayout.StackingMode enum
    StackAll = int() # QStackedLayout.StackingMode enum

    def __init__():
        """None QStackedLayout.__init__()"""
        return None
    def __init__(_parent):
        """None QStackedLayout.__init__(QWidget _parent)"""
        return None
    def __init__(_parentLayout):
        """None QStackedLayout.__init__(QLayout _parentLayout)"""
        return None
    def setStackingMode(_stackingMode):
        """None QStackedLayout.setStackingMode(QStackedLayout.StackingMode _stackingMode)"""
        return None
    def stackingMode():
        """QStackedLayout.StackingMode QStackedLayout.stackingMode()"""
        return QStackedLayout.StackingMode()
    def setCurrentWidget(_w):
        """None QStackedLayout.setCurrentWidget(QWidget _w)"""
        return None
    def setCurrentIndex(_index):
        """None QStackedLayout.setCurrentIndex(int _index)"""
        return None
    def setGeometry(_rect):
        """None QStackedLayout.setGeometry(QRect _rect)"""
        return None
    def takeAt():
        """int QStackedLayout.takeAt()"""
        return int()
    def itemAt():
        """int QStackedLayout.itemAt()"""
        return int()
    def minimumSize():
        """QSize QStackedLayout.minimumSize()"""
        return QSize()
    def sizeHint():
        """QSize QStackedLayout.sizeHint()"""
        return QSize()
    def addItem(_item):
        """None QStackedLayout.addItem(QLayoutItem _item)"""
        return None
    def count():
        """int QStackedLayout.count()"""
        return int()
    def widget():
        """int QStackedLayout.widget()"""
        return int()
    def widget():
        """QWidget QStackedLayout.widget()"""
        return QWidget()
    def currentIndex():
        """int QStackedLayout.currentIndex()"""
        return int()
    def currentWidget():
        """QWidget QStackedLayout.currentWidget()"""
        return QWidget()
    def insertWidget(_index, _w):
        """int QStackedLayout.insertWidget(int _index, QWidget _w)"""
        return int()
    def addWidget(_w):
        """int QStackedLayout.addWidget(QWidget _w)"""
        return int()


class QStackedWidget(QFrame):
    """"""
    def __init__(_parent):
        """None QStackedWidget.__init__(QWidget _parent)"""
        return None
    def event(_e):
        """bool QStackedWidget.event(QEvent _e)"""
        return bool()
    def setCurrentWidget(_w):
        """None QStackedWidget.setCurrentWidget(QWidget _w)"""
        return None
    def setCurrentIndex(_index):
        """None QStackedWidget.setCurrentIndex(int _index)"""
        return None
    def __len__():
        """ QStackedWidget.__len__()"""
        return ()
    def count():
        """int QStackedWidget.count()"""
        return int()
    def widget():
        """int QStackedWidget.widget()"""
        return int()
    def indexOf():
        """QWidget QStackedWidget.indexOf()"""
        return QWidget()
    def currentIndex():
        """int QStackedWidget.currentIndex()"""
        return int()
    def currentWidget():
        """QWidget QStackedWidget.currentWidget()"""
        return QWidget()
    def removeWidget(_w):
        """None QStackedWidget.removeWidget(QWidget _w)"""
        return None
    def insertWidget(_index, _w):
        """int QStackedWidget.insertWidget(int _index, QWidget _w)"""
        return int()
    def addWidget(_w):
        """int QStackedWidget.addWidget(QWidget _w)"""
        return int()


class QStandardItemModel(QAbstractItemModel):
    """"""
    def __init__(_parent):
        """None QStandardItemModel.__init__(QObject _parent)"""
        return None
    def __init__(_rows, _columns, _parent):
        """None QStandardItemModel.__init__(int _rows, int _columns, QObject _parent)"""
        return None
    def dropMimeData(_data, _action, _row, _column, _parent):
        """bool QStandardItemModel.dropMimeData(QMimeData _data, Qt.DropAction _action, int _row, int _column, QModelIndex _parent)"""
        return bool()
    def mimeData(_indexes):
        """QMimeData QStandardItemModel.mimeData(list-of-QModelIndex _indexes)"""
        return QMimeData()
    def mimeTypes():
        """QStringList QStandardItemModel.mimeTypes()"""
        return QStringList()
    def setSortRole(_role):
        """None QStandardItemModel.setSortRole(int _role)"""
        return None
    def sortRole():
        """int QStandardItemModel.sortRole()"""
        return int()
    def findItems(_text, _flags, _column):
        """list-of-QStandardItem QStandardItemModel.findItems(QString _text, Qt.MatchFlags _flags, int _column)"""
        return [QStandardItem()]
    def setItemPrototype(_item):
        """None QStandardItemModel.setItemPrototype(QStandardItem _item)"""
        return None
    def itemPrototype():
        """QStandardItem QStandardItemModel.itemPrototype()"""
        return QStandardItem()
    def takeVerticalHeaderItem(_row):
        """QStandardItem QStandardItemModel.takeVerticalHeaderItem(int _row)"""
        return QStandardItem()
    def takeHorizontalHeaderItem(_column):
        """QStandardItem QStandardItemModel.takeHorizontalHeaderItem(int _column)"""
        return QStandardItem()
    def takeColumn(_column):
        """list-of-QStandardItem QStandardItemModel.takeColumn(int _column)"""
        return [QStandardItem()]
    def takeRow(_row):
        """list-of-QStandardItem QStandardItemModel.takeRow(int _row)"""
        return [QStandardItem()]
    def takeItem(_row, _column):
        """QStandardItem QStandardItemModel.takeItem(int _row, int _column)"""
        return QStandardItem()
    def insertColumn(_column, _items):
        """None QStandardItemModel.insertColumn(int _column, list-of-QStandardItem _items)"""
        return None
    def insertColumn(_column, _parent):
        """bool QStandardItemModel.insertColumn(int _column, QModelIndex _parent)"""
        return bool()
    def insertRow(_row, _items):
        """None QStandardItemModel.insertRow(int _row, list-of-QStandardItem _items)"""
        return None
    def insertRow(_arow, _aitem):
        """None QStandardItemModel.insertRow(int _arow, QStandardItem _aitem)"""
        return None
    def insertRow(_row, _parent):
        """bool QStandardItemModel.insertRow(int _row, QModelIndex _parent)"""
        return bool()
    def appendColumn(_items):
        """None QStandardItemModel.appendColumn(list-of-QStandardItem _items)"""
        return None
    def appendRow(_items):
        """None QStandardItemModel.appendRow(list-of-QStandardItem _items)"""
        return None
    def appendRow(_aitem):
        """None QStandardItemModel.appendRow(QStandardItem _aitem)"""
        return None
    def setColumnCount(_columns):
        """None QStandardItemModel.setColumnCount(int _columns)"""
        return None
    def setRowCount(_rows):
        """None QStandardItemModel.setRowCount(int _rows)"""
        return None
    def setVerticalHeaderLabels(_labels):
        """None QStandardItemModel.setVerticalHeaderLabels(QStringList _labels)"""
        return None
    def setHorizontalHeaderLabels(_labels):
        """None QStandardItemModel.setHorizontalHeaderLabels(QStringList _labels)"""
        return None
    def setVerticalHeaderItem(_row, _item):
        """None QStandardItemModel.setVerticalHeaderItem(int _row, QStandardItem _item)"""
        return None
    def verticalHeaderItem(_row):
        """QStandardItem QStandardItemModel.verticalHeaderItem(int _row)"""
        return QStandardItem()
    def setHorizontalHeaderItem(_column, _item):
        """None QStandardItemModel.setHorizontalHeaderItem(int _column, QStandardItem _item)"""
        return None
    def horizontalHeaderItem(_column):
        """QStandardItem QStandardItemModel.horizontalHeaderItem(int _column)"""
        return QStandardItem()
    def invisibleRootItem():
        """QStandardItem QStandardItemModel.invisibleRootItem()"""
        return QStandardItem()
    def setItem(_row, _column, _item):
        """None QStandardItemModel.setItem(int _row, int _column, QStandardItem _item)"""
        return None
    def setItem(_arow, _aitem):
        """None QStandardItemModel.setItem(int _arow, QStandardItem _aitem)"""
        return None
    def item(_row, _column):
        """QStandardItem QStandardItemModel.item(int _row, int _column)"""
        return QStandardItem()
    def indexFromItem(_item):
        """QModelIndex QStandardItemModel.indexFromItem(QStandardItem _item)"""
        return QModelIndex()
    def itemFromIndex(_index):
        """QStandardItem QStandardItemModel.itemFromIndex(QModelIndex _index)"""
        return QStandardItem()
    def sort(_column, _order):
        """None QStandardItemModel.sort(int _column, Qt.SortOrder _order)"""
        return None
    def setItemData(_index, _roles):
        """bool QStandardItemModel.setItemData(QModelIndex _index, dict-of-int-QVariant _roles)"""
        return bool()
    def itemData(_index):
        """dict-of-int-QVariant QStandardItemModel.itemData(QModelIndex _index)"""
        return dict-of-int-QVariant()
    def supportedDropActions():
        """Qt.DropActions QStandardItemModel.supportedDropActions()"""
        return Qt.DropActions()
    def clear():
        """None QStandardItemModel.clear()"""
        return None
    def flags(_index):
        """Qt.ItemFlags QStandardItemModel.flags(QModelIndex _index)"""
        return Qt.ItemFlags()
    def removeColumns(_column, _count, _parent):
        """bool QStandardItemModel.removeColumns(int _column, int _count, QModelIndex _parent)"""
        return bool()
    def removeRows(_row, _count, _parent):
        """bool QStandardItemModel.removeRows(int _row, int _count, QModelIndex _parent)"""
        return bool()
    def insertColumns(_column, _count, _parent):
        """bool QStandardItemModel.insertColumns(int _column, int _count, QModelIndex _parent)"""
        return bool()
    def insertRows(_row, _count, _parent):
        """bool QStandardItemModel.insertRows(int _row, int _count, QModelIndex _parent)"""
        return bool()
    def setHeaderData(_section, _orientation, _value, _role):
        """bool QStandardItemModel.setHeaderData(int _section, Qt.Orientation _orientation, QVariant _value, int _role)"""
        return bool()
    def headerData(_section, _orientation, _role):
        """QVariant QStandardItemModel.headerData(int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(_index, _value, _role):
        """bool QStandardItemModel.setData(QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def data(_index, _role):
        """QVariant QStandardItemModel.data(QModelIndex _index, int _role)"""
        return QVariant()
    def hasChildren(_parent):
        """bool QStandardItemModel.hasChildren(QModelIndex _parent)"""
        return bool()
    def columnCount(_parent):
        """int QStandardItemModel.columnCount(QModelIndex _parent)"""
        return int()
    def rowCount(_parent):
        """int QStandardItemModel.rowCount(QModelIndex _parent)"""
        return int()
    def parent(_child):
        """QModelIndex QStandardItemModel.parent(QModelIndex _child)"""
        return QModelIndex()
    def parent():
        """QObject QStandardItemModel.parent()"""
        return QObject()
    def index(_row, _column, _parent):
        """QModelIndex QStandardItemModel.index(int _row, int _column, QModelIndex _parent)"""
        return QModelIndex()


class QStandardItem():
    """"""
    Type = int() # QStandardItem.ItemType enum
    UserType = int() # QStandardItem.ItemType enum

    def __init__():
        """None QStandardItem.__init__()"""
        return None
    def __init__(_text):
        """None QStandardItem.__init__(QString _text)"""
        return None
    def __init__(_icon, _text):
        """None QStandardItem.__init__(QIcon _icon, QString _text)"""
        return None
    def __init__(_rows, _columns):
        """None QStandardItem.__init__(int _rows, int _columns)"""
        return None
    def __init__(_other):
        """None QStandardItem.__init__(QStandardItem _other)"""
        return None
    def __ge__(_other):
        """bool QStandardItem.__ge__(QStandardItem _other)"""
        return bool()
    def emitDataChanged():
        """None QStandardItem.emitDataChanged()"""
        return None
    def appendRows(_aitems):
        """None QStandardItem.appendRows(list-of-QStandardItem _aitems)"""
        return None
    def appendColumn(_aitems):
        """None QStandardItem.appendColumn(list-of-QStandardItem _aitems)"""
        return None
    def appendRow(_aitems):
        """None QStandardItem.appendRow(list-of-QStandardItem _aitems)"""
        return None
    def appendRow(_aitem):
        """None QStandardItem.appendRow(QStandardItem _aitem)"""
        return None
    def setAccessibleDescription(_aaccessibleDescription):
        """None QStandardItem.setAccessibleDescription(QString _aaccessibleDescription)"""
        return None
    def setAccessibleText(_aaccessibleText):
        """None QStandardItem.setAccessibleText(QString _aaccessibleText)"""
        return None
    def setCheckState(_acheckState):
        """None QStandardItem.setCheckState(Qt.CheckState _acheckState)"""
        return None
    def setForeground(_abrush):
        """None QStandardItem.setForeground(QBrush _abrush)"""
        return None
    def setBackground(_abrush):
        """None QStandardItem.setBackground(QBrush _abrush)"""
        return None
    def setTextAlignment(_atextAlignment):
        """None QStandardItem.setTextAlignment(Qt.Alignment _atextAlignment)"""
        return None
    def setFont(_afont):
        """None QStandardItem.setFont(QFont _afont)"""
        return None
    def setSizeHint(_asizeHint):
        """None QStandardItem.setSizeHint(QSize _asizeHint)"""
        return None
    def setWhatsThis(_awhatsThis):
        """None QStandardItem.setWhatsThis(QString _awhatsThis)"""
        return None
    def setStatusTip(_astatusTip):
        """None QStandardItem.setStatusTip(QString _astatusTip)"""
        return None
    def setToolTip(_atoolTip):
        """None QStandardItem.setToolTip(QString _atoolTip)"""
        return None
    def setIcon(_aicon):
        """None QStandardItem.setIcon(QIcon _aicon)"""
        return None
    def setText(_atext):
        """None QStandardItem.setText(QString _atext)"""
        return None
    def __lt__(_other):
        """bool QStandardItem.__lt__(QStandardItem _other)"""
        return bool()
    def write(_out):
        """None QStandardItem.write(QDataStream _out)"""
        return None
    def read(_in):
        """None QStandardItem.read(QDataStream _in)"""
        return None
    def type():
        """int QStandardItem.type()"""
        return int()
    def clone():
        """QStandardItem QStandardItem.clone()"""
        return QStandardItem()
    def sortChildren(_column, _order):
        """None QStandardItem.sortChildren(int _column, Qt.SortOrder _order)"""
        return None
    def takeColumn(_column):
        """list-of-QStandardItem QStandardItem.takeColumn(int _column)"""
        return [QStandardItem()]
    def takeRow(_row):
        """list-of-QStandardItem QStandardItem.takeRow(int _row)"""
        return [QStandardItem()]
    def takeChild(_row, _column):
        """QStandardItem QStandardItem.takeChild(int _row, int _column)"""
        return QStandardItem()
    def removeColumns(_column, _count):
        """None QStandardItem.removeColumns(int _column, int _count)"""
        return None
    def removeRows(_row, _count):
        """None QStandardItem.removeRows(int _row, int _count)"""
        return None
    def removeColumn(_column):
        """None QStandardItem.removeColumn(int _column)"""
        return None
    def removeRow(_row):
        """None QStandardItem.removeRow(int _row)"""
        return None
    def insertColumns(_column, _count):
        """None QStandardItem.insertColumns(int _column, int _count)"""
        return None
    def insertColumn(_column, _items):
        """None QStandardItem.insertColumn(int _column, list-of-QStandardItem _items)"""
        return None
    def insertRows(_row, _count):
        """None QStandardItem.insertRows(int _row, int _count)"""
        return None
    def insertRows(_row, _items):
        """None QStandardItem.insertRows(int _row, list-of-QStandardItem _items)"""
        return None
    def insertRow(_row, _items):
        """None QStandardItem.insertRow(int _row, list-of-QStandardItem _items)"""
        return None
    def insertRow(_arow, _aitem):
        """None QStandardItem.insertRow(int _arow, QStandardItem _aitem)"""
        return None
    def setChild(_row, _column, _item):
        """None QStandardItem.setChild(int _row, int _column, QStandardItem _item)"""
        return None
    def setChild(_arow, _aitem):
        """None QStandardItem.setChild(int _arow, QStandardItem _aitem)"""
        return None
    def child(_row, _column):
        """QStandardItem QStandardItem.child(int _row, int _column)"""
        return QStandardItem()
    def hasChildren():
        """bool QStandardItem.hasChildren()"""
        return bool()
    def setColumnCount(_columns):
        """None QStandardItem.setColumnCount(int _columns)"""
        return None
    def columnCount():
        """int QStandardItem.columnCount()"""
        return int()
    def setRowCount(_rows):
        """None QStandardItem.setRowCount(int _rows)"""
        return None
    def rowCount():
        """int QStandardItem.rowCount()"""
        return int()
    def model():
        """QStandardItemModel QStandardItem.model()"""
        return QStandardItemModel()
    def index():
        """QModelIndex QStandardItem.index()"""
        return QModelIndex()
    def column():
        """int QStandardItem.column()"""
        return int()
    def row():
        """int QStandardItem.row()"""
        return int()
    def parent():
        """QStandardItem QStandardItem.parent()"""
        return QStandardItem()
    def setDropEnabled(_dropEnabled):
        """None QStandardItem.setDropEnabled(bool _dropEnabled)"""
        return None
    def isDropEnabled():
        """bool QStandardItem.isDropEnabled()"""
        return bool()
    def setDragEnabled(_dragEnabled):
        """None QStandardItem.setDragEnabled(bool _dragEnabled)"""
        return None
    def isDragEnabled():
        """bool QStandardItem.isDragEnabled()"""
        return bool()
    def setTristate(_tristate):
        """None QStandardItem.setTristate(bool _tristate)"""
        return None
    def isTristate():
        """bool QStandardItem.isTristate()"""
        return bool()
    def setCheckable(_checkable):
        """None QStandardItem.setCheckable(bool _checkable)"""
        return None
    def isCheckable():
        """bool QStandardItem.isCheckable()"""
        return bool()
    def setSelectable(_selectable):
        """None QStandardItem.setSelectable(bool _selectable)"""
        return None
    def isSelectable():
        """bool QStandardItem.isSelectable()"""
        return bool()
    def setEditable(_editable):
        """None QStandardItem.setEditable(bool _editable)"""
        return None
    def isEditable():
        """bool QStandardItem.isEditable()"""
        return bool()
    def setEnabled(_enabled):
        """None QStandardItem.setEnabled(bool _enabled)"""
        return None
    def isEnabled():
        """bool QStandardItem.isEnabled()"""
        return bool()
    def setFlags(_flags):
        """None QStandardItem.setFlags(Qt.ItemFlags _flags)"""
        return None
    def flags():
        """Qt.ItemFlags QStandardItem.flags()"""
        return Qt.ItemFlags()
    def accessibleDescription():
        """QString QStandardItem.accessibleDescription()"""
        return QString()
    def accessibleText():
        """QString QStandardItem.accessibleText()"""
        return QString()
    def checkState():
        """Qt.CheckState QStandardItem.checkState()"""
        return Qt.CheckState()
    def foreground():
        """QBrush QStandardItem.foreground()"""
        return QBrush()
    def background():
        """QBrush QStandardItem.background()"""
        return QBrush()
    def textAlignment():
        """Qt.Alignment QStandardItem.textAlignment()"""
        return Qt.Alignment()
    def font():
        """QFont QStandardItem.font()"""
        return QFont()
    def sizeHint():
        """QSize QStandardItem.sizeHint()"""
        return QSize()
    def whatsThis():
        """QString QStandardItem.whatsThis()"""
        return QString()
    def statusTip():
        """QString QStandardItem.statusTip()"""
        return QString()
    def toolTip():
        """QString QStandardItem.toolTip()"""
        return QString()
    def icon():
        """QIcon QStandardItem.icon()"""
        return QIcon()
    def text():
        """QString QStandardItem.text()"""
        return QString()
    def setData(_value, _role):
        """None QStandardItem.setData(QVariant _value, int _role)"""
        return None
    def data(_role):
        """QVariant QStandardItem.data(int _role)"""
        return QVariant()


class QStaticText():
    """"""
    ModerateCaching = int() # QStaticText.PerformanceHint enum
    AggressiveCaching = int() # QStaticText.PerformanceHint enum

    def __init__():
        """None QStaticText.__init__()"""
        return None
    def __init__(_text):
        """None QStaticText.__init__(QString _text)"""
        return None
    def __init__(_other):
        """None QStaticText.__init__(QStaticText _other)"""
        return None
    def __ne__():
        """QStaticText QStaticText.__ne__()"""
        return QStaticText()
    def __eq__():
        """QStaticText QStaticText.__eq__()"""
        return QStaticText()
    def performanceHint():
        """QStaticText.PerformanceHint QStaticText.performanceHint()"""
        return QStaticText.PerformanceHint()
    def setPerformanceHint(_performanceHint):
        """None QStaticText.setPerformanceHint(QStaticText.PerformanceHint _performanceHint)"""
        return None
    def prepare(_matrix, _font):
        """None QStaticText.prepare(QTransform _matrix, QFont _font)"""
        return None
    def size():
        """QSizeF QStaticText.size()"""
        return QSizeF()
    def textOption():
        """QTextOption QStaticText.textOption()"""
        return QTextOption()
    def setTextOption(_textOption):
        """None QStaticText.setTextOption(QTextOption _textOption)"""
        return None
    def textWidth():
        """float QStaticText.textWidth()"""
        return float()
    def setTextWidth(_textWidth):
        """None QStaticText.setTextWidth(float _textWidth)"""
        return None
    def textFormat():
        """Qt.TextFormat QStaticText.textFormat()"""
        return Qt.TextFormat()
    def setTextFormat(_textFormat):
        """None QStaticText.setTextFormat(Qt.TextFormat _textFormat)"""
        return None
    def text():
        """QString QStaticText.text()"""
        return QString()
    def setText(_text):
        """None QStaticText.setText(QString _text)"""
        return None


class QStatusBar(QWidget):
    """"""
    def __init__(_parent):
        """None QStatusBar.__init__(QWidget _parent)"""
        return None
    def showEvent():
        """QShowEvent QStatusBar.showEvent()"""
        return QShowEvent()
    def event():
        """QEvent QStatusBar.event()"""
        return QEvent()
    def hideOrShow():
        """None QStatusBar.hideOrShow()"""
        return None
    def reformat():
        """None QStatusBar.reformat()"""
        return None
    def resizeEvent():
        """QResizeEvent QStatusBar.resizeEvent()"""
        return QResizeEvent()
    def paintEvent():
        """QPaintEvent QStatusBar.paintEvent()"""
        return QPaintEvent()
    def clearMessage():
        """None QStatusBar.clearMessage()"""
        return None
    def showMessage(_message, _msecs):
        """None QStatusBar.showMessage(QString _message, int _msecs)"""
        return None
    def insertPermanentWidget(_index, _widget, _stretch):
        """int QStatusBar.insertPermanentWidget(int _index, QWidget _widget, int _stretch)"""
        return int()
    def insertWidget(_index, _widget, _stretch):
        """int QStatusBar.insertWidget(int _index, QWidget _widget, int _stretch)"""
        return int()
    def currentMessage():
        """QString QStatusBar.currentMessage()"""
        return QString()
    def isSizeGripEnabled():
        """bool QStatusBar.isSizeGripEnabled()"""
        return bool()
    def setSizeGripEnabled():
        """bool QStatusBar.setSizeGripEnabled()"""
        return bool()
    def removeWidget(_widget):
        """None QStatusBar.removeWidget(QWidget _widget)"""
        return None
    def addPermanentWidget(_widget, _stretch):
        """None QStatusBar.addPermanentWidget(QWidget _widget, int _stretch)"""
        return None
    def addWidget(_widget, _stretch):
        """None QStatusBar.addWidget(QWidget _widget, int _stretch)"""
        return None


class QStringListModel(QAbstractListModel):
    """"""
    def __init__(_parent):
        """None QStringListModel.__init__(QObject _parent)"""
        return None
    def __init__(_strings, _parent):
        """None QStringListModel.__init__(QStringList _strings, QObject _parent)"""
        return None
    def supportedDropActions():
        """Qt.DropActions QStringListModel.supportedDropActions()"""
        return Qt.DropActions()
    def sort(_column, _order):
        """None QStringListModel.sort(int _column, Qt.SortOrder _order)"""
        return None
    def setStringList(_strings):
        """None QStringListModel.setStringList(QStringList _strings)"""
        return None
    def stringList():
        """QStringList QStringListModel.stringList()"""
        return QStringList()
    def removeRows(_row, _count, _parent):
        """bool QStringListModel.removeRows(int _row, int _count, QModelIndex _parent)"""
        return bool()
    def insertRows(_row, _count, _parent):
        """bool QStringListModel.insertRows(int _row, int _count, QModelIndex _parent)"""
        return bool()
    def flags(_index):
        """Qt.ItemFlags QStringListModel.flags(QModelIndex _index)"""
        return Qt.ItemFlags()
    def setData(_index, _value, _role):
        """bool QStringListModel.setData(QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def data(_index, _role):
        """QVariant QStringListModel.data(QModelIndex _index, int _role)"""
        return QVariant()
    def rowCount(_parent):
        """int QStringListModel.rowCount(QModelIndex _parent)"""
        return int()


class QStyle(QObject):
    """"""
    RSIP_OnMouseClickAndAlreadyFocused = int() # QStyle.RequestSoftwareInputPanel enum
    RSIP_OnMouseClick = int() # QStyle.RequestSoftwareInputPanel enum

    SP_TitleBarMenuButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarMinButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarMaxButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarCloseButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarNormalButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarShadeButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarUnshadeButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarContextHelpButton = int() # QStyle.StandardPixmap enum
    SP_DockWidgetCloseButton = int() # QStyle.StandardPixmap enum
    SP_MessageBoxInformation = int() # QStyle.StandardPixmap enum
    SP_MessageBoxWarning = int() # QStyle.StandardPixmap enum
    SP_MessageBoxCritical = int() # QStyle.StandardPixmap enum
    SP_MessageBoxQuestion = int() # QStyle.StandardPixmap enum
    SP_DesktopIcon = int() # QStyle.StandardPixmap enum
    SP_TrashIcon = int() # QStyle.StandardPixmap enum
    SP_ComputerIcon = int() # QStyle.StandardPixmap enum
    SP_DriveFDIcon = int() # QStyle.StandardPixmap enum
    SP_DriveHDIcon = int() # QStyle.StandardPixmap enum
    SP_DriveCDIcon = int() # QStyle.StandardPixmap enum
    SP_DriveDVDIcon = int() # QStyle.StandardPixmap enum
    SP_DriveNetIcon = int() # QStyle.StandardPixmap enum
    SP_DirOpenIcon = int() # QStyle.StandardPixmap enum
    SP_DirClosedIcon = int() # QStyle.StandardPixmap enum
    SP_DirLinkIcon = int() # QStyle.StandardPixmap enum
    SP_FileIcon = int() # QStyle.StandardPixmap enum
    SP_FileLinkIcon = int() # QStyle.StandardPixmap enum
    SP_ToolBarHorizontalExtensionButton = int() # QStyle.StandardPixmap enum
    SP_ToolBarVerticalExtensionButton = int() # QStyle.StandardPixmap enum
    SP_FileDialogStart = int() # QStyle.StandardPixmap enum
    SP_FileDialogEnd = int() # QStyle.StandardPixmap enum
    SP_FileDialogToParent = int() # QStyle.StandardPixmap enum
    SP_FileDialogNewFolder = int() # QStyle.StandardPixmap enum
    SP_FileDialogDetailedView = int() # QStyle.StandardPixmap enum
    SP_FileDialogInfoView = int() # QStyle.StandardPixmap enum
    SP_FileDialogContentsView = int() # QStyle.StandardPixmap enum
    SP_FileDialogListView = int() # QStyle.StandardPixmap enum
    SP_FileDialogBack = int() # QStyle.StandardPixmap enum
    SP_DirIcon = int() # QStyle.StandardPixmap enum
    SP_DialogOkButton = int() # QStyle.StandardPixmap enum
    SP_DialogCancelButton = int() # QStyle.StandardPixmap enum
    SP_DialogHelpButton = int() # QStyle.StandardPixmap enum
    SP_DialogOpenButton = int() # QStyle.StandardPixmap enum
    SP_DialogSaveButton = int() # QStyle.StandardPixmap enum
    SP_DialogCloseButton = int() # QStyle.StandardPixmap enum
    SP_DialogApplyButton = int() # QStyle.StandardPixmap enum
    SP_DialogResetButton = int() # QStyle.StandardPixmap enum
    SP_DialogDiscardButton = int() # QStyle.StandardPixmap enum
    SP_DialogYesButton = int() # QStyle.StandardPixmap enum
    SP_DialogNoButton = int() # QStyle.StandardPixmap enum
    SP_ArrowUp = int() # QStyle.StandardPixmap enum
    SP_ArrowDown = int() # QStyle.StandardPixmap enum
    SP_ArrowLeft = int() # QStyle.StandardPixmap enum
    SP_ArrowRight = int() # QStyle.StandardPixmap enum
    SP_ArrowBack = int() # QStyle.StandardPixmap enum
    SP_ArrowForward = int() # QStyle.StandardPixmap enum
    SP_DirHomeIcon = int() # QStyle.StandardPixmap enum
    SP_CommandLink = int() # QStyle.StandardPixmap enum
    SP_VistaShield = int() # QStyle.StandardPixmap enum
    SP_BrowserReload = int() # QStyle.StandardPixmap enum
    SP_BrowserStop = int() # QStyle.StandardPixmap enum
    SP_MediaPlay = int() # QStyle.StandardPixmap enum
    SP_MediaStop = int() # QStyle.StandardPixmap enum
    SP_MediaPause = int() # QStyle.StandardPixmap enum
    SP_MediaSkipForward = int() # QStyle.StandardPixmap enum
    SP_MediaSkipBackward = int() # QStyle.StandardPixmap enum
    SP_MediaSeekForward = int() # QStyle.StandardPixmap enum
    SP_MediaSeekBackward = int() # QStyle.StandardPixmap enum
    SP_MediaVolume = int() # QStyle.StandardPixmap enum
    SP_MediaVolumeMuted = int() # QStyle.StandardPixmap enum
    SP_CustomBase = int() # QStyle.StandardPixmap enum

    SH_EtchDisabledText = int() # QStyle.StyleHint enum
    SH_DitherDisabledText = int() # QStyle.StyleHint enum
    SH_ScrollBar_MiddleClickAbsolutePosition = int() # QStyle.StyleHint enum
    SH_ScrollBar_ScrollWhenPointerLeavesControl = int() # QStyle.StyleHint enum
    SH_TabBar_SelectMouseType = int() # QStyle.StyleHint enum
    SH_TabBar_Alignment = int() # QStyle.StyleHint enum
    SH_Header_ArrowAlignment = int() # QStyle.StyleHint enum
    SH_Slider_SnapToValue = int() # QStyle.StyleHint enum
    SH_Slider_SloppyKeyEvents = int() # QStyle.StyleHint enum
    SH_ProgressDialog_CenterCancelButton = int() # QStyle.StyleHint enum
    SH_ProgressDialog_TextLabelAlignment = int() # QStyle.StyleHint enum
    SH_PrintDialog_RightAlignButtons = int() # QStyle.StyleHint enum
    SH_MainWindow_SpaceBelowMenuBar = int() # QStyle.StyleHint enum
    SH_FontDialog_SelectAssociatedText = int() # QStyle.StyleHint enum
    SH_Menu_AllowActiveAndDisabled = int() # QStyle.StyleHint enum
    SH_Menu_SpaceActivatesItem = int() # QStyle.StyleHint enum
    SH_Menu_SubMenuPopupDelay = int() # QStyle.StyleHint enum
    SH_ScrollView_FrameOnlyAroundContents = int() # QStyle.StyleHint enum
    SH_MenuBar_AltKeyNavigation = int() # QStyle.StyleHint enum
    SH_ComboBox_ListMouseTracking = int() # QStyle.StyleHint enum
    SH_Menu_MouseTracking = int() # QStyle.StyleHint enum
    SH_MenuBar_MouseTracking = int() # QStyle.StyleHint enum
    SH_ItemView_ChangeHighlightOnFocus = int() # QStyle.StyleHint enum
    SH_Widget_ShareActivation = int() # QStyle.StyleHint enum
    SH_Workspace_FillSpaceOnMaximize = int() # QStyle.StyleHint enum
    SH_ComboBox_Popup = int() # QStyle.StyleHint enum
    SH_TitleBar_NoBorder = int() # QStyle.StyleHint enum
    SH_ScrollBar_StopMouseOverSlider = int() # QStyle.StyleHint enum
    SH_BlinkCursorWhenTextSelected = int() # QStyle.StyleHint enum
    SH_RichText_FullWidthSelection = int() # QStyle.StyleHint enum
    SH_Menu_Scrollable = int() # QStyle.StyleHint enum
    SH_GroupBox_TextLabelVerticalAlignment = int() # QStyle.StyleHint enum
    SH_GroupBox_TextLabelColor = int() # QStyle.StyleHint enum
    SH_Menu_SloppySubMenus = int() # QStyle.StyleHint enum
    SH_Table_GridLineColor = int() # QStyle.StyleHint enum
    SH_LineEdit_PasswordCharacter = int() # QStyle.StyleHint enum
    SH_DialogButtons_DefaultButton = int() # QStyle.StyleHint enum
    SH_ToolBox_SelectedPageTitleBold = int() # QStyle.StyleHint enum
    SH_TabBar_PreferNoArrows = int() # QStyle.StyleHint enum
    SH_ScrollBar_LeftClickAbsolutePosition = int() # QStyle.StyleHint enum
    SH_Q3ListViewExpand_SelectMouseType = int() # QStyle.StyleHint enum
    SH_UnderlineShortcut = int() # QStyle.StyleHint enum
    SH_SpinBox_AnimateButton = int() # QStyle.StyleHint enum
    SH_SpinBox_KeyPressAutoRepeatRate = int() # QStyle.StyleHint enum
    SH_SpinBox_ClickAutoRepeatRate = int() # QStyle.StyleHint enum
    SH_Menu_FillScreenWithScroll = int() # QStyle.StyleHint enum
    SH_ToolTipLabel_Opacity = int() # QStyle.StyleHint enum
    SH_DrawMenuBarSeparator = int() # QStyle.StyleHint enum
    SH_TitleBar_ModifyNotification = int() # QStyle.StyleHint enum
    SH_Button_FocusPolicy = int() # QStyle.StyleHint enum
    SH_MenuBar_DismissOnSecondClick = int() # QStyle.StyleHint enum
    SH_MessageBox_UseBorderForButtonSpacing = int() # QStyle.StyleHint enum
    SH_TitleBar_AutoRaise = int() # QStyle.StyleHint enum
    SH_ToolButton_PopupDelay = int() # QStyle.StyleHint enum
    SH_FocusFrame_Mask = int() # QStyle.StyleHint enum
    SH_RubberBand_Mask = int() # QStyle.StyleHint enum
    SH_WindowFrame_Mask = int() # QStyle.StyleHint enum
    SH_SpinControls_DisableOnBounds = int() # QStyle.StyleHint enum
    SH_Dial_BackgroundRole = int() # QStyle.StyleHint enum
    SH_ComboBox_LayoutDirection = int() # QStyle.StyleHint enum
    SH_ItemView_EllipsisLocation = int() # QStyle.StyleHint enum
    SH_ItemView_ShowDecorationSelected = int() # QStyle.StyleHint enum
    SH_ItemView_ActivateItemOnSingleClick = int() # QStyle.StyleHint enum
    SH_ScrollBar_ContextMenu = int() # QStyle.StyleHint enum
    SH_ScrollBar_RollBetweenButtons = int() # QStyle.StyleHint enum
    SH_Slider_StopMouseOverSlider = int() # QStyle.StyleHint enum
    SH_Slider_AbsoluteSetButtons = int() # QStyle.StyleHint enum
    SH_Slider_PageSetButtons = int() # QStyle.StyleHint enum
    SH_Menu_KeyboardSearch = int() # QStyle.StyleHint enum
    SH_TabBar_ElideMode = int() # QStyle.StyleHint enum
    SH_DialogButtonLayout = int() # QStyle.StyleHint enum
    SH_ComboBox_PopupFrameStyle = int() # QStyle.StyleHint enum
    SH_MessageBox_TextInteractionFlags = int() # QStyle.StyleHint enum
    SH_DialogButtonBox_ButtonsHaveIcons = int() # QStyle.StyleHint enum
    SH_SpellCheckUnderlineStyle = int() # QStyle.StyleHint enum
    SH_MessageBox_CenterButtons = int() # QStyle.StyleHint enum
    SH_Menu_SelectionWrap = int() # QStyle.StyleHint enum
    SH_ItemView_MovementWithoutUpdatingSelection = int() # QStyle.StyleHint enum
    SH_ToolTip_Mask = int() # QStyle.StyleHint enum
    SH_FocusFrame_AboveWidget = int() # QStyle.StyleHint enum
    SH_TextControl_FocusIndicatorTextCharFormat = int() # QStyle.StyleHint enum
    SH_WizardStyle = int() # QStyle.StyleHint enum
    SH_ItemView_ArrowKeysNavigateIntoChildren = int() # QStyle.StyleHint enum
    SH_Menu_Mask = int() # QStyle.StyleHint enum
    SH_Menu_FlashTriggeredItem = int() # QStyle.StyleHint enum
    SH_Menu_FadeOutOnHide = int() # QStyle.StyleHint enum
    SH_SpinBox_ClickAutoRepeatThreshold = int() # QStyle.StyleHint enum
    SH_ItemView_PaintAlternatingRowColorsForEmptyArea = int() # QStyle.StyleHint enum
    SH_FormLayoutWrapPolicy = int() # QStyle.StyleHint enum
    SH_TabWidget_DefaultTabPosition = int() # QStyle.StyleHint enum
    SH_ToolBar_Movable = int() # QStyle.StyleHint enum
    SH_FormLayoutFieldGrowthPolicy = int() # QStyle.StyleHint enum
    SH_FormLayoutFormAlignment = int() # QStyle.StyleHint enum
    SH_FormLayoutLabelAlignment = int() # QStyle.StyleHint enum
    SH_ItemView_DrawDelegateFrame = int() # QStyle.StyleHint enum
    SH_TabBar_CloseButtonPosition = int() # QStyle.StyleHint enum
    SH_DockWidget_ButtonsHaveFrame = int() # QStyle.StyleHint enum
    SH_ToolButtonStyle = int() # QStyle.StyleHint enum
    SH_RequestSoftwareInputPanel = int() # QStyle.StyleHint enum
    SH_CustomBase = int() # QStyle.StyleHint enum

    CT_PushButton = int() # QStyle.ContentsType enum
    CT_CheckBox = int() # QStyle.ContentsType enum
    CT_RadioButton = int() # QStyle.ContentsType enum
    CT_ToolButton = int() # QStyle.ContentsType enum
    CT_ComboBox = int() # QStyle.ContentsType enum
    CT_Splitter = int() # QStyle.ContentsType enum
    CT_Q3DockWindow = int() # QStyle.ContentsType enum
    CT_ProgressBar = int() # QStyle.ContentsType enum
    CT_MenuItem = int() # QStyle.ContentsType enum
    CT_MenuBarItem = int() # QStyle.ContentsType enum
    CT_MenuBar = int() # QStyle.ContentsType enum
    CT_Menu = int() # QStyle.ContentsType enum
    CT_TabBarTab = int() # QStyle.ContentsType enum
    CT_Slider = int() # QStyle.ContentsType enum
    CT_ScrollBar = int() # QStyle.ContentsType enum
    CT_Q3Header = int() # QStyle.ContentsType enum
    CT_LineEdit = int() # QStyle.ContentsType enum
    CT_SpinBox = int() # QStyle.ContentsType enum
    CT_SizeGrip = int() # QStyle.ContentsType enum
    CT_TabWidget = int() # QStyle.ContentsType enum
    CT_DialogButtons = int() # QStyle.ContentsType enum
    CT_HeaderSection = int() # QStyle.ContentsType enum
    CT_GroupBox = int() # QStyle.ContentsType enum
    CT_MdiControls = int() # QStyle.ContentsType enum
    CT_ItemViewItem = int() # QStyle.ContentsType enum
    CT_CustomBase = int() # QStyle.ContentsType enum

    PM_ButtonMargin = int() # QStyle.PixelMetric enum
    PM_ButtonDefaultIndicator = int() # QStyle.PixelMetric enum
    PM_MenuButtonIndicator = int() # QStyle.PixelMetric enum
    PM_ButtonShiftHorizontal = int() # QStyle.PixelMetric enum
    PM_ButtonShiftVertical = int() # QStyle.PixelMetric enum
    PM_DefaultFrameWidth = int() # QStyle.PixelMetric enum
    PM_SpinBoxFrameWidth = int() # QStyle.PixelMetric enum
    PM_ComboBoxFrameWidth = int() # QStyle.PixelMetric enum
    PM_MaximumDragDistance = int() # QStyle.PixelMetric enum
    PM_ScrollBarExtent = int() # QStyle.PixelMetric enum
    PM_ScrollBarSliderMin = int() # QStyle.PixelMetric enum
    PM_SliderThickness = int() # QStyle.PixelMetric enum
    PM_SliderControlThickness = int() # QStyle.PixelMetric enum
    PM_SliderLength = int() # QStyle.PixelMetric enum
    PM_SliderTickmarkOffset = int() # QStyle.PixelMetric enum
    PM_SliderSpaceAvailable = int() # QStyle.PixelMetric enum
    PM_DockWidgetSeparatorExtent = int() # QStyle.PixelMetric enum
    PM_DockWidgetHandleExtent = int() # QStyle.PixelMetric enum
    PM_DockWidgetFrameWidth = int() # QStyle.PixelMetric enum
    PM_TabBarTabOverlap = int() # QStyle.PixelMetric enum
    PM_TabBarTabHSpace = int() # QStyle.PixelMetric enum
    PM_TabBarTabVSpace = int() # QStyle.PixelMetric enum
    PM_TabBarBaseHeight = int() # QStyle.PixelMetric enum
    PM_TabBarBaseOverlap = int() # QStyle.PixelMetric enum
    PM_ProgressBarChunkWidth = int() # QStyle.PixelMetric enum
    PM_SplitterWidth = int() # QStyle.PixelMetric enum
    PM_TitleBarHeight = int() # QStyle.PixelMetric enum
    PM_MenuScrollerHeight = int() # QStyle.PixelMetric enum
    PM_MenuHMargin = int() # QStyle.PixelMetric enum
    PM_MenuVMargin = int() # QStyle.PixelMetric enum
    PM_MenuPanelWidth = int() # QStyle.PixelMetric enum
    PM_MenuTearoffHeight = int() # QStyle.PixelMetric enum
    PM_MenuDesktopFrameWidth = int() # QStyle.PixelMetric enum
    PM_MenuBarPanelWidth = int() # QStyle.PixelMetric enum
    PM_MenuBarItemSpacing = int() # QStyle.PixelMetric enum
    PM_MenuBarVMargin = int() # QStyle.PixelMetric enum
    PM_MenuBarHMargin = int() # QStyle.PixelMetric enum
    PM_IndicatorWidth = int() # QStyle.PixelMetric enum
    PM_IndicatorHeight = int() # QStyle.PixelMetric enum
    PM_ExclusiveIndicatorWidth = int() # QStyle.PixelMetric enum
    PM_ExclusiveIndicatorHeight = int() # QStyle.PixelMetric enum
    PM_CheckListButtonSize = int() # QStyle.PixelMetric enum
    PM_CheckListControllerSize = int() # QStyle.PixelMetric enum
    PM_DialogButtonsSeparator = int() # QStyle.PixelMetric enum
    PM_DialogButtonsButtonWidth = int() # QStyle.PixelMetric enum
    PM_DialogButtonsButtonHeight = int() # QStyle.PixelMetric enum
    PM_MdiSubWindowFrameWidth = int() # QStyle.PixelMetric enum
    PM_MDIFrameWidth = int() # QStyle.PixelMetric enum
    PM_MdiSubWindowMinimizedWidth = int() # QStyle.PixelMetric enum
    PM_MDIMinimizedWidth = int() # QStyle.PixelMetric enum
    PM_HeaderMargin = int() # QStyle.PixelMetric enum
    PM_HeaderMarkSize = int() # QStyle.PixelMetric enum
    PM_HeaderGripMargin = int() # QStyle.PixelMetric enum
    PM_TabBarTabShiftHorizontal = int() # QStyle.PixelMetric enum
    PM_TabBarTabShiftVertical = int() # QStyle.PixelMetric enum
    PM_TabBarScrollButtonWidth = int() # QStyle.PixelMetric enum
    PM_ToolBarFrameWidth = int() # QStyle.PixelMetric enum
    PM_ToolBarHandleExtent = int() # QStyle.PixelMetric enum
    PM_ToolBarItemSpacing = int() # QStyle.PixelMetric enum
    PM_ToolBarItemMargin = int() # QStyle.PixelMetric enum
    PM_ToolBarSeparatorExtent = int() # QStyle.PixelMetric enum
    PM_ToolBarExtensionExtent = int() # QStyle.PixelMetric enum
    PM_SpinBoxSliderHeight = int() # QStyle.PixelMetric enum
    PM_DefaultTopLevelMargin = int() # QStyle.PixelMetric enum
    PM_DefaultChildMargin = int() # QStyle.PixelMetric enum
    PM_DefaultLayoutSpacing = int() # QStyle.PixelMetric enum
    PM_ToolBarIconSize = int() # QStyle.PixelMetric enum
    PM_ListViewIconSize = int() # QStyle.PixelMetric enum
    PM_IconViewIconSize = int() # QStyle.PixelMetric enum
    PM_SmallIconSize = int() # QStyle.PixelMetric enum
    PM_LargeIconSize = int() # QStyle.PixelMetric enum
    PM_FocusFrameVMargin = int() # QStyle.PixelMetric enum
    PM_FocusFrameHMargin = int() # QStyle.PixelMetric enum
    PM_ToolTipLabelFrameWidth = int() # QStyle.PixelMetric enum
    PM_CheckBoxLabelSpacing = int() # QStyle.PixelMetric enum
    PM_TabBarIconSize = int() # QStyle.PixelMetric enum
    PM_SizeGripSize = int() # QStyle.PixelMetric enum
    PM_DockWidgetTitleMargin = int() # QStyle.PixelMetric enum
    PM_MessageBoxIconSize = int() # QStyle.PixelMetric enum
    PM_ButtonIconSize = int() # QStyle.PixelMetric enum
    PM_DockWidgetTitleBarButtonMargin = int() # QStyle.PixelMetric enum
    PM_RadioButtonLabelSpacing = int() # QStyle.PixelMetric enum
    PM_LayoutLeftMargin = int() # QStyle.PixelMetric enum
    PM_LayoutTopMargin = int() # QStyle.PixelMetric enum
    PM_LayoutRightMargin = int() # QStyle.PixelMetric enum
    PM_LayoutBottomMargin = int() # QStyle.PixelMetric enum
    PM_LayoutHorizontalSpacing = int() # QStyle.PixelMetric enum
    PM_LayoutVerticalSpacing = int() # QStyle.PixelMetric enum
    PM_TabBar_ScrollButtonOverlap = int() # QStyle.PixelMetric enum
    PM_TextCursorWidth = int() # QStyle.PixelMetric enum
    PM_TabCloseIndicatorWidth = int() # QStyle.PixelMetric enum
    PM_TabCloseIndicatorHeight = int() # QStyle.PixelMetric enum
    PM_ScrollView_ScrollBarSpacing = int() # QStyle.PixelMetric enum
    PM_SubMenuOverlap = int() # QStyle.PixelMetric enum
    PM_CustomBase = int() # QStyle.PixelMetric enum

    SC_None = int() # QStyle.SubControl enum
    SC_ScrollBarAddLine = int() # QStyle.SubControl enum
    SC_ScrollBarSubLine = int() # QStyle.SubControl enum
    SC_ScrollBarAddPage = int() # QStyle.SubControl enum
    SC_ScrollBarSubPage = int() # QStyle.SubControl enum
    SC_ScrollBarFirst = int() # QStyle.SubControl enum
    SC_ScrollBarLast = int() # QStyle.SubControl enum
    SC_ScrollBarSlider = int() # QStyle.SubControl enum
    SC_ScrollBarGroove = int() # QStyle.SubControl enum
    SC_SpinBoxUp = int() # QStyle.SubControl enum
    SC_SpinBoxDown = int() # QStyle.SubControl enum
    SC_SpinBoxFrame = int() # QStyle.SubControl enum
    SC_SpinBoxEditField = int() # QStyle.SubControl enum
    SC_ComboBoxFrame = int() # QStyle.SubControl enum
    SC_ComboBoxEditField = int() # QStyle.SubControl enum
    SC_ComboBoxArrow = int() # QStyle.SubControl enum
    SC_ComboBoxListBoxPopup = int() # QStyle.SubControl enum
    SC_SliderGroove = int() # QStyle.SubControl enum
    SC_SliderHandle = int() # QStyle.SubControl enum
    SC_SliderTickmarks = int() # QStyle.SubControl enum
    SC_ToolButton = int() # QStyle.SubControl enum
    SC_ToolButtonMenu = int() # QStyle.SubControl enum
    SC_TitleBarSysMenu = int() # QStyle.SubControl enum
    SC_TitleBarMinButton = int() # QStyle.SubControl enum
    SC_TitleBarMaxButton = int() # QStyle.SubControl enum
    SC_TitleBarCloseButton = int() # QStyle.SubControl enum
    SC_TitleBarNormalButton = int() # QStyle.SubControl enum
    SC_TitleBarShadeButton = int() # QStyle.SubControl enum
    SC_TitleBarUnshadeButton = int() # QStyle.SubControl enum
    SC_TitleBarContextHelpButton = int() # QStyle.SubControl enum
    SC_TitleBarLabel = int() # QStyle.SubControl enum
    SC_Q3ListView = int() # QStyle.SubControl enum
    SC_Q3ListViewBranch = int() # QStyle.SubControl enum
    SC_Q3ListViewExpand = int() # QStyle.SubControl enum
    SC_DialGroove = int() # QStyle.SubControl enum
    SC_DialHandle = int() # QStyle.SubControl enum
    SC_DialTickmarks = int() # QStyle.SubControl enum
    SC_GroupBoxCheckBox = int() # QStyle.SubControl enum
    SC_GroupBoxLabel = int() # QStyle.SubControl enum
    SC_GroupBoxContents = int() # QStyle.SubControl enum
    SC_GroupBoxFrame = int() # QStyle.SubControl enum
    SC_MdiMinButton = int() # QStyle.SubControl enum
    SC_MdiNormalButton = int() # QStyle.SubControl enum
    SC_MdiCloseButton = int() # QStyle.SubControl enum
    SC_CustomBase = int() # QStyle.SubControl enum
    SC_All = int() # QStyle.SubControl enum

    CC_SpinBox = int() # QStyle.ComplexControl enum
    CC_ComboBox = int() # QStyle.ComplexControl enum
    CC_ScrollBar = int() # QStyle.ComplexControl enum
    CC_Slider = int() # QStyle.ComplexControl enum
    CC_ToolButton = int() # QStyle.ComplexControl enum
    CC_TitleBar = int() # QStyle.ComplexControl enum
    CC_Q3ListView = int() # QStyle.ComplexControl enum
    CC_Dial = int() # QStyle.ComplexControl enum
    CC_GroupBox = int() # QStyle.ComplexControl enum
    CC_MdiControls = int() # QStyle.ComplexControl enum
    CC_CustomBase = int() # QStyle.ComplexControl enum

    SE_PushButtonContents = int() # QStyle.SubElement enum
    SE_PushButtonFocusRect = int() # QStyle.SubElement enum
    SE_CheckBoxIndicator = int() # QStyle.SubElement enum
    SE_CheckBoxContents = int() # QStyle.SubElement enum
    SE_CheckBoxFocusRect = int() # QStyle.SubElement enum
    SE_CheckBoxClickRect = int() # QStyle.SubElement enum
    SE_RadioButtonIndicator = int() # QStyle.SubElement enum
    SE_RadioButtonContents = int() # QStyle.SubElement enum
    SE_RadioButtonFocusRect = int() # QStyle.SubElement enum
    SE_RadioButtonClickRect = int() # QStyle.SubElement enum
    SE_ComboBoxFocusRect = int() # QStyle.SubElement enum
    SE_SliderFocusRect = int() # QStyle.SubElement enum
    SE_Q3DockWindowHandleRect = int() # QStyle.SubElement enum
    SE_ProgressBarGroove = int() # QStyle.SubElement enum
    SE_ProgressBarContents = int() # QStyle.SubElement enum
    SE_ProgressBarLabel = int() # QStyle.SubElement enum
    SE_DialogButtonAccept = int() # QStyle.SubElement enum
    SE_DialogButtonReject = int() # QStyle.SubElement enum
    SE_DialogButtonApply = int() # QStyle.SubElement enum
    SE_DialogButtonHelp = int() # QStyle.SubElement enum
    SE_DialogButtonAll = int() # QStyle.SubElement enum
    SE_DialogButtonAbort = int() # QStyle.SubElement enum
    SE_DialogButtonIgnore = int() # QStyle.SubElement enum
    SE_DialogButtonRetry = int() # QStyle.SubElement enum
    SE_DialogButtonCustom = int() # QStyle.SubElement enum
    SE_ToolBoxTabContents = int() # QStyle.SubElement enum
    SE_HeaderLabel = int() # QStyle.SubElement enum
    SE_HeaderArrow = int() # QStyle.SubElement enum
    SE_TabWidgetTabBar = int() # QStyle.SubElement enum
    SE_TabWidgetTabPane = int() # QStyle.SubElement enum
    SE_TabWidgetTabContents = int() # QStyle.SubElement enum
    SE_TabWidgetLeftCorner = int() # QStyle.SubElement enum
    SE_TabWidgetRightCorner = int() # QStyle.SubElement enum
    SE_ViewItemCheckIndicator = int() # QStyle.SubElement enum
    SE_TabBarTearIndicator = int() # QStyle.SubElement enum
    SE_TreeViewDisclosureItem = int() # QStyle.SubElement enum
    SE_LineEditContents = int() # QStyle.SubElement enum
    SE_FrameContents = int() # QStyle.SubElement enum
    SE_DockWidgetCloseButton = int() # QStyle.SubElement enum
    SE_DockWidgetFloatButton = int() # QStyle.SubElement enum
    SE_DockWidgetTitleBarText = int() # QStyle.SubElement enum
    SE_DockWidgetIcon = int() # QStyle.SubElement enum
    SE_CheckBoxLayoutItem = int() # QStyle.SubElement enum
    SE_ComboBoxLayoutItem = int() # QStyle.SubElement enum
    SE_DateTimeEditLayoutItem = int() # QStyle.SubElement enum
    SE_DialogButtonBoxLayoutItem = int() # QStyle.SubElement enum
    SE_LabelLayoutItem = int() # QStyle.SubElement enum
    SE_ProgressBarLayoutItem = int() # QStyle.SubElement enum
    SE_PushButtonLayoutItem = int() # QStyle.SubElement enum
    SE_RadioButtonLayoutItem = int() # QStyle.SubElement enum
    SE_SliderLayoutItem = int() # QStyle.SubElement enum
    SE_SpinBoxLayoutItem = int() # QStyle.SubElement enum
    SE_ToolButtonLayoutItem = int() # QStyle.SubElement enum
    SE_FrameLayoutItem = int() # QStyle.SubElement enum
    SE_GroupBoxLayoutItem = int() # QStyle.SubElement enum
    SE_TabWidgetLayoutItem = int() # QStyle.SubElement enum
    SE_ItemViewItemCheckIndicator = int() # QStyle.SubElement enum
    SE_ItemViewItemDecoration = int() # QStyle.SubElement enum
    SE_ItemViewItemText = int() # QStyle.SubElement enum
    SE_ItemViewItemFocusRect = int() # QStyle.SubElement enum
    SE_TabBarTabLeftButton = int() # QStyle.SubElement enum
    SE_TabBarTabRightButton = int() # QStyle.SubElement enum
    SE_TabBarTabText = int() # QStyle.SubElement enum
    SE_ShapedFrameContents = int() # QStyle.SubElement enum
    SE_ToolBarHandle = int() # QStyle.SubElement enum
    SE_CustomBase = int() # QStyle.SubElement enum

    CE_PushButton = int() # QStyle.ControlElement enum
    CE_PushButtonBevel = int() # QStyle.ControlElement enum
    CE_PushButtonLabel = int() # QStyle.ControlElement enum
    CE_CheckBox = int() # QStyle.ControlElement enum
    CE_CheckBoxLabel = int() # QStyle.ControlElement enum
    CE_RadioButton = int() # QStyle.ControlElement enum
    CE_RadioButtonLabel = int() # QStyle.ControlElement enum
    CE_TabBarTab = int() # QStyle.ControlElement enum
    CE_TabBarTabShape = int() # QStyle.ControlElement enum
    CE_TabBarTabLabel = int() # QStyle.ControlElement enum
    CE_ProgressBar = int() # QStyle.ControlElement enum
    CE_ProgressBarGroove = int() # QStyle.ControlElement enum
    CE_ProgressBarContents = int() # QStyle.ControlElement enum
    CE_ProgressBarLabel = int() # QStyle.ControlElement enum
    CE_MenuItem = int() # QStyle.ControlElement enum
    CE_MenuScroller = int() # QStyle.ControlElement enum
    CE_MenuVMargin = int() # QStyle.ControlElement enum
    CE_MenuHMargin = int() # QStyle.ControlElement enum
    CE_MenuTearoff = int() # QStyle.ControlElement enum
    CE_MenuEmptyArea = int() # QStyle.ControlElement enum
    CE_MenuBarItem = int() # QStyle.ControlElement enum
    CE_MenuBarEmptyArea = int() # QStyle.ControlElement enum
    CE_ToolButtonLabel = int() # QStyle.ControlElement enum
    CE_Header = int() # QStyle.ControlElement enum
    CE_HeaderSection = int() # QStyle.ControlElement enum
    CE_HeaderLabel = int() # QStyle.ControlElement enum
    CE_Q3DockWindowEmptyArea = int() # QStyle.ControlElement enum
    CE_ToolBoxTab = int() # QStyle.ControlElement enum
    CE_SizeGrip = int() # QStyle.ControlElement enum
    CE_Splitter = int() # QStyle.ControlElement enum
    CE_RubberBand = int() # QStyle.ControlElement enum
    CE_DockWidgetTitle = int() # QStyle.ControlElement enum
    CE_ScrollBarAddLine = int() # QStyle.ControlElement enum
    CE_ScrollBarSubLine = int() # QStyle.ControlElement enum
    CE_ScrollBarAddPage = int() # QStyle.ControlElement enum
    CE_ScrollBarSubPage = int() # QStyle.ControlElement enum
    CE_ScrollBarSlider = int() # QStyle.ControlElement enum
    CE_ScrollBarFirst = int() # QStyle.ControlElement enum
    CE_ScrollBarLast = int() # QStyle.ControlElement enum
    CE_FocusFrame = int() # QStyle.ControlElement enum
    CE_ComboBoxLabel = int() # QStyle.ControlElement enum
    CE_ToolBar = int() # QStyle.ControlElement enum
    CE_ToolBoxTabShape = int() # QStyle.ControlElement enum
    CE_ToolBoxTabLabel = int() # QStyle.ControlElement enum
    CE_HeaderEmptyArea = int() # QStyle.ControlElement enum
    CE_ColumnViewGrip = int() # QStyle.ControlElement enum
    CE_ItemViewItem = int() # QStyle.ControlElement enum
    CE_ShapedFrame = int() # QStyle.ControlElement enum
    CE_CustomBase = int() # QStyle.ControlElement enum

    PE_Q3CheckListController = int() # QStyle.PrimitiveElement enum
    PE_Q3CheckListExclusiveIndicator = int() # QStyle.PrimitiveElement enum
    PE_Q3CheckListIndicator = int() # QStyle.PrimitiveElement enum
    PE_Q3DockWindowSeparator = int() # QStyle.PrimitiveElement enum
    PE_Q3Separator = int() # QStyle.PrimitiveElement enum
    PE_Frame = int() # QStyle.PrimitiveElement enum
    PE_FrameDefaultButton = int() # QStyle.PrimitiveElement enum
    PE_FrameDockWidget = int() # QStyle.PrimitiveElement enum
    PE_FrameFocusRect = int() # QStyle.PrimitiveElement enum
    PE_FrameGroupBox = int() # QStyle.PrimitiveElement enum
    PE_FrameLineEdit = int() # QStyle.PrimitiveElement enum
    PE_FrameMenu = int() # QStyle.PrimitiveElement enum
    PE_FrameStatusBar = int() # QStyle.PrimitiveElement enum
    PE_FrameTabWidget = int() # QStyle.PrimitiveElement enum
    PE_FrameWindow = int() # QStyle.PrimitiveElement enum
    PE_FrameButtonBevel = int() # QStyle.PrimitiveElement enum
    PE_FrameButtonTool = int() # QStyle.PrimitiveElement enum
    PE_FrameTabBarBase = int() # QStyle.PrimitiveElement enum
    PE_PanelButtonCommand = int() # QStyle.PrimitiveElement enum
    PE_PanelButtonBevel = int() # QStyle.PrimitiveElement enum
    PE_PanelButtonTool = int() # QStyle.PrimitiveElement enum
    PE_PanelMenuBar = int() # QStyle.PrimitiveElement enum
    PE_PanelToolBar = int() # QStyle.PrimitiveElement enum
    PE_PanelLineEdit = int() # QStyle.PrimitiveElement enum
    PE_IndicatorArrowDown = int() # QStyle.PrimitiveElement enum
    PE_IndicatorArrowLeft = int() # QStyle.PrimitiveElement enum
    PE_IndicatorArrowRight = int() # QStyle.PrimitiveElement enum
    PE_IndicatorArrowUp = int() # QStyle.PrimitiveElement enum
    PE_IndicatorBranch = int() # QStyle.PrimitiveElement enum
    PE_IndicatorButtonDropDown = int() # QStyle.PrimitiveElement enum
    PE_IndicatorViewItemCheck = int() # QStyle.PrimitiveElement enum
    PE_IndicatorCheckBox = int() # QStyle.PrimitiveElement enum
    PE_IndicatorDockWidgetResizeHandle = int() # QStyle.PrimitiveElement enum
    PE_IndicatorHeaderArrow = int() # QStyle.PrimitiveElement enum
    PE_IndicatorMenuCheckMark = int() # QStyle.PrimitiveElement enum
    PE_IndicatorProgressChunk = int() # QStyle.PrimitiveElement enum
    PE_IndicatorRadioButton = int() # QStyle.PrimitiveElement enum
    PE_IndicatorSpinDown = int() # QStyle.PrimitiveElement enum
    PE_IndicatorSpinMinus = int() # QStyle.PrimitiveElement enum
    PE_IndicatorSpinPlus = int() # QStyle.PrimitiveElement enum
    PE_IndicatorSpinUp = int() # QStyle.PrimitiveElement enum
    PE_IndicatorToolBarHandle = int() # QStyle.PrimitiveElement enum
    PE_IndicatorToolBarSeparator = int() # QStyle.PrimitiveElement enum
    PE_PanelTipLabel = int() # QStyle.PrimitiveElement enum
    PE_IndicatorTabTear = int() # QStyle.PrimitiveElement enum
    PE_PanelScrollAreaCorner = int() # QStyle.PrimitiveElement enum
    PE_Widget = int() # QStyle.PrimitiveElement enum
    PE_IndicatorColumnViewArrow = int() # QStyle.PrimitiveElement enum
    PE_FrameStatusBarItem = int() # QStyle.PrimitiveElement enum
    PE_IndicatorItemViewItemCheck = int() # QStyle.PrimitiveElement enum
    PE_IndicatorItemViewItemDrop = int() # QStyle.PrimitiveElement enum
    PE_PanelItemViewItem = int() # QStyle.PrimitiveElement enum
    PE_PanelItemViewRow = int() # QStyle.PrimitiveElement enum
    PE_PanelStatusBar = int() # QStyle.PrimitiveElement enum
    PE_IndicatorTabClose = int() # QStyle.PrimitiveElement enum
    PE_PanelMenu = int() # QStyle.PrimitiveElement enum
    PE_CustomBase = int() # QStyle.PrimitiveElement enum

    State_None = int() # QStyle.StateFlag enum
    State_Enabled = int() # QStyle.StateFlag enum
    State_Raised = int() # QStyle.StateFlag enum
    State_Sunken = int() # QStyle.StateFlag enum
    State_Off = int() # QStyle.StateFlag enum
    State_NoChange = int() # QStyle.StateFlag enum
    State_On = int() # QStyle.StateFlag enum
    State_DownArrow = int() # QStyle.StateFlag enum
    State_Horizontal = int() # QStyle.StateFlag enum
    State_HasFocus = int() # QStyle.StateFlag enum
    State_Top = int() # QStyle.StateFlag enum
    State_Bottom = int() # QStyle.StateFlag enum
    State_FocusAtBorder = int() # QStyle.StateFlag enum
    State_AutoRaise = int() # QStyle.StateFlag enum
    State_MouseOver = int() # QStyle.StateFlag enum
    State_UpArrow = int() # QStyle.StateFlag enum
    State_Selected = int() # QStyle.StateFlag enum
    State_Active = int() # QStyle.StateFlag enum
    State_Open = int() # QStyle.StateFlag enum
    State_Children = int() # QStyle.StateFlag enum
    State_Item = int() # QStyle.StateFlag enum
    State_Sibling = int() # QStyle.StateFlag enum
    State_Editing = int() # QStyle.StateFlag enum
    State_KeyboardFocusChange = int() # QStyle.StateFlag enum
    State_ReadOnly = int() # QStyle.StateFlag enum
    State_Window = int() # QStyle.StateFlag enum
    State_Small = int() # QStyle.StateFlag enum
    State_Mini = int() # QStyle.StateFlag enum

    def __init__():
        """None QStyle.__init__()"""
        return None
    def proxy():
        """QStyle QStyle.proxy()"""
        return QStyle()
    def layoutSpacingImplementation(_control1, _control2, _orientation, _option, _widget):
        """int QStyle.layoutSpacingImplementation(QSizePolicy.ControlType _control1, QSizePolicy.ControlType _control2, Qt.Orientation _orientation, QStyleOption _option, QWidget _widget)"""
        return int()
    def standardIconImplementation(_standardIcon, _option, _widget):
        """QIcon QStyle.standardIconImplementation(QStyle.StandardPixmap _standardIcon, QStyleOption _option, QWidget _widget)"""
        return QIcon()
    def combinedLayoutSpacing(_controls1, _controls2, _orientation, _option, _widget):
        """int QStyle.combinedLayoutSpacing(QSizePolicy.ControlTypes _controls1, QSizePolicy.ControlTypes _controls2, Qt.Orientation _orientation, QStyleOption _option, QWidget _widget)"""
        return int()
    def layoutSpacing(_control1, _control2, _orientation, _option, _widget):
        """int QStyle.layoutSpacing(QSizePolicy.ControlType _control1, QSizePolicy.ControlType _control2, Qt.Orientation _orientation, QStyleOption _option, QWidget _widget)"""
        return int()
    def alignedRect(_direction, _alignment, _size, _rectangle):
        """QRect QStyle.alignedRect(Qt.LayoutDirection _direction, Qt.Alignment _alignment, QSize _size, QRect _rectangle)"""
        return QRect()
    def visualAlignment(_direction, _alignment):
        """Qt.Alignment QStyle.visualAlignment(Qt.LayoutDirection _direction, Qt.Alignment _alignment)"""
        return Qt.Alignment()
    def sliderValueFromPosition(_min, _max, _position, _span, _upsideDown):
        """int QStyle.sliderValueFromPosition(int _min, int _max, int _position, int _span, bool _upsideDown)"""
        return int()
    def sliderPositionFromValue(_min, _max, _logicalValue, _span, _upsideDown):
        """int QStyle.sliderPositionFromValue(int _min, int _max, int _logicalValue, int _span, bool _upsideDown)"""
        return int()
    def visualPos(_direction, _boundingRect, _logicalPos):
        """QPoint QStyle.visualPos(Qt.LayoutDirection _direction, QRect _boundingRect, QPoint _logicalPos)"""
        return QPoint()
    def visualRect(_direction, _boundingRect, _logicalRect):
        """QRect QStyle.visualRect(Qt.LayoutDirection _direction, QRect _boundingRect, QRect _logicalRect)"""
        return QRect()
    def generatedIconPixmap(_iconMode, _pixmap, _opt):
        """abstract QPixmap QStyle.generatedIconPixmap(QIcon.Mode _iconMode, QPixmap _pixmap, QStyleOption _opt)"""
        return QPixmap()
    def standardIcon(_standardIcon, _option, _widget):
        """QIcon QStyle.standardIcon(QStyle.StandardPixmap _standardIcon, QStyleOption _option, QWidget _widget)"""
        return QIcon()
    def standardPixmap(_standardPixmap, _option, _widget):
        """abstract QPixmap QStyle.standardPixmap(QStyle.StandardPixmap _standardPixmap, QStyleOption _option, QWidget _widget)"""
        return QPixmap()
    def styleHint(_stylehint, _option, _widget, _returnData):
        """abstract int QStyle.styleHint(QStyle.StyleHint _stylehint, QStyleOption _option, QWidget _widget, QStyleHintReturn _returnData)"""
        return int()
    def sizeFromContents(_ct, _opt, _contentsSize, _widget):
        """abstract QSize QStyle.sizeFromContents(QStyle.ContentsType _ct, QStyleOption _opt, QSize _contentsSize, QWidget _widget)"""
        return QSize()
    def pixelMetric(_metric, _option, _widget):
        """abstract int QStyle.pixelMetric(QStyle.PixelMetric _metric, QStyleOption _option, QWidget _widget)"""
        return int()
    def subControlRect(_cc, _opt, _sc, _widget):
        """abstract QRect QStyle.subControlRect(QStyle.ComplexControl _cc, QStyleOptionComplex _opt, QStyle.SubControl _sc, QWidget _widget)"""
        return QRect()
    def hitTestComplexControl(_cc, _opt, _pt, _widget):
        """abstract QStyle.SubControl QStyle.hitTestComplexControl(QStyle.ComplexControl _cc, QStyleOptionComplex _opt, QPoint _pt, QWidget _widget)"""
        return QStyle.SubControl()
    def drawComplexControl(_cc, _opt, _p, _widget):
        """abstract None QStyle.drawComplexControl(QStyle.ComplexControl _cc, QStyleOptionComplex _opt, QPainter _p, QWidget _widget)"""
        return None
    def subElementRect(_subElement, _option, _widget):
        """abstract QRect QStyle.subElementRect(QStyle.SubElement _subElement, QStyleOption _option, QWidget _widget)"""
        return QRect()
    def drawControl(_element, _opt, _p, _widget):
        """abstract None QStyle.drawControl(QStyle.ControlElement _element, QStyleOption _opt, QPainter _p, QWidget _widget)"""
        return None
    def drawPrimitive(_pe, _opt, _p, _widget):
        """abstract None QStyle.drawPrimitive(QStyle.PrimitiveElement _pe, QStyleOption _opt, QPainter _p, QWidget _widget)"""
        return None
    def standardPalette():
        """QPalette QStyle.standardPalette()"""
        return QPalette()
    def drawItemPixmap(_painter, _rect, _alignment, _pixmap):
        """None QStyle.drawItemPixmap(QPainter _painter, QRect _rect, int _alignment, QPixmap _pixmap)"""
        return None
    def drawItemText(_painter, _rectangle, _alignment, _palette, _enabled, _text, _textRole):
        """None QStyle.drawItemText(QPainter _painter, QRect _rectangle, int _alignment, QPalette _palette, bool _enabled, QString _text, QPalette.ColorRole _textRole)"""
        return None
    def itemPixmapRect(_r, _flags, _pixmap):
        """QRect QStyle.itemPixmapRect(QRect _r, int _flags, QPixmap _pixmap)"""
        return QRect()
    def itemTextRect(_fm, _r, _flags, _enabled, _text):
        """QRect QStyle.itemTextRect(QFontMetrics _fm, QRect _r, int _flags, bool _enabled, QString _text)"""
        return QRect()
    def unpolish():
        """QWidget QStyle.unpolish()"""
        return QWidget()
    def unpolish():
        """QApplication QStyle.unpolish()"""
        return QApplication()
    def polish():
        """QWidget QStyle.polish()"""
        return QWidget()
    def polish():
        """QApplication QStyle.polish()"""
        return QApplication()
    def polish():
        """QPalette QStyle.polish()"""
        return QPalette()


class QStyledItemDelegate(QAbstractItemDelegate):
    """"""
    def __init__(_parent):
        """None QStyledItemDelegate.__init__(QObject _parent)"""
        return None
    def editorEvent(_event, _model, _option, _index):
        """bool QStyledItemDelegate.editorEvent(QEvent _event, QAbstractItemModel _model, QStyleOptionViewItem _option, QModelIndex _index)"""
        return bool()
    def eventFilter(_object, _event):
        """bool QStyledItemDelegate.eventFilter(QObject _object, QEvent _event)"""
        return bool()
    def initStyleOption(_option, _index):
        """None QStyledItemDelegate.initStyleOption(QStyleOptionViewItem _option, QModelIndex _index)"""
        return None
    def displayText(_value, _locale):
        """QString QStyledItemDelegate.displayText(QVariant _value, QLocale _locale)"""
        return QString()
    def setItemEditorFactory(_factory):
        """None QStyledItemDelegate.setItemEditorFactory(QItemEditorFactory _factory)"""
        return None
    def itemEditorFactory():
        """QItemEditorFactory QStyledItemDelegate.itemEditorFactory()"""
        return QItemEditorFactory()
    def updateEditorGeometry(_editor, _option, _index):
        """None QStyledItemDelegate.updateEditorGeometry(QWidget _editor, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None
    def setModelData(_editor, _model, _index):
        """None QStyledItemDelegate.setModelData(QWidget _editor, QAbstractItemModel _model, QModelIndex _index)"""
        return None
    def setEditorData(_editor, _index):
        """None QStyledItemDelegate.setEditorData(QWidget _editor, QModelIndex _index)"""
        return None
    def createEditor(_parent, _option, _index):
        """QWidget QStyledItemDelegate.createEditor(QWidget _parent, QStyleOptionViewItem _option, QModelIndex _index)"""
        return QWidget()
    def sizeHint(_option, _index):
        """QSize QStyledItemDelegate.sizeHint(QStyleOptionViewItem _option, QModelIndex _index)"""
        return QSize()
    def paint(_painter, _option, _index):
        """None QStyledItemDelegate.paint(QPainter _painter, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None


class QStyleFactory():
    """"""
    def __init__():
        """None QStyleFactory.__init__()"""
        return None
    def __init__():
        """QStyleFactory QStyleFactory.__init__()"""
        return QStyleFactory()
    def create():
        """QString QStyleFactory.create()"""
        return QString()
    def keys():
        """QStringList QStyleFactory.keys()"""
        return QStringList()


class QStyleOption():
    """"""
    Version = int() # QStyleOption.StyleOptionVersion enum

    Type = int() # QStyleOption.StyleOptionType enum

    SO_Default = int() # QStyleOption.OptionType enum
    SO_FocusRect = int() # QStyleOption.OptionType enum
    SO_Button = int() # QStyleOption.OptionType enum
    SO_Tab = int() # QStyleOption.OptionType enum
    SO_MenuItem = int() # QStyleOption.OptionType enum
    SO_Frame = int() # QStyleOption.OptionType enum
    SO_ProgressBar = int() # QStyleOption.OptionType enum
    SO_ToolBox = int() # QStyleOption.OptionType enum
    SO_Header = int() # QStyleOption.OptionType enum
    SO_Q3DockWindow = int() # QStyleOption.OptionType enum
    SO_DockWidget = int() # QStyleOption.OptionType enum
    SO_Q3ListViewItem = int() # QStyleOption.OptionType enum
    SO_ViewItem = int() # QStyleOption.OptionType enum
    SO_TabWidgetFrame = int() # QStyleOption.OptionType enum
    SO_TabBarBase = int() # QStyleOption.OptionType enum
    SO_RubberBand = int() # QStyleOption.OptionType enum
    SO_ToolBar = int() # QStyleOption.OptionType enum
    SO_Complex = int() # QStyleOption.OptionType enum
    SO_Slider = int() # QStyleOption.OptionType enum
    SO_SpinBox = int() # QStyleOption.OptionType enum
    SO_ToolButton = int() # QStyleOption.OptionType enum
    SO_ComboBox = int() # QStyleOption.OptionType enum
    SO_Q3ListView = int() # QStyleOption.OptionType enum
    SO_TitleBar = int() # QStyleOption.OptionType enum
    SO_GroupBox = int() # QStyleOption.OptionType enum
    SO_ComplexCustomBase = int() # QStyleOption.OptionType enum
    SO_GraphicsItem = int() # QStyleOption.OptionType enum
    SO_SizeGrip = int() # QStyleOption.OptionType enum
    SO_CustomBase = int() # QStyleOption.OptionType enum

    direction = None # Qt.LayoutDirection member
    fontMetrics = None # QFontMetrics member
    palette = None # QPalette member
    rect = None # QRect member
    state = None # QStyle.State member
    type = None # int member
    version = None # int member
    def __init__(_version, _type):
        """None QStyleOption.__init__(int _version, int _type)"""
        return None
    def __init__(_other):
        """None QStyleOption.__init__(QStyleOption _other)"""
        return None
    def initFrom(_w):
        """None QStyleOption.initFrom(QWidget _w)"""
        return None
    def init(_w):
        """None QStyleOption.init(QWidget _w)"""
        return None


class QStyleOptionFocusRect(QStyleOption):
    """"""
    Version = int() # QStyleOptionFocusRect.StyleOptionVersion enum

    Type = int() # QStyleOptionFocusRect.StyleOptionType enum

    backgroundColor = None # QColor member
    def __init__():
        """None QStyleOptionFocusRect.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionFocusRect.__init__(QStyleOptionFocusRect _other)"""
        return None


class QStyleOptionFrame(QStyleOption):
    """"""
    Version = int() # QStyleOptionFrame.StyleOptionVersion enum

    Type = int() # QStyleOptionFrame.StyleOptionType enum

    lineWidth = None # int member
    midLineWidth = None # int member
    def __init__():
        """None QStyleOptionFrame.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionFrame.__init__(QStyleOptionFrame _other)"""
        return None


class QStyleOptionFrameV2(QStyleOptionFrame):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionFrameV2.FrameFeature enum
    Flat = int() # QStyleOptionFrameV2.FrameFeature enum

    Version = int() # QStyleOptionFrameV2.StyleOptionVersion enum

    features = None # QStyleOptionFrameV2.FrameFeatures member
    def __init__():
        """None QStyleOptionFrameV2.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionFrameV2.__init__(QStyleOptionFrameV2 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionFrameV2.__init__(QStyleOptionFrame _other)"""
        return None


class QStyleOptionTabWidgetFrame(QStyleOption):
    """"""
    Version = int() # QStyleOptionTabWidgetFrame.StyleOptionVersion enum

    Type = int() # QStyleOptionTabWidgetFrame.StyleOptionType enum

    leftCornerWidgetSize = None # QSize member
    lineWidth = None # int member
    midLineWidth = None # int member
    rightCornerWidgetSize = None # QSize member
    shape = None # QTabBar.Shape member
    tabBarSize = None # QSize member
    def __init__():
        """None QStyleOptionTabWidgetFrame.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionTabWidgetFrame.__init__(QStyleOptionTabWidgetFrame _other)"""
        return None


class QStyleOptionTabBarBase(QStyleOption):
    """"""
    Version = int() # QStyleOptionTabBarBase.StyleOptionVersion enum

    Type = int() # QStyleOptionTabBarBase.StyleOptionType enum

    selectedTabRect = None # QRect member
    shape = None # QTabBar.Shape member
    tabBarRect = None # QRect member
    def __init__():
        """None QStyleOptionTabBarBase.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionTabBarBase.__init__(QStyleOptionTabBarBase _other)"""
        return None


class QStyleOptionHeader(QStyleOption):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionHeader.SortIndicator enum
    SortUp = int() # QStyleOptionHeader.SortIndicator enum
    SortDown = int() # QStyleOptionHeader.SortIndicator enum

    NotAdjacent = int() # QStyleOptionHeader.SelectedPosition enum
    NextIsSelected = int() # QStyleOptionHeader.SelectedPosition enum
    PreviousIsSelected = int() # QStyleOptionHeader.SelectedPosition enum
    NextAndPreviousAreSelected = int() # QStyleOptionHeader.SelectedPosition enum

    Beginning = int() # QStyleOptionHeader.SectionPosition enum
    Middle = int() # QStyleOptionHeader.SectionPosition enum
    End = int() # QStyleOptionHeader.SectionPosition enum
    OnlyOneSection = int() # QStyleOptionHeader.SectionPosition enum

    Version = int() # QStyleOptionHeader.StyleOptionVersion enum

    Type = int() # QStyleOptionHeader.StyleOptionType enum

    icon = None # QIcon member
    iconAlignment = None # Qt.Alignment member
    orientation = None # Qt.Orientation member
    position = None # QStyleOptionHeader.SectionPosition member
    section = None # int member
    selectedPosition = None # QStyleOptionHeader.SelectedPosition member
    sortIndicator = None # QStyleOptionHeader.SortIndicator member
    text = None # QString member
    textAlignment = None # Qt.Alignment member
    def __init__():
        """None QStyleOptionHeader.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionHeader.__init__(QStyleOptionHeader _other)"""
        return None


class QStyleOptionButton(QStyleOption):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionButton.ButtonFeature enum
    Flat = int() # QStyleOptionButton.ButtonFeature enum
    HasMenu = int() # QStyleOptionButton.ButtonFeature enum
    DefaultButton = int() # QStyleOptionButton.ButtonFeature enum
    AutoDefaultButton = int() # QStyleOptionButton.ButtonFeature enum
    CommandLinkButton = int() # QStyleOptionButton.ButtonFeature enum

    Version = int() # QStyleOptionButton.StyleOptionVersion enum

    Type = int() # QStyleOptionButton.StyleOptionType enum

    features = None # QStyleOptionButton.ButtonFeatures member
    icon = None # QIcon member
    iconSize = None # QSize member
    text = None # QString member
    def __init__():
        """None QStyleOptionButton.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionButton.__init__(QStyleOptionButton _other)"""
        return None


class QStyleOptionTab(QStyleOption):
    """"""
    NoCornerWidgets = int() # QStyleOptionTab.CornerWidget enum
    LeftCornerWidget = int() # QStyleOptionTab.CornerWidget enum
    RightCornerWidget = int() # QStyleOptionTab.CornerWidget enum

    NotAdjacent = int() # QStyleOptionTab.SelectedPosition enum
    NextIsSelected = int() # QStyleOptionTab.SelectedPosition enum
    PreviousIsSelected = int() # QStyleOptionTab.SelectedPosition enum

    Beginning = int() # QStyleOptionTab.TabPosition enum
    Middle = int() # QStyleOptionTab.TabPosition enum
    End = int() # QStyleOptionTab.TabPosition enum
    OnlyOneTab = int() # QStyleOptionTab.TabPosition enum

    Version = int() # QStyleOptionTab.StyleOptionVersion enum

    Type = int() # QStyleOptionTab.StyleOptionType enum

    cornerWidgets = None # QStyleOptionTab.CornerWidgets member
    icon = None # QIcon member
    position = None # QStyleOptionTab.TabPosition member
    row = None # int member
    selectedPosition = None # QStyleOptionTab.SelectedPosition member
    shape = None # QTabBar.Shape member
    text = None # QString member
    def __init__():
        """None QStyleOptionTab.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionTab.__init__(QStyleOptionTab _other)"""
        return None


class QStyleOptionTabV2(QStyleOptionTab):
    """"""
    Version = int() # QStyleOptionTabV2.StyleOptionVersion enum

    iconSize = None # QSize member
    def __init__():
        """None QStyleOptionTabV2.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionTabV2.__init__(QStyleOptionTabV2 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionTabV2.__init__(QStyleOptionTab _other)"""
        return None


class QStyleOptionProgressBar(QStyleOption):
    """"""
    Version = int() # QStyleOptionProgressBar.StyleOptionVersion enum

    Type = int() # QStyleOptionProgressBar.StyleOptionType enum

    maximum = None # int member
    minimum = None # int member
    progress = None # int member
    text = None # QString member
    textAlignment = None # Qt.Alignment member
    textVisible = None # bool member
    def __init__():
        """None QStyleOptionProgressBar.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionProgressBar.__init__(QStyleOptionProgressBar _other)"""
        return None


class QStyleOptionProgressBarV2(QStyleOptionProgressBar):
    """"""
    Version = int() # QStyleOptionProgressBarV2.StyleOptionVersion enum

    Type = int() # QStyleOptionProgressBarV2.StyleOptionType enum

    bottomToTop = None # bool member
    invertedAppearance = None # bool member
    orientation = None # Qt.Orientation member
    def __init__():
        """None QStyleOptionProgressBarV2.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionProgressBarV2.__init__(QStyleOptionProgressBar _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionProgressBarV2.__init__(QStyleOptionProgressBarV2 _other)"""
        return None


class QStyleOptionMenuItem(QStyleOption):
    """"""
    NotCheckable = int() # QStyleOptionMenuItem.CheckType enum
    Exclusive = int() # QStyleOptionMenuItem.CheckType enum
    NonExclusive = int() # QStyleOptionMenuItem.CheckType enum

    Normal = int() # QStyleOptionMenuItem.MenuItemType enum
    DefaultItem = int() # QStyleOptionMenuItem.MenuItemType enum
    Separator = int() # QStyleOptionMenuItem.MenuItemType enum
    SubMenu = int() # QStyleOptionMenuItem.MenuItemType enum
    Scroller = int() # QStyleOptionMenuItem.MenuItemType enum
    TearOff = int() # QStyleOptionMenuItem.MenuItemType enum
    Margin = int() # QStyleOptionMenuItem.MenuItemType enum
    EmptyArea = int() # QStyleOptionMenuItem.MenuItemType enum

    Version = int() # QStyleOptionMenuItem.StyleOptionVersion enum

    Type = int() # QStyleOptionMenuItem.StyleOptionType enum

    checkType = None # QStyleOptionMenuItem.CheckType member
    checked = None # bool member
    font = None # QFont member
    icon = None # QIcon member
    maxIconWidth = None # int member
    menuHasCheckableItems = None # bool member
    menuItemType = None # QStyleOptionMenuItem.MenuItemType member
    menuRect = None # QRect member
    tabWidth = None # int member
    text = None # QString member
    def __init__():
        """None QStyleOptionMenuItem.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionMenuItem.__init__(QStyleOptionMenuItem _other)"""
        return None


class QStyleOptionDockWidget(QStyleOption):
    """"""
    Version = int() # QStyleOptionDockWidget.StyleOptionVersion enum

    Type = int() # QStyleOptionDockWidget.StyleOptionType enum

    closable = None # bool member
    floatable = None # bool member
    movable = None # bool member
    title = None # QString member
    def __init__():
        """None QStyleOptionDockWidget.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionDockWidget.__init__(QStyleOptionDockWidget _other)"""
        return None


class QStyleOptionViewItem(QStyleOption):
    """"""
    Left = int() # QStyleOptionViewItem.Position enum
    Right = int() # QStyleOptionViewItem.Position enum
    Top = int() # QStyleOptionViewItem.Position enum
    Bottom = int() # QStyleOptionViewItem.Position enum

    Version = int() # QStyleOptionViewItem.StyleOptionVersion enum

    Type = int() # QStyleOptionViewItem.StyleOptionType enum

    decorationAlignment = None # Qt.Alignment member
    decorationPosition = None # QStyleOptionViewItem.Position member
    decorationSize = None # QSize member
    displayAlignment = None # Qt.Alignment member
    font = None # QFont member
    showDecorationSelected = None # bool member
    textElideMode = None # Qt.TextElideMode member
    def __init__():
        """None QStyleOptionViewItem.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionViewItem.__init__(QStyleOptionViewItem _other)"""
        return None


class QStyleOptionToolBox(QStyleOption):
    """"""
    Version = int() # QStyleOptionToolBox.StyleOptionVersion enum

    Type = int() # QStyleOptionToolBox.StyleOptionType enum

    icon = None # QIcon member
    text = None # QString member
    def __init__():
        """None QStyleOptionToolBox.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionToolBox.__init__(QStyleOptionToolBox _other)"""
        return None


class QStyleOptionRubberBand(QStyleOption):
    """"""
    Version = int() # QStyleOptionRubberBand.StyleOptionVersion enum

    Type = int() # QStyleOptionRubberBand.StyleOptionType enum

    opaque = None # bool member
    shape = None # QRubberBand.Shape member
    def __init__():
        """None QStyleOptionRubberBand.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionRubberBand.__init__(QStyleOptionRubberBand _other)"""
        return None


class QStyleOptionComplex(QStyleOption):
    """"""
    Version = int() # QStyleOptionComplex.StyleOptionVersion enum

    Type = int() # QStyleOptionComplex.StyleOptionType enum

    activeSubControls = None # QStyle.SubControls member
    subControls = None # QStyle.SubControls member
    def __init__(_version, _type):
        """None QStyleOptionComplex.__init__(int _version, int _type)"""
        return None
    def __init__(_other):
        """None QStyleOptionComplex.__init__(QStyleOptionComplex _other)"""
        return None


class QStyleOptionSlider(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionSlider.StyleOptionVersion enum

    Type = int() # QStyleOptionSlider.StyleOptionType enum

    dialWrapping = None # bool member
    maximum = None # int member
    minimum = None # int member
    notchTarget = None # float member
    orientation = None # Qt.Orientation member
    pageStep = None # int member
    singleStep = None # int member
    sliderPosition = None # int member
    sliderValue = None # int member
    tickInterval = None # int member
    tickPosition = None # QSlider.TickPosition member
    upsideDown = None # bool member
    def __init__():
        """None QStyleOptionSlider.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionSlider.__init__(QStyleOptionSlider _other)"""
        return None


class QStyleOptionSpinBox(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionSpinBox.StyleOptionVersion enum

    Type = int() # QStyleOptionSpinBox.StyleOptionType enum

    buttonSymbols = None # QAbstractSpinBox.ButtonSymbols member
    frame = None # bool member
    stepEnabled = None # QAbstractSpinBox.StepEnabled member
    def __init__():
        """None QStyleOptionSpinBox.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionSpinBox.__init__(QStyleOptionSpinBox _other)"""
        return None


class QStyleOptionToolButton(QStyleOptionComplex):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionToolButton.ToolButtonFeature enum
    Arrow = int() # QStyleOptionToolButton.ToolButtonFeature enum
    Menu = int() # QStyleOptionToolButton.ToolButtonFeature enum
    PopupDelay = int() # QStyleOptionToolButton.ToolButtonFeature enum
    MenuButtonPopup = int() # QStyleOptionToolButton.ToolButtonFeature enum
    HasMenu = int() # QStyleOptionToolButton.ToolButtonFeature enum

    Version = int() # QStyleOptionToolButton.StyleOptionVersion enum

    Type = int() # QStyleOptionToolButton.StyleOptionType enum

    arrowType = None # Qt.ArrowType member
    features = None # QStyleOptionToolButton.ToolButtonFeatures member
    font = None # QFont member
    icon = None # QIcon member
    iconSize = None # QSize member
    pos = None # QPoint member
    text = None # QString member
    toolButtonStyle = None # Qt.ToolButtonStyle member
    def __init__():
        """None QStyleOptionToolButton.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionToolButton.__init__(QStyleOptionToolButton _other)"""
        return None


class QStyleOptionComboBox(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionComboBox.StyleOptionVersion enum

    Type = int() # QStyleOptionComboBox.StyleOptionType enum

    currentIcon = None # QIcon member
    currentText = None # QString member
    editable = None # bool member
    frame = None # bool member
    iconSize = None # QSize member
    popupRect = None # QRect member
    def __init__():
        """None QStyleOptionComboBox.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionComboBox.__init__(QStyleOptionComboBox _other)"""
        return None


class QStyleOptionTitleBar(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionTitleBar.StyleOptionVersion enum

    Type = int() # QStyleOptionTitleBar.StyleOptionType enum

    icon = None # QIcon member
    text = None # QString member
    titleBarFlags = None # Qt.WindowFlags member
    titleBarState = None # int member
    def __init__():
        """None QStyleOptionTitleBar.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionTitleBar.__init__(QStyleOptionTitleBar _other)"""
        return None


class QStyleHintReturn():
    """"""
    Version = int() # QStyleHintReturn.StyleOptionVersion enum

    Type = int() # QStyleHintReturn.StyleOptionType enum

    SH_Default = int() # QStyleHintReturn.HintReturnType enum
    SH_Mask = int() # QStyleHintReturn.HintReturnType enum
    SH_Variant = int() # QStyleHintReturn.HintReturnType enum

    type = None # int member
    version = None # int member
    def __init__(_version, _type):
        """None QStyleHintReturn.__init__(int _version, int _type)"""
        return None
    def __init__():
        """QStyleHintReturn QStyleHintReturn.__init__()"""
        return QStyleHintReturn()


class QStyleHintReturnMask(QStyleHintReturn):
    """"""
    Version = int() # QStyleHintReturnMask.StyleOptionVersion enum

    Type = int() # QStyleHintReturnMask.StyleOptionType enum

    region = None # QRegion member
    def __init__():
        """None QStyleHintReturnMask.__init__()"""
        return None
    def __init__():
        """QStyleHintReturnMask QStyleHintReturnMask.__init__()"""
        return QStyleHintReturnMask()


class QStyleOptionToolBar(QStyleOption):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionToolBar.ToolBarFeature enum
    Movable = int() # QStyleOptionToolBar.ToolBarFeature enum

    Beginning = int() # QStyleOptionToolBar.ToolBarPosition enum
    Middle = int() # QStyleOptionToolBar.ToolBarPosition enum
    End = int() # QStyleOptionToolBar.ToolBarPosition enum
    OnlyOne = int() # QStyleOptionToolBar.ToolBarPosition enum

    Version = int() # QStyleOptionToolBar.StyleOptionVersion enum

    Type = int() # QStyleOptionToolBar.StyleOptionType enum

    features = None # QStyleOptionToolBar.ToolBarFeatures member
    lineWidth = None # int member
    midLineWidth = None # int member
    positionOfLine = None # QStyleOptionToolBar.ToolBarPosition member
    positionWithinLine = None # QStyleOptionToolBar.ToolBarPosition member
    toolBarArea = None # Qt.ToolBarArea member
    def __init__():
        """None QStyleOptionToolBar.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionToolBar.__init__(QStyleOptionToolBar _other)"""
        return None


class QStyleOptionGroupBox(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionGroupBox.StyleOptionVersion enum

    Type = int() # QStyleOptionGroupBox.StyleOptionType enum

    features = None # QStyleOptionFrameV2.FrameFeatures member
    lineWidth = None # int member
    midLineWidth = None # int member
    text = None # QString member
    textAlignment = None # Qt.Alignment member
    textColor = None # QColor member
    def __init__():
        """None QStyleOptionGroupBox.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionGroupBox.__init__(QStyleOptionGroupBox _other)"""
        return None


class QStyleOptionViewItemV2(QStyleOptionViewItem):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionViewItemV2.ViewItemFeature enum
    WrapText = int() # QStyleOptionViewItemV2.ViewItemFeature enum
    Alternate = int() # QStyleOptionViewItemV2.ViewItemFeature enum
    HasCheckIndicator = int() # QStyleOptionViewItemV2.ViewItemFeature enum
    HasDisplay = int() # QStyleOptionViewItemV2.ViewItemFeature enum
    HasDecoration = int() # QStyleOptionViewItemV2.ViewItemFeature enum

    Version = int() # QStyleOptionViewItemV2.StyleOptionVersion enum

    features = None # QStyleOptionViewItemV2.ViewItemFeatures member
    def __init__():
        """None QStyleOptionViewItemV2.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionViewItemV2.__init__(QStyleOptionViewItemV2 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionViewItemV2.__init__(QStyleOptionViewItem _other)"""
        return None


class QStyleOptionSizeGrip(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionSizeGrip.StyleOptionVersion enum

    Type = int() # QStyleOptionSizeGrip.StyleOptionType enum

    corner = None # Qt.Corner member
    def __init__():
        """None QStyleOptionSizeGrip.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionSizeGrip.__init__(QStyleOptionSizeGrip _other)"""
        return None


class QStyleOptionGraphicsItem(QStyleOption):
    """"""
    Version = int() # QStyleOptionGraphicsItem.StyleOptionVersion enum

    Type = int() # QStyleOptionGraphicsItem.StyleOptionType enum

    exposedRect = None # QRectF member
    levelOfDetail = None # float member
    matrix = None # QMatrix member
    def __init__():
        """None QStyleOptionGraphicsItem.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionGraphicsItem.__init__(QStyleOptionGraphicsItem _other)"""
        return None
    def levelOfDetailFromTransform(_worldTransform):
        """float QStyleOptionGraphicsItem.levelOfDetailFromTransform(QTransform _worldTransform)"""
        return float()


class QStyleOptionDockWidgetV2(QStyleOptionDockWidget):
    """"""
    Version = int() # QStyleOptionDockWidgetV2.StyleOptionVersion enum

    verticalTitleBar = None # bool member
    def __init__():
        """None QStyleOptionDockWidgetV2.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionDockWidgetV2.__init__(QStyleOptionDockWidgetV2 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionDockWidgetV2.__init__(QStyleOptionDockWidget _other)"""
        return None


class QStyleOptionViewItemV3(QStyleOptionViewItemV2):
    """"""
    Version = int() # QStyleOptionViewItemV3.StyleOptionVersion enum

    locale = None # QLocale member
    widget = None # QWidget member
    def __init__():
        """None QStyleOptionViewItemV3.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionViewItemV3.__init__(QStyleOptionViewItemV3 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionViewItemV3.__init__(QStyleOptionViewItem _other)"""
        return None


class QStyleOptionToolBoxV2(QStyleOptionToolBox):
    """"""
    NotAdjacent = int() # QStyleOptionToolBoxV2.SelectedPosition enum
    NextIsSelected = int() # QStyleOptionToolBoxV2.SelectedPosition enum
    PreviousIsSelected = int() # QStyleOptionToolBoxV2.SelectedPosition enum

    Beginning = int() # QStyleOptionToolBoxV2.TabPosition enum
    Middle = int() # QStyleOptionToolBoxV2.TabPosition enum
    End = int() # QStyleOptionToolBoxV2.TabPosition enum
    OnlyOneTab = int() # QStyleOptionToolBoxV2.TabPosition enum

    Version = int() # QStyleOptionToolBoxV2.StyleOptionVersion enum

    position = None # QStyleOptionToolBoxV2.TabPosition member
    selectedPosition = None # QStyleOptionToolBoxV2.SelectedPosition member
    def __init__():
        """None QStyleOptionToolBoxV2.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionToolBoxV2.__init__(QStyleOptionToolBoxV2 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionToolBoxV2.__init__(QStyleOptionToolBox _other)"""
        return None


class QStyleHintReturnVariant(QStyleHintReturn):
    """"""
    Version = int() # QStyleHintReturnVariant.StyleOptionVersion enum

    Type = int() # QStyleHintReturnVariant.StyleOptionType enum

    variant = None # QVariant member
    def __init__():
        """None QStyleHintReturnVariant.__init__()"""
        return None
    def __init__():
        """QStyleHintReturnVariant QStyleHintReturnVariant.__init__()"""
        return QStyleHintReturnVariant()


class QStyleOptionViewItemV4(QStyleOptionViewItemV3):
    """"""
    Invalid = int() # QStyleOptionViewItemV4.ViewItemPosition enum
    Beginning = int() # QStyleOptionViewItemV4.ViewItemPosition enum
    Middle = int() # QStyleOptionViewItemV4.ViewItemPosition enum
    End = int() # QStyleOptionViewItemV4.ViewItemPosition enum
    OnlyOne = int() # QStyleOptionViewItemV4.ViewItemPosition enum

    Version = int() # QStyleOptionViewItemV4.StyleOptionVersion enum

    backgroundBrush = None # QBrush member
    checkState = None # Qt.CheckState member
    icon = None # QIcon member
    index = None # QModelIndex member
    text = None # QString member
    viewItemPosition = None # QStyleOptionViewItemV4.ViewItemPosition member
    def __init__():
        """None QStyleOptionViewItemV4.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionViewItemV4.__init__(QStyleOptionViewItemV4 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionViewItemV4.__init__(QStyleOptionViewItem _other)"""
        return None


class QStyleOptionFrameV3(QStyleOptionFrameV2):
    """"""
    Version = int() # QStyleOptionFrameV3.StyleOptionVersion enum

    frameShape = None # QFrame.Shape member
    unused = None # int member
    def __init__():
        """None QStyleOptionFrameV3.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionFrameV3.__init__(QStyleOptionFrameV3 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionFrameV3.__init__(QStyleOptionFrame _other)"""
        return None


class QStyleOptionTabBarBaseV2(QStyleOptionTabBarBase):
    """"""
    Version = int() # QStyleOptionTabBarBaseV2.StyleOptionVersion enum

    documentMode = None # bool member
    def __init__():
        """None QStyleOptionTabBarBaseV2.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionTabBarBaseV2.__init__(QStyleOptionTabBarBaseV2 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionTabBarBaseV2.__init__(QStyleOptionTabBarBase _other)"""
        return None


class QStyleOptionTabV3(QStyleOptionTabV2):
    """"""
    Version = int() # QStyleOptionTabV3.StyleOptionVersion enum

    documentMode = None # bool member
    leftButtonSize = None # QSize member
    rightButtonSize = None # QSize member
    def __init__():
        """None QStyleOptionTabV3.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionTabV3.__init__(QStyleOptionTabV3 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionTabV3.__init__(QStyleOptionTabV2 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionTabV3.__init__(QStyleOptionTab _other)"""
        return None


class QStyleOptionTabWidgetFrameV2(QStyleOptionTabWidgetFrame):
    """"""
    Version = int() # QStyleOptionTabWidgetFrameV2.StyleOptionVersion enum

    selectedTabRect = None # QRect member
    tabBarRect = None # QRect member
    def __init__():
        """None QStyleOptionTabWidgetFrameV2.__init__()"""
        return None
    def __init__(_other):
        """None QStyleOptionTabWidgetFrameV2.__init__(QStyleOptionTabWidgetFrameV2 _other)"""
        return None
    def __init__(_other):
        """None QStyleOptionTabWidgetFrameV2.__init__(QStyleOptionTabWidgetFrame _other)"""
        return None


class QStylePainter(QPainter):
    """"""
    def __init__():
        """None QStylePainter.__init__()"""
        return None
    def __init__(_w):
        """None QStylePainter.__init__(QWidget _w)"""
        return None
    def __init__(_pd, _w):
        """None QStylePainter.__init__(QPaintDevice _pd, QWidget _w)"""
        return None
    def drawItemPixmap(_r, _flags, _pixmap):
        """None QStylePainter.drawItemPixmap(QRect _r, int _flags, QPixmap _pixmap)"""
        return None
    def drawItemText(_rect, _flags, _pal, _enabled, _text, _textRole):
        """None QStylePainter.drawItemText(QRect _rect, int _flags, QPalette _pal, bool _enabled, QString _text, QPalette.ColorRole _textRole)"""
        return None
    def drawComplexControl(_cc, _opt):
        """None QStylePainter.drawComplexControl(QStyle.ComplexControl _cc, QStyleOptionComplex _opt)"""
        return None
    def drawControl(_ce, _opt):
        """None QStylePainter.drawControl(QStyle.ControlElement _ce, QStyleOption _opt)"""
        return None
    def drawPrimitive(_pe, _opt):
        """None QStylePainter.drawPrimitive(QStyle.PrimitiveElement _pe, QStyleOption _opt)"""
        return None
    def style():
        """QStyle QStylePainter.style()"""
        return QStyle()
    def begin(_w):
        """bool QStylePainter.begin(QWidget _w)"""
        return bool()
    def begin(_pd, _w):
        """bool QStylePainter.begin(QPaintDevice _pd, QWidget _w)"""
        return bool()


class QSyntaxHighlighter(QObject):
    """"""
    def __init__(_parent):
        """None QSyntaxHighlighter.__init__(QTextEdit _parent)"""
        return None
    def __init__(_parent):
        """None QSyntaxHighlighter.__init__(QTextDocument _parent)"""
        return None
    def __init__(_parent):
        """None QSyntaxHighlighter.__init__(QObject _parent)"""
        return None
    def currentBlock():
        """QTextBlock QSyntaxHighlighter.currentBlock()"""
        return QTextBlock()
    def currentBlockUserData():
        """QTextBlockUserData QSyntaxHighlighter.currentBlockUserData()"""
        return QTextBlockUserData()
    def setCurrentBlockUserData(_data):
        """None QSyntaxHighlighter.setCurrentBlockUserData(QTextBlockUserData _data)"""
        return None
    def setCurrentBlockState(_newState):
        """None QSyntaxHighlighter.setCurrentBlockState(int _newState)"""
        return None
    def currentBlockState():
        """int QSyntaxHighlighter.currentBlockState()"""
        return int()
    def previousBlockState():
        """int QSyntaxHighlighter.previousBlockState()"""
        return int()
    def format(_pos):
        """QTextCharFormat QSyntaxHighlighter.format(int _pos)"""
        return QTextCharFormat()
    def setFormat(_start, _count, _format):
        """None QSyntaxHighlighter.setFormat(int _start, int _count, QTextCharFormat _format)"""
        return None
    def setFormat(_start, _count, _color):
        """None QSyntaxHighlighter.setFormat(int _start, int _count, QColor _color)"""
        return None
    def setFormat(_start, _count, _font):
        """None QSyntaxHighlighter.setFormat(int _start, int _count, QFont _font)"""
        return None
    def highlightBlock(_text):
        """abstract None QSyntaxHighlighter.highlightBlock(QString _text)"""
        return None
    def rehighlightBlock(_block):
        """None QSyntaxHighlighter.rehighlightBlock(QTextBlock _block)"""
        return None
    def rehighlight():
        """None QSyntaxHighlighter.rehighlight()"""
        return None
    def document():
        """QTextDocument QSyntaxHighlighter.document()"""
        return QTextDocument()
    def setDocument(_doc):
        """None QSyntaxHighlighter.setDocument(QTextDocument _doc)"""
        return None


class QSystemTrayIcon(QObject):
    """"""
    NoIcon = int() # QSystemTrayIcon.MessageIcon enum
    Information = int() # QSystemTrayIcon.MessageIcon enum
    Warning = int() # QSystemTrayIcon.MessageIcon enum
    Critical = int() # QSystemTrayIcon.MessageIcon enum

    Unknown = int() # QSystemTrayIcon.ActivationReason enum
    Context = int() # QSystemTrayIcon.ActivationReason enum
    DoubleClick = int() # QSystemTrayIcon.ActivationReason enum
    Trigger = int() # QSystemTrayIcon.ActivationReason enum
    MiddleClick = int() # QSystemTrayIcon.ActivationReason enum

    def __init__(_parent):
        """None QSystemTrayIcon.__init__(QObject _parent)"""
        return None
    def __init__(_icon, _parent):
        """None QSystemTrayIcon.__init__(QIcon _icon, QObject _parent)"""
        return None
    def event(_event):
        """bool QSystemTrayIcon.event(QEvent _event)"""
        return bool()
    def show():
        """None QSystemTrayIcon.show()"""
        return None
    def setVisible(_visible):
        """None QSystemTrayIcon.setVisible(bool _visible)"""
        return None
    def hide():
        """None QSystemTrayIcon.hide()"""
        return None
    def isVisible():
        """bool QSystemTrayIcon.isVisible()"""
        return bool()
    def showMessage(_title, _msg, _icon, _msecs):
        """None QSystemTrayIcon.showMessage(QString _title, QString _msg, QSystemTrayIcon.MessageIcon _icon, int _msecs)"""
        return None
    def supportsMessages():
        """bool QSystemTrayIcon.supportsMessages()"""
        return bool()
    def isSystemTrayAvailable():
        """bool QSystemTrayIcon.isSystemTrayAvailable()"""
        return bool()
    def setToolTip(_tip):
        """None QSystemTrayIcon.setToolTip(QString _tip)"""
        return None
    def toolTip():
        """QString QSystemTrayIcon.toolTip()"""
        return QString()
    def setIcon(_icon):
        """None QSystemTrayIcon.setIcon(QIcon _icon)"""
        return None
    def icon():
        """QIcon QSystemTrayIcon.icon()"""
        return QIcon()
    def geometry():
        """QRect QSystemTrayIcon.geometry()"""
        return QRect()
    def contextMenu():
        """QMenu QSystemTrayIcon.contextMenu()"""
        return QMenu()
    def setContextMenu(_menu):
        """None QSystemTrayIcon.setContextMenu(QMenu _menu)"""
        return None


class QTabBar(QWidget):
    """"""
    SelectLeftTab = int() # QTabBar.SelectionBehavior enum
    SelectRightTab = int() # QTabBar.SelectionBehavior enum
    SelectPreviousTab = int() # QTabBar.SelectionBehavior enum

    LeftSide = int() # QTabBar.ButtonPosition enum
    RightSide = int() # QTabBar.ButtonPosition enum

    RoundedNorth = int() # QTabBar.Shape enum
    RoundedSouth = int() # QTabBar.Shape enum
    RoundedWest = int() # QTabBar.Shape enum
    RoundedEast = int() # QTabBar.Shape enum
    TriangularNorth = int() # QTabBar.Shape enum
    TriangularSouth = int() # QTabBar.Shape enum
    TriangularWest = int() # QTabBar.Shape enum
    TriangularEast = int() # QTabBar.Shape enum

    def __init__(_parent):
        """None QTabBar.__init__(QWidget _parent)"""
        return None
    def wheelEvent(_event):
        """None QTabBar.wheelEvent(QWheelEvent _event)"""
        return None
    def hideEvent():
        """QHideEvent QTabBar.hideEvent()"""
        return QHideEvent()
    def setDocumentMode(_set):
        """None QTabBar.setDocumentMode(bool _set)"""
        return None
    def documentMode():
        """bool QTabBar.documentMode()"""
        return bool()
    def setMovable(_movable):
        """None QTabBar.setMovable(bool _movable)"""
        return None
    def isMovable():
        """bool QTabBar.isMovable()"""
        return bool()
    def setExpanding(_enabled):
        """None QTabBar.setExpanding(bool _enabled)"""
        return None
    def expanding():
        """bool QTabBar.expanding()"""
        return bool()
    def setSelectionBehaviorOnRemove(_behavior):
        """None QTabBar.setSelectionBehaviorOnRemove(QTabBar.SelectionBehavior _behavior)"""
        return None
    def selectionBehaviorOnRemove():
        """QTabBar.SelectionBehavior QTabBar.selectionBehaviorOnRemove()"""
        return QTabBar.SelectionBehavior()
    def tabButton(_index, _position):
        """QWidget QTabBar.tabButton(int _index, QTabBar.ButtonPosition _position)"""
        return QWidget()
    def setTabButton(_index, _position, _widget):
        """None QTabBar.setTabButton(int _index, QTabBar.ButtonPosition _position, QWidget _widget)"""
        return None
    def setTabsClosable(_closable):
        """None QTabBar.setTabsClosable(bool _closable)"""
        return None
    def tabsClosable():
        """bool QTabBar.tabsClosable()"""
        return bool()
    def moveTab(_from, _to):
        """None QTabBar.moveTab(int _from, int _to)"""
        return None
    def changeEvent():
        """QEvent QTabBar.changeEvent()"""
        return QEvent()
    def keyPressEvent():
        """QKeyEvent QTabBar.keyPressEvent()"""
        return QKeyEvent()
    def mouseReleaseEvent():
        """QMouseEvent QTabBar.mouseReleaseEvent()"""
        return QMouseEvent()
    def mouseMoveEvent():
        """QMouseEvent QTabBar.mouseMoveEvent()"""
        return QMouseEvent()
    def mousePressEvent():
        """QMouseEvent QTabBar.mousePressEvent()"""
        return QMouseEvent()
    def paintEvent():
        """QPaintEvent QTabBar.paintEvent()"""
        return QPaintEvent()
    def showEvent():
        """QShowEvent QTabBar.showEvent()"""
        return QShowEvent()
    def resizeEvent():
        """QResizeEvent QTabBar.resizeEvent()"""
        return QResizeEvent()
    def event():
        """QEvent QTabBar.event()"""
        return QEvent()
    def tabLayoutChange():
        """None QTabBar.tabLayoutChange()"""
        return None
    def tabRemoved(_index):
        """None QTabBar.tabRemoved(int _index)"""
        return None
    def tabInserted(_index):
        """None QTabBar.tabInserted(int _index)"""
        return None
    def tabSizeHint(_index):
        """QSize QTabBar.tabSizeHint(int _index)"""
        return QSize()
    def initStyleOption(_option, _tabIndex):
        """None QTabBar.initStyleOption(QStyleOptionTab _option, int _tabIndex)"""
        return None
    def setCurrentIndex(_index):
        """None QTabBar.setCurrentIndex(int _index)"""
        return None
    def usesScrollButtons():
        """bool QTabBar.usesScrollButtons()"""
        return bool()
    def setUsesScrollButtons(_useButtons):
        """None QTabBar.setUsesScrollButtons(bool _useButtons)"""
        return None
    def setElideMode():
        """Qt.TextElideMode QTabBar.setElideMode()"""
        return Qt.TextElideMode()
    def elideMode():
        """Qt.TextElideMode QTabBar.elideMode()"""
        return Qt.TextElideMode()
    def setIconSize(_size):
        """None QTabBar.setIconSize(QSize _size)"""
        return None
    def iconSize():
        """QSize QTabBar.iconSize()"""
        return QSize()
    def drawBase():
        """bool QTabBar.drawBase()"""
        return bool()
    def setDrawBase(_drawTheBase):
        """None QTabBar.setDrawBase(bool _drawTheBase)"""
        return None
    def minimumSizeHint():
        """QSize QTabBar.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QTabBar.sizeHint()"""
        return QSize()
    def __len__():
        """ QTabBar.__len__()"""
        return ()
    def count():
        """int QTabBar.count()"""
        return int()
    def currentIndex():
        """int QTabBar.currentIndex()"""
        return int()
    def tabRect(_index):
        """QRect QTabBar.tabRect(int _index)"""
        return QRect()
    def tabAt(_pos):
        """int QTabBar.tabAt(QPoint _pos)"""
        return int()
    def tabData(_index):
        """QVariant QTabBar.tabData(int _index)"""
        return QVariant()
    def setTabData(_index, _data):
        """None QTabBar.setTabData(int _index, QVariant _data)"""
        return None
    def tabWhatsThis(_index):
        """QString QTabBar.tabWhatsThis(int _index)"""
        return QString()
    def setTabWhatsThis(_index, _text):
        """None QTabBar.setTabWhatsThis(int _index, QString _text)"""
        return None
    def tabToolTip(_index):
        """QString QTabBar.tabToolTip(int _index)"""
        return QString()
    def setTabToolTip(_index, _tip):
        """None QTabBar.setTabToolTip(int _index, QString _tip)"""
        return None
    def setTabIcon(_index, _icon):
        """None QTabBar.setTabIcon(int _index, QIcon _icon)"""
        return None
    def tabIcon(_index):
        """QIcon QTabBar.tabIcon(int _index)"""
        return QIcon()
    def setTabTextColor(_index, _color):
        """None QTabBar.setTabTextColor(int _index, QColor _color)"""
        return None
    def tabTextColor(_index):
        """QColor QTabBar.tabTextColor(int _index)"""
        return QColor()
    def setTabText(_index, _text):
        """None QTabBar.setTabText(int _index, QString _text)"""
        return None
    def tabText(_index):
        """QString QTabBar.tabText(int _index)"""
        return QString()
    def setTabEnabled(_index):
        """bool QTabBar.setTabEnabled(int _index)"""
        return bool()
    def isTabEnabled(_index):
        """bool QTabBar.isTabEnabled(int _index)"""
        return bool()
    def removeTab(_index):
        """None QTabBar.removeTab(int _index)"""
        return None
    def insertTab(_index, _text):
        """int QTabBar.insertTab(int _index, QString _text)"""
        return int()
    def insertTab(_index, _icon, _text):
        """int QTabBar.insertTab(int _index, QIcon _icon, QString _text)"""
        return int()
    def addTab(_text):
        """int QTabBar.addTab(QString _text)"""
        return int()
    def addTab(_icon, _text):
        """int QTabBar.addTab(QIcon _icon, QString _text)"""
        return int()
    def setShape(_shape):
        """None QTabBar.setShape(QTabBar.Shape _shape)"""
        return None
    def shape():
        """QTabBar.Shape QTabBar.shape()"""
        return QTabBar.Shape()


class QTableView(QAbstractItemView):
    """"""
    def __init__(_parent):
        """None QTableView.__init__(QWidget _parent)"""
        return None
    def currentChanged(_current, _previous):
        """None QTableView.currentChanged(QModelIndex _current, QModelIndex _previous)"""
        return None
    def selectionChanged(_selected, _deselected):
        """None QTableView.selectionChanged(QItemSelection _selected, QItemSelection _deselected)"""
        return None
    def clearSpans():
        """None QTableView.clearSpans()"""
        return None
    def isCornerButtonEnabled():
        """bool QTableView.isCornerButtonEnabled()"""
        return bool()
    def setCornerButtonEnabled(_enable):
        """None QTableView.setCornerButtonEnabled(bool _enable)"""
        return None
    def wordWrap():
        """bool QTableView.wordWrap()"""
        return bool()
    def setWordWrap(_on):
        """None QTableView.setWordWrap(bool _on)"""
        return None
    def columnSpan(_row, _column):
        """int QTableView.columnSpan(int _row, int _column)"""
        return int()
    def rowSpan(_row, _column):
        """int QTableView.rowSpan(int _row, int _column)"""
        return int()
    def setSpan(_row, _column, _rowSpan, _columnSpan):
        """None QTableView.setSpan(int _row, int _column, int _rowSpan, int _columnSpan)"""
        return None
    def isSortingEnabled():
        """bool QTableView.isSortingEnabled()"""
        return bool()
    def setSortingEnabled(_enable):
        """None QTableView.setSortingEnabled(bool _enable)"""
        return None
    def isIndexHidden(_index):
        """bool QTableView.isIndexHidden(QModelIndex _index)"""
        return bool()
    def horizontalScrollbarAction(_action):
        """None QTableView.horizontalScrollbarAction(int _action)"""
        return None
    def verticalScrollbarAction(_action):
        """None QTableView.verticalScrollbarAction(int _action)"""
        return None
    def sizeHintForColumn(_column):
        """int QTableView.sizeHintForColumn(int _column)"""
        return int()
    def sizeHintForRow(_row):
        """int QTableView.sizeHintForRow(int _row)"""
        return int()
    def updateGeometries():
        """None QTableView.updateGeometries()"""
        return None
    def selectedIndexes():
        """list-of-QModelIndex QTableView.selectedIndexes()"""
        return [QModelIndex()]
    def visualRegionForSelection(_selection):
        """QRegion QTableView.visualRegionForSelection(QItemSelection _selection)"""
        return QRegion()
    def setSelection(_rect, _command):
        """None QTableView.setSelection(QRect _rect, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def moveCursor(_cursorAction, _modifiers):
        """QModelIndex QTableView.moveCursor(QAbstractItemView.CursorAction _cursorAction, Qt.KeyboardModifiers _modifiers)"""
        return QModelIndex()
    def verticalOffset():
        """int QTableView.verticalOffset()"""
        return int()
    def horizontalOffset():
        """int QTableView.horizontalOffset()"""
        return int()
    def timerEvent(_event):
        """None QTableView.timerEvent(QTimerEvent _event)"""
        return None
    def paintEvent(_e):
        """None QTableView.paintEvent(QPaintEvent _e)"""
        return None
    def viewOptions():
        """QStyleOptionViewItem QTableView.viewOptions()"""
        return QStyleOptionViewItem()
    def scrollContentsBy(_dx, _dy):
        """None QTableView.scrollContentsBy(int _dx, int _dy)"""
        return None
    def columnCountChanged(_oldCount, _newCount):
        """None QTableView.columnCountChanged(int _oldCount, int _newCount)"""
        return None
    def rowCountChanged(_oldCount, _newCount):
        """None QTableView.rowCountChanged(int _oldCount, int _newCount)"""
        return None
    def columnResized(_column, _oldWidth, _newWidth):
        """None QTableView.columnResized(int _column, int _oldWidth, int _newWidth)"""
        return None
    def rowResized(_row, _oldHeight, _newHeight):
        """None QTableView.rowResized(int _row, int _oldHeight, int _newHeight)"""
        return None
    def columnMoved(_column, _oldIndex, _newIndex):
        """None QTableView.columnMoved(int _column, int _oldIndex, int _newIndex)"""
        return None
    def rowMoved(_row, _oldIndex, _newIndex):
        """None QTableView.rowMoved(int _row, int _oldIndex, int _newIndex)"""
        return None
    def sortByColumn(_column):
        """None QTableView.sortByColumn(int _column)"""
        return None
    def sortByColumn(_column, _order):
        """None QTableView.sortByColumn(int _column, Qt.SortOrder _order)"""
        return None
    def resizeColumnsToContents():
        """None QTableView.resizeColumnsToContents()"""
        return None
    def resizeColumnToContents(_column):
        """None QTableView.resizeColumnToContents(int _column)"""
        return None
    def resizeRowsToContents():
        """None QTableView.resizeRowsToContents()"""
        return None
    def resizeRowToContents(_row):
        """None QTableView.resizeRowToContents(int _row)"""
        return None
    def showColumn(_column):
        """None QTableView.showColumn(int _column)"""
        return None
    def showRow(_row):
        """None QTableView.showRow(int _row)"""
        return None
    def hideColumn(_column):
        """None QTableView.hideColumn(int _column)"""
        return None
    def hideRow(_row):
        """None QTableView.hideRow(int _row)"""
        return None
    def selectColumn(_column):
        """None QTableView.selectColumn(int _column)"""
        return None
    def selectRow(_row):
        """None QTableView.selectRow(int _row)"""
        return None
    def indexAt(_p):
        """QModelIndex QTableView.indexAt(QPoint _p)"""
        return QModelIndex()
    def scrollTo(_index, _hint):
        """None QTableView.scrollTo(QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def visualRect(_index):
        """QRect QTableView.visualRect(QModelIndex _index)"""
        return QRect()
    def setGridStyle(_style):
        """None QTableView.setGridStyle(Qt.PenStyle _style)"""
        return None
    def gridStyle():
        """Qt.PenStyle QTableView.gridStyle()"""
        return Qt.PenStyle()
    def setShowGrid(_show):
        """None QTableView.setShowGrid(bool _show)"""
        return None
    def showGrid():
        """bool QTableView.showGrid()"""
        return bool()
    def setColumnHidden(_column, _hide):
        """None QTableView.setColumnHidden(int _column, bool _hide)"""
        return None
    def isColumnHidden(_column):
        """bool QTableView.isColumnHidden(int _column)"""
        return bool()
    def setRowHidden(_row, _hide):
        """None QTableView.setRowHidden(int _row, bool _hide)"""
        return None
    def isRowHidden(_row):
        """bool QTableView.isRowHidden(int _row)"""
        return bool()
    def columnAt(_x):
        """int QTableView.columnAt(int _x)"""
        return int()
    def columnWidth(_column):
        """int QTableView.columnWidth(int _column)"""
        return int()
    def setColumnWidth(_column, _width):
        """None QTableView.setColumnWidth(int _column, int _width)"""
        return None
    def columnViewportPosition(_column):
        """int QTableView.columnViewportPosition(int _column)"""
        return int()
    def rowAt(_y):
        """int QTableView.rowAt(int _y)"""
        return int()
    def rowHeight(_row):
        """int QTableView.rowHeight(int _row)"""
        return int()
    def setRowHeight(_row, _height):
        """None QTableView.setRowHeight(int _row, int _height)"""
        return None
    def rowViewportPosition(_row):
        """int QTableView.rowViewportPosition(int _row)"""
        return int()
    def setVerticalHeader(_header):
        """None QTableView.setVerticalHeader(QHeaderView _header)"""
        return None
    def setHorizontalHeader(_header):
        """None QTableView.setHorizontalHeader(QHeaderView _header)"""
        return None
    def verticalHeader():
        """QHeaderView QTableView.verticalHeader()"""
        return QHeaderView()
    def horizontalHeader():
        """QHeaderView QTableView.horizontalHeader()"""
        return QHeaderView()
    def setSelectionModel(_selectionModel):
        """None QTableView.setSelectionModel(QItemSelectionModel _selectionModel)"""
        return None
    def setRootIndex(_index):
        """None QTableView.setRootIndex(QModelIndex _index)"""
        return None
    def setModel(_model):
        """None QTableView.setModel(QAbstractItemModel _model)"""
        return None


class QTableWidgetSelectionRange():
    """"""
    def __init__():
        """None QTableWidgetSelectionRange.__init__()"""
        return None
    def __init__(_top, _left, _bottom, _right):
        """None QTableWidgetSelectionRange.__init__(int _top, int _left, int _bottom, int _right)"""
        return None
    def __init__(_other):
        """None QTableWidgetSelectionRange.__init__(QTableWidgetSelectionRange _other)"""
        return None
    def columnCount():
        """int QTableWidgetSelectionRange.columnCount()"""
        return int()
    def rowCount():
        """int QTableWidgetSelectionRange.rowCount()"""
        return int()
    def rightColumn():
        """int QTableWidgetSelectionRange.rightColumn()"""
        return int()
    def leftColumn():
        """int QTableWidgetSelectionRange.leftColumn()"""
        return int()
    def bottomRow():
        """int QTableWidgetSelectionRange.bottomRow()"""
        return int()
    def topRow():
        """int QTableWidgetSelectionRange.topRow()"""
        return int()


class QTableWidgetItem():
    """"""
    Type = int() # QTableWidgetItem.ItemType enum
    UserType = int() # QTableWidgetItem.ItemType enum

    def __init__(_type):
        """None QTableWidgetItem.__init__(int _type)"""
        return None
    def __init__(_text, _type):
        """None QTableWidgetItem.__init__(QString _text, int _type)"""
        return None
    def __init__(_icon, _text, _type):
        """None QTableWidgetItem.__init__(QIcon _icon, QString _text, int _type)"""
        return None
    def __init__(_other):
        """None QTableWidgetItem.__init__(QTableWidgetItem _other)"""
        return None
    def __ge__(_other):
        """bool QTableWidgetItem.__ge__(QTableWidgetItem _other)"""
        return bool()
    def isSelected():
        """bool QTableWidgetItem.isSelected()"""
        return bool()
    def setSelected(_aselect):
        """None QTableWidgetItem.setSelected(bool _aselect)"""
        return None
    def column():
        """int QTableWidgetItem.column()"""
        return int()
    def row():
        """int QTableWidgetItem.row()"""
        return int()
    def setForeground(_brush):
        """None QTableWidgetItem.setForeground(QBrush _brush)"""
        return None
    def foreground():
        """QBrush QTableWidgetItem.foreground()"""
        return QBrush()
    def setBackground(_brush):
        """None QTableWidgetItem.setBackground(QBrush _brush)"""
        return None
    def background():
        """QBrush QTableWidgetItem.background()"""
        return QBrush()
    def setSizeHint(_size):
        """None QTableWidgetItem.setSizeHint(QSize _size)"""
        return None
    def sizeHint():
        """QSize QTableWidgetItem.sizeHint()"""
        return QSize()
    def setFont(_afont):
        """None QTableWidgetItem.setFont(QFont _afont)"""
        return None
    def setWhatsThis(_awhatsThis):
        """None QTableWidgetItem.setWhatsThis(QString _awhatsThis)"""
        return None
    def setToolTip(_atoolTip):
        """None QTableWidgetItem.setToolTip(QString _atoolTip)"""
        return None
    def setStatusTip(_astatusTip):
        """None QTableWidgetItem.setStatusTip(QString _astatusTip)"""
        return None
    def setIcon(_aicon):
        """None QTableWidgetItem.setIcon(QIcon _aicon)"""
        return None
    def setText(_atext):
        """None QTableWidgetItem.setText(QString _atext)"""
        return None
    def setFlags(_aflags):
        """None QTableWidgetItem.setFlags(Qt.ItemFlags _aflags)"""
        return None
    def type():
        """int QTableWidgetItem.type()"""
        return int()
    def write(_out):
        """None QTableWidgetItem.write(QDataStream _out)"""
        return None
    def read(_in):
        """None QTableWidgetItem.read(QDataStream _in)"""
        return None
    def __lt__(_other):
        """bool QTableWidgetItem.__lt__(QTableWidgetItem _other)"""
        return bool()
    def setData(_role, _value):
        """None QTableWidgetItem.setData(int _role, QVariant _value)"""
        return None
    def data(_role):
        """QVariant QTableWidgetItem.data(int _role)"""
        return QVariant()
    def setCheckState(_state):
        """None QTableWidgetItem.setCheckState(Qt.CheckState _state)"""
        return None
    def checkState():
        """Qt.CheckState QTableWidgetItem.checkState()"""
        return Qt.CheckState()
    def setTextColor(_color):
        """None QTableWidgetItem.setTextColor(QColor _color)"""
        return None
    def textColor():
        """QColor QTableWidgetItem.textColor()"""
        return QColor()
    def setBackgroundColor(_color):
        """None QTableWidgetItem.setBackgroundColor(QColor _color)"""
        return None
    def backgroundColor():
        """QColor QTableWidgetItem.backgroundColor()"""
        return QColor()
    def setTextAlignment(_alignment):
        """None QTableWidgetItem.setTextAlignment(int _alignment)"""
        return None
    def textAlignment():
        """int QTableWidgetItem.textAlignment()"""
        return int()
    def font():
        """QFont QTableWidgetItem.font()"""
        return QFont()
    def whatsThis():
        """QString QTableWidgetItem.whatsThis()"""
        return QString()
    def toolTip():
        """QString QTableWidgetItem.toolTip()"""
        return QString()
    def statusTip():
        """QString QTableWidgetItem.statusTip()"""
        return QString()
    def icon():
        """QIcon QTableWidgetItem.icon()"""
        return QIcon()
    def text():
        """QString QTableWidgetItem.text()"""
        return QString()
    def flags():
        """Qt.ItemFlags QTableWidgetItem.flags()"""
        return Qt.ItemFlags()
    def tableWidget():
        """QTableWidget QTableWidgetItem.tableWidget()"""
        return QTableWidget()
    def clone():
        """QTableWidgetItem QTableWidgetItem.clone()"""
        return QTableWidgetItem()


class QTableWidget(QTableView):
    """"""
    def __init__(_parent):
        """None QTableWidget.__init__(QWidget _parent)"""
        return None
    def __init__(_rows, _columns, _parent):
        """None QTableWidget.__init__(int _rows, int _columns, QWidget _parent)"""
        return None
    def dropEvent(_event):
        """None QTableWidget.dropEvent(QDropEvent _event)"""
        return None
    def event(_e):
        """bool QTableWidget.event(QEvent _e)"""
        return bool()
    def itemFromIndex(_index):
        """QTableWidgetItem QTableWidget.itemFromIndex(QModelIndex _index)"""
        return QTableWidgetItem()
    def indexFromItem(_item):
        """QModelIndex QTableWidget.indexFromItem(QTableWidgetItem _item)"""
        return QModelIndex()
    def items(_data):
        """list-of-QTableWidgetItem QTableWidget.items(QMimeData _data)"""
        return [QTableWidgetItem()]
    def supportedDropActions():
        """Qt.DropActions QTableWidget.supportedDropActions()"""
        return Qt.DropActions()
    def dropMimeData(_row, _column, _data, _action):
        """bool QTableWidget.dropMimeData(int _row, int _column, QMimeData _data, Qt.DropAction _action)"""
        return bool()
    def mimeData(_items):
        """QMimeData QTableWidget.mimeData(list-of-QTableWidgetItem _items)"""
        return QMimeData()
    def mimeTypes():
        """QStringList QTableWidget.mimeTypes()"""
        return QStringList()
    def clearContents():
        """None QTableWidget.clearContents()"""
        return None
    def clear():
        """None QTableWidget.clear()"""
        return None
    def removeColumn(_column):
        """None QTableWidget.removeColumn(int _column)"""
        return None
    def removeRow(_row):
        """None QTableWidget.removeRow(int _row)"""
        return None
    def insertColumn(_column):
        """None QTableWidget.insertColumn(int _column)"""
        return None
    def insertRow(_row):
        """None QTableWidget.insertRow(int _row)"""
        return None
    def scrollToItem(_item, _hint):
        """None QTableWidget.scrollToItem(QTableWidgetItem _item, QAbstractItemView.ScrollHint _hint)"""
        return None
    def setItemPrototype(_item):
        """None QTableWidget.setItemPrototype(QTableWidgetItem _item)"""
        return None
    def itemPrototype():
        """QTableWidgetItem QTableWidget.itemPrototype()"""
        return QTableWidgetItem()
    def visualItemRect(_item):
        """QRect QTableWidget.visualItemRect(QTableWidgetItem _item)"""
        return QRect()
    def itemAt(_p):
        """QTableWidgetItem QTableWidget.itemAt(QPoint _p)"""
        return QTableWidgetItem()
    def itemAt(_ax, _ay):
        """QTableWidgetItem QTableWidget.itemAt(int _ax, int _ay)"""
        return QTableWidgetItem()
    def visualColumn(_logicalColumn):
        """int QTableWidget.visualColumn(int _logicalColumn)"""
        return int()
    def visualRow(_logicalRow):
        """int QTableWidget.visualRow(int _logicalRow)"""
        return int()
    def findItems(_text, _flags):
        """list-of-QTableWidgetItem QTableWidget.findItems(QString _text, Qt.MatchFlags _flags)"""
        return [QTableWidgetItem()]
    def selectedItems():
        """list-of-QTableWidgetItem QTableWidget.selectedItems()"""
        return [QTableWidgetItem()]
    def selectedRanges():
        """list-of-QTableWidgetSelectionRange QTableWidget.selectedRanges()"""
        return [QTableWidgetSelectionRange()]
    def setRangeSelected(_range, _select):
        """None QTableWidget.setRangeSelected(QTableWidgetSelectionRange _range, bool _select)"""
        return None
    def setItemSelected(_item, _select):
        """None QTableWidget.setItemSelected(QTableWidgetItem _item, bool _select)"""
        return None
    def isItemSelected(_item):
        """bool QTableWidget.isItemSelected(QTableWidgetItem _item)"""
        return bool()
    def removeCellWidget(_arow, _acolumn):
        """None QTableWidget.removeCellWidget(int _arow, int _acolumn)"""
        return None
    def setCellWidget(_row, _column, _widget):
        """None QTableWidget.setCellWidget(int _row, int _column, QWidget _widget)"""
        return None
    def cellWidget(_row, _column):
        """QWidget QTableWidget.cellWidget(int _row, int _column)"""
        return QWidget()
    def closePersistentEditor(_item):
        """None QTableWidget.closePersistentEditor(QTableWidgetItem _item)"""
        return None
    def openPersistentEditor(_item):
        """None QTableWidget.openPersistentEditor(QTableWidgetItem _item)"""
        return None
    def editItem(_item):
        """None QTableWidget.editItem(QTableWidgetItem _item)"""
        return None
    def isSortingEnabled():
        """bool QTableWidget.isSortingEnabled()"""
        return bool()
    def setSortingEnabled(_enable):
        """None QTableWidget.setSortingEnabled(bool _enable)"""
        return None
    def sortItems(_column, _order):
        """None QTableWidget.sortItems(int _column, Qt.SortOrder _order)"""
        return None
    def setCurrentCell(_row, _column):
        """None QTableWidget.setCurrentCell(int _row, int _column)"""
        return None
    def setCurrentCell(_row, _column, _command):
        """None QTableWidget.setCurrentCell(int _row, int _column, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def setCurrentItem(_item):
        """None QTableWidget.setCurrentItem(QTableWidgetItem _item)"""
        return None
    def setCurrentItem(_item, _command):
        """None QTableWidget.setCurrentItem(QTableWidgetItem _item, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def currentItem():
        """QTableWidgetItem QTableWidget.currentItem()"""
        return QTableWidgetItem()
    def currentColumn():
        """int QTableWidget.currentColumn()"""
        return int()
    def currentRow():
        """int QTableWidget.currentRow()"""
        return int()
    def setHorizontalHeaderLabels(_labels):
        """None QTableWidget.setHorizontalHeaderLabels(QStringList _labels)"""
        return None
    def setVerticalHeaderLabels(_labels):
        """None QTableWidget.setVerticalHeaderLabels(QStringList _labels)"""
        return None
    def takeHorizontalHeaderItem(_column):
        """QTableWidgetItem QTableWidget.takeHorizontalHeaderItem(int _column)"""
        return QTableWidgetItem()
    def setHorizontalHeaderItem(_column, _item):
        """None QTableWidget.setHorizontalHeaderItem(int _column, QTableWidgetItem _item)"""
        return None
    def horizontalHeaderItem(_column):
        """QTableWidgetItem QTableWidget.horizontalHeaderItem(int _column)"""
        return QTableWidgetItem()
    def takeVerticalHeaderItem(_row):
        """QTableWidgetItem QTableWidget.takeVerticalHeaderItem(int _row)"""
        return QTableWidgetItem()
    def setVerticalHeaderItem(_row, _item):
        """None QTableWidget.setVerticalHeaderItem(int _row, QTableWidgetItem _item)"""
        return None
    def verticalHeaderItem(_row):
        """QTableWidgetItem QTableWidget.verticalHeaderItem(int _row)"""
        return QTableWidgetItem()
    def takeItem(_row, _column):
        """QTableWidgetItem QTableWidget.takeItem(int _row, int _column)"""
        return QTableWidgetItem()
    def setItem(_row, _column, _item):
        """None QTableWidget.setItem(int _row, int _column, QTableWidgetItem _item)"""
        return None
    def item(_row, _column):
        """QTableWidgetItem QTableWidget.item(int _row, int _column)"""
        return QTableWidgetItem()
    def column(_item):
        """int QTableWidget.column(QTableWidgetItem _item)"""
        return int()
    def row(_item):
        """int QTableWidget.row(QTableWidgetItem _item)"""
        return int()
    def columnCount():
        """int QTableWidget.columnCount()"""
        return int()
    def setColumnCount(_columns):
        """None QTableWidget.setColumnCount(int _columns)"""
        return None
    def rowCount():
        """int QTableWidget.rowCount()"""
        return int()
    def setRowCount(_rows):
        """None QTableWidget.setRowCount(int _rows)"""
        return None


class QTabWidget(QWidget):
    """"""
    Rounded = int() # QTabWidget.TabShape enum
    Triangular = int() # QTabWidget.TabShape enum

    North = int() # QTabWidget.TabPosition enum
    South = int() # QTabWidget.TabPosition enum
    West = int() # QTabWidget.TabPosition enum
    East = int() # QTabWidget.TabPosition enum

    def __init__(_parent):
        """None QTabWidget.__init__(QWidget _parent)"""
        return None
    def setDocumentMode(_set):
        """None QTabWidget.setDocumentMode(bool _set)"""
        return None
    def documentMode():
        """bool QTabWidget.documentMode()"""
        return bool()
    def setMovable(_movable):
        """None QTabWidget.setMovable(bool _movable)"""
        return None
    def isMovable():
        """bool QTabWidget.isMovable()"""
        return bool()
    def setTabsClosable(_closeable):
        """None QTabWidget.setTabsClosable(bool _closeable)"""
        return None
    def tabsClosable():
        """bool QTabWidget.tabsClosable()"""
        return bool()
    def setUsesScrollButtons(_useButtons):
        """None QTabWidget.setUsesScrollButtons(bool _useButtons)"""
        return None
    def usesScrollButtons():
        """bool QTabWidget.usesScrollButtons()"""
        return bool()
    def setIconSize(_size):
        """None QTabWidget.setIconSize(QSize _size)"""
        return None
    def iconSize():
        """QSize QTabWidget.iconSize()"""
        return QSize()
    def setElideMode():
        """Qt.TextElideMode QTabWidget.setElideMode()"""
        return Qt.TextElideMode()
    def elideMode():
        """Qt.TextElideMode QTabWidget.elideMode()"""
        return Qt.TextElideMode()
    def changeEvent():
        """QEvent QTabWidget.changeEvent()"""
        return QEvent()
    def tabBar():
        """QTabBar QTabWidget.tabBar()"""
        return QTabBar()
    def setTabBar():
        """QTabBar QTabWidget.setTabBar()"""
        return QTabBar()
    def paintEvent():
        """QPaintEvent QTabWidget.paintEvent()"""
        return QPaintEvent()
    def keyPressEvent():
        """QKeyEvent QTabWidget.keyPressEvent()"""
        return QKeyEvent()
    def resizeEvent():
        """QResizeEvent QTabWidget.resizeEvent()"""
        return QResizeEvent()
    def showEvent():
        """QShowEvent QTabWidget.showEvent()"""
        return QShowEvent()
    def event():
        """QEvent QTabWidget.event()"""
        return QEvent()
    def tabRemoved(_index):
        """None QTabWidget.tabRemoved(int _index)"""
        return None
    def tabInserted(_index):
        """None QTabWidget.tabInserted(int _index)"""
        return None
    def initStyleOption(_option):
        """None QTabWidget.initStyleOption(QStyleOptionTabWidgetFrame _option)"""
        return None
    def setCurrentWidget(_widget):
        """None QTabWidget.setCurrentWidget(QWidget _widget)"""
        return None
    def setCurrentIndex(_index):
        """None QTabWidget.setCurrentIndex(int _index)"""
        return None
    def cornerWidget(_corner):
        """QWidget QTabWidget.cornerWidget(Qt.Corner _corner)"""
        return QWidget()
    def setCornerWidget(_widget, _corner):
        """None QTabWidget.setCornerWidget(QWidget _widget, Qt.Corner _corner)"""
        return None
    def minimumSizeHint():
        """QSize QTabWidget.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QTabWidget.sizeHint()"""
        return QSize()
    def setTabShape(_s):
        """None QTabWidget.setTabShape(QTabWidget.TabShape _s)"""
        return None
    def tabShape():
        """QTabWidget.TabShape QTabWidget.tabShape()"""
        return QTabWidget.TabShape()
    def setTabPosition():
        """QTabWidget.TabPosition QTabWidget.setTabPosition()"""
        return QTabWidget.TabPosition()
    def tabPosition():
        """QTabWidget.TabPosition QTabWidget.tabPosition()"""
        return QTabWidget.TabPosition()
    def __len__():
        """ QTabWidget.__len__()"""
        return ()
    def count():
        """int QTabWidget.count()"""
        return int()
    def indexOf(_widget):
        """int QTabWidget.indexOf(QWidget _widget)"""
        return int()
    def widget(_index):
        """QWidget QTabWidget.widget(int _index)"""
        return QWidget()
    def currentWidget():
        """QWidget QTabWidget.currentWidget()"""
        return QWidget()
    def currentIndex():
        """int QTabWidget.currentIndex()"""
        return int()
    def tabWhatsThis(_index):
        """QString QTabWidget.tabWhatsThis(int _index)"""
        return QString()
    def setTabWhatsThis(_index, _text):
        """None QTabWidget.setTabWhatsThis(int _index, QString _text)"""
        return None
    def tabToolTip(_index):
        """QString QTabWidget.tabToolTip(int _index)"""
        return QString()
    def setTabToolTip(_index, _tip):
        """None QTabWidget.setTabToolTip(int _index, QString _tip)"""
        return None
    def setTabIcon(_index, _icon):
        """None QTabWidget.setTabIcon(int _index, QIcon _icon)"""
        return None
    def tabIcon(_index):
        """QIcon QTabWidget.tabIcon(int _index)"""
        return QIcon()
    def setTabText(_index):
        """QString QTabWidget.setTabText(int _index)"""
        return QString()
    def tabText(_index):
        """QString QTabWidget.tabText(int _index)"""
        return QString()
    def setTabEnabled(_index):
        """bool QTabWidget.setTabEnabled(int _index)"""
        return bool()
    def isTabEnabled(_index):
        """bool QTabWidget.isTabEnabled(int _index)"""
        return bool()
    def removeTab(_index):
        """None QTabWidget.removeTab(int _index)"""
        return None
    def insertTab(_index, _widget):
        """QString QTabWidget.insertTab(int _index, QWidget _widget)"""
        return QString()
    def insertTab(_index, _widget, _icon, _label):
        """int QTabWidget.insertTab(int _index, QWidget _widget, QIcon _icon, QString _label)"""
        return int()
    def addTab(_widget):
        """QString QTabWidget.addTab(QWidget _widget)"""
        return QString()
    def addTab(_widget, _icon, _label):
        """int QTabWidget.addTab(QWidget _widget, QIcon _icon, QString _label)"""
        return int()
    def clear():
        """None QTabWidget.clear()"""
        return None


class QTextEdit(QAbstractScrollArea):
    """"""
    AutoNone = int() # QTextEdit.AutoFormattingFlag enum
    AutoBulletList = int() # QTextEdit.AutoFormattingFlag enum
    AutoAll = int() # QTextEdit.AutoFormattingFlag enum

    NoWrap = int() # QTextEdit.LineWrapMode enum
    WidgetWidth = int() # QTextEdit.LineWrapMode enum
    FixedPixelWidth = int() # QTextEdit.LineWrapMode enum
    FixedColumnWidth = int() # QTextEdit.LineWrapMode enum

    def __init__(_parent):
        """None QTextEdit.__init__(QWidget _parent)"""
        return None
    def __init__(_text, _parent):
        """None QTextEdit.__init__(QString _text, QWidget _parent)"""
        return None
    def setTextBackgroundColor(_c):
        """None QTextEdit.setTextBackgroundColor(QColor _c)"""
        return None
    def textBackgroundColor():
        """QColor QTextEdit.textBackgroundColor()"""
        return QColor()
    def scrollContentsBy(_dx, _dy):
        """None QTextEdit.scrollContentsBy(int _dx, int _dy)"""
        return None
    def inputMethodQuery(_property):
        """QVariant QTextEdit.inputMethodQuery(Qt.InputMethodQuery _property)"""
        return QVariant()
    def inputMethodEvent():
        """QInputMethodEvent QTextEdit.inputMethodEvent()"""
        return QInputMethodEvent()
    def insertFromMimeData(_source):
        """None QTextEdit.insertFromMimeData(QMimeData _source)"""
        return None
    def canInsertFromMimeData(_source):
        """bool QTextEdit.canInsertFromMimeData(QMimeData _source)"""
        return bool()
    def createMimeDataFromSelection():
        """QMimeData QTextEdit.createMimeDataFromSelection()"""
        return QMimeData()
    def wheelEvent(_e):
        """None QTextEdit.wheelEvent(QWheelEvent _e)"""
        return None
    def changeEvent(_e):
        """None QTextEdit.changeEvent(QEvent _e)"""
        return None
    def showEvent():
        """QShowEvent QTextEdit.showEvent()"""
        return QShowEvent()
    def focusOutEvent(_e):
        """None QTextEdit.focusOutEvent(QFocusEvent _e)"""
        return None
    def focusInEvent(_e):
        """None QTextEdit.focusInEvent(QFocusEvent _e)"""
        return None
    def dropEvent(_e):
        """None QTextEdit.dropEvent(QDropEvent _e)"""
        return None
    def dragMoveEvent(_e):
        """None QTextEdit.dragMoveEvent(QDragMoveEvent _e)"""
        return None
    def dragLeaveEvent(_e):
        """None QTextEdit.dragLeaveEvent(QDragLeaveEvent _e)"""
        return None
    def dragEnterEvent(_e):
        """None QTextEdit.dragEnterEvent(QDragEnterEvent _e)"""
        return None
    def contextMenuEvent(_e):
        """None QTextEdit.contextMenuEvent(QContextMenuEvent _e)"""
        return None
    def focusNextPrevChild(_next):
        """bool QTextEdit.focusNextPrevChild(bool _next)"""
        return bool()
    def mouseDoubleClickEvent(_e):
        """None QTextEdit.mouseDoubleClickEvent(QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(_e):
        """None QTextEdit.mouseReleaseEvent(QMouseEvent _e)"""
        return None
    def mouseMoveEvent(_e):
        """None QTextEdit.mouseMoveEvent(QMouseEvent _e)"""
        return None
    def mousePressEvent(_e):
        """None QTextEdit.mousePressEvent(QMouseEvent _e)"""
        return None
    def paintEvent(_e):
        """None QTextEdit.paintEvent(QPaintEvent _e)"""
        return None
    def resizeEvent():
        """QResizeEvent QTextEdit.resizeEvent()"""
        return QResizeEvent()
    def keyReleaseEvent(_e):
        """None QTextEdit.keyReleaseEvent(QKeyEvent _e)"""
        return None
    def keyPressEvent(_e):
        """None QTextEdit.keyPressEvent(QKeyEvent _e)"""
        return None
    def timerEvent(_e):
        """None QTextEdit.timerEvent(QTimerEvent _e)"""
        return None
    def event(_e):
        """bool QTextEdit.event(QEvent _e)"""
        return bool()
    def zoomOut(_range):
        """None QTextEdit.zoomOut(int _range)"""
        return None
    def zoomIn(_range):
        """None QTextEdit.zoomIn(int _range)"""
        return None
    def undo():
        """None QTextEdit.undo()"""
        return None
    def redo():
        """None QTextEdit.redo()"""
        return None
    def scrollToAnchor(_name):
        """None QTextEdit.scrollToAnchor(QString _name)"""
        return None
    def insertHtml(_text):
        """None QTextEdit.insertHtml(QString _text)"""
        return None
    def insertPlainText(_text):
        """None QTextEdit.insertPlainText(QString _text)"""
        return None
    def selectAll():
        """None QTextEdit.selectAll()"""
        return None
    def clear():
        """None QTextEdit.clear()"""
        return None
    def paste():
        """None QTextEdit.paste()"""
        return None
    def copy():
        """None QTextEdit.copy()"""
        return None
    def cut():
        """None QTextEdit.cut()"""
        return None
    def setHtml(_text):
        """None QTextEdit.setHtml(QString _text)"""
        return None
    def setPlainText(_text):
        """None QTextEdit.setPlainText(QString _text)"""
        return None
    def setAlignment(_a):
        """None QTextEdit.setAlignment(Qt.Alignment _a)"""
        return None
    def setCurrentFont(_f):
        """None QTextEdit.setCurrentFont(QFont _f)"""
        return None
    def setTextColor(_c):
        """None QTextEdit.setTextColor(QColor _c)"""
        return None
    def setText(_text):
        """None QTextEdit.setText(QString _text)"""
        return None
    def setFontItalic(_b):
        """None QTextEdit.setFontItalic(bool _b)"""
        return None
    def setFontUnderline(_b):
        """None QTextEdit.setFontUnderline(bool _b)"""
        return None
    def setFontWeight(_w):
        """None QTextEdit.setFontWeight(int _w)"""
        return None
    def setFontFamily(_fontFamily):
        """None QTextEdit.setFontFamily(QString _fontFamily)"""
        return None
    def setFontPointSize(_s):
        """None QTextEdit.setFontPointSize(float _s)"""
        return None
    def print_(_printer):
        """None QTextEdit.print_(QPrinter _printer)"""
        return None
    def moveCursor(_operation, _mode):
        """None QTextEdit.moveCursor(QTextCursor.MoveOperation _operation, QTextCursor.MoveMode _mode)"""
        return None
    def canPaste():
        """bool QTextEdit.canPaste()"""
        return bool()
    def extraSelections():
        """list-of-QTextEdit.ExtraSelection QTextEdit.extraSelections()"""
        return [QTextEdit.ExtraSelection()]
    def setExtraSelections(_selections):
        """None QTextEdit.setExtraSelections(list-of-QTextEdit.ExtraSelection _selections)"""
        return None
    def cursorWidth():
        """int QTextEdit.cursorWidth()"""
        return int()
    def setCursorWidth(_width):
        """None QTextEdit.setCursorWidth(int _width)"""
        return None
    def textInteractionFlags():
        """Qt.TextInteractionFlags QTextEdit.textInteractionFlags()"""
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(_flags):
        """None QTextEdit.setTextInteractionFlags(Qt.TextInteractionFlags _flags)"""
        return None
    def setAcceptRichText(_accept):
        """None QTextEdit.setAcceptRichText(bool _accept)"""
        return None
    def acceptRichText():
        """bool QTextEdit.acceptRichText()"""
        return bool()
    def setTabStopWidth(_width):
        """None QTextEdit.setTabStopWidth(int _width)"""
        return None
    def tabStopWidth():
        """int QTextEdit.tabStopWidth()"""
        return int()
    def setOverwriteMode(_overwrite):
        """None QTextEdit.setOverwriteMode(bool _overwrite)"""
        return None
    def overwriteMode():
        """bool QTextEdit.overwriteMode()"""
        return bool()
    def anchorAt(_pos):
        """QString QTextEdit.anchorAt(QPoint _pos)"""
        return QString()
    def cursorRect(_cursor):
        """QRect QTextEdit.cursorRect(QTextCursor _cursor)"""
        return QRect()
    def cursorRect():
        """QRect QTextEdit.cursorRect()"""
        return QRect()
    def cursorForPosition(_pos):
        """QTextCursor QTextEdit.cursorForPosition(QPoint _pos)"""
        return QTextCursor()
    def createStandardContextMenu():
        """QMenu QTextEdit.createStandardContextMenu()"""
        return QMenu()
    def createStandardContextMenu(_position):
        """QMenu QTextEdit.createStandardContextMenu(QPoint _position)"""
        return QMenu()
    def loadResource(_type, _name):
        """QVariant QTextEdit.loadResource(int _type, QUrl _name)"""
        return QVariant()
    def ensureCursorVisible():
        """None QTextEdit.ensureCursorVisible()"""
        return None
    def append(_text):
        """None QTextEdit.append(QString _text)"""
        return None
    def toHtml():
        """QString QTextEdit.toHtml()"""
        return QString()
    def toPlainText():
        """QString QTextEdit.toPlainText()"""
        return QString()
    def find(_exp, _options):
        """bool QTextEdit.find(QString _exp, QTextDocument.FindFlags _options)"""
        return bool()
    def setWordWrapMode(_policy):
        """None QTextEdit.setWordWrapMode(QTextOption.WrapMode _policy)"""
        return None
    def wordWrapMode():
        """QTextOption.WrapMode QTextEdit.wordWrapMode()"""
        return QTextOption.WrapMode()
    def setLineWrapColumnOrWidth(_w):
        """None QTextEdit.setLineWrapColumnOrWidth(int _w)"""
        return None
    def lineWrapColumnOrWidth():
        """int QTextEdit.lineWrapColumnOrWidth()"""
        return int()
    def setLineWrapMode(_mode):
        """None QTextEdit.setLineWrapMode(QTextEdit.LineWrapMode _mode)"""
        return None
    def lineWrapMode():
        """QTextEdit.LineWrapMode QTextEdit.lineWrapMode()"""
        return QTextEdit.LineWrapMode()
    def setUndoRedoEnabled(_enable):
        """None QTextEdit.setUndoRedoEnabled(bool _enable)"""
        return None
    def isUndoRedoEnabled():
        """bool QTextEdit.isUndoRedoEnabled()"""
        return bool()
    def documentTitle():
        """QString QTextEdit.documentTitle()"""
        return QString()
    def setDocumentTitle(_title):
        """None QTextEdit.setDocumentTitle(QString _title)"""
        return None
    def setTabChangesFocus(_b):
        """None QTextEdit.setTabChangesFocus(bool _b)"""
        return None
    def tabChangesFocus():
        """bool QTextEdit.tabChangesFocus()"""
        return bool()
    def setAutoFormatting(_features):
        """None QTextEdit.setAutoFormatting(QTextEdit.AutoFormatting _features)"""
        return None
    def autoFormatting():
        """QTextEdit.AutoFormatting QTextEdit.autoFormatting()"""
        return QTextEdit.AutoFormatting()
    def currentCharFormat():
        """QTextCharFormat QTextEdit.currentCharFormat()"""
        return QTextCharFormat()
    def setCurrentCharFormat(_format):
        """None QTextEdit.setCurrentCharFormat(QTextCharFormat _format)"""
        return None
    def mergeCurrentCharFormat(_modifier):
        """None QTextEdit.mergeCurrentCharFormat(QTextCharFormat _modifier)"""
        return None
    def alignment():
        """Qt.Alignment QTextEdit.alignment()"""
        return Qt.Alignment()
    def currentFont():
        """QFont QTextEdit.currentFont()"""
        return QFont()
    def textColor():
        """QColor QTextEdit.textColor()"""
        return QColor()
    def fontItalic():
        """bool QTextEdit.fontItalic()"""
        return bool()
    def fontUnderline():
        """bool QTextEdit.fontUnderline()"""
        return bool()
    def fontWeight():
        """int QTextEdit.fontWeight()"""
        return int()
    def fontFamily():
        """QString QTextEdit.fontFamily()"""
        return QString()
    def fontPointSize():
        """float QTextEdit.fontPointSize()"""
        return float()
    def setReadOnly(_ro):
        """None QTextEdit.setReadOnly(bool _ro)"""
        return None
    def isReadOnly():
        """bool QTextEdit.isReadOnly()"""
        return bool()
    def textCursor():
        """QTextCursor QTextEdit.textCursor()"""
        return QTextCursor()
    def setTextCursor(_cursor):
        """None QTextEdit.setTextCursor(QTextCursor _cursor)"""
        return None
    def document():
        """QTextDocument QTextEdit.document()"""
        return QTextDocument()
    def setDocument(_document):
        """None QTextEdit.setDocument(QTextDocument _document)"""
        return None


class QTextBrowser(QTextEdit):
    """"""
    def __init__(_parent):
        """None QTextBrowser.__init__(QWidget _parent)"""
        return None
    def forwardHistoryCount():
        """int QTextBrowser.forwardHistoryCount()"""
        return int()
    def backwardHistoryCount():
        """int QTextBrowser.backwardHistoryCount()"""
        return int()
    def historyUrl():
        """int QTextBrowser.historyUrl()"""
        return int()
    def historyTitle():
        """int QTextBrowser.historyTitle()"""
        return int()
    def setOpenLinks(_open):
        """None QTextBrowser.setOpenLinks(bool _open)"""
        return None
    def openLinks():
        """bool QTextBrowser.openLinks()"""
        return bool()
    def setOpenExternalLinks(_open):
        """None QTextBrowser.setOpenExternalLinks(bool _open)"""
        return None
    def openExternalLinks():
        """bool QTextBrowser.openExternalLinks()"""
        return bool()
    def clearHistory():
        """None QTextBrowser.clearHistory()"""
        return None
    def isForwardAvailable():
        """bool QTextBrowser.isForwardAvailable()"""
        return bool()
    def isBackwardAvailable():
        """bool QTextBrowser.isBackwardAvailable()"""
        return bool()
    def paintEvent(_e):
        """None QTextBrowser.paintEvent(QPaintEvent _e)"""
        return None
    def focusNextPrevChild(_next):
        """bool QTextBrowser.focusNextPrevChild(bool _next)"""
        return bool()
    def focusOutEvent(_ev):
        """None QTextBrowser.focusOutEvent(QFocusEvent _ev)"""
        return None
    def mouseReleaseEvent(_ev):
        """None QTextBrowser.mouseReleaseEvent(QMouseEvent _ev)"""
        return None
    def mousePressEvent(_ev):
        """None QTextBrowser.mousePressEvent(QMouseEvent _ev)"""
        return None
    def mouseMoveEvent(_ev):
        """None QTextBrowser.mouseMoveEvent(QMouseEvent _ev)"""
        return None
    def keyPressEvent(_ev):
        """None QTextBrowser.keyPressEvent(QKeyEvent _ev)"""
        return None
    def event(_e):
        """bool QTextBrowser.event(QEvent _e)"""
        return bool()
    def reload():
        """None QTextBrowser.reload()"""
        return None
    def home():
        """None QTextBrowser.home()"""
        return None
    def forward():
        """None QTextBrowser.forward()"""
        return None
    def backward():
        """None QTextBrowser.backward()"""
        return None
    def setSource(_name):
        """None QTextBrowser.setSource(QUrl _name)"""
        return None
    def loadResource(_type, _name):
        """QVariant QTextBrowser.loadResource(int _type, QUrl _name)"""
        return QVariant()
    def setSearchPaths(_paths):
        """None QTextBrowser.setSearchPaths(QStringList _paths)"""
        return None
    def searchPaths():
        """QStringList QTextBrowser.searchPaths()"""
        return QStringList()
    def source():
        """QUrl QTextBrowser.source()"""
        return QUrl()


class QTextCursor():
    """"""
    WordUnderCursor = int() # QTextCursor.SelectionType enum
    LineUnderCursor = int() # QTextCursor.SelectionType enum
    BlockUnderCursor = int() # QTextCursor.SelectionType enum
    Document = int() # QTextCursor.SelectionType enum

    NoMove = int() # QTextCursor.MoveOperation enum
    Start = int() # QTextCursor.MoveOperation enum
    Up = int() # QTextCursor.MoveOperation enum
    StartOfLine = int() # QTextCursor.MoveOperation enum
    StartOfBlock = int() # QTextCursor.MoveOperation enum
    StartOfWord = int() # QTextCursor.MoveOperation enum
    PreviousBlock = int() # QTextCursor.MoveOperation enum
    PreviousCharacter = int() # QTextCursor.MoveOperation enum
    PreviousWord = int() # QTextCursor.MoveOperation enum
    Left = int() # QTextCursor.MoveOperation enum
    WordLeft = int() # QTextCursor.MoveOperation enum
    End = int() # QTextCursor.MoveOperation enum
    Down = int() # QTextCursor.MoveOperation enum
    EndOfLine = int() # QTextCursor.MoveOperation enum
    EndOfWord = int() # QTextCursor.MoveOperation enum
    EndOfBlock = int() # QTextCursor.MoveOperation enum
    NextBlock = int() # QTextCursor.MoveOperation enum
    NextCharacter = int() # QTextCursor.MoveOperation enum
    NextWord = int() # QTextCursor.MoveOperation enum
    Right = int() # QTextCursor.MoveOperation enum
    WordRight = int() # QTextCursor.MoveOperation enum
    NextCell = int() # QTextCursor.MoveOperation enum
    PreviousCell = int() # QTextCursor.MoveOperation enum
    NextRow = int() # QTextCursor.MoveOperation enum
    PreviousRow = int() # QTextCursor.MoveOperation enum

    MoveAnchor = int() # QTextCursor.MoveMode enum
    KeepAnchor = int() # QTextCursor.MoveMode enum

    def __init__():
        """None QTextCursor.__init__()"""
        return None
    def __init__(_document):
        """None QTextCursor.__init__(QTextDocument _document)"""
        return None
    def __init__(_frame):
        """None QTextCursor.__init__(QTextFrame _frame)"""
        return None
    def __init__(_block):
        """None QTextCursor.__init__(QTextBlock _block)"""
        return None
    def __init__(_cursor):
        """None QTextCursor.__init__(QTextCursor _cursor)"""
        return None
    def keepPositionOnInsert():
        """bool QTextCursor.keepPositionOnInsert()"""
        return bool()
    def setKeepPositionOnInsert(_b):
        """None QTextCursor.setKeepPositionOnInsert(bool _b)"""
        return None
    def verticalMovementX():
        """int QTextCursor.verticalMovementX()"""
        return int()
    def setVerticalMovementX(_x):
        """None QTextCursor.setVerticalMovementX(int _x)"""
        return None
    def positionInBlock():
        """int QTextCursor.positionInBlock()"""
        return int()
    def document():
        """QTextDocument QTextCursor.document()"""
        return QTextDocument()
    def setVisualNavigation(_b):
        """None QTextCursor.setVisualNavigation(bool _b)"""
        return None
    def visualNavigation():
        """bool QTextCursor.visualNavigation()"""
        return bool()
    def isCopyOf(_other):
        """bool QTextCursor.isCopyOf(QTextCursor _other)"""
        return bool()
    def __gt__(_rhs):
        """bool QTextCursor.__gt__(QTextCursor _rhs)"""
        return bool()
    def __ge__(_rhs):
        """bool QTextCursor.__ge__(QTextCursor _rhs)"""
        return bool()
    def __eq__(_rhs):
        """bool QTextCursor.__eq__(QTextCursor _rhs)"""
        return bool()
    def __le__(_rhs):
        """bool QTextCursor.__le__(QTextCursor _rhs)"""
        return bool()
    def __lt__(_rhs):
        """bool QTextCursor.__lt__(QTextCursor _rhs)"""
        return bool()
    def __ne__(_rhs):
        """bool QTextCursor.__ne__(QTextCursor _rhs)"""
        return bool()
    def columnNumber():
        """int QTextCursor.columnNumber()"""
        return int()
    def blockNumber():
        """int QTextCursor.blockNumber()"""
        return int()
    def endEditBlock():
        """None QTextCursor.endEditBlock()"""
        return None
    def joinPreviousEditBlock():
        """None QTextCursor.joinPreviousEditBlock()"""
        return None
    def beginEditBlock():
        """None QTextCursor.beginEditBlock()"""
        return None
    def insertImage(_format):
        """None QTextCursor.insertImage(QTextImageFormat _format)"""
        return None
    def insertImage(_format, _alignment):
        """None QTextCursor.insertImage(QTextImageFormat _format, QTextFrameFormat.Position _alignment)"""
        return None
    def insertImage(_name):
        """None QTextCursor.insertImage(QString _name)"""
        return None
    def insertImage(_image, _name):
        """None QTextCursor.insertImage(QImage _image, QString _name)"""
        return None
    def insertHtml(_html):
        """None QTextCursor.insertHtml(QString _html)"""
        return None
    def insertFragment(_fragment):
        """None QTextCursor.insertFragment(QTextDocumentFragment _fragment)"""
        return None
    def currentFrame():
        """QTextFrame QTextCursor.currentFrame()"""
        return QTextFrame()
    def insertFrame(_format):
        """QTextFrame QTextCursor.insertFrame(QTextFrameFormat _format)"""
        return QTextFrame()
    def currentTable():
        """QTextTable QTextCursor.currentTable()"""
        return QTextTable()
    def insertTable(_rows, _cols, _format):
        """QTextTable QTextCursor.insertTable(int _rows, int _cols, QTextTableFormat _format)"""
        return QTextTable()
    def insertTable(_rows, _cols):
        """QTextTable QTextCursor.insertTable(int _rows, int _cols)"""
        return QTextTable()
    def currentList():
        """QTextList QTextCursor.currentList()"""
        return QTextList()
    def createList(_format):
        """QTextList QTextCursor.createList(QTextListFormat _format)"""
        return QTextList()
    def createList(_style):
        """QTextList QTextCursor.createList(QTextListFormat.Style _style)"""
        return QTextList()
    def insertList(_format):
        """QTextList QTextCursor.insertList(QTextListFormat _format)"""
        return QTextList()
    def insertList(_style):
        """QTextList QTextCursor.insertList(QTextListFormat.Style _style)"""
        return QTextList()
    def insertBlock():
        """None QTextCursor.insertBlock()"""
        return None
    def insertBlock(_format):
        """None QTextCursor.insertBlock(QTextBlockFormat _format)"""
        return None
    def insertBlock(_format, _charFormat):
        """None QTextCursor.insertBlock(QTextBlockFormat _format, QTextCharFormat _charFormat)"""
        return None
    def atEnd():
        """bool QTextCursor.atEnd()"""
        return bool()
    def atStart():
        """bool QTextCursor.atStart()"""
        return bool()
    def atBlockEnd():
        """bool QTextCursor.atBlockEnd()"""
        return bool()
    def atBlockStart():
        """bool QTextCursor.atBlockStart()"""
        return bool()
    def mergeBlockCharFormat(_modifier):
        """None QTextCursor.mergeBlockCharFormat(QTextCharFormat _modifier)"""
        return None
    def setBlockCharFormat(_format):
        """None QTextCursor.setBlockCharFormat(QTextCharFormat _format)"""
        return None
    def blockCharFormat():
        """QTextCharFormat QTextCursor.blockCharFormat()"""
        return QTextCharFormat()
    def mergeBlockFormat(_modifier):
        """None QTextCursor.mergeBlockFormat(QTextBlockFormat _modifier)"""
        return None
    def setBlockFormat(_format):
        """None QTextCursor.setBlockFormat(QTextBlockFormat _format)"""
        return None
    def blockFormat():
        """QTextBlockFormat QTextCursor.blockFormat()"""
        return QTextBlockFormat()
    def mergeCharFormat(_modifier):
        """None QTextCursor.mergeCharFormat(QTextCharFormat _modifier)"""
        return None
    def setCharFormat(_format):
        """None QTextCursor.setCharFormat(QTextCharFormat _format)"""
        return None
    def charFormat():
        """QTextCharFormat QTextCursor.charFormat()"""
        return QTextCharFormat()
    def block():
        """QTextBlock QTextCursor.block()"""
        return QTextBlock()
    def selectedTableCells(_firstRow, _numRows, _firstColumn, _numColumns):
        """None QTextCursor.selectedTableCells(int _firstRow, int _numRows, int _firstColumn, int _numColumns)"""
        return None
    def selection():
        """QTextDocumentFragment QTextCursor.selection()"""
        return QTextDocumentFragment()
    def selectedText():
        """QString QTextCursor.selectedText()"""
        return QString()
    def selectionEnd():
        """int QTextCursor.selectionEnd()"""
        return int()
    def selectionStart():
        """int QTextCursor.selectionStart()"""
        return int()
    def clearSelection():
        """None QTextCursor.clearSelection()"""
        return None
    def removeSelectedText():
        """None QTextCursor.removeSelectedText()"""
        return None
    def hasComplexSelection():
        """bool QTextCursor.hasComplexSelection()"""
        return bool()
    def hasSelection():
        """bool QTextCursor.hasSelection()"""
        return bool()
    def select(_selection):
        """None QTextCursor.select(QTextCursor.SelectionType _selection)"""
        return None
    def deletePreviousChar():
        """None QTextCursor.deletePreviousChar()"""
        return None
    def deleteChar():
        """None QTextCursor.deleteChar()"""
        return None
    def movePosition(_op, _mode, _n):
        """bool QTextCursor.movePosition(QTextCursor.MoveOperation _op, QTextCursor.MoveMode _mode, int _n)"""
        return bool()
    def insertText(_text):
        """None QTextCursor.insertText(QString _text)"""
        return None
    def insertText(_text, _format):
        """None QTextCursor.insertText(QString _text, QTextCharFormat _format)"""
        return None
    def anchor():
        """int QTextCursor.anchor()"""
        return int()
    def position():
        """int QTextCursor.position()"""
        return int()
    def setPosition(_pos, _mode):
        """None QTextCursor.setPosition(int _pos, QTextCursor.MoveMode _mode)"""
        return None
    def isNull():
        """bool QTextCursor.isNull()"""
        return bool()


class Qt():
    """"""
    WhiteSpaceNormal = int() # Qt.WhiteSpaceMode enum
    WhiteSpacePre = int() # Qt.WhiteSpaceMode enum
    WhiteSpaceNoWrap = int() # Qt.WhiteSpaceMode enum
    WhiteSpaceModeUndefined = int() # Qt.WhiteSpaceMode enum

    ExactHit = int() # Qt.HitTestAccuracy enum
    FuzzyHit = int() # Qt.HitTestAccuracy enum

    def convertFromPlainText(_plain, _mode):
        """QString Qt.convertFromPlainText(QString _plain, Qt.WhiteSpaceMode _mode)"""
        return QString()
    def escape(_plain):
        """QString Qt.escape(QString _plain)"""
        return QString()
    def mightBeRichText():
        """QString Qt.mightBeRichText()"""
        return QString()


class QTextDocument(QObject):
    """"""
    UndoStack = int() # QTextDocument.Stacks enum
    RedoStack = int() # QTextDocument.Stacks enum
    UndoAndRedoStacks = int() # QTextDocument.Stacks enum

    HtmlResource = int() # QTextDocument.ResourceType enum
    ImageResource = int() # QTextDocument.ResourceType enum
    StyleSheetResource = int() # QTextDocument.ResourceType enum
    UserResource = int() # QTextDocument.ResourceType enum

    FindBackward = int() # QTextDocument.FindFlag enum
    FindCaseSensitively = int() # QTextDocument.FindFlag enum
    FindWholeWords = int() # QTextDocument.FindFlag enum

    DocumentTitle = int() # QTextDocument.MetaInformation enum
    DocumentUrl = int() # QTextDocument.MetaInformation enum

    def __init__(_parent):
        """None QTextDocument.__init__(QObject _parent)"""
        return None
    def __init__(_text, _parent):
        """None QTextDocument.__init__(QString _text, QObject _parent)"""
        return None
    def clearUndoRedoStacks(_stacks):
        """None QTextDocument.clearUndoRedoStacks(QTextDocument.Stacks _stacks)"""
        return None
    def availableRedoSteps():
        """int QTextDocument.availableRedoSteps()"""
        return int()
    def availableUndoSteps():
        """int QTextDocument.availableUndoSteps()"""
        return int()
    def characterCount():
        """int QTextDocument.characterCount()"""
        return int()
    def lineCount():
        """int QTextDocument.lineCount()"""
        return int()
    def setDocumentMargin(_margin):
        """None QTextDocument.setDocumentMargin(float _margin)"""
        return None
    def documentMargin():
        """float QTextDocument.documentMargin()"""
        return float()
    def characterAt(_pos):
        """QChar QTextDocument.characterAt(int _pos)"""
        return QChar()
    def setIndentWidth(_width):
        """None QTextDocument.setIndentWidth(float _width)"""
        return None
    def indentWidth():
        """float QTextDocument.indentWidth()"""
        return float()
    def lastBlock():
        """QTextBlock QTextDocument.lastBlock()"""
        return QTextBlock()
    def firstBlock():
        """QTextBlock QTextDocument.firstBlock()"""
        return QTextBlock()
    def findBlockByLineNumber(_blockNumber):
        """QTextBlock QTextDocument.findBlockByLineNumber(int _blockNumber)"""
        return QTextBlock()
    def findBlockByNumber(_blockNumber):
        """QTextBlock QTextDocument.findBlockByNumber(int _blockNumber)"""
        return QTextBlock()
    def revision():
        """int QTextDocument.revision()"""
        return int()
    def setDefaultTextOption(_option):
        """None QTextDocument.setDefaultTextOption(QTextOption _option)"""
        return None
    def defaultTextOption():
        """QTextOption QTextDocument.defaultTextOption()"""
        return QTextOption()
    def setMaximumBlockCount(_maximum):
        """None QTextDocument.setMaximumBlockCount(int _maximum)"""
        return None
    def maximumBlockCount():
        """int QTextDocument.maximumBlockCount()"""
        return int()
    def defaultStyleSheet():
        """QString QTextDocument.defaultStyleSheet()"""
        return QString()
    def setDefaultStyleSheet(_sheet):
        """None QTextDocument.setDefaultStyleSheet(QString _sheet)"""
        return None
    def blockCount():
        """int QTextDocument.blockCount()"""
        return int()
    def size():
        """QSizeF QTextDocument.size()"""
        return QSizeF()
    def adjustSize():
        """None QTextDocument.adjustSize()"""
        return None
    def idealWidth():
        """float QTextDocument.idealWidth()"""
        return float()
    def textWidth():
        """float QTextDocument.textWidth()"""
        return float()
    def setTextWidth(_width):
        """None QTextDocument.setTextWidth(float _width)"""
        return None
    def drawContents(_p, _rect):
        """None QTextDocument.drawContents(QPainter _p, QRectF _rect)"""
        return None
    def loadResource(_type, _name):
        """QVariant QTextDocument.loadResource(int _type, QUrl _name)"""
        return QVariant()
    def createObject(_f):
        """QTextObject QTextDocument.createObject(QTextFormat _f)"""
        return QTextObject()
    def setModified(_on):
        """None QTextDocument.setModified(bool _on)"""
        return None
    def redo():
        """None QTextDocument.redo()"""
        return None
    def redo(_cursor):
        """None QTextDocument.redo(QTextCursor _cursor)"""
        return None
    def undo():
        """None QTextDocument.undo()"""
        return None
    def undo(_cursor):
        """None QTextDocument.undo(QTextCursor _cursor)"""
        return None
    def useDesignMetrics():
        """bool QTextDocument.useDesignMetrics()"""
        return bool()
    def setUseDesignMetrics(_b):
        """None QTextDocument.setUseDesignMetrics(bool _b)"""
        return None
    def markContentsDirty(_from, _length):
        """None QTextDocument.markContentsDirty(int _from, int _length)"""
        return None
    def allFormats():
        """list-of-QTextFormat QTextDocument.allFormats()"""
        return [QTextFormat()]
    def addResource(_type, _name, _resource):
        """None QTextDocument.addResource(int _type, QUrl _name, QVariant _resource)"""
        return None
    def resource(_type, _name):
        """QVariant QTextDocument.resource(int _type, QUrl _name)"""
        return QVariant()
    def print_(_printer):
        """None QTextDocument.print_(QPrinter _printer)"""
        return None
    def isModified():
        """bool QTextDocument.isModified()"""
        return bool()
    def pageCount():
        """int QTextDocument.pageCount()"""
        return int()
    def defaultFont():
        """QFont QTextDocument.defaultFont()"""
        return QFont()
    def setDefaultFont(_font):
        """None QTextDocument.setDefaultFont(QFont _font)"""
        return None
    def pageSize():
        """QSizeF QTextDocument.pageSize()"""
        return QSizeF()
    def setPageSize(_size):
        """None QTextDocument.setPageSize(QSizeF _size)"""
        return None
    def end():
        """QTextBlock QTextDocument.end()"""
        return QTextBlock()
    def begin():
        """QTextBlock QTextDocument.begin()"""
        return QTextBlock()
    def findBlock(_pos):
        """QTextBlock QTextDocument.findBlock(int _pos)"""
        return QTextBlock()
    def objectForFormat():
        """QTextFormat QTextDocument.objectForFormat()"""
        return QTextFormat()
    def object(_objectIndex):
        """QTextObject QTextDocument.object(int _objectIndex)"""
        return QTextObject()
    def rootFrame():
        """QTextFrame QTextDocument.rootFrame()"""
        return QTextFrame()
    def find(_subString, _position, _options):
        """QTextCursor QTextDocument.find(QString _subString, int _position, QTextDocument.FindFlags _options)"""
        return QTextCursor()
    def find(_expr, _position, _options):
        """QTextCursor QTextDocument.find(QRegExp _expr, int _position, QTextDocument.FindFlags _options)"""
        return QTextCursor()
    def find(_subString, _cursor, _options):
        """QTextCursor QTextDocument.find(QString _subString, QTextCursor _cursor, QTextDocument.FindFlags _options)"""
        return QTextCursor()
    def find(_expr, _cursor, _options):
        """QTextCursor QTextDocument.find(QRegExp _expr, QTextCursor _cursor, QTextDocument.FindFlags _options)"""
        return QTextCursor()
    def setPlainText(_text):
        """None QTextDocument.setPlainText(QString _text)"""
        return None
    def toPlainText():
        """QString QTextDocument.toPlainText()"""
        return QString()
    def setHtml(_html):
        """None QTextDocument.setHtml(QString _html)"""
        return None
    def toHtml(_encoding):
        """QString QTextDocument.toHtml(QByteArray _encoding)"""
        return QString()
    def metaInformation(_info):
        """QString QTextDocument.metaInformation(QTextDocument.MetaInformation _info)"""
        return QString()
    def setMetaInformation(_info):
        """QString QTextDocument.setMetaInformation(QTextDocument.MetaInformation _info)"""
        return QString()
    def documentLayout():
        """QAbstractTextDocumentLayout QTextDocument.documentLayout()"""
        return QAbstractTextDocumentLayout()
    def setDocumentLayout(_layout):
        """None QTextDocument.setDocumentLayout(QAbstractTextDocumentLayout _layout)"""
        return None
    def isRedoAvailable():
        """bool QTextDocument.isRedoAvailable()"""
        return bool()
    def isUndoAvailable():
        """bool QTextDocument.isUndoAvailable()"""
        return bool()
    def isUndoRedoEnabled():
        """bool QTextDocument.isUndoRedoEnabled()"""
        return bool()
    def setUndoRedoEnabled(_enable):
        """None QTextDocument.setUndoRedoEnabled(bool _enable)"""
        return None
    def clear():
        """None QTextDocument.clear()"""
        return None
    def isEmpty():
        """bool QTextDocument.isEmpty()"""
        return bool()
    def clone(_parent):
        """QTextDocument QTextDocument.clone(QObject _parent)"""
        return QTextDocument()


class QTextDocumentFragment():
    """"""
    def __init__():
        """None QTextDocumentFragment.__init__()"""
        return None
    def __init__(_document):
        """None QTextDocumentFragment.__init__(QTextDocument _document)"""
        return None
    def __init__(_range):
        """None QTextDocumentFragment.__init__(QTextCursor _range)"""
        return None
    def __init__(_rhs):
        """None QTextDocumentFragment.__init__(QTextDocumentFragment _rhs)"""
        return None
    def fromHtml(_html):
        """QTextDocumentFragment QTextDocumentFragment.fromHtml(QString _html)"""
        return QTextDocumentFragment()
    def fromHtml(_html, _resourceProvider):
        """QTextDocumentFragment QTextDocumentFragment.fromHtml(QString _html, QTextDocument _resourceProvider)"""
        return QTextDocumentFragment()
    def fromPlainText(_plainText):
        """QTextDocumentFragment QTextDocumentFragment.fromPlainText(QString _plainText)"""
        return QTextDocumentFragment()
    def toHtml():
        """QString QTextDocumentFragment.toHtml()"""
        return QString()
    def toHtml(_encoding):
        """QString QTextDocumentFragment.toHtml(QByteArray _encoding)"""
        return QString()
    def toPlainText():
        """QString QTextDocumentFragment.toPlainText()"""
        return QString()
    def isEmpty():
        """bool QTextDocumentFragment.isEmpty()"""
        return bool()


class QTextDocumentWriter():
    """"""
    def __init__():
        """None QTextDocumentWriter.__init__()"""
        return None
    def __init__(_device, _format):
        """None QTextDocumentWriter.__init__(QIODevice _device, QByteArray _format)"""
        return None
    def __init__(_fileName, _format):
        """None QTextDocumentWriter.__init__(QString _fileName, QByteArray _format)"""
        return None
    def supportedDocumentFormats():
        """list-of-QByteArray QTextDocumentWriter.supportedDocumentFormats()"""
        return [QByteArray()]
    def codec():
        """QTextCodec QTextDocumentWriter.codec()"""
        return QTextCodec()
    def setCodec(_codec):
        """None QTextDocumentWriter.setCodec(QTextCodec _codec)"""
        return None
    def write(_document):
        """bool QTextDocumentWriter.write(QTextDocument _document)"""
        return bool()
    def write(_fragment):
        """bool QTextDocumentWriter.write(QTextDocumentFragment _fragment)"""
        return bool()
    def fileName():
        """QString QTextDocumentWriter.fileName()"""
        return QString()
    def setFileName(_fileName):
        """None QTextDocumentWriter.setFileName(QString _fileName)"""
        return None
    def device():
        """QIODevice QTextDocumentWriter.device()"""
        return QIODevice()
    def setDevice(_device):
        """None QTextDocumentWriter.setDevice(QIODevice _device)"""
        return None
    def format():
        """QByteArray QTextDocumentWriter.format()"""
        return QByteArray()
    def setFormat(_format):
        """None QTextDocumentWriter.setFormat(QByteArray _format)"""
        return None


class QTextLength():
    """"""
    VariableLength = int() # QTextLength.Type enum
    FixedLength = int() # QTextLength.Type enum
    PercentageLength = int() # QTextLength.Type enum

    def __init__():
        """None QTextLength.__init__()"""
        return None
    def __init__(_atype, _avalue):
        """None QTextLength.__init__(QTextLength.Type _atype, float _avalue)"""
        return None
    def __init__(_variant):
        """None QTextLength.__init__(QVariant _variant)"""
        return None
    def __init__():
        """QTextLength QTextLength.__init__()"""
        return QTextLength()
    def __ne__(_other):
        """bool QTextLength.__ne__(QTextLength _other)"""
        return bool()
    def __eq__(_other):
        """bool QTextLength.__eq__(QTextLength _other)"""
        return bool()
    def rawValue():
        """float QTextLength.rawValue()"""
        return float()
    def value(_maximumLength):
        """float QTextLength.value(float _maximumLength)"""
        return float()
    def type():
        """QTextLength.Type QTextLength.type()"""
        return QTextLength.Type()


class QTextFormat():
    """"""
    ObjectIndex = int() # QTextFormat.Property enum
    CssFloat = int() # QTextFormat.Property enum
    LayoutDirection = int() # QTextFormat.Property enum
    OutlinePen = int() # QTextFormat.Property enum
    BackgroundBrush = int() # QTextFormat.Property enum
    ForegroundBrush = int() # QTextFormat.Property enum
    BlockAlignment = int() # QTextFormat.Property enum
    BlockTopMargin = int() # QTextFormat.Property enum
    BlockBottomMargin = int() # QTextFormat.Property enum
    BlockLeftMargin = int() # QTextFormat.Property enum
    BlockRightMargin = int() # QTextFormat.Property enum
    TextIndent = int() # QTextFormat.Property enum
    BlockIndent = int() # QTextFormat.Property enum
    BlockNonBreakableLines = int() # QTextFormat.Property enum
    BlockTrailingHorizontalRulerWidth = int() # QTextFormat.Property enum
    FontFamily = int() # QTextFormat.Property enum
    FontPointSize = int() # QTextFormat.Property enum
    FontSizeAdjustment = int() # QTextFormat.Property enum
    FontSizeIncrement = int() # QTextFormat.Property enum
    FontWeight = int() # QTextFormat.Property enum
    FontItalic = int() # QTextFormat.Property enum
    FontUnderline = int() # QTextFormat.Property enum
    FontOverline = int() # QTextFormat.Property enum
    FontStrikeOut = int() # QTextFormat.Property enum
    FontFixedPitch = int() # QTextFormat.Property enum
    FontPixelSize = int() # QTextFormat.Property enum
    TextUnderlineColor = int() # QTextFormat.Property enum
    TextVerticalAlignment = int() # QTextFormat.Property enum
    TextOutline = int() # QTextFormat.Property enum
    IsAnchor = int() # QTextFormat.Property enum
    AnchorHref = int() # QTextFormat.Property enum
    AnchorName = int() # QTextFormat.Property enum
    ObjectType = int() # QTextFormat.Property enum
    ListStyle = int() # QTextFormat.Property enum
    ListIndent = int() # QTextFormat.Property enum
    FrameBorder = int() # QTextFormat.Property enum
    FrameMargin = int() # QTextFormat.Property enum
    FramePadding = int() # QTextFormat.Property enum
    FrameWidth = int() # QTextFormat.Property enum
    FrameHeight = int() # QTextFormat.Property enum
    TableColumns = int() # QTextFormat.Property enum
    TableColumnWidthConstraints = int() # QTextFormat.Property enum
    TableCellSpacing = int() # QTextFormat.Property enum
    TableCellPadding = int() # QTextFormat.Property enum
    TableCellRowSpan = int() # QTextFormat.Property enum
    TableCellColumnSpan = int() # QTextFormat.Property enum
    ImageName = int() # QTextFormat.Property enum
    ImageWidth = int() # QTextFormat.Property enum
    ImageHeight = int() # QTextFormat.Property enum
    TextUnderlineStyle = int() # QTextFormat.Property enum
    TableHeaderRowCount = int() # QTextFormat.Property enum
    FullWidthSelection = int() # QTextFormat.Property enum
    PageBreakPolicy = int() # QTextFormat.Property enum
    TextToolTip = int() # QTextFormat.Property enum
    FrameTopMargin = int() # QTextFormat.Property enum
    FrameBottomMargin = int() # QTextFormat.Property enum
    FrameLeftMargin = int() # QTextFormat.Property enum
    FrameRightMargin = int() # QTextFormat.Property enum
    FrameBorderBrush = int() # QTextFormat.Property enum
    FrameBorderStyle = int() # QTextFormat.Property enum
    BackgroundImageUrl = int() # QTextFormat.Property enum
    TabPositions = int() # QTextFormat.Property enum
    FirstFontProperty = int() # QTextFormat.Property enum
    FontCapitalization = int() # QTextFormat.Property enum
    FontLetterSpacing = int() # QTextFormat.Property enum
    FontWordSpacing = int() # QTextFormat.Property enum
    LastFontProperty = int() # QTextFormat.Property enum
    TableCellTopPadding = int() # QTextFormat.Property enum
    TableCellBottomPadding = int() # QTextFormat.Property enum
    TableCellLeftPadding = int() # QTextFormat.Property enum
    TableCellRightPadding = int() # QTextFormat.Property enum
    FontStyleHint = int() # QTextFormat.Property enum
    FontStyleStrategy = int() # QTextFormat.Property enum
    FontKerning = int() # QTextFormat.Property enum
    UserProperty = int() # QTextFormat.Property enum

    PageBreak_Auto = int() # QTextFormat.PageBreakFlag enum
    PageBreak_AlwaysBefore = int() # QTextFormat.PageBreakFlag enum
    PageBreak_AlwaysAfter = int() # QTextFormat.PageBreakFlag enum

    NoObject = int() # QTextFormat.ObjectTypes enum
    ImageObject = int() # QTextFormat.ObjectTypes enum
    TableObject = int() # QTextFormat.ObjectTypes enum
    TableCellObject = int() # QTextFormat.ObjectTypes enum
    UserObject = int() # QTextFormat.ObjectTypes enum

    InvalidFormat = int() # QTextFormat.FormatType enum
    BlockFormat = int() # QTextFormat.FormatType enum
    CharFormat = int() # QTextFormat.FormatType enum
    ListFormat = int() # QTextFormat.FormatType enum
    TableFormat = int() # QTextFormat.FormatType enum
    FrameFormat = int() # QTextFormat.FormatType enum
    UserFormat = int() # QTextFormat.FormatType enum

    def __init__():
        """None QTextFormat.__init__()"""
        return None
    def __init__(_type):
        """None QTextFormat.__init__(int _type)"""
        return None
    def __init__(_rhs):
        """None QTextFormat.__init__(QTextFormat _rhs)"""
        return None
    def __init__(_variant):
        """None QTextFormat.__init__(QVariant _variant)"""
        return None
    def toTableCellFormat():
        """QTextTableCellFormat QTextFormat.toTableCellFormat()"""
        return QTextTableCellFormat()
    def isTableCellFormat():
        """bool QTextFormat.isTableCellFormat()"""
        return bool()
    def propertyCount():
        """int QTextFormat.propertyCount()"""
        return int()
    def setObjectType(_atype):
        """None QTextFormat.setObjectType(int _atype)"""
        return None
    def clearForeground():
        """None QTextFormat.clearForeground()"""
        return None
    def foreground():
        """QBrush QTextFormat.foreground()"""
        return QBrush()
    def setForeground(_brush):
        """None QTextFormat.setForeground(QBrush _brush)"""
        return None
    def clearBackground():
        """None QTextFormat.clearBackground()"""
        return None
    def background():
        """QBrush QTextFormat.background()"""
        return QBrush()
    def setBackground(_brush):
        """None QTextFormat.setBackground(QBrush _brush)"""
        return None
    def layoutDirection():
        """Qt.LayoutDirection QTextFormat.layoutDirection()"""
        return Qt.LayoutDirection()
    def setLayoutDirection(_direction):
        """None QTextFormat.setLayoutDirection(Qt.LayoutDirection _direction)"""
        return None
    def __ne__(_rhs):
        """bool QTextFormat.__ne__(QTextFormat _rhs)"""
        return bool()
    def __eq__(_rhs):
        """bool QTextFormat.__eq__(QTextFormat _rhs)"""
        return bool()
    def toImageFormat():
        """QTextImageFormat QTextFormat.toImageFormat()"""
        return QTextImageFormat()
    def toFrameFormat():
        """QTextFrameFormat QTextFormat.toFrameFormat()"""
        return QTextFrameFormat()
    def toTableFormat():
        """QTextTableFormat QTextFormat.toTableFormat()"""
        return QTextTableFormat()
    def toListFormat():
        """QTextListFormat QTextFormat.toListFormat()"""
        return QTextListFormat()
    def toCharFormat():
        """QTextCharFormat QTextFormat.toCharFormat()"""
        return QTextCharFormat()
    def toBlockFormat():
        """QTextBlockFormat QTextFormat.toBlockFormat()"""
        return QTextBlockFormat()
    def isTableFormat():
        """bool QTextFormat.isTableFormat()"""
        return bool()
    def isImageFormat():
        """bool QTextFormat.isImageFormat()"""
        return bool()
    def isFrameFormat():
        """bool QTextFormat.isFrameFormat()"""
        return bool()
    def isListFormat():
        """bool QTextFormat.isListFormat()"""
        return bool()
    def isBlockFormat():
        """bool QTextFormat.isBlockFormat()"""
        return bool()
    def isCharFormat():
        """bool QTextFormat.isCharFormat()"""
        return bool()
    def objectType():
        """int QTextFormat.objectType()"""
        return int()
    def properties():
        """dict-of-int-QVariant QTextFormat.properties()"""
        return dict-of-int-QVariant()
    def lengthVectorProperty(_propertyId):
        """list-of-QTextLength QTextFormat.lengthVectorProperty(int _propertyId)"""
        return [QTextLength()]
    def lengthProperty(_propertyId):
        """QTextLength QTextFormat.lengthProperty(int _propertyId)"""
        return QTextLength()
    def brushProperty(_propertyId):
        """QBrush QTextFormat.brushProperty(int _propertyId)"""
        return QBrush()
    def penProperty(_propertyId):
        """QPen QTextFormat.penProperty(int _propertyId)"""
        return QPen()
    def colorProperty(_propertyId):
        """QColor QTextFormat.colorProperty(int _propertyId)"""
        return QColor()
    def stringProperty(_propertyId):
        """QString QTextFormat.stringProperty(int _propertyId)"""
        return QString()
    def doubleProperty(_propertyId):
        """float QTextFormat.doubleProperty(int _propertyId)"""
        return float()
    def intProperty(_propertyId):
        """int QTextFormat.intProperty(int _propertyId)"""
        return int()
    def boolProperty(_propertyId):
        """bool QTextFormat.boolProperty(int _propertyId)"""
        return bool()
    def hasProperty(_propertyId):
        """bool QTextFormat.hasProperty(int _propertyId)"""
        return bool()
    def clearProperty(_propertyId):
        """None QTextFormat.clearProperty(int _propertyId)"""
        return None
    def setProperty(_propertyId, _value):
        """None QTextFormat.setProperty(int _propertyId, QVariant _value)"""
        return None
    def setProperty(_propertyId, _lengths):
        """None QTextFormat.setProperty(int _propertyId, list-of-QTextLength _lengths)"""
        return None
    def property(_propertyId):
        """QVariant QTextFormat.property(int _propertyId)"""
        return QVariant()
    def setObjectIndex(_object):
        """None QTextFormat.setObjectIndex(int _object)"""
        return None
    def objectIndex():
        """int QTextFormat.objectIndex()"""
        return int()
    def type():
        """int QTextFormat.type()"""
        return int()
    def isValid():
        """bool QTextFormat.isValid()"""
        return bool()
    def merge(_other):
        """None QTextFormat.merge(QTextFormat _other)"""
        return None


class QTextCharFormat(QTextFormat):
    """"""
    NoUnderline = int() # QTextCharFormat.UnderlineStyle enum
    SingleUnderline = int() # QTextCharFormat.UnderlineStyle enum
    DashUnderline = int() # QTextCharFormat.UnderlineStyle enum
    DotLine = int() # QTextCharFormat.UnderlineStyle enum
    DashDotLine = int() # QTextCharFormat.UnderlineStyle enum
    DashDotDotLine = int() # QTextCharFormat.UnderlineStyle enum
    WaveUnderline = int() # QTextCharFormat.UnderlineStyle enum
    SpellCheckUnderline = int() # QTextCharFormat.UnderlineStyle enum

    AlignNormal = int() # QTextCharFormat.VerticalAlignment enum
    AlignSuperScript = int() # QTextCharFormat.VerticalAlignment enum
    AlignSubScript = int() # QTextCharFormat.VerticalAlignment enum
    AlignMiddle = int() # QTextCharFormat.VerticalAlignment enum
    AlignTop = int() # QTextCharFormat.VerticalAlignment enum
    AlignBottom = int() # QTextCharFormat.VerticalAlignment enum

    def __init__():
        """None QTextCharFormat.__init__()"""
        return None
    def __init__():
        """QTextCharFormat QTextCharFormat.__init__()"""
        return QTextCharFormat()
    def fontKerning():
        """bool QTextCharFormat.fontKerning()"""
        return bool()
    def setFontKerning(_enable):
        """None QTextCharFormat.setFontKerning(bool _enable)"""
        return None
    def fontStyleStrategy():
        """QFont.StyleStrategy QTextCharFormat.fontStyleStrategy()"""
        return QFont.StyleStrategy()
    def fontStyleHint():
        """QFont.StyleHint QTextCharFormat.fontStyleHint()"""
        return QFont.StyleHint()
    def setFontStyleStrategy(_strategy):
        """None QTextCharFormat.setFontStyleStrategy(QFont.StyleStrategy _strategy)"""
        return None
    def setFontStyleHint(_hint, _strategy):
        """None QTextCharFormat.setFontStyleHint(QFont.StyleHint _hint, QFont.StyleStrategy _strategy)"""
        return None
    def fontWordSpacing():
        """float QTextCharFormat.fontWordSpacing()"""
        return float()
    def setFontWordSpacing(_spacing):
        """None QTextCharFormat.setFontWordSpacing(float _spacing)"""
        return None
    def fontLetterSpacing():
        """float QTextCharFormat.fontLetterSpacing()"""
        return float()
    def setFontLetterSpacing(_spacing):
        """None QTextCharFormat.setFontLetterSpacing(float _spacing)"""
        return None
    def fontCapitalization():
        """QFont.Capitalization QTextCharFormat.fontCapitalization()"""
        return QFont.Capitalization()
    def setFontCapitalization(_capitalization):
        """None QTextCharFormat.setFontCapitalization(QFont.Capitalization _capitalization)"""
        return None
    def anchorNames():
        """QStringList QTextCharFormat.anchorNames()"""
        return QStringList()
    def setAnchorNames(_names):
        """None QTextCharFormat.setAnchorNames(QStringList _names)"""
        return None
    def toolTip():
        """QString QTextCharFormat.toolTip()"""
        return QString()
    def setToolTip(_tip):
        """None QTextCharFormat.setToolTip(QString _tip)"""
        return None
    def underlineStyle():
        """QTextCharFormat.UnderlineStyle QTextCharFormat.underlineStyle()"""
        return QTextCharFormat.UnderlineStyle()
    def setUnderlineStyle(_style):
        """None QTextCharFormat.setUnderlineStyle(QTextCharFormat.UnderlineStyle _style)"""
        return None
    def textOutline():
        """QPen QTextCharFormat.textOutline()"""
        return QPen()
    def setTextOutline(_pen):
        """None QTextCharFormat.setTextOutline(QPen _pen)"""
        return None
    def setTableCellColumnSpan(_atableCellColumnSpan):
        """None QTextCharFormat.setTableCellColumnSpan(int _atableCellColumnSpan)"""
        return None
    def setTableCellRowSpan(_atableCellRowSpan):
        """None QTextCharFormat.setTableCellRowSpan(int _atableCellRowSpan)"""
        return None
    def tableCellColumnSpan():
        """int QTextCharFormat.tableCellColumnSpan()"""
        return int()
    def tableCellRowSpan():
        """int QTextCharFormat.tableCellRowSpan()"""
        return int()
    def anchorName():
        """QString QTextCharFormat.anchorName()"""
        return QString()
    def setAnchorName(_name):
        """None QTextCharFormat.setAnchorName(QString _name)"""
        return None
    def anchorHref():
        """QString QTextCharFormat.anchorHref()"""
        return QString()
    def setAnchorHref(_value):
        """None QTextCharFormat.setAnchorHref(QString _value)"""
        return None
    def isAnchor():
        """bool QTextCharFormat.isAnchor()"""
        return bool()
    def setAnchor(_anchor):
        """None QTextCharFormat.setAnchor(bool _anchor)"""
        return None
    def verticalAlignment():
        """QTextCharFormat.VerticalAlignment QTextCharFormat.verticalAlignment()"""
        return QTextCharFormat.VerticalAlignment()
    def setVerticalAlignment(_alignment):
        """None QTextCharFormat.setVerticalAlignment(QTextCharFormat.VerticalAlignment _alignment)"""
        return None
    def fontFixedPitch():
        """bool QTextCharFormat.fontFixedPitch()"""
        return bool()
    def setFontFixedPitch(_fixedPitch):
        """None QTextCharFormat.setFontFixedPitch(bool _fixedPitch)"""
        return None
    def underlineColor():
        """QColor QTextCharFormat.underlineColor()"""
        return QColor()
    def setUnderlineColor(_color):
        """None QTextCharFormat.setUnderlineColor(QColor _color)"""
        return None
    def fontStrikeOut():
        """bool QTextCharFormat.fontStrikeOut()"""
        return bool()
    def setFontStrikeOut(_strikeOut):
        """None QTextCharFormat.setFontStrikeOut(bool _strikeOut)"""
        return None
    def fontOverline():
        """bool QTextCharFormat.fontOverline()"""
        return bool()
    def setFontOverline(_overline):
        """None QTextCharFormat.setFontOverline(bool _overline)"""
        return None
    def fontUnderline():
        """bool QTextCharFormat.fontUnderline()"""
        return bool()
    def setFontUnderline(_underline):
        """None QTextCharFormat.setFontUnderline(bool _underline)"""
        return None
    def fontItalic():
        """bool QTextCharFormat.fontItalic()"""
        return bool()
    def setFontItalic(_italic):
        """None QTextCharFormat.setFontItalic(bool _italic)"""
        return None
    def fontWeight():
        """int QTextCharFormat.fontWeight()"""
        return int()
    def setFontWeight(_weight):
        """None QTextCharFormat.setFontWeight(int _weight)"""
        return None
    def fontPointSize():
        """float QTextCharFormat.fontPointSize()"""
        return float()
    def setFontPointSize(_size):
        """None QTextCharFormat.setFontPointSize(float _size)"""
        return None
    def fontFamily():
        """QString QTextCharFormat.fontFamily()"""
        return QString()
    def setFontFamily(_family):
        """None QTextCharFormat.setFontFamily(QString _family)"""
        return None
    def font():
        """QFont QTextCharFormat.font()"""
        return QFont()
    def setFont(_font):
        """None QTextCharFormat.setFont(QFont _font)"""
        return None
    def isValid():
        """bool QTextCharFormat.isValid()"""
        return bool()


class QTextBlockFormat(QTextFormat):
    """"""
    def __init__():
        """None QTextBlockFormat.__init__()"""
        return None
    def __init__():
        """QTextBlockFormat QTextBlockFormat.__init__()"""
        return QTextBlockFormat()
    def tabPositions():
        """list-of-QTextOption.Tab QTextBlockFormat.tabPositions()"""
        return [QTextOption.Tab()]
    def setTabPositions(_tabs):
        """None QTextBlockFormat.setTabPositions(list-of-QTextOption.Tab _tabs)"""
        return None
    def pageBreakPolicy():
        """QTextFormat.PageBreakFlags QTextBlockFormat.pageBreakPolicy()"""
        return QTextFormat.PageBreakFlags()
    def setPageBreakPolicy(_flags):
        """None QTextBlockFormat.setPageBreakPolicy(QTextFormat.PageBreakFlags _flags)"""
        return None
    def setIndent(_aindent):
        """None QTextBlockFormat.setIndent(int _aindent)"""
        return None
    def setAlignment(_aalignment):
        """None QTextBlockFormat.setAlignment(Qt.Alignment _aalignment)"""
        return None
    def nonBreakableLines():
        """bool QTextBlockFormat.nonBreakableLines()"""
        return bool()
    def setNonBreakableLines(_b):
        """None QTextBlockFormat.setNonBreakableLines(bool _b)"""
        return None
    def indent():
        """int QTextBlockFormat.indent()"""
        return int()
    def textIndent():
        """float QTextBlockFormat.textIndent()"""
        return float()
    def setTextIndent(_margin):
        """None QTextBlockFormat.setTextIndent(float _margin)"""
        return None
    def rightMargin():
        """float QTextBlockFormat.rightMargin()"""
        return float()
    def setRightMargin(_margin):
        """None QTextBlockFormat.setRightMargin(float _margin)"""
        return None
    def leftMargin():
        """float QTextBlockFormat.leftMargin()"""
        return float()
    def setLeftMargin(_margin):
        """None QTextBlockFormat.setLeftMargin(float _margin)"""
        return None
    def bottomMargin():
        """float QTextBlockFormat.bottomMargin()"""
        return float()
    def setBottomMargin(_margin):
        """None QTextBlockFormat.setBottomMargin(float _margin)"""
        return None
    def topMargin():
        """float QTextBlockFormat.topMargin()"""
        return float()
    def setTopMargin(_margin):
        """None QTextBlockFormat.setTopMargin(float _margin)"""
        return None
    def alignment():
        """Qt.Alignment QTextBlockFormat.alignment()"""
        return Qt.Alignment()
    def isValid():
        """bool QTextBlockFormat.isValid()"""
        return bool()


class QTextListFormat(QTextFormat):
    """"""
    ListDisc = int() # QTextListFormat.Style enum
    ListCircle = int() # QTextListFormat.Style enum
    ListSquare = int() # QTextListFormat.Style enum
    ListDecimal = int() # QTextListFormat.Style enum
    ListLowerAlpha = int() # QTextListFormat.Style enum
    ListUpperAlpha = int() # QTextListFormat.Style enum
    ListLowerRoman = int() # QTextListFormat.Style enum
    ListUpperRoman = int() # QTextListFormat.Style enum

    def __init__():
        """None QTextListFormat.__init__()"""
        return None
    def __init__():
        """QTextListFormat QTextListFormat.__init__()"""
        return QTextListFormat()
    def setIndent(_aindent):
        """None QTextListFormat.setIndent(int _aindent)"""
        return None
    def setStyle(_astyle):
        """None QTextListFormat.setStyle(QTextListFormat.Style _astyle)"""
        return None
    def indent():
        """int QTextListFormat.indent()"""
        return int()
    def style():
        """QTextListFormat.Style QTextListFormat.style()"""
        return QTextListFormat.Style()
    def isValid():
        """bool QTextListFormat.isValid()"""
        return bool()


class QTextImageFormat(QTextCharFormat):
    """"""
    def __init__():
        """None QTextImageFormat.__init__()"""
        return None
    def __init__():
        """QTextImageFormat QTextImageFormat.__init__()"""
        return QTextImageFormat()
    def setHeight(_aheight):
        """None QTextImageFormat.setHeight(float _aheight)"""
        return None
    def setWidth(_awidth):
        """None QTextImageFormat.setWidth(float _awidth)"""
        return None
    def setName(_aname):
        """None QTextImageFormat.setName(QString _aname)"""
        return None
    def height():
        """float QTextImageFormat.height()"""
        return float()
    def width():
        """float QTextImageFormat.width()"""
        return float()
    def name():
        """QString QTextImageFormat.name()"""
        return QString()
    def isValid():
        """bool QTextImageFormat.isValid()"""
        return bool()


class QTextFrameFormat(QTextFormat):
    """"""
    BorderStyle_None = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Dotted = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Dashed = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Solid = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Double = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_DotDash = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_DotDotDash = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Groove = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Ridge = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Inset = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Outset = int() # QTextFrameFormat.BorderStyle enum

    InFlow = int() # QTextFrameFormat.Position enum
    FloatLeft = int() # QTextFrameFormat.Position enum
    FloatRight = int() # QTextFrameFormat.Position enum

    def __init__():
        """None QTextFrameFormat.__init__()"""
        return None
    def __init__():
        """QTextFrameFormat QTextFrameFormat.__init__()"""
        return QTextFrameFormat()
    def setRightMargin(_amargin):
        """None QTextFrameFormat.setRightMargin(float _amargin)"""
        return None
    def setLeftMargin(_amargin):
        """None QTextFrameFormat.setLeftMargin(float _amargin)"""
        return None
    def setBottomMargin(_amargin):
        """None QTextFrameFormat.setBottomMargin(float _amargin)"""
        return None
    def setTopMargin(_amargin):
        """None QTextFrameFormat.setTopMargin(float _amargin)"""
        return None
    def rightMargin():
        """float QTextFrameFormat.rightMargin()"""
        return float()
    def leftMargin():
        """float QTextFrameFormat.leftMargin()"""
        return float()
    def bottomMargin():
        """float QTextFrameFormat.bottomMargin()"""
        return float()
    def topMargin():
        """float QTextFrameFormat.topMargin()"""
        return float()
    def borderStyle():
        """QTextFrameFormat.BorderStyle QTextFrameFormat.borderStyle()"""
        return QTextFrameFormat.BorderStyle()
    def setBorderStyle(_style):
        """None QTextFrameFormat.setBorderStyle(QTextFrameFormat.BorderStyle _style)"""
        return None
    def borderBrush():
        """QBrush QTextFrameFormat.borderBrush()"""
        return QBrush()
    def setBorderBrush(_brush):
        """None QTextFrameFormat.setBorderBrush(QBrush _brush)"""
        return None
    def pageBreakPolicy():
        """QTextFormat.PageBreakFlags QTextFrameFormat.pageBreakPolicy()"""
        return QTextFormat.PageBreakFlags()
    def setPageBreakPolicy(_flags):
        """None QTextFrameFormat.setPageBreakPolicy(QTextFormat.PageBreakFlags _flags)"""
        return None
    def setHeight(_aheight):
        """None QTextFrameFormat.setHeight(float _aheight)"""
        return None
    def setHeight(_aheight):
        """None QTextFrameFormat.setHeight(QTextLength _aheight)"""
        return None
    def setPadding(_apadding):
        """None QTextFrameFormat.setPadding(float _apadding)"""
        return None
    def setMargin(_amargin):
        """None QTextFrameFormat.setMargin(float _amargin)"""
        return None
    def setBorder(_aborder):
        """None QTextFrameFormat.setBorder(float _aborder)"""
        return None
    def height():
        """QTextLength QTextFrameFormat.height()"""
        return QTextLength()
    def width():
        """QTextLength QTextFrameFormat.width()"""
        return QTextLength()
    def setWidth(_length):
        """None QTextFrameFormat.setWidth(QTextLength _length)"""
        return None
    def setWidth(_awidth):
        """None QTextFrameFormat.setWidth(float _awidth)"""
        return None
    def padding():
        """float QTextFrameFormat.padding()"""
        return float()
    def margin():
        """float QTextFrameFormat.margin()"""
        return float()
    def border():
        """float QTextFrameFormat.border()"""
        return float()
    def position():
        """QTextFrameFormat.Position QTextFrameFormat.position()"""
        return QTextFrameFormat.Position()
    def setPosition(_f):
        """None QTextFrameFormat.setPosition(QTextFrameFormat.Position _f)"""
        return None
    def isValid():
        """bool QTextFrameFormat.isValid()"""
        return bool()


class QTextTableFormat(QTextFrameFormat):
    """"""
    def __init__():
        """None QTextTableFormat.__init__()"""
        return None
    def __init__():
        """QTextTableFormat QTextTableFormat.__init__()"""
        return QTextTableFormat()
    def headerRowCount():
        """int QTextTableFormat.headerRowCount()"""
        return int()
    def setHeaderRowCount(_count):
        """None QTextTableFormat.setHeaderRowCount(int _count)"""
        return None
    def setAlignment(_aalignment):
        """None QTextTableFormat.setAlignment(Qt.Alignment _aalignment)"""
        return None
    def setCellPadding(_apadding):
        """None QTextTableFormat.setCellPadding(float _apadding)"""
        return None
    def setColumns(_acolumns):
        """None QTextTableFormat.setColumns(int _acolumns)"""
        return None
    def alignment():
        """Qt.Alignment QTextTableFormat.alignment()"""
        return Qt.Alignment()
    def cellPadding():
        """float QTextTableFormat.cellPadding()"""
        return float()
    def setCellSpacing(_spacing):
        """None QTextTableFormat.setCellSpacing(float _spacing)"""
        return None
    def cellSpacing():
        """float QTextTableFormat.cellSpacing()"""
        return float()
    def clearColumnWidthConstraints():
        """None QTextTableFormat.clearColumnWidthConstraints()"""
        return None
    def columnWidthConstraints():
        """list-of-QTextLength QTextTableFormat.columnWidthConstraints()"""
        return [QTextLength()]
    def setColumnWidthConstraints(_constraints):
        """None QTextTableFormat.setColumnWidthConstraints(list-of-QTextLength _constraints)"""
        return None
    def columns():
        """int QTextTableFormat.columns()"""
        return int()
    def isValid():
        """bool QTextTableFormat.isValid()"""
        return bool()


class QTextTableCellFormat(QTextCharFormat):
    """"""
    def __init__():
        """None QTextTableCellFormat.__init__()"""
        return None
    def __init__():
        """QTextTableCellFormat QTextTableCellFormat.__init__()"""
        return QTextTableCellFormat()
    def setPadding(_padding):
        """None QTextTableCellFormat.setPadding(float _padding)"""
        return None
    def rightPadding():
        """float QTextTableCellFormat.rightPadding()"""
        return float()
    def setRightPadding(_padding):
        """None QTextTableCellFormat.setRightPadding(float _padding)"""
        return None
    def leftPadding():
        """float QTextTableCellFormat.leftPadding()"""
        return float()
    def setLeftPadding(_padding):
        """None QTextTableCellFormat.setLeftPadding(float _padding)"""
        return None
    def bottomPadding():
        """float QTextTableCellFormat.bottomPadding()"""
        return float()
    def setBottomPadding(_padding):
        """None QTextTableCellFormat.setBottomPadding(float _padding)"""
        return None
    def topPadding():
        """float QTextTableCellFormat.topPadding()"""
        return float()
    def setTopPadding(_padding):
        """None QTextTableCellFormat.setTopPadding(float _padding)"""
        return None
    def isValid():
        """bool QTextTableCellFormat.isValid()"""
        return bool()


class QTextInlineObject():
    """"""
    def __init__():
        """None QTextInlineObject.__init__()"""
        return None
    def __init__():
        """QTextInlineObject QTextInlineObject.__init__()"""
        return QTextInlineObject()
    def format():
        """QTextFormat QTextInlineObject.format()"""
        return QTextFormat()
    def formatIndex():
        """int QTextInlineObject.formatIndex()"""
        return int()
    def textPosition():
        """int QTextInlineObject.textPosition()"""
        return int()
    def setDescent(_d):
        """None QTextInlineObject.setDescent(float _d)"""
        return None
    def setAscent(_a):
        """None QTextInlineObject.setAscent(float _a)"""
        return None
    def setWidth(_w):
        """None QTextInlineObject.setWidth(float _w)"""
        return None
    def textDirection():
        """Qt.LayoutDirection QTextInlineObject.textDirection()"""
        return Qt.LayoutDirection()
    def height():
        """float QTextInlineObject.height()"""
        return float()
    def descent():
        """float QTextInlineObject.descent()"""
        return float()
    def ascent():
        """float QTextInlineObject.ascent()"""
        return float()
    def width():
        """float QTextInlineObject.width()"""
        return float()
    def rect():
        """QRectF QTextInlineObject.rect()"""
        return QRectF()
    def isValid():
        """bool QTextInlineObject.isValid()"""
        return bool()


class QTextLayout():
    """"""
    SkipCharacters = int() # QTextLayout.CursorMode enum
    SkipWords = int() # QTextLayout.CursorMode enum

    def __init__():
        """None QTextLayout.__init__()"""
        return None
    def __init__(_text):
        """None QTextLayout.__init__(QString _text)"""
        return None
    def __init__(_text, _font, _paintDevice):
        """None QTextLayout.__init__(QString _text, QFont _font, QPaintDevice _paintDevice)"""
        return None
    def __init__(_b):
        """None QTextLayout.__init__(QTextBlock _b)"""
        return None
    def clearLayout():
        """None QTextLayout.clearLayout()"""
        return None
    def maximumWidth():
        """float QTextLayout.maximumWidth()"""
        return float()
    def minimumWidth():
        """float QTextLayout.minimumWidth()"""
        return float()
    def boundingRect():
        """QRectF QTextLayout.boundingRect()"""
        return QRectF()
    def setPosition(_p):
        """None QTextLayout.setPosition(QPointF _p)"""
        return None
    def position():
        """QPointF QTextLayout.position()"""
        return QPointF()
    def drawCursor(_p, _pos, _cursorPosition):
        """None QTextLayout.drawCursor(QPainter _p, QPointF _pos, int _cursorPosition)"""
        return None
    def drawCursor(_p, _pos, _cursorPosition, _width):
        """None QTextLayout.drawCursor(QPainter _p, QPointF _pos, int _cursorPosition, int _width)"""
        return None
    def draw(_p, _pos, _selections, _clip):
        """None QTextLayout.draw(QPainter _p, QPointF _pos, list-of-QTextLayout.FormatRange _selections, QRectF _clip)"""
        return None
    def previousCursorPosition(_oldPos, _mode):
        """int QTextLayout.previousCursorPosition(int _oldPos, QTextLayout.CursorMode _mode)"""
        return int()
    def nextCursorPosition(_oldPos, _mode):
        """int QTextLayout.nextCursorPosition(int _oldPos, QTextLayout.CursorMode _mode)"""
        return int()
    def isValidCursorPosition(_pos):
        """bool QTextLayout.isValidCursorPosition(int _pos)"""
        return bool()
    def lineForTextPosition(_pos):
        """QTextLine QTextLayout.lineForTextPosition(int _pos)"""
        return QTextLine()
    def lineAt(_i):
        """QTextLine QTextLayout.lineAt(int _i)"""
        return QTextLine()
    def lineCount():
        """int QTextLayout.lineCount()"""
        return int()
    def createLine():
        """QTextLine QTextLayout.createLine()"""
        return QTextLine()
    def endLayout():
        """None QTextLayout.endLayout()"""
        return None
    def beginLayout():
        """None QTextLayout.beginLayout()"""
        return None
    def cacheEnabled():
        """bool QTextLayout.cacheEnabled()"""
        return bool()
    def setCacheEnabled(_enable):
        """None QTextLayout.setCacheEnabled(bool _enable)"""
        return None
    def clearAdditionalFormats():
        """None QTextLayout.clearAdditionalFormats()"""
        return None
    def additionalFormats():
        """list-of-QTextLayout.FormatRange QTextLayout.additionalFormats()"""
        return [QTextLayout.FormatRange()]
    def setAdditionalFormats(_overrides):
        """None QTextLayout.setAdditionalFormats(list-of-QTextLayout.FormatRange _overrides)"""
        return None
    def preeditAreaText():
        """QString QTextLayout.preeditAreaText()"""
        return QString()
    def preeditAreaPosition():
        """int QTextLayout.preeditAreaPosition()"""
        return int()
    def setPreeditArea(_position, _text):
        """None QTextLayout.setPreeditArea(int _position, QString _text)"""
        return None
    def textOption():
        """QTextOption QTextLayout.textOption()"""
        return QTextOption()
    def setTextOption(_option):
        """None QTextLayout.setTextOption(QTextOption _option)"""
        return None
    def text():
        """QString QTextLayout.text()"""
        return QString()
    def setText(_string):
        """None QTextLayout.setText(QString _string)"""
        return None
    def font():
        """QFont QTextLayout.font()"""
        return QFont()
    def setFont(_f):
        """None QTextLayout.setFont(QFont _f)"""
        return None


class QTextLine():
    """"""
    CursorBetweenCharacters = int() # QTextLine.CursorPosition enum
    CursorOnCharacter = int() # QTextLine.CursorPosition enum

    Leading = int() # QTextLine.Edge enum
    Trailing = int() # QTextLine.Edge enum

    def __init__():
        """None QTextLine.__init__()"""
        return None
    def __init__():
        """QTextLine QTextLine.__init__()"""
        return QTextLine()
    def horizontalAdvance():
        """float QTextLine.horizontalAdvance()"""
        return float()
    def leadingIncluded():
        """bool QTextLine.leadingIncluded()"""
        return bool()
    def setLeadingIncluded(_included):
        """None QTextLine.setLeadingIncluded(bool _included)"""
        return None
    def leading():
        """float QTextLine.leading()"""
        return float()
    def position():
        """QPointF QTextLine.position()"""
        return QPointF()
    def draw(_painter, _position, _selection):
        """None QTextLine.draw(QPainter _painter, QPointF _position, QTextLayout.FormatRange _selection)"""
        return None
    def lineNumber():
        """int QTextLine.lineNumber()"""
        return int()
    def textLength():
        """int QTextLine.textLength()"""
        return int()
    def textStart():
        """int QTextLine.textStart()"""
        return int()
    def setPosition(_pos):
        """None QTextLine.setPosition(QPointF _pos)"""
        return None
    def setNumColumns(_columns):
        """None QTextLine.setNumColumns(int _columns)"""
        return None
    def setNumColumns(_columns, _alignmentWidth):
        """None QTextLine.setNumColumns(int _columns, float _alignmentWidth)"""
        return None
    def setLineWidth(_width):
        """None QTextLine.setLineWidth(float _width)"""
        return None
    def xToCursor(_x, _edge):
        """int QTextLine.xToCursor(float _x, QTextLine.CursorPosition _edge)"""
        return int()
    def cursorToX(_cursorPos, _edge):
        """float QTextLine.cursorToX(int _cursorPos, QTextLine.Edge _edge)"""
        return float()
    def naturalTextRect():
        """QRectF QTextLine.naturalTextRect()"""
        return QRectF()
    def naturalTextWidth():
        """float QTextLine.naturalTextWidth()"""
        return float()
    def height():
        """float QTextLine.height()"""
        return float()
    def descent():
        """float QTextLine.descent()"""
        return float()
    def ascent():
        """float QTextLine.ascent()"""
        return float()
    def width():
        """float QTextLine.width()"""
        return float()
    def y():
        """float QTextLine.y()"""
        return float()
    def x():
        """float QTextLine.x()"""
        return float()
    def rect():
        """QRectF QTextLine.rect()"""
        return QRectF()
    def isValid():
        """bool QTextLine.isValid()"""
        return bool()


class QTextObject(QObject):
    """"""
    def __init__(_doc):
        """None QTextObject.__init__(QTextDocument _doc)"""
        return None
    def objectIndex():
        """int QTextObject.objectIndex()"""
        return int()
    def document():
        """QTextDocument QTextObject.document()"""
        return QTextDocument()
    def formatIndex():
        """int QTextObject.formatIndex()"""
        return int()
    def format():
        """QTextFormat QTextObject.format()"""
        return QTextFormat()
    def setFormat(_format):
        """None QTextObject.setFormat(QTextFormat _format)"""
        return None


class QTextBlockGroup(QTextObject):
    """"""
    def __init__(_doc):
        """None QTextBlockGroup.__init__(QTextDocument _doc)"""
        return None
    def blockList():
        """list-of-QTextBlock QTextBlockGroup.blockList()"""
        return [QTextBlock()]
    def blockFormatChanged(_block):
        """None QTextBlockGroup.blockFormatChanged(QTextBlock _block)"""
        return None
    def blockRemoved(_block):
        """None QTextBlockGroup.blockRemoved(QTextBlock _block)"""
        return None
    def blockInserted(_block):
        """None QTextBlockGroup.blockInserted(QTextBlock _block)"""
        return None


class QTextList(QTextBlockGroup):
    """"""
    def __init__(_doc):
        """None QTextList.__init__(QTextDocument _doc)"""
        return None
    def setFormat(_aformat):
        """None QTextList.setFormat(QTextListFormat _aformat)"""
        return None
    def format():
        """QTextListFormat QTextList.format()"""
        return QTextListFormat()
    def add(_block):
        """None QTextList.add(QTextBlock _block)"""
        return None
    def remove():
        """QTextBlock QTextList.remove()"""
        return QTextBlock()
    def removeItem(_i):
        """None QTextList.removeItem(int _i)"""
        return None
    def itemText():
        """QTextBlock QTextList.itemText()"""
        return QTextBlock()
    def itemNumber():
        """QTextBlock QTextList.itemNumber()"""
        return QTextBlock()
    def item(_i):
        """QTextBlock QTextList.item(int _i)"""
        return QTextBlock()
    def isEmpty():
        """bool QTextList.isEmpty()"""
        return bool()
    def __len__():
        """ QTextList.__len__()"""
        return ()
    def count():
        """int QTextList.count()"""
        return int()


class QTextFrame(QTextObject):
    """"""
    def __init__(_doc):
        """None QTextFrame.__init__(QTextDocument _doc)"""
        return None
    def setFrameFormat(_aformat):
        """None QTextFrame.setFrameFormat(QTextFrameFormat _aformat)"""
        return None
    def end():
        """QTextFrame.iterator QTextFrame.end()"""
        return QTextFrame.iterator()
    def begin():
        """QTextFrame.iterator QTextFrame.begin()"""
        return QTextFrame.iterator()
    def parentFrame():
        """QTextFrame QTextFrame.parentFrame()"""
        return QTextFrame()
    def childFrames():
        """list-of-QTextFrame QTextFrame.childFrames()"""
        return [QTextFrame()]
    def lastPosition():
        """int QTextFrame.lastPosition()"""
        return int()
    def firstPosition():
        """int QTextFrame.firstPosition()"""
        return int()
    def lastCursorPosition():
        """QTextCursor QTextFrame.lastCursorPosition()"""
        return QTextCursor()
    def firstCursorPosition():
        """QTextCursor QTextFrame.firstCursorPosition()"""
        return QTextCursor()
    def frameFormat():
        """QTextFrameFormat QTextFrame.frameFormat()"""
        return QTextFrameFormat()


class QTextBlock():
    """"""
    def __init__():
        """None QTextBlock.__init__()"""
        return None
    def __init__(_o):
        """None QTextBlock.__init__(QTextBlock _o)"""
        return None
    def __ge__(_o):
        """bool QTextBlock.__ge__(QTextBlock _o)"""
        return bool()
    def textDirection():
        """Qt.LayoutDirection QTextBlock.textDirection()"""
        return Qt.LayoutDirection()
    def lineCount():
        """int QTextBlock.lineCount()"""
        return int()
    def setLineCount(_count):
        """None QTextBlock.setLineCount(int _count)"""
        return None
    def firstLineNumber():
        """int QTextBlock.firstLineNumber()"""
        return int()
    def blockNumber():
        """int QTextBlock.blockNumber()"""
        return int()
    def setVisible(_visible):
        """None QTextBlock.setVisible(bool _visible)"""
        return None
    def isVisible():
        """bool QTextBlock.isVisible()"""
        return bool()
    def setRevision(_rev):
        """None QTextBlock.setRevision(int _rev)"""
        return None
    def revision():
        """int QTextBlock.revision()"""
        return int()
    def clearLayout():
        """None QTextBlock.clearLayout()"""
        return None
    def setUserState(_state):
        """None QTextBlock.setUserState(int _state)"""
        return None
    def userState():
        """int QTextBlock.userState()"""
        return int()
    def setUserData(_data):
        """None QTextBlock.setUserData(QTextBlockUserData _data)"""
        return None
    def userData():
        """QTextBlockUserData QTextBlock.userData()"""
        return QTextBlockUserData()
    def previous():
        """QTextBlock QTextBlock.previous()"""
        return QTextBlock()
    def next():
        """QTextBlock QTextBlock.next()"""
        return QTextBlock()
    def end():
        """QTextBlock.iterator QTextBlock.end()"""
        return QTextBlock.iterator()
    def begin():
        """QTextBlock.iterator QTextBlock.begin()"""
        return QTextBlock.iterator()
    def textList():
        """QTextList QTextBlock.textList()"""
        return QTextList()
    def document():
        """QTextDocument QTextBlock.document()"""
        return QTextDocument()
    def text():
        """QString QTextBlock.text()"""
        return QString()
    def charFormatIndex():
        """int QTextBlock.charFormatIndex()"""
        return int()
    def charFormat():
        """QTextCharFormat QTextBlock.charFormat()"""
        return QTextCharFormat()
    def blockFormatIndex():
        """int QTextBlock.blockFormatIndex()"""
        return int()
    def blockFormat():
        """QTextBlockFormat QTextBlock.blockFormat()"""
        return QTextBlockFormat()
    def layout():
        """QTextLayout QTextBlock.layout()"""
        return QTextLayout()
    def contains(_position):
        """bool QTextBlock.contains(int _position)"""
        return bool()
    def length():
        """int QTextBlock.length()"""
        return int()
    def position():
        """int QTextBlock.position()"""
        return int()
    def __lt__(_o):
        """bool QTextBlock.__lt__(QTextBlock _o)"""
        return bool()
    def __ne__(_o):
        """bool QTextBlock.__ne__(QTextBlock _o)"""
        return bool()
    def __eq__(_o):
        """bool QTextBlock.__eq__(QTextBlock _o)"""
        return bool()
    def isValid():
        """bool QTextBlock.isValid()"""
        return bool()


class QTextFragment():
    """"""
    def __init__():
        """None QTextFragment.__init__()"""
        return None
    def __init__(_o):
        """None QTextFragment.__init__(QTextFragment _o)"""
        return None
    def __ge__(_o):
        """bool QTextFragment.__ge__(QTextFragment _o)"""
        return bool()
    def text():
        """QString QTextFragment.text()"""
        return QString()
    def charFormatIndex():
        """int QTextFragment.charFormatIndex()"""
        return int()
    def charFormat():
        """QTextCharFormat QTextFragment.charFormat()"""
        return QTextCharFormat()
    def contains(_position):
        """bool QTextFragment.contains(int _position)"""
        return bool()
    def length():
        """int QTextFragment.length()"""
        return int()
    def position():
        """int QTextFragment.position()"""
        return int()
    def __lt__(_o):
        """bool QTextFragment.__lt__(QTextFragment _o)"""
        return bool()
    def __ne__(_o):
        """bool QTextFragment.__ne__(QTextFragment _o)"""
        return bool()
    def __eq__(_o):
        """bool QTextFragment.__eq__(QTextFragment _o)"""
        return bool()
    def isValid():
        """bool QTextFragment.isValid()"""
        return bool()


class QTextBlockUserData():
    """"""
    def __init__():
        """None QTextBlockUserData.__init__()"""
        return None
    def __init__():
        """QTextBlockUserData QTextBlockUserData.__init__()"""
        return QTextBlockUserData()


class QTextOption():
    """"""
    LeftTab = int() # QTextOption.TabType enum
    RightTab = int() # QTextOption.TabType enum
    CenterTab = int() # QTextOption.TabType enum
    DelimiterTab = int() # QTextOption.TabType enum

    IncludeTrailingSpaces = int() # QTextOption.Flag enum
    ShowTabsAndSpaces = int() # QTextOption.Flag enum
    ShowLineAndParagraphSeparators = int() # QTextOption.Flag enum
    AddSpaceForLineAndParagraphSeparators = int() # QTextOption.Flag enum
    SuppressColors = int() # QTextOption.Flag enum

    NoWrap = int() # QTextOption.WrapMode enum
    WordWrap = int() # QTextOption.WrapMode enum
    ManualWrap = int() # QTextOption.WrapMode enum
    WrapAnywhere = int() # QTextOption.WrapMode enum
    WrapAtWordBoundaryOrAnywhere = int() # QTextOption.WrapMode enum

    def __init__():
        """None QTextOption.__init__()"""
        return None
    def __init__(_alignment):
        """None QTextOption.__init__(Qt.Alignment _alignment)"""
        return None
    def __init__(_o):
        """None QTextOption.__init__(QTextOption _o)"""
        return None
    def tabs():
        """list-of-QTextOption.Tab QTextOption.tabs()"""
        return [QTextOption.Tab()]
    def setTabs(_tabStops):
        """None QTextOption.setTabs(list-of-QTextOption.Tab _tabStops)"""
        return None
    def setTabStop(_atabStop):
        """None QTextOption.setTabStop(float _atabStop)"""
        return None
    def setFlags(_aflags):
        """None QTextOption.setFlags(QTextOption.Flags _aflags)"""
        return None
    def setAlignment(_aalignment):
        """None QTextOption.setAlignment(Qt.Alignment _aalignment)"""
        return None
    def useDesignMetrics():
        """bool QTextOption.useDesignMetrics()"""
        return bool()
    def setUseDesignMetrics(_b):
        """None QTextOption.setUseDesignMetrics(bool _b)"""
        return None
    def tabArray():
        """list-of-float QTextOption.tabArray()"""
        return [float()]
    def setTabArray(_tabStops):
        """None QTextOption.setTabArray(list-of-float _tabStops)"""
        return None
    def tabStop():
        """float QTextOption.tabStop()"""
        return float()
    def flags():
        """QTextOption.Flags QTextOption.flags()"""
        return QTextOption.Flags()
    def wrapMode():
        """QTextOption.WrapMode QTextOption.wrapMode()"""
        return QTextOption.WrapMode()
    def setWrapMode(_wrap):
        """None QTextOption.setWrapMode(QTextOption.WrapMode _wrap)"""
        return None
    def textDirection():
        """Qt.LayoutDirection QTextOption.textDirection()"""
        return Qt.LayoutDirection()
    def setTextDirection(_aDirection):
        """None QTextOption.setTextDirection(Qt.LayoutDirection _aDirection)"""
        return None
    def alignment():
        """Qt.Alignment QTextOption.alignment()"""
        return Qt.Alignment()


class QTextTableCell():
    """"""
    def __init__():
        """None QTextTableCell.__init__()"""
        return None
    def __init__(_o):
        """None QTextTableCell.__init__(QTextTableCell _o)"""
        return None
    def __ne__(_other):
        """bool QTextTableCell.__ne__(QTextTableCell _other)"""
        return bool()
    def __eq__(_other):
        """bool QTextTableCell.__eq__(QTextTableCell _other)"""
        return bool()
    def tableCellFormatIndex():
        """int QTextTableCell.tableCellFormatIndex()"""
        return int()
    def lastCursorPosition():
        """QTextCursor QTextTableCell.lastCursorPosition()"""
        return QTextCursor()
    def firstCursorPosition():
        """QTextCursor QTextTableCell.firstCursorPosition()"""
        return QTextCursor()
    def isValid():
        """bool QTextTableCell.isValid()"""
        return bool()
    def columnSpan():
        """int QTextTableCell.columnSpan()"""
        return int()
    def rowSpan():
        """int QTextTableCell.rowSpan()"""
        return int()
    def column():
        """int QTextTableCell.column()"""
        return int()
    def row():
        """int QTextTableCell.row()"""
        return int()
    def setFormat(_format):
        """None QTextTableCell.setFormat(QTextCharFormat _format)"""
        return None
    def format():
        """QTextCharFormat QTextTableCell.format()"""
        return QTextCharFormat()


class QTextTable(QTextFrame):
    """"""
    def __init__(_doc):
        """None QTextTable.__init__(QTextDocument _doc)"""
        return None
    def appendColumns(_count):
        """None QTextTable.appendColumns(int _count)"""
        return None
    def appendRows(_count):
        """None QTextTable.appendRows(int _count)"""
        return None
    def setFormat(_aformat):
        """None QTextTable.setFormat(QTextTableFormat _aformat)"""
        return None
    def format():
        """QTextTableFormat QTextTable.format()"""
        return QTextTableFormat()
    def rowEnd(_c):
        """QTextCursor QTextTable.rowEnd(QTextCursor _c)"""
        return QTextCursor()
    def rowStart(_c):
        """QTextCursor QTextTable.rowStart(QTextCursor _c)"""
        return QTextCursor()
    def cellAt(_row, _col):
        """QTextTableCell QTextTable.cellAt(int _row, int _col)"""
        return QTextTableCell()
    def cellAt(_position):
        """QTextTableCell QTextTable.cellAt(int _position)"""
        return QTextTableCell()
    def cellAt(_c):
        """QTextTableCell QTextTable.cellAt(QTextCursor _c)"""
        return QTextTableCell()
    def columns():
        """int QTextTable.columns()"""
        return int()
    def rows():
        """int QTextTable.rows()"""
        return int()
    def splitCell(_row, _col, _numRows, _numCols):
        """None QTextTable.splitCell(int _row, int _col, int _numRows, int _numCols)"""
        return None
    def mergeCells(_row, _col, _numRows, _numCols):
        """None QTextTable.mergeCells(int _row, int _col, int _numRows, int _numCols)"""
        return None
    def mergeCells(_cursor):
        """None QTextTable.mergeCells(QTextCursor _cursor)"""
        return None
    def removeColumns(_pos, _num):
        """None QTextTable.removeColumns(int _pos, int _num)"""
        return None
    def removeRows(_pos, _num):
        """None QTextTable.removeRows(int _pos, int _num)"""
        return None
    def insertColumns(_pos, _num):
        """None QTextTable.insertColumns(int _pos, int _num)"""
        return None
    def insertRows(_pos, _num):
        """None QTextTable.insertRows(int _pos, int _num)"""
        return None
    def resize(_rows, _cols):
        """None QTextTable.resize(int _rows, int _cols)"""
        return None


class QToolBar(QWidget):
    """"""
    def __init__(_title, _parent):
        """None QToolBar.__init__(QString _title, QWidget _parent)"""
        return None
    def __init__(_parent):
        """None QToolBar.__init__(QWidget _parent)"""
        return None
    def isFloating():
        """bool QToolBar.isFloating()"""
        return bool()
    def setFloatable(_floatable):
        """None QToolBar.setFloatable(bool _floatable)"""
        return None
    def isFloatable():
        """bool QToolBar.isFloatable()"""
        return bool()
    def event(_event):
        """bool QToolBar.event(QEvent _event)"""
        return bool()
    def resizeEvent(_event):
        """None QToolBar.resizeEvent(QResizeEvent _event)"""
        return None
    def paintEvent(_event):
        """None QToolBar.paintEvent(QPaintEvent _event)"""
        return None
    def childEvent(_event):
        """None QToolBar.childEvent(QChildEvent _event)"""
        return None
    def changeEvent(_event):
        """None QToolBar.changeEvent(QEvent _event)"""
        return None
    def actionEvent(_event):
        """None QToolBar.actionEvent(QActionEvent _event)"""
        return None
    def initStyleOption(_option):
        """None QToolBar.initStyleOption(QStyleOptionToolBar _option)"""
        return None
    def setToolButtonStyle(_toolButtonStyle):
        """None QToolBar.setToolButtonStyle(Qt.ToolButtonStyle _toolButtonStyle)"""
        return None
    def setIconSize(_iconSize):
        """None QToolBar.setIconSize(QSize _iconSize)"""
        return None
    def widgetForAction(_action):
        """QWidget QToolBar.widgetForAction(QAction _action)"""
        return QWidget()
    def toolButtonStyle():
        """Qt.ToolButtonStyle QToolBar.toolButtonStyle()"""
        return Qt.ToolButtonStyle()
    def iconSize():
        """QSize QToolBar.iconSize()"""
        return QSize()
    def toggleViewAction():
        """QAction QToolBar.toggleViewAction()"""
        return QAction()
    def actionAt(_p):
        """QAction QToolBar.actionAt(QPoint _p)"""
        return QAction()
    def actionAt(_ax, _ay):
        """QAction QToolBar.actionAt(int _ax, int _ay)"""
        return QAction()
    def actionGeometry(_action):
        """QRect QToolBar.actionGeometry(QAction _action)"""
        return QRect()
    def insertWidget(_before, _widget):
        """QAction QToolBar.insertWidget(QAction _before, QWidget _widget)"""
        return QAction()
    def addWidget(_widget):
        """QAction QToolBar.addWidget(QWidget _widget)"""
        return QAction()
    def insertSeparator(_before):
        """QAction QToolBar.insertSeparator(QAction _before)"""
        return QAction()
    def addSeparator():
        """QAction QToolBar.addSeparator()"""
        return QAction()
    def addAction(_action):
        """None QToolBar.addAction(QAction _action)"""
        return None
    def addAction(_text):
        """QAction QToolBar.addAction(QString _text)"""
        return QAction()
    def addAction(_icon, _text):
        """QAction QToolBar.addAction(QIcon _icon, QString _text)"""
        return QAction()
    def addAction(_text, _receiver, _member):
        """QAction QToolBar.addAction(QString _text, QObject _receiver, SLOT()SLOT() _member)"""
        return QAction()
    def addAction(_text, _receiver):
        """QAction QToolBar.addAction(QString _text, callable _receiver)"""
        return QAction()
    def addAction(_icon, _text, _receiver, _member):
        """QAction QToolBar.addAction(QIcon _icon, QString _text, QObject _receiver, SLOT()SLOT() _member)"""
        return QAction()
    def addAction(_icon, _text, _receiver):
        """QAction QToolBar.addAction(QIcon _icon, QString _text, callable _receiver)"""
        return QAction()
    def clear():
        """None QToolBar.clear()"""
        return None
    def orientation():
        """Qt.Orientation QToolBar.orientation()"""
        return Qt.Orientation()
    def setOrientation(_orientation):
        """None QToolBar.setOrientation(Qt.Orientation _orientation)"""
        return None
    def isAreaAllowed(_area):
        """bool QToolBar.isAreaAllowed(Qt.ToolBarArea _area)"""
        return bool()
    def allowedAreas():
        """Qt.ToolBarAreas QToolBar.allowedAreas()"""
        return Qt.ToolBarAreas()
    def setAllowedAreas(_areas):
        """None QToolBar.setAllowedAreas(Qt.ToolBarAreas _areas)"""
        return None
    def isMovable():
        """bool QToolBar.isMovable()"""
        return bool()
    def setMovable(_movable):
        """None QToolBar.setMovable(bool _movable)"""
        return None


class QToolBox(QFrame):
    """"""
    def __init__(_parent, _flags):
        """None QToolBox.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def changeEvent():
        """QEvent QToolBox.changeEvent()"""
        return QEvent()
    def showEvent(_e):
        """None QToolBox.showEvent(QShowEvent _e)"""
        return None
    def event(_e):
        """bool QToolBox.event(QEvent _e)"""
        return bool()
    def itemRemoved(_index):
        """None QToolBox.itemRemoved(int _index)"""
        return None
    def itemInserted(_index):
        """None QToolBox.itemInserted(int _index)"""
        return None
    def setCurrentWidget(_widget):
        """None QToolBox.setCurrentWidget(QWidget _widget)"""
        return None
    def setCurrentIndex(_index):
        """None QToolBox.setCurrentIndex(int _index)"""
        return None
    def __len__():
        """ QToolBox.__len__()"""
        return ()
    def count():
        """int QToolBox.count()"""
        return int()
    def indexOf(_widget):
        """int QToolBox.indexOf(QWidget _widget)"""
        return int()
    def widget(_index):
        """QWidget QToolBox.widget(int _index)"""
        return QWidget()
    def currentWidget():
        """QWidget QToolBox.currentWidget()"""
        return QWidget()
    def currentIndex():
        """int QToolBox.currentIndex()"""
        return int()
    def itemToolTip(_index):
        """QString QToolBox.itemToolTip(int _index)"""
        return QString()
    def setItemToolTip(_index, _toolTip):
        """None QToolBox.setItemToolTip(int _index, QString _toolTip)"""
        return None
    def itemIcon(_index):
        """QIcon QToolBox.itemIcon(int _index)"""
        return QIcon()
    def setItemIcon(_index, _icon):
        """None QToolBox.setItemIcon(int _index, QIcon _icon)"""
        return None
    def itemText(_index):
        """QString QToolBox.itemText(int _index)"""
        return QString()
    def setItemText(_index, _text):
        """None QToolBox.setItemText(int _index, QString _text)"""
        return None
    def isItemEnabled(_index):
        """bool QToolBox.isItemEnabled(int _index)"""
        return bool()
    def setItemEnabled(_index, _enabled):
        """None QToolBox.setItemEnabled(int _index, bool _enabled)"""
        return None
    def removeItem(_index):
        """None QToolBox.removeItem(int _index)"""
        return None
    def insertItem(_index, _item, _text):
        """int QToolBox.insertItem(int _index, QWidget _item, QString _text)"""
        return int()
    def insertItem(_index, _widget, _icon, _text):
        """int QToolBox.insertItem(int _index, QWidget _widget, QIcon _icon, QString _text)"""
        return int()
    def addItem(_item, _text):
        """int QToolBox.addItem(QWidget _item, QString _text)"""
        return int()
    def addItem(_item, _iconSet, _text):
        """int QToolBox.addItem(QWidget _item, QIcon _iconSet, QString _text)"""
        return int()


class QToolButton(QAbstractButton):
    """"""
    DelayedPopup = int() # QToolButton.ToolButtonPopupMode enum
    MenuButtonPopup = int() # QToolButton.ToolButtonPopupMode enum
    InstantPopup = int() # QToolButton.ToolButtonPopupMode enum

    def __init__(_parent):
        """None QToolButton.__init__(QWidget _parent)"""
        return None
    def hitButton(_pos):
        """bool QToolButton.hitButton(QPoint _pos)"""
        return bool()
    def nextCheckState():
        """None QToolButton.nextCheckState()"""
        return None
    def mouseReleaseEvent():
        """QMouseEvent QToolButton.mouseReleaseEvent()"""
        return QMouseEvent()
    def changeEvent():
        """QEvent QToolButton.changeEvent()"""
        return QEvent()
    def timerEvent():
        """QTimerEvent QToolButton.timerEvent()"""
        return QTimerEvent()
    def leaveEvent():
        """QEvent QToolButton.leaveEvent()"""
        return QEvent()
    def enterEvent():
        """QEvent QToolButton.enterEvent()"""
        return QEvent()
    def actionEvent():
        """QActionEvent QToolButton.actionEvent()"""
        return QActionEvent()
    def paintEvent():
        """QPaintEvent QToolButton.paintEvent()"""
        return QPaintEvent()
    def mousePressEvent():
        """QMouseEvent QToolButton.mousePressEvent()"""
        return QMouseEvent()
    def event(_e):
        """bool QToolButton.event(QEvent _e)"""
        return bool()
    def initStyleOption(_option):
        """None QToolButton.initStyleOption(QStyleOptionToolButton _option)"""
        return None
    def setDefaultAction():
        """QAction QToolButton.setDefaultAction()"""
        return QAction()
    def setToolButtonStyle(_style):
        """None QToolButton.setToolButtonStyle(Qt.ToolButtonStyle _style)"""
        return None
    def showMenu():
        """None QToolButton.showMenu()"""
        return None
    def autoRaise():
        """bool QToolButton.autoRaise()"""
        return bool()
    def setAutoRaise(_enable):
        """None QToolButton.setAutoRaise(bool _enable)"""
        return None
    def defaultAction():
        """QAction QToolButton.defaultAction()"""
        return QAction()
    def popupMode():
        """QToolButton.ToolButtonPopupMode QToolButton.popupMode()"""
        return QToolButton.ToolButtonPopupMode()
    def setPopupMode(_mode):
        """None QToolButton.setPopupMode(QToolButton.ToolButtonPopupMode _mode)"""
        return None
    def menu():
        """QMenu QToolButton.menu()"""
        return QMenu()
    def setMenu(_menu):
        """None QToolButton.setMenu(QMenu _menu)"""
        return None
    def setArrowType(_type):
        """None QToolButton.setArrowType(Qt.ArrowType _type)"""
        return None
    def arrowType():
        """Qt.ArrowType QToolButton.arrowType()"""
        return Qt.ArrowType()
    def toolButtonStyle():
        """Qt.ToolButtonStyle QToolButton.toolButtonStyle()"""
        return Qt.ToolButtonStyle()
    def minimumSizeHint():
        """QSize QToolButton.minimumSizeHint()"""
        return QSize()
    def sizeHint():
        """QSize QToolButton.sizeHint()"""
        return QSize()


class QToolTip():
    """"""
    def __init__():
        """QToolTip QToolTip.__init__()"""
        return QToolTip()
    def text():
        """QString QToolTip.text()"""
        return QString()
    def isVisible():
        """bool QToolTip.isVisible()"""
        return bool()
    def setFont():
        """QFont QToolTip.setFont()"""
        return QFont()
    def font():
        """QFont QToolTip.font()"""
        return QFont()
    def setPalette():
        """QPalette QToolTip.setPalette()"""
        return QPalette()
    def hideText():
        """None QToolTip.hideText()"""
        return None
    def palette():
        """QPalette QToolTip.palette()"""
        return QPalette()
    def showText(_pos, _text, _widget):
        """None QToolTip.showText(QPoint _pos, QString _text, QWidget _widget)"""
        return None
    def showText(_pos, _text, _w, _rect):
        """None QToolTip.showText(QPoint _pos, QString _text, QWidget _w, QRect _rect)"""
        return None


class QTransform():
    """"""
    TxNone = int() # QTransform.TransformationType enum
    TxTranslate = int() # QTransform.TransformationType enum
    TxScale = int() # QTransform.TransformationType enum
    TxRotate = int() # QTransform.TransformationType enum
    TxShear = int() # QTransform.TransformationType enum
    TxProject = int() # QTransform.TransformationType enum

    def __init__():
        """None QTransform.__init__()"""
        return None
    def __init__(_m11, _m12, _m13, _m21, _m22, _m23, _m31, _m32, _m33):
        """None QTransform.__init__(float _m11, float _m12, float _m13, float _m21, float _m22, float _m23, float _m31, float _m32, float _m33)"""
        return None
    def __init__(_h11, _h12, _h13, _h21, _h22, _h23):
        """None QTransform.__init__(float _h11, float _h12, float _h13, float _h21, float _h22, float _h23)"""
        return None
    def __init__(_mtx):
        """None QTransform.__init__(QMatrix _mtx)"""
        return None
    def __init__():
        """QTransform QTransform.__init__()"""
        return QTransform()
    def __div__(_n):
        """QTransform QTransform.__div__(float _n)"""
        return QTransform()
    def __add__(_n):
        """QTransform QTransform.__add__(float _n)"""
        return QTransform()
    def __sub__(_n):
        """QTransform QTransform.__sub__(float _n)"""
        return QTransform()
    def __isub__(_num):
        """QTransform QTransform.__isub__(float _num)"""
        return QTransform()
    def __iadd__(_num):
        """QTransform QTransform.__iadd__(float _num)"""
        return QTransform()
    def __idiv__(_div):
        """QTransform QTransform.__idiv__(float _div)"""
        return QTransform()
    def fromScale(_dx, _dy):
        """QTransform QTransform.fromScale(float _dx, float _dy)"""
        return QTransform()
    def fromTranslate(_dx, _dy):
        """QTransform QTransform.fromTranslate(float _dx, float _dy)"""
        return QTransform()
    def dy():
        """float QTransform.dy()"""
        return float()
    def dx():
        """float QTransform.dx()"""
        return float()
    def m33():
        """float QTransform.m33()"""
        return float()
    def m32():
        """float QTransform.m32()"""
        return float()
    def m31():
        """float QTransform.m31()"""
        return float()
    def m23():
        """float QTransform.m23()"""
        return float()
    def m22():
        """float QTransform.m22()"""
        return float()
    def m21():
        """float QTransform.m21()"""
        return float()
    def m13():
        """float QTransform.m13()"""
        return float()
    def m12():
        """float QTransform.m12()"""
        return float()
    def m11():
        """float QTransform.m11()"""
        return float()
    def det():
        """float QTransform.det()"""
        return float()
    def determinant():
        """float QTransform.determinant()"""
        return float()
    def isTranslating():
        """bool QTransform.isTranslating()"""
        return bool()
    def isRotating():
        """bool QTransform.isRotating()"""
        return bool()
    def isScaling():
        """bool QTransform.isScaling()"""
        return bool()
    def isInvertible():
        """bool QTransform.isInvertible()"""
        return bool()
    def isIdentity():
        """bool QTransform.isIdentity()"""
        return bool()
    def isAffine():
        """bool QTransform.isAffine()"""
        return bool()
    def toAffine():
        """QMatrix QTransform.toAffine()"""
        return QMatrix()
    def mapRect():
        """QRect QTransform.mapRect()"""
        return QRect()
    def mapRect():
        """QRectF QTransform.mapRect()"""
        return QRectF()
    def mapToPolygon(_r):
        """QPolygon QTransform.mapToPolygon(QRect _r)"""
        return QPolygon()
    def map(_x, _y, _tx, _ty):
        """None QTransform.map(int _x, int _y, int _tx, int _ty)"""
        return None
    def map(_x, _y, _tx, _ty):
        """None QTransform.map(float _x, float _y, float _tx, float _ty)"""
        return None
    def map(_p):
        """QPoint QTransform.map(QPoint _p)"""
        return QPoint()
    def map(_p):
        """QPointF QTransform.map(QPointF _p)"""
        return QPointF()
    def map(_l):
        """QLine QTransform.map(QLine _l)"""
        return QLine()
    def map(_l):
        """QLineF QTransform.map(QLineF _l)"""
        return QLineF()
    def map(_a):
        """QPolygonF QTransform.map(QPolygonF _a)"""
        return QPolygonF()
    def map(_a):
        """QPolygon QTransform.map(QPolygon _a)"""
        return QPolygon()
    def map(_r):
        """QRegion QTransform.map(QRegion _r)"""
        return QRegion()
    def map(_p):
        """QPainterPath QTransform.map(QPainterPath _p)"""
        return QPainterPath()
    def reset():
        """None QTransform.reset()"""
        return None
    def __mul__(_o):
        """QTransform QTransform.__mul__(QTransform _o)"""
        return QTransform()
    def __mul__(_n):
        """QTransform QTransform.__mul__(float _n)"""
        return QTransform()
    def __imul__():
        """QTransform QTransform.__imul__()"""
        return QTransform()
    def __imul__(_num):
        """QTransform QTransform.__imul__(float _num)"""
        return QTransform()
    def __ne__():
        """QTransform QTransform.__ne__()"""
        return QTransform()
    def __eq__():
        """QTransform QTransform.__eq__()"""
        return QTransform()
    def quadToQuad(_one, _two, _result):
        """bool QTransform.quadToQuad(QPolygonF _one, QPolygonF _two, QTransform _result)"""
        return bool()
    def quadToSquare(_quad, _result):
        """bool QTransform.quadToSquare(QPolygonF _quad, QTransform _result)"""
        return bool()
    def squareToQuad(_square, _result):
        """bool QTransform.squareToQuad(QPolygonF _square, QTransform _result)"""
        return bool()
    def rotateRadians(_angle, _axis):
        """QTransform QTransform.rotateRadians(float _angle, Qt.Axis _axis)"""
        return QTransform()
    def rotate(_angle, _axis):
        """QTransform QTransform.rotate(float _angle, Qt.Axis _axis)"""
        return QTransform()
    def shear(_sh, _sv):
        """QTransform QTransform.shear(float _sh, float _sv)"""
        return QTransform()
    def scale(_sx, _sy):
        """QTransform QTransform.scale(float _sx, float _sy)"""
        return QTransform()
    def translate(_dx, _dy):
        """QTransform QTransform.translate(float _dx, float _dy)"""
        return QTransform()
    def transposed():
        """QTransform QTransform.transposed()"""
        return QTransform()
    def adjoint():
        """QTransform QTransform.adjoint()"""
        return QTransform()
    def inverted(_invertible):
        """QTransform QTransform.inverted(bool _invertible)"""
        return QTransform()
    def setMatrix(_m11, _m12, _m13, _m21, _m22, _m23, _m31, _m32, _m33):
        """None QTransform.setMatrix(float _m11, float _m12, float _m13, float _m21, float _m22, float _m23, float _m31, float _m32, float _m33)"""
        return None
    def type():
        """QTransform.TransformationType QTransform.type()"""
        return QTransform.TransformationType()


class QTreeView(QAbstractItemView):
    """"""
    def __init__(_parent):
        """None QTreeView.__init__(QWidget _parent)"""
        return None
    def setHeaderHidden(_hide):
        """None QTreeView.setHeaderHidden(bool _hide)"""
        return None
    def isHeaderHidden():
        """bool QTreeView.isHeaderHidden()"""
        return bool()
    def setExpandsOnDoubleClick(_enable):
        """None QTreeView.setExpandsOnDoubleClick(bool _enable)"""
        return None
    def expandsOnDoubleClick():
        """bool QTreeView.expandsOnDoubleClick()"""
        return bool()
    def currentChanged(_current, _previous):
        """None QTreeView.currentChanged(QModelIndex _current, QModelIndex _previous)"""
        return None
    def selectionChanged(_selected, _deselected):
        """None QTreeView.selectionChanged(QItemSelection _selected, QItemSelection _deselected)"""
        return None
    def rowHeight(_index):
        """int QTreeView.rowHeight(QModelIndex _index)"""
        return int()
    def viewportEvent(_event):
        """bool QTreeView.viewportEvent(QEvent _event)"""
        return bool()
    def dragMoveEvent(_event):
        """None QTreeView.dragMoveEvent(QDragMoveEvent _event)"""
        return None
    def expandToDepth(_depth):
        """None QTreeView.expandToDepth(int _depth)"""
        return None
    def wordWrap():
        """bool QTreeView.wordWrap()"""
        return bool()
    def setWordWrap(_on):
        """None QTreeView.setWordWrap(bool _on)"""
        return None
    def setFirstColumnSpanned(_row, _parent, _span):
        """None QTreeView.setFirstColumnSpanned(int _row, QModelIndex _parent, bool _span)"""
        return None
    def isFirstColumnSpanned(_row, _parent):
        """bool QTreeView.isFirstColumnSpanned(int _row, QModelIndex _parent)"""
        return bool()
    def setAutoExpandDelay(_delay):
        """None QTreeView.setAutoExpandDelay(int _delay)"""
        return None
    def autoExpandDelay():
        """int QTreeView.autoExpandDelay()"""
        return int()
    def allColumnsShowFocus():
        """bool QTreeView.allColumnsShowFocus()"""
        return bool()
    def setAllColumnsShowFocus(_enable):
        """None QTreeView.setAllColumnsShowFocus(bool _enable)"""
        return None
    def isAnimated():
        """bool QTreeView.isAnimated()"""
        return bool()
    def setAnimated(_enable):
        """None QTreeView.setAnimated(bool _enable)"""
        return None
    def isSortingEnabled():
        """bool QTreeView.isSortingEnabled()"""
        return bool()
    def setSortingEnabled(_enable):
        """None QTreeView.setSortingEnabled(bool _enable)"""
        return None
    def setColumnWidth(_column, _width):
        """None QTreeView.setColumnWidth(int _column, int _width)"""
        return None
    def isIndexHidden(_index):
        """bool QTreeView.isIndexHidden(QModelIndex _index)"""
        return bool()
    def horizontalScrollbarAction(_action):
        """None QTreeView.horizontalScrollbarAction(int _action)"""
        return None
    def indexRowSizeHint(_index):
        """int QTreeView.indexRowSizeHint(QModelIndex _index)"""
        return int()
    def sizeHintForColumn(_column):
        """int QTreeView.sizeHintForColumn(int _column)"""
        return int()
    def updateGeometries():
        """None QTreeView.updateGeometries()"""
        return None
    def keyPressEvent(_event):
        """None QTreeView.keyPressEvent(QKeyEvent _event)"""
        return None
    def mouseDoubleClickEvent(_e):
        """None QTreeView.mouseDoubleClickEvent(QMouseEvent _e)"""
        return None
    def mouseMoveEvent(_event):
        """None QTreeView.mouseMoveEvent(QMouseEvent _event)"""
        return None
    def mousePressEvent(_e):
        """None QTreeView.mousePressEvent(QMouseEvent _e)"""
        return None
    def drawTree(_painter, _region):
        """None QTreeView.drawTree(QPainter _painter, QRegion _region)"""
        return None
    def drawBranches(_painter, _rect, _index):
        """None QTreeView.drawBranches(QPainter _painter, QRect _rect, QModelIndex _index)"""
        return None
    def drawRow(_painter, _options, _index):
        """None QTreeView.drawRow(QPainter _painter, QStyleOptionViewItem _options, QModelIndex _index)"""
        return None
    def mouseReleaseEvent(_event):
        """None QTreeView.mouseReleaseEvent(QMouseEvent _event)"""
        return None
    def timerEvent(_event):
        """None QTreeView.timerEvent(QTimerEvent _event)"""
        return None
    def paintEvent(_e):
        """None QTreeView.paintEvent(QPaintEvent _e)"""
        return None
    def selectedIndexes():
        """list-of-QModelIndex QTreeView.selectedIndexes()"""
        return [QModelIndex()]
    def visualRegionForSelection(_selection):
        """QRegion QTreeView.visualRegionForSelection(QItemSelection _selection)"""
        return QRegion()
    def setSelection(_rect, _command):
        """None QTreeView.setSelection(QRect _rect, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def verticalOffset():
        """int QTreeView.verticalOffset()"""
        return int()
    def horizontalOffset():
        """int QTreeView.horizontalOffset()"""
        return int()
    def moveCursor(_cursorAction, _modifiers):
        """QModelIndex QTreeView.moveCursor(QAbstractItemView.CursorAction _cursorAction, Qt.KeyboardModifiers _modifiers)"""
        return QModelIndex()
    def rowsAboutToBeRemoved(_parent, _start, _end):
        """None QTreeView.rowsAboutToBeRemoved(QModelIndex _parent, int _start, int _end)"""
        return None
    def rowsInserted(_parent, _start, _end):
        """None QTreeView.rowsInserted(QModelIndex _parent, int _start, int _end)"""
        return None
    def scrollContentsBy(_dx, _dy):
        """None QTreeView.scrollContentsBy(int _dx, int _dy)"""
        return None
    def rowsRemoved(_parent, _first, _last):
        """None QTreeView.rowsRemoved(QModelIndex _parent, int _first, int _last)"""
        return None
    def reexpand():
        """None QTreeView.reexpand()"""
        return None
    def columnMoved():
        """None QTreeView.columnMoved()"""
        return None
    def columnCountChanged(_oldCount, _newCount):
        """None QTreeView.columnCountChanged(int _oldCount, int _newCount)"""
        return None
    def columnResized(_column, _oldSize, _newSize):
        """None QTreeView.columnResized(int _column, int _oldSize, int _newSize)"""
        return None
    def selectAll():
        """None QTreeView.selectAll()"""
        return None
    def sortByColumn(_column):
        """None QTreeView.sortByColumn(int _column)"""
        return None
    def sortByColumn(_column, _order):
        """None QTreeView.sortByColumn(int _column, Qt.SortOrder _order)"""
        return None
    def resizeColumnToContents(_column):
        """None QTreeView.resizeColumnToContents(int _column)"""
        return None
    def collapseAll():
        """None QTreeView.collapseAll()"""
        return None
    def collapse(_index):
        """None QTreeView.collapse(QModelIndex _index)"""
        return None
    def expandAll():
        """None QTreeView.expandAll()"""
        return None
    def expand(_index):
        """None QTreeView.expand(QModelIndex _index)"""
        return None
    def showColumn(_column):
        """None QTreeView.showColumn(int _column)"""
        return None
    def hideColumn(_column):
        """None QTreeView.hideColumn(int _column)"""
        return None
    def dataChanged(_topLeft, _bottomRight):
        """None QTreeView.dataChanged(QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None
    def reset():
        """None QTreeView.reset()"""
        return None
    def doItemsLayout():
        """None QTreeView.doItemsLayout()"""
        return None
    def indexBelow(_index):
        """QModelIndex QTreeView.indexBelow(QModelIndex _index)"""
        return QModelIndex()
    def indexAbove(_index):
        """QModelIndex QTreeView.indexAbove(QModelIndex _index)"""
        return QModelIndex()
    def indexAt(_p):
        """QModelIndex QTreeView.indexAt(QPoint _p)"""
        return QModelIndex()
    def scrollTo(_index, _hint):
        """None QTreeView.scrollTo(QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def visualRect(_index):
        """QRect QTreeView.visualRect(QModelIndex _index)"""
        return QRect()
    def keyboardSearch(_search):
        """None QTreeView.keyboardSearch(QString _search)"""
        return None
    def setExpanded(_index, _expand):
        """None QTreeView.setExpanded(QModelIndex _index, bool _expand)"""
        return None
    def isExpanded(_index):
        """bool QTreeView.isExpanded(QModelIndex _index)"""
        return bool()
    def setRowHidden(_row, _parent, _hide):
        """None QTreeView.setRowHidden(int _row, QModelIndex _parent, bool _hide)"""
        return None
    def isRowHidden(_row, _parent):
        """bool QTreeView.isRowHidden(int _row, QModelIndex _parent)"""
        return bool()
    def setColumnHidden(_column, _hide):
        """None QTreeView.setColumnHidden(int _column, bool _hide)"""
        return None
    def isColumnHidden(_column):
        """bool QTreeView.isColumnHidden(int _column)"""
        return bool()
    def columnAt(_x):
        """int QTreeView.columnAt(int _x)"""
        return int()
    def columnWidth(_column):
        """int QTreeView.columnWidth(int _column)"""
        return int()
    def columnViewportPosition(_column):
        """int QTreeView.columnViewportPosition(int _column)"""
        return int()
    def setItemsExpandable(_enable):
        """None QTreeView.setItemsExpandable(bool _enable)"""
        return None
    def itemsExpandable():
        """bool QTreeView.itemsExpandable()"""
        return bool()
    def setUniformRowHeights(_uniform):
        """None QTreeView.setUniformRowHeights(bool _uniform)"""
        return None
    def uniformRowHeights():
        """bool QTreeView.uniformRowHeights()"""
        return bool()
    def setRootIsDecorated(_show):
        """None QTreeView.setRootIsDecorated(bool _show)"""
        return None
    def rootIsDecorated():
        """bool QTreeView.rootIsDecorated()"""
        return bool()
    def setIndentation(_i):
        """None QTreeView.setIndentation(int _i)"""
        return None
    def indentation():
        """int QTreeView.indentation()"""
        return int()
    def setHeader(_header):
        """None QTreeView.setHeader(QHeaderView _header)"""
        return None
    def header():
        """QHeaderView QTreeView.header()"""
        return QHeaderView()
    def setSelectionModel(_selectionModel):
        """None QTreeView.setSelectionModel(QItemSelectionModel _selectionModel)"""
        return None
    def setRootIndex(_index):
        """None QTreeView.setRootIndex(QModelIndex _index)"""
        return None
    def setModel(_model):
        """None QTreeView.setModel(QAbstractItemModel _model)"""
        return None


class QTreeWidgetItem():
    """"""
    ShowIndicator = int() # QTreeWidgetItem.ChildIndicatorPolicy enum
    DontShowIndicator = int() # QTreeWidgetItem.ChildIndicatorPolicy enum
    DontShowIndicatorWhenChildless = int() # QTreeWidgetItem.ChildIndicatorPolicy enum

    Type = int() # QTreeWidgetItem.ItemType enum
    UserType = int() # QTreeWidgetItem.ItemType enum

    def __init__(_type):
        """None QTreeWidgetItem.__init__(int _type)"""
        return None
    def __init__(_strings, _type):
        """None QTreeWidgetItem.__init__(QStringList _strings, int _type)"""
        return None
    def __init__(_parent, _type):
        """None QTreeWidgetItem.__init__(QTreeWidget _parent, int _type)"""
        return None
    def __init__(_parent, _strings, _type):
        """None QTreeWidgetItem.__init__(QTreeWidget _parent, QStringList _strings, int _type)"""
        return None
    def __init__(_parent, _preceding, _type):
        """None QTreeWidgetItem.__init__(QTreeWidget _parent, QTreeWidgetItem _preceding, int _type)"""
        return None
    def __init__(_parent, _type):
        """None QTreeWidgetItem.__init__(QTreeWidgetItem _parent, int _type)"""
        return None
    def __init__(_parent, _strings, _type):
        """None QTreeWidgetItem.__init__(QTreeWidgetItem _parent, QStringList _strings, int _type)"""
        return None
    def __init__(_parent, _preceding, _type):
        """None QTreeWidgetItem.__init__(QTreeWidgetItem _parent, QTreeWidgetItem _preceding, int _type)"""
        return None
    def __init__(_other):
        """None QTreeWidgetItem.__init__(QTreeWidgetItem _other)"""
        return None
    def __ge__(_other):
        """bool QTreeWidgetItem.__ge__(QTreeWidgetItem _other)"""
        return bool()
    def emitDataChanged():
        """None QTreeWidgetItem.emitDataChanged()"""
        return None
    def isDisabled():
        """bool QTreeWidgetItem.isDisabled()"""
        return bool()
    def setDisabled(_disabled):
        """None QTreeWidgetItem.setDisabled(bool _disabled)"""
        return None
    def isFirstColumnSpanned():
        """bool QTreeWidgetItem.isFirstColumnSpanned()"""
        return bool()
    def setFirstColumnSpanned(_aspan):
        """None QTreeWidgetItem.setFirstColumnSpanned(bool _aspan)"""
        return None
    def removeChild(_child):
        """None QTreeWidgetItem.removeChild(QTreeWidgetItem _child)"""
        return None
    def childIndicatorPolicy():
        """QTreeWidgetItem.ChildIndicatorPolicy QTreeWidgetItem.childIndicatorPolicy()"""
        return QTreeWidgetItem.ChildIndicatorPolicy()
    def setChildIndicatorPolicy(_policy):
        """None QTreeWidgetItem.setChildIndicatorPolicy(QTreeWidgetItem.ChildIndicatorPolicy _policy)"""
        return None
    def isExpanded():
        """bool QTreeWidgetItem.isExpanded()"""
        return bool()
    def setExpanded(_aexpand):
        """None QTreeWidgetItem.setExpanded(bool _aexpand)"""
        return None
    def isHidden():
        """bool QTreeWidgetItem.isHidden()"""
        return bool()
    def setHidden(_ahide):
        """None QTreeWidgetItem.setHidden(bool _ahide)"""
        return None
    def isSelected():
        """bool QTreeWidgetItem.isSelected()"""
        return bool()
    def setSelected(_aselect):
        """None QTreeWidgetItem.setSelected(bool _aselect)"""
        return None
    def sortChildren(_column, _order):
        """None QTreeWidgetItem.sortChildren(int _column, Qt.SortOrder _order)"""
        return None
    def setForeground(_column, _brush):
        """None QTreeWidgetItem.setForeground(int _column, QBrush _brush)"""
        return None
    def foreground(_column):
        """QBrush QTreeWidgetItem.foreground(int _column)"""
        return QBrush()
    def setBackground(_column, _brush):
        """None QTreeWidgetItem.setBackground(int _column, QBrush _brush)"""
        return None
    def background(_column):
        """QBrush QTreeWidgetItem.background(int _column)"""
        return QBrush()
    def takeChildren():
        """list-of-QTreeWidgetItem QTreeWidgetItem.takeChildren()"""
        return [QTreeWidgetItem()]
    def insertChildren(_index, _children):
        """None QTreeWidgetItem.insertChildren(int _index, list-of-QTreeWidgetItem _children)"""
        return None
    def addChildren(_children):
        """None QTreeWidgetItem.addChildren(list-of-QTreeWidgetItem _children)"""
        return None
    def setSizeHint(_column, _size):
        """None QTreeWidgetItem.setSizeHint(int _column, QSize _size)"""
        return None
    def sizeHint(_column):
        """QSize QTreeWidgetItem.sizeHint(int _column)"""
        return QSize()
    def indexOfChild(_achild):
        """int QTreeWidgetItem.indexOfChild(QTreeWidgetItem _achild)"""
        return int()
    def setFont(_column, _afont):
        """None QTreeWidgetItem.setFont(int _column, QFont _afont)"""
        return None
    def setWhatsThis(_column, _awhatsThis):
        """None QTreeWidgetItem.setWhatsThis(int _column, QString _awhatsThis)"""
        return None
    def setToolTip(_column, _atoolTip):
        """None QTreeWidgetItem.setToolTip(int _column, QString _atoolTip)"""
        return None
    def setStatusTip(_column, _astatusTip):
        """None QTreeWidgetItem.setStatusTip(int _column, QString _astatusTip)"""
        return None
    def setIcon(_column, _aicon):
        """None QTreeWidgetItem.setIcon(int _column, QIcon _aicon)"""
        return None
    def setText(_column, _atext):
        """None QTreeWidgetItem.setText(int _column, QString _atext)"""
        return None
    def setFlags(_aflags):
        """None QTreeWidgetItem.setFlags(Qt.ItemFlags _aflags)"""
        return None
    def type():
        """int QTreeWidgetItem.type()"""
        return int()
    def takeChild(_index):
        """QTreeWidgetItem QTreeWidgetItem.takeChild(int _index)"""
        return QTreeWidgetItem()
    def insertChild(_index, _child):
        """None QTreeWidgetItem.insertChild(int _index, QTreeWidgetItem _child)"""
        return None
    def addChild(_child):
        """None QTreeWidgetItem.addChild(QTreeWidgetItem _child)"""
        return None
    def columnCount():
        """int QTreeWidgetItem.columnCount()"""
        return int()
    def childCount():
        """int QTreeWidgetItem.childCount()"""
        return int()
    def child(_index):
        """QTreeWidgetItem QTreeWidgetItem.child(int _index)"""
        return QTreeWidgetItem()
    def parent():
        """QTreeWidgetItem QTreeWidgetItem.parent()"""
        return QTreeWidgetItem()
    def write(_out):
        """None QTreeWidgetItem.write(QDataStream _out)"""
        return None
    def read(_in):
        """None QTreeWidgetItem.read(QDataStream _in)"""
        return None
    def __lt__(_other):
        """bool QTreeWidgetItem.__lt__(QTreeWidgetItem _other)"""
        return bool()
    def setData(_column, _role, _value):
        """None QTreeWidgetItem.setData(int _column, int _role, QVariant _value)"""
        return None
    def data(_column, _role):
        """QVariant QTreeWidgetItem.data(int _column, int _role)"""
        return QVariant()
    def setCheckState(_column, _state):
        """None QTreeWidgetItem.setCheckState(int _column, Qt.CheckState _state)"""
        return None
    def checkState(_column):
        """Qt.CheckState QTreeWidgetItem.checkState(int _column)"""
        return Qt.CheckState()
    def setTextColor(_column, _color):
        """None QTreeWidgetItem.setTextColor(int _column, QColor _color)"""
        return None
    def textColor(_column):
        """QColor QTreeWidgetItem.textColor(int _column)"""
        return QColor()
    def setBackgroundColor(_column, _color):
        """None QTreeWidgetItem.setBackgroundColor(int _column, QColor _color)"""
        return None
    def backgroundColor(_column):
        """QColor QTreeWidgetItem.backgroundColor(int _column)"""
        return QColor()
    def setTextAlignment(_column, _alignment):
        """None QTreeWidgetItem.setTextAlignment(int _column, int _alignment)"""
        return None
    def textAlignment(_column):
        """int QTreeWidgetItem.textAlignment(int _column)"""
        return int()
    def font(_column):
        """QFont QTreeWidgetItem.font(int _column)"""
        return QFont()
    def whatsThis(_column):
        """QString QTreeWidgetItem.whatsThis(int _column)"""
        return QString()
    def toolTip(_column):
        """QString QTreeWidgetItem.toolTip(int _column)"""
        return QString()
    def statusTip(_column):
        """QString QTreeWidgetItem.statusTip(int _column)"""
        return QString()
    def icon(_column):
        """QIcon QTreeWidgetItem.icon(int _column)"""
        return QIcon()
    def text(_column):
        """QString QTreeWidgetItem.text(int _column)"""
        return QString()
    def flags():
        """Qt.ItemFlags QTreeWidgetItem.flags()"""
        return Qt.ItemFlags()
    def treeWidget():
        """QTreeWidget QTreeWidgetItem.treeWidget()"""
        return QTreeWidget()
    def clone():
        """QTreeWidgetItem QTreeWidgetItem.clone()"""
        return QTreeWidgetItem()


class QTreeWidget(QTreeView):
    """"""
    def __init__(_parent):
        """None QTreeWidget.__init__(QWidget _parent)"""
        return None
    def setSelectionModel(_selectionModel):
        """None QTreeWidget.setSelectionModel(QItemSelectionModel _selectionModel)"""
        return None
    def removeItemWidget(_item, _column):
        """None QTreeWidget.removeItemWidget(QTreeWidgetItem _item, int _column)"""
        return None
    def itemBelow(_item):
        """QTreeWidgetItem QTreeWidget.itemBelow(QTreeWidgetItem _item)"""
        return QTreeWidgetItem()
    def itemAbove(_item):
        """QTreeWidgetItem QTreeWidget.itemAbove(QTreeWidgetItem _item)"""
        return QTreeWidgetItem()
    def setFirstItemColumnSpanned(_item, _span):
        """None QTreeWidget.setFirstItemColumnSpanned(QTreeWidgetItem _item, bool _span)"""
        return None
    def isFirstItemColumnSpanned(_item):
        """bool QTreeWidget.isFirstItemColumnSpanned(QTreeWidgetItem _item)"""
        return bool()
    def setHeaderLabel(_alabel):
        """None QTreeWidget.setHeaderLabel(QString _alabel)"""
        return None
    def invisibleRootItem():
        """QTreeWidgetItem QTreeWidget.invisibleRootItem()"""
        return QTreeWidgetItem()
    def dropEvent(_event):
        """None QTreeWidget.dropEvent(QDropEvent _event)"""
        return None
    def event(_e):
        """bool QTreeWidget.event(QEvent _e)"""
        return bool()
    def itemFromIndex(_index):
        """QTreeWidgetItem QTreeWidget.itemFromIndex(QModelIndex _index)"""
        return QTreeWidgetItem()
    def indexFromItem(_item, _column):
        """QModelIndex QTreeWidget.indexFromItem(QTreeWidgetItem _item, int _column)"""
        return QModelIndex()
    def items(_data):
        """list-of-QTreeWidgetItem QTreeWidget.items(QMimeData _data)"""
        return [QTreeWidgetItem()]
    def supportedDropActions():
        """Qt.DropActions QTreeWidget.supportedDropActions()"""
        return Qt.DropActions()
    def dropMimeData(_parent, _index, _data, _action):
        """bool QTreeWidget.dropMimeData(QTreeWidgetItem _parent, int _index, QMimeData _data, Qt.DropAction _action)"""
        return bool()
    def mimeData(_items):
        """QMimeData QTreeWidget.mimeData(list-of-QTreeWidgetItem _items)"""
        return QMimeData()
    def mimeTypes():
        """QStringList QTreeWidget.mimeTypes()"""
        return QStringList()
    def clear():
        """None QTreeWidget.clear()"""
        return None
    def collapseItem(_item):
        """None QTreeWidget.collapseItem(QTreeWidgetItem _item)"""
        return None
    def expandItem(_item):
        """None QTreeWidget.expandItem(QTreeWidgetItem _item)"""
        return None
    def scrollToItem(_item, _hint):
        """None QTreeWidget.scrollToItem(QTreeWidgetItem _item, QAbstractItemView.ScrollHint _hint)"""
        return None
    def setItemExpanded(_item, _expand):
        """None QTreeWidget.setItemExpanded(QTreeWidgetItem _item, bool _expand)"""
        return None
    def isItemExpanded(_item):
        """bool QTreeWidget.isItemExpanded(QTreeWidgetItem _item)"""
        return bool()
    def setItemHidden(_item, _hide):
        """None QTreeWidget.setItemHidden(QTreeWidgetItem _item, bool _hide)"""
        return None
    def isItemHidden(_item):
        """bool QTreeWidget.isItemHidden(QTreeWidgetItem _item)"""
        return bool()
    def findItems(_text, _flags, _column):
        """list-of-QTreeWidgetItem QTreeWidget.findItems(QString _text, Qt.MatchFlags _flags, int _column)"""
        return [QTreeWidgetItem()]
    def selectedItems():
        """list-of-QTreeWidgetItem QTreeWidget.selectedItems()"""
        return [QTreeWidgetItem()]
    def setItemSelected(_item, _select):
        """None QTreeWidget.setItemSelected(QTreeWidgetItem _item, bool _select)"""
        return None
    def isItemSelected(_item):
        """bool QTreeWidget.isItemSelected(QTreeWidgetItem _item)"""
        return bool()
    def setItemWidget(_item, _column, _widget):
        """None QTreeWidget.setItemWidget(QTreeWidgetItem _item, int _column, QWidget _widget)"""
        return None
    def itemWidget(_item, _column):
        """QWidget QTreeWidget.itemWidget(QTreeWidgetItem _item, int _column)"""
        return QWidget()
    def closePersistentEditor(_item, _column):
        """None QTreeWidget.closePersistentEditor(QTreeWidgetItem _item, int _column)"""
        return None
    def openPersistentEditor(_item, _column):
        """None QTreeWidget.openPersistentEditor(QTreeWidgetItem _item, int _column)"""
        return None
    def editItem(_item, _column):
        """None QTreeWidget.editItem(QTreeWidgetItem _item, int _column)"""
        return None
    def isSortingEnabled():
        """bool QTreeWidget.isSortingEnabled()"""
        return bool()
    def setSortingEnabled(_enable):
        """None QTreeWidget.setSortingEnabled(bool _enable)"""
        return None
    def sortItems(_column, _order):
        """None QTreeWidget.sortItems(int _column, Qt.SortOrder _order)"""
        return None
    def sortColumn():
        """int QTreeWidget.sortColumn()"""
        return int()
    def visualItemRect(_item):
        """QRect QTreeWidget.visualItemRect(QTreeWidgetItem _item)"""
        return QRect()
    def itemAt(_p):
        """QTreeWidgetItem QTreeWidget.itemAt(QPoint _p)"""
        return QTreeWidgetItem()
    def itemAt(_ax, _ay):
        """QTreeWidgetItem QTreeWidget.itemAt(int _ax, int _ay)"""
        return QTreeWidgetItem()
    def setCurrentItem(_item):
        """None QTreeWidget.setCurrentItem(QTreeWidgetItem _item)"""
        return None
    def setCurrentItem(_item, _column):
        """None QTreeWidget.setCurrentItem(QTreeWidgetItem _item, int _column)"""
        return None
    def setCurrentItem(_item, _column, _command):
        """None QTreeWidget.setCurrentItem(QTreeWidgetItem _item, int _column, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def currentColumn():
        """int QTreeWidget.currentColumn()"""
        return int()
    def currentItem():
        """QTreeWidgetItem QTreeWidget.currentItem()"""
        return QTreeWidgetItem()
    def setHeaderLabels(_labels):
        """None QTreeWidget.setHeaderLabels(QStringList _labels)"""
        return None
    def setHeaderItem(_item):
        """None QTreeWidget.setHeaderItem(QTreeWidgetItem _item)"""
        return None
    def headerItem():
        """QTreeWidgetItem QTreeWidget.headerItem()"""
        return QTreeWidgetItem()
    def addTopLevelItems(_items):
        """None QTreeWidget.addTopLevelItems(list-of-QTreeWidgetItem _items)"""
        return None
    def insertTopLevelItems(_index, _items):
        """None QTreeWidget.insertTopLevelItems(int _index, list-of-QTreeWidgetItem _items)"""
        return None
    def indexOfTopLevelItem(_item):
        """int QTreeWidget.indexOfTopLevelItem(QTreeWidgetItem _item)"""
        return int()
    def takeTopLevelItem(_index):
        """QTreeWidgetItem QTreeWidget.takeTopLevelItem(int _index)"""
        return QTreeWidgetItem()
    def addTopLevelItem(_item):
        """None QTreeWidget.addTopLevelItem(QTreeWidgetItem _item)"""
        return None
    def insertTopLevelItem(_index, _item):
        """None QTreeWidget.insertTopLevelItem(int _index, QTreeWidgetItem _item)"""
        return None
    def topLevelItemCount():
        """int QTreeWidget.topLevelItemCount()"""
        return int()
    def topLevelItem(_index):
        """QTreeWidgetItem QTreeWidget.topLevelItem(int _index)"""
        return QTreeWidgetItem()
    def setColumnCount(_columns):
        """None QTreeWidget.setColumnCount(int _columns)"""
        return None
    def columnCount():
        """int QTreeWidget.columnCount()"""
        return int()


class QTreeWidgetItemIterator():
    """"""
    All = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Hidden = int() # QTreeWidgetItemIterator.IteratorFlag enum
    NotHidden = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Selected = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Unselected = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Selectable = int() # QTreeWidgetItemIterator.IteratorFlag enum
    NotSelectable = int() # QTreeWidgetItemIterator.IteratorFlag enum
    DragEnabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    DragDisabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    DropEnabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    DropDisabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    HasChildren = int() # QTreeWidgetItemIterator.IteratorFlag enum
    NoChildren = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Checked = int() # QTreeWidgetItemIterator.IteratorFlag enum
    NotChecked = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Enabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Disabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Editable = int() # QTreeWidgetItemIterator.IteratorFlag enum
    NotEditable = int() # QTreeWidgetItemIterator.IteratorFlag enum
    UserFlag = int() # QTreeWidgetItemIterator.IteratorFlag enum

    def __init__(_it):
        """None QTreeWidgetItemIterator.__init__(QTreeWidgetItemIterator _it)"""
        return None
    def __init__(_widget, _flags):
        """None QTreeWidgetItemIterator.__init__(QTreeWidget _widget, QTreeWidgetItemIterator.IteratorFlags _flags)"""
        return None
    def __init__(_item, _flags):
        """None QTreeWidgetItemIterator.__init__(QTreeWidgetItem _item, QTreeWidgetItemIterator.IteratorFlags _flags)"""
        return None
    def __isub__(_n):
        """QTreeWidgetItemIterator QTreeWidgetItemIterator.__isub__(int _n)"""
        return QTreeWidgetItemIterator()
    def __iadd__(_n):
        """QTreeWidgetItemIterator QTreeWidgetItemIterator.__iadd__(int _n)"""
        return QTreeWidgetItemIterator()
    def value():
        """QTreeWidgetItem QTreeWidgetItemIterator.value()"""
        return QTreeWidgetItem()


class QUndoGroup(QObject):
    """"""
    def __init__(_parent):
        """None QUndoGroup.__init__(QObject _parent)"""
        return None
    def undo():
        """None QUndoGroup.undo()"""
        return None
    def setActiveStack(_stack):
        """None QUndoGroup.setActiveStack(QUndoStack _stack)"""
        return None
    def redo():
        """None QUndoGroup.redo()"""
        return None
    def isClean():
        """bool QUndoGroup.isClean()"""
        return bool()
    def redoText():
        """QString QUndoGroup.redoText()"""
        return QString()
    def undoText():
        """QString QUndoGroup.undoText()"""
        return QString()
    def canRedo():
        """bool QUndoGroup.canRedo()"""
        return bool()
    def canUndo():
        """bool QUndoGroup.canUndo()"""
        return bool()
    def createUndoAction(_parent, _prefix):
        """QAction QUndoGroup.createUndoAction(QObject _parent, QString _prefix)"""
        return QAction()
    def createRedoAction(_parent, _prefix):
        """QAction QUndoGroup.createRedoAction(QObject _parent, QString _prefix)"""
        return QAction()
    def activeStack():
        """QUndoStack QUndoGroup.activeStack()"""
        return QUndoStack()
    def stacks():
        """list-of-QUndoStack QUndoGroup.stacks()"""
        return [QUndoStack()]
    def removeStack(_stack):
        """None QUndoGroup.removeStack(QUndoStack _stack)"""
        return None
    def addStack(_stack):
        """None QUndoGroup.addStack(QUndoStack _stack)"""
        return None


class QUndoCommand():
    """"""
    def __init__(_parent):
        """None QUndoCommand.__init__(QUndoCommand _parent)"""
        return None
    def __init__(_text, _parent):
        """None QUndoCommand.__init__(QString _text, QUndoCommand _parent)"""
        return None
    def child(_index):
        """QUndoCommand QUndoCommand.child(int _index)"""
        return QUndoCommand()
    def childCount():
        """int QUndoCommand.childCount()"""
        return int()
    def undo():
        """None QUndoCommand.undo()"""
        return None
    def text():
        """QString QUndoCommand.text()"""
        return QString()
    def setText(_text):
        """None QUndoCommand.setText(QString _text)"""
        return None
    def redo():
        """None QUndoCommand.redo()"""
        return None
    def mergeWith(_other):
        """bool QUndoCommand.mergeWith(QUndoCommand _other)"""
        return bool()
    def id():
        """int QUndoCommand.id()"""
        return int()


class QUndoStack(QObject):
    """"""
    def __init__(_parent):
        """None QUndoStack.__init__(QObject _parent)"""
        return None
    def command(_index):
        """QUndoCommand QUndoStack.command(int _index)"""
        return QUndoCommand()
    def undoLimit():
        """int QUndoStack.undoLimit()"""
        return int()
    def setUndoLimit(_limit):
        """None QUndoStack.setUndoLimit(int _limit)"""
        return None
    def undo():
        """None QUndoStack.undo()"""
        return None
    def setIndex(_idx):
        """None QUndoStack.setIndex(int _idx)"""
        return None
    def setClean():
        """None QUndoStack.setClean()"""
        return None
    def setActive(_active):
        """None QUndoStack.setActive(bool _active)"""
        return None
    def redo():
        """None QUndoStack.redo()"""
        return None
    def endMacro():
        """None QUndoStack.endMacro()"""
        return None
    def beginMacro(_text):
        """None QUndoStack.beginMacro(QString _text)"""
        return None
    def cleanIndex():
        """int QUndoStack.cleanIndex()"""
        return int()
    def isClean():
        """bool QUndoStack.isClean()"""
        return bool()
    def isActive():
        """bool QUndoStack.isActive()"""
        return bool()
    def createRedoAction(_parent, _prefix):
        """QAction QUndoStack.createRedoAction(QObject _parent, QString _prefix)"""
        return QAction()
    def createUndoAction(_parent, _prefix):
        """QAction QUndoStack.createUndoAction(QObject _parent, QString _prefix)"""
        return QAction()
    def text(_idx):
        """QString QUndoStack.text(int _idx)"""
        return QString()
    def index():
        """int QUndoStack.index()"""
        return int()
    def __len__():
        """ QUndoStack.__len__()"""
        return ()
    def count():
        """int QUndoStack.count()"""
        return int()
    def redoText():
        """QString QUndoStack.redoText()"""
        return QString()
    def undoText():
        """QString QUndoStack.undoText()"""
        return QString()
    def canRedo():
        """bool QUndoStack.canRedo()"""
        return bool()
    def canUndo():
        """bool QUndoStack.canUndo()"""
        return bool()
    def push(_cmd):
        """None QUndoStack.push(QUndoCommand _cmd)"""
        return None
    def clear():
        """None QUndoStack.clear()"""
        return None


class QUndoView(QListView):
    """"""
    def __init__(_parent):
        """None QUndoView.__init__(QWidget _parent)"""
        return None
    def __init__(_stack, _parent):
        """None QUndoView.__init__(QUndoStack _stack, QWidget _parent)"""
        return None
    def __init__(_group, _parent):
        """None QUndoView.__init__(QUndoGroup _group, QWidget _parent)"""
        return None
    def setGroup(_group):
        """None QUndoView.setGroup(QUndoGroup _group)"""
        return None
    def setStack(_stack):
        """None QUndoView.setStack(QUndoStack _stack)"""
        return None
    def cleanIcon():
        """QIcon QUndoView.cleanIcon()"""
        return QIcon()
    def setCleanIcon(_icon):
        """None QUndoView.setCleanIcon(QIcon _icon)"""
        return None
    def emptyLabel():
        """QString QUndoView.emptyLabel()"""
        return QString()
    def setEmptyLabel(_label):
        """None QUndoView.setEmptyLabel(QString _label)"""
        return None
    def group():
        """QUndoGroup QUndoView.group()"""
        return QUndoGroup()
    def stack():
        """QUndoStack QUndoView.stack()"""
        return QUndoStack()


class QValidator(QObject):
    """"""
    Invalid = int() # QValidator.State enum
    Intermediate = int() # QValidator.State enum
    Acceptable = int() # QValidator.State enum

    def __init__(_parent):
        """None QValidator.__init__(QObject _parent)"""
        return None
    def locale():
        """QLocale QValidator.locale()"""
        return QLocale()
    def setLocale(_locale):
        """None QValidator.setLocale(QLocale _locale)"""
        return None
    def fixup(_input):
        """None QValidator.fixup(QString _input)"""
        return None
    def fixup():
        """QString QValidator.fixup()"""
        return QString()
    def validate():
        """abstract int QValidator.validate()"""
        return int()
    def validate():
        """abstract int QValidator.validate()"""
        return int()


class QIntValidator(QValidator):
    """"""
    def __init__(_parent):
        """None QIntValidator.__init__(QObject _parent)"""
        return None
    def __init__(_bottom, _top, _parent):
        """None QIntValidator.__init__(int _bottom, int _top, QObject _parent)"""
        return None
    def top():
        """int QIntValidator.top()"""
        return int()
    def bottom():
        """int QIntValidator.bottom()"""
        return int()
    def setRange(_bottom, _top):
        """None QIntValidator.setRange(int _bottom, int _top)"""
        return None
    def setTop():
        """int QIntValidator.setTop()"""
        return int()
    def setBottom():
        """int QIntValidator.setBottom()"""
        return int()
    def fixup(_input):
        """None QIntValidator.fixup(QString _input)"""
        return None
    def fixup(_input):
        """None QIntValidator.fixup(QString _input)"""
        return None
    def validate():
        """int QIntValidator.validate()"""
        return int()
    def validate():
        """int QIntValidator.validate()"""
        return int()


class QDoubleValidator(QValidator):
    """"""
    StandardNotation = int() # QDoubleValidator.Notation enum
    ScientificNotation = int() # QDoubleValidator.Notation enum

    def __init__(_parent):
        """None QDoubleValidator.__init__(QObject _parent)"""
        return None
    def __init__(_bottom, _top, _decimals, _parent):
        """None QDoubleValidator.__init__(float _bottom, float _top, int _decimals, QObject _parent)"""
        return None
    def notation():
        """QDoubleValidator.Notation QDoubleValidator.notation()"""
        return QDoubleValidator.Notation()
    def setNotation():
        """QDoubleValidator.Notation QDoubleValidator.setNotation()"""
        return QDoubleValidator.Notation()
    def decimals():
        """int QDoubleValidator.decimals()"""
        return int()
    def top():
        """float QDoubleValidator.top()"""
        return float()
    def bottom():
        """float QDoubleValidator.bottom()"""
        return float()
    def setDecimals():
        """int QDoubleValidator.setDecimals()"""
        return int()
    def setTop():
        """float QDoubleValidator.setTop()"""
        return float()
    def setBottom():
        """float QDoubleValidator.setBottom()"""
        return float()
    def setRange(_minimum, _maximum, _decimals):
        """None QDoubleValidator.setRange(float _minimum, float _maximum, int _decimals)"""
        return None
    def validate():
        """int QDoubleValidator.validate()"""
        return int()
    def validate():
        """int QDoubleValidator.validate()"""
        return int()


class QRegExpValidator(QValidator):
    """"""
    def __init__(_parent):
        """None QRegExpValidator.__init__(QObject _parent)"""
        return None
    def __init__(_rx, _parent):
        """None QRegExpValidator.__init__(QRegExp _rx, QObject _parent)"""
        return None
    def regExp():
        """QRegExp QRegExpValidator.regExp()"""
        return QRegExp()
    def setRegExp(_rx):
        """None QRegExpValidator.setRegExp(QRegExp _rx)"""
        return None
    def validate(_input, _pos):
        """QValidator.State QRegExpValidator.validate(QString _input, int _pos)"""
        return QValidator.State()
    def validate(_input, _pos):
        """QValidator.State QRegExpValidator.validate(QString _input, int _pos)"""
        return QValidator.State()


class QVector2D():
    """"""
    def __init__():
        """None QVector2D.__init__()"""
        return None
    def __init__(_xpos, _ypos):
        """None QVector2D.__init__(float _xpos, float _ypos)"""
        return None
    def __init__(_point):
        """None QVector2D.__init__(QPoint _point)"""
        return None
    def __init__(_point):
        """None QVector2D.__init__(QPointF _point)"""
        return None
    def __init__(_vector):
        """None QVector2D.__init__(QVector3D _vector)"""
        return None
    def __init__(_vector):
        """None QVector2D.__init__(QVector4D _vector)"""
        return None
    def __init__():
        """QVector2D QVector2D.__init__()"""
        return QVector2D()
    def __eq__(_v2):
        """bool QVector2D.__eq__(QVector2D _v2)"""
        return bool()
    def __mul__(_vector):
        """QVector2D QVector2D.__mul__(QVector2D _vector)"""
        return QVector2D()
    def __mul__(_factor):
        """QVector2D QVector2D.__mul__(float _factor)"""
        return QVector2D()
    def __mul__(_v2):
        """QVector2D QVector2D.__mul__(QVector2D _v2)"""
        return QVector2D()
    def __div__(_divisor):
        """QVector2D QVector2D.__div__(float _divisor)"""
        return QVector2D()
    def __add__(_v2):
        """QVector2D QVector2D.__add__(QVector2D _v2)"""
        return QVector2D()
    def __sub__(_v2):
        """QVector2D QVector2D.__sub__(QVector2D _v2)"""
        return QVector2D()
    def __neg__():
        """QVector2D QVector2D.__neg__()"""
        return QVector2D()
    def __ne__(_v2):
        """bool QVector2D.__ne__(QVector2D _v2)"""
        return bool()
    def toPointF():
        """QPointF QVector2D.toPointF()"""
        return QPointF()
    def toPoint():
        """QPoint QVector2D.toPoint()"""
        return QPoint()
    def __idiv__(_divisor):
        """QVector2D QVector2D.__idiv__(float _divisor)"""
        return QVector2D()
    def __imul__(_factor):
        """QVector2D QVector2D.__imul__(float _factor)"""
        return QVector2D()
    def __imul__(_vector):
        """QVector2D QVector2D.__imul__(QVector2D _vector)"""
        return QVector2D()
    def __isub__(_vector):
        """QVector2D QVector2D.__isub__(QVector2D _vector)"""
        return QVector2D()
    def __iadd__(_vector):
        """QVector2D QVector2D.__iadd__(QVector2D _vector)"""
        return QVector2D()
    def setY(_aY):
        """None QVector2D.setY(float _aY)"""
        return None
    def setX(_aX):
        """None QVector2D.setX(float _aX)"""
        return None
    def y():
        """float QVector2D.y()"""
        return float()
    def x():
        """float QVector2D.x()"""
        return float()
    def isNull():
        """bool QVector2D.isNull()"""
        return bool()
    def toVector4D():
        """QVector4D QVector2D.toVector4D()"""
        return QVector4D()
    def toVector3D():
        """QVector3D QVector2D.toVector3D()"""
        return QVector3D()
    def dotProduct(_v1, _v2):
        """float QVector2D.dotProduct(QVector2D _v1, QVector2D _v2)"""
        return float()
    def normalize():
        """None QVector2D.normalize()"""
        return None
    def normalized():
        """QVector2D QVector2D.normalized()"""
        return QVector2D()
    def lengthSquared():
        """float QVector2D.lengthSquared()"""
        return float()
    def length():
        """float QVector2D.length()"""
        return float()
    def __repr__():
        """str QVector2D.__repr__()"""
        return str()


class QVector3D():
    """"""
    def __init__():
        """None QVector3D.__init__()"""
        return None
    def __init__(_xpos, _ypos, _zpos):
        """None QVector3D.__init__(float _xpos, float _ypos, float _zpos)"""
        return None
    def __init__(_point):
        """None QVector3D.__init__(QPoint _point)"""
        return None
    def __init__(_point):
        """None QVector3D.__init__(QPointF _point)"""
        return None
    def __init__(_vector):
        """None QVector3D.__init__(QVector2D _vector)"""
        return None
    def __init__(_vector, _zpos):
        """None QVector3D.__init__(QVector2D _vector, float _zpos)"""
        return None
    def __init__(_vector):
        """None QVector3D.__init__(QVector4D _vector)"""
        return None
    def __init__():
        """QVector3D QVector3D.__init__()"""
        return QVector3D()
    def __eq__(_v2):
        """bool QVector3D.__eq__(QVector3D _v2)"""
        return bool()
    def __mul__(_matrix):
        """QVector3D QVector3D.__mul__(QMatrix4x4 _matrix)"""
        return QVector3D()
    def __mul__(_vector):
        """QVector3D QVector3D.__mul__(QVector3D _vector)"""
        return QVector3D()
    def __mul__(_factor):
        """QVector3D QVector3D.__mul__(float _factor)"""
        return QVector3D()
    def __mul__(_v2):
        """QVector3D QVector3D.__mul__(QVector3D _v2)"""
        return QVector3D()
    def __div__(_divisor):
        """QVector3D QVector3D.__div__(float _divisor)"""
        return QVector3D()
    def __add__(_v2):
        """QVector3D QVector3D.__add__(QVector3D _v2)"""
        return QVector3D()
    def __sub__(_v2):
        """QVector3D QVector3D.__sub__(QVector3D _v2)"""
        return QVector3D()
    def __neg__():
        """QVector3D QVector3D.__neg__()"""
        return QVector3D()
    def __ne__(_v2):
        """bool QVector3D.__ne__(QVector3D _v2)"""
        return bool()
    def toPointF():
        """QPointF QVector3D.toPointF()"""
        return QPointF()
    def toPoint():
        """QPoint QVector3D.toPoint()"""
        return QPoint()
    def __idiv__(_divisor):
        """QVector3D QVector3D.__idiv__(float _divisor)"""
        return QVector3D()
    def __imul__(_factor):
        """QVector3D QVector3D.__imul__(float _factor)"""
        return QVector3D()
    def __imul__(_vector):
        """QVector3D QVector3D.__imul__(QVector3D _vector)"""
        return QVector3D()
    def __isub__(_vector):
        """QVector3D QVector3D.__isub__(QVector3D _vector)"""
        return QVector3D()
    def __iadd__(_vector):
        """QVector3D QVector3D.__iadd__(QVector3D _vector)"""
        return QVector3D()
    def setZ(_aZ):
        """None QVector3D.setZ(float _aZ)"""
        return None
    def setY(_aY):
        """None QVector3D.setY(float _aY)"""
        return None
    def setX(_aX):
        """None QVector3D.setX(float _aX)"""
        return None
    def z():
        """float QVector3D.z()"""
        return float()
    def y():
        """float QVector3D.y()"""
        return float()
    def x():
        """float QVector3D.x()"""
        return float()
    def isNull():
        """bool QVector3D.isNull()"""
        return bool()
    def toVector4D():
        """QVector4D QVector3D.toVector4D()"""
        return QVector4D()
    def toVector2D():
        """QVector2D QVector3D.toVector2D()"""
        return QVector2D()
    def distanceToLine(_point, _direction):
        """float QVector3D.distanceToLine(QVector3D _point, QVector3D _direction)"""
        return float()
    def distanceToPlane(_plane, _normal):
        """float QVector3D.distanceToPlane(QVector3D _plane, QVector3D _normal)"""
        return float()
    def distanceToPlane(_plane1, _plane2, _plane3):
        """float QVector3D.distanceToPlane(QVector3D _plane1, QVector3D _plane2, QVector3D _plane3)"""
        return float()
    def normal(_v1, _v2):
        """QVector3D QVector3D.normal(QVector3D _v1, QVector3D _v2)"""
        return QVector3D()
    def normal(_v1, _v2, _v3):
        """QVector3D QVector3D.normal(QVector3D _v1, QVector3D _v2, QVector3D _v3)"""
        return QVector3D()
    def crossProduct(_v1, _v2):
        """QVector3D QVector3D.crossProduct(QVector3D _v1, QVector3D _v2)"""
        return QVector3D()
    def dotProduct(_v1, _v2):
        """float QVector3D.dotProduct(QVector3D _v1, QVector3D _v2)"""
        return float()
    def normalize():
        """None QVector3D.normalize()"""
        return None
    def normalized():
        """QVector3D QVector3D.normalized()"""
        return QVector3D()
    def lengthSquared():
        """float QVector3D.lengthSquared()"""
        return float()
    def length():
        """float QVector3D.length()"""
        return float()
    def __repr__():
        """str QVector3D.__repr__()"""
        return str()


class QVector4D():
    """"""
    def __init__():
        """None QVector4D.__init__()"""
        return None
    def __init__(_xpos, _ypos, _zpos, _wpos):
        """None QVector4D.__init__(float _xpos, float _ypos, float _zpos, float _wpos)"""
        return None
    def __init__(_point):
        """None QVector4D.__init__(QPoint _point)"""
        return None
    def __init__(_point):
        """None QVector4D.__init__(QPointF _point)"""
        return None
    def __init__(_vector):
        """None QVector4D.__init__(QVector2D _vector)"""
        return None
    def __init__(_vector, _zpos, _wpos):
        """None QVector4D.__init__(QVector2D _vector, float _zpos, float _wpos)"""
        return None
    def __init__(_vector):
        """None QVector4D.__init__(QVector3D _vector)"""
        return None
    def __init__(_vector, _wpos):
        """None QVector4D.__init__(QVector3D _vector, float _wpos)"""
        return None
    def __init__():
        """QVector4D QVector4D.__init__()"""
        return QVector4D()
    def __eq__(_v2):
        """bool QVector4D.__eq__(QVector4D _v2)"""
        return bool()
    def __mul__(_matrix):
        """QVector4D QVector4D.__mul__(QMatrix4x4 _matrix)"""
        return QVector4D()
    def __mul__(_vector):
        """QVector4D QVector4D.__mul__(QVector4D _vector)"""
        return QVector4D()
    def __mul__(_factor):
        """QVector4D QVector4D.__mul__(float _factor)"""
        return QVector4D()
    def __mul__(_v2):
        """QVector4D QVector4D.__mul__(QVector4D _v2)"""
        return QVector4D()
    def __div__(_divisor):
        """QVector4D QVector4D.__div__(float _divisor)"""
        return QVector4D()
    def __add__(_v2):
        """QVector4D QVector4D.__add__(QVector4D _v2)"""
        return QVector4D()
    def __sub__(_v2):
        """QVector4D QVector4D.__sub__(QVector4D _v2)"""
        return QVector4D()
    def __neg__():
        """QVector4D QVector4D.__neg__()"""
        return QVector4D()
    def __ne__(_v2):
        """bool QVector4D.__ne__(QVector4D _v2)"""
        return bool()
    def toPointF():
        """QPointF QVector4D.toPointF()"""
        return QPointF()
    def toPoint():
        """QPoint QVector4D.toPoint()"""
        return QPoint()
    def __idiv__(_divisor):
        """QVector4D QVector4D.__idiv__(float _divisor)"""
        return QVector4D()
    def __imul__(_factor):
        """QVector4D QVector4D.__imul__(float _factor)"""
        return QVector4D()
    def __imul__(_vector):
        """QVector4D QVector4D.__imul__(QVector4D _vector)"""
        return QVector4D()
    def __isub__(_vector):
        """QVector4D QVector4D.__isub__(QVector4D _vector)"""
        return QVector4D()
    def __iadd__(_vector):
        """QVector4D QVector4D.__iadd__(QVector4D _vector)"""
        return QVector4D()
    def setW(_aW):
        """None QVector4D.setW(float _aW)"""
        return None
    def setZ(_aZ):
        """None QVector4D.setZ(float _aZ)"""
        return None
    def setY(_aY):
        """None QVector4D.setY(float _aY)"""
        return None
    def setX(_aX):
        """None QVector4D.setX(float _aX)"""
        return None
    def w():
        """float QVector4D.w()"""
        return float()
    def z():
        """float QVector4D.z()"""
        return float()
    def y():
        """float QVector4D.y()"""
        return float()
    def x():
        """float QVector4D.x()"""
        return float()
    def isNull():
        """bool QVector4D.isNull()"""
        return bool()
    def toVector3DAffine():
        """QVector3D QVector4D.toVector3DAffine()"""
        return QVector3D()
    def toVector3D():
        """QVector3D QVector4D.toVector3D()"""
        return QVector3D()
    def toVector2DAffine():
        """QVector2D QVector4D.toVector2DAffine()"""
        return QVector2D()
    def toVector2D():
        """QVector2D QVector4D.toVector2D()"""
        return QVector2D()
    def dotProduct(_v1, _v2):
        """float QVector4D.dotProduct(QVector4D _v1, QVector4D _v2)"""
        return float()
    def normalize():
        """None QVector4D.normalize()"""
        return None
    def normalized():
        """QVector4D QVector4D.normalized()"""
        return QVector4D()
    def lengthSquared():
        """float QVector4D.lengthSquared()"""
        return float()
    def length():
        """float QVector4D.length()"""
        return float()
    def __repr__():
        """str QVector4D.__repr__()"""
        return str()


class QWhatsThis():
    """"""
    def __init__():
        """QWhatsThis QWhatsThis.__init__()"""
        return QWhatsThis()
    def createAction(_parent):
        """QAction QWhatsThis.createAction(QObject _parent)"""
        return QAction()
    def hideText():
        """None QWhatsThis.hideText()"""
        return None
    def showText(_pos, _text, _widget):
        """None QWhatsThis.showText(QPoint _pos, QString _text, QWidget _widget)"""
        return None
    def leaveWhatsThisMode():
        """None QWhatsThis.leaveWhatsThisMode()"""
        return None
    def inWhatsThisMode():
        """bool QWhatsThis.inWhatsThisMode()"""
        return bool()
    def enterWhatsThisMode():
        """None QWhatsThis.enterWhatsThisMode()"""
        return None


class QWidgetAction(QAction):
    """"""
    def __init__(_parent):
        """None QWidgetAction.__init__(QObject _parent)"""
        return None
    def createdWidgets():
        """list-of-QWidget QWidgetAction.createdWidgets()"""
        return [QWidget()]
    def deleteWidget(_widget):
        """None QWidgetAction.deleteWidget(QWidget _widget)"""
        return None
    def createWidget(_parent):
        """QWidget QWidgetAction.createWidget(QWidget _parent)"""
        return QWidget()
    def eventFilter():
        """QEvent QWidgetAction.eventFilter()"""
        return QEvent()
    def event():
        """QEvent QWidgetAction.event()"""
        return QEvent()
    def releaseWidget(_widget):
        """None QWidgetAction.releaseWidget(QWidget _widget)"""
        return None
    def requestWidget(_parent):
        """QWidget QWidgetAction.requestWidget(QWidget _parent)"""
        return QWidget()
    def defaultWidget():
        """QWidget QWidgetAction.defaultWidget()"""
        return QWidget()
    def setDefaultWidget(_w):
        """None QWidgetAction.setDefaultWidget(QWidget _w)"""
        return None


class QWizard(QDialog):
    """"""
    IndependentPages = int() # QWizard.WizardOption enum
    IgnoreSubTitles = int() # QWizard.WizardOption enum
    ExtendedWatermarkPixmap = int() # QWizard.WizardOption enum
    NoDefaultButton = int() # QWizard.WizardOption enum
    NoBackButtonOnStartPage = int() # QWizard.WizardOption enum
    NoBackButtonOnLastPage = int() # QWizard.WizardOption enum
    DisabledBackButtonOnLastPage = int() # QWizard.WizardOption enum
    HaveNextButtonOnLastPage = int() # QWizard.WizardOption enum
    HaveFinishButtonOnEarlyPages = int() # QWizard.WizardOption enum
    NoCancelButton = int() # QWizard.WizardOption enum
    CancelButtonOnLeft = int() # QWizard.WizardOption enum
    HaveHelpButton = int() # QWizard.WizardOption enum
    HelpButtonOnRight = int() # QWizard.WizardOption enum
    HaveCustomButton1 = int() # QWizard.WizardOption enum
    HaveCustomButton2 = int() # QWizard.WizardOption enum
    HaveCustomButton3 = int() # QWizard.WizardOption enum

    ClassicStyle = int() # QWizard.WizardStyle enum
    ModernStyle = int() # QWizard.WizardStyle enum
    MacStyle = int() # QWizard.WizardStyle enum
    AeroStyle = int() # QWizard.WizardStyle enum

    WatermarkPixmap = int() # QWizard.WizardPixmap enum
    LogoPixmap = int() # QWizard.WizardPixmap enum
    BannerPixmap = int() # QWizard.WizardPixmap enum
    BackgroundPixmap = int() # QWizard.WizardPixmap enum

    BackButton = int() # QWizard.WizardButton enum
    NextButton = int() # QWizard.WizardButton enum
    CommitButton = int() # QWizard.WizardButton enum
    FinishButton = int() # QWizard.WizardButton enum
    CancelButton = int() # QWizard.WizardButton enum
    HelpButton = int() # QWizard.WizardButton enum
    CustomButton1 = int() # QWizard.WizardButton enum
    CustomButton2 = int() # QWizard.WizardButton enum
    CustomButton3 = int() # QWizard.WizardButton enum
    Stretch = int() # QWizard.WizardButton enum

    def __init__(_parent, _flags):
        """None QWizard.__init__(QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def sideWidget():
        """QWidget QWizard.sideWidget()"""
        return QWidget()
    def setSideWidget(_widget):
        """None QWizard.setSideWidget(QWidget _widget)"""
        return None
    def pageIds():
        """list-of-int QWizard.pageIds()"""
        return [int()]
    def removePage(_id):
        """None QWizard.removePage(int _id)"""
        return None
    def cleanupPage(_id):
        """None QWizard.cleanupPage(int _id)"""
        return None
    def initializePage(_id):
        """None QWizard.initializePage(int _id)"""
        return None
    def done(_result):
        """None QWizard.done(int _result)"""
        return None
    def paintEvent(_event):
        """None QWizard.paintEvent(QPaintEvent _event)"""
        return None
    def resizeEvent(_event):
        """None QWizard.resizeEvent(QResizeEvent _event)"""
        return None
    def event(_event):
        """bool QWizard.event(QEvent _event)"""
        return bool()
    def restart():
        """None QWizard.restart()"""
        return None
    def next():
        """None QWizard.next()"""
        return None
    def back():
        """None QWizard.back()"""
        return None
    def sizeHint():
        """QSize QWizard.sizeHint()"""
        return QSize()
    def setVisible(_visible):
        """None QWizard.setVisible(bool _visible)"""
        return None
    def setDefaultProperty(_className, _property, _changedSignal):
        """None QWizard.setDefaultProperty(str _className, str _property, str _changedSignal)"""
        return None
    def pixmap(_which):
        """QPixmap QWizard.pixmap(QWizard.WizardPixmap _which)"""
        return QPixmap()
    def setPixmap(_which, _pixmap):
        """None QWizard.setPixmap(QWizard.WizardPixmap _which, QPixmap _pixmap)"""
        return None
    def subTitleFormat():
        """Qt.TextFormat QWizard.subTitleFormat()"""
        return Qt.TextFormat()
    def setSubTitleFormat(_format):
        """None QWizard.setSubTitleFormat(Qt.TextFormat _format)"""
        return None
    def titleFormat():
        """Qt.TextFormat QWizard.titleFormat()"""
        return Qt.TextFormat()
    def setTitleFormat(_format):
        """None QWizard.setTitleFormat(Qt.TextFormat _format)"""
        return None
    def button(_which):
        """QAbstractButton QWizard.button(QWizard.WizardButton _which)"""
        return QAbstractButton()
    def setButton(_which, _button):
        """None QWizard.setButton(QWizard.WizardButton _which, QAbstractButton _button)"""
        return None
    def setButtonLayout(_layout):
        """None QWizard.setButtonLayout(list-of-QWizard.WizardButton _layout)"""
        return None
    def buttonText(_which):
        """QString QWizard.buttonText(QWizard.WizardButton _which)"""
        return QString()
    def setButtonText(_which, _text):
        """None QWizard.setButtonText(QWizard.WizardButton _which, QString _text)"""
        return None
    def options():
        """QWizard.WizardOptions QWizard.options()"""
        return QWizard.WizardOptions()
    def setOptions(_options):
        """None QWizard.setOptions(QWizard.WizardOptions _options)"""
        return None
    def testOption(_option):
        """bool QWizard.testOption(QWizard.WizardOption _option)"""
        return bool()
    def setOption(_option, _on):
        """None QWizard.setOption(QWizard.WizardOption _option, bool _on)"""
        return None
    def wizardStyle():
        """QWizard.WizardStyle QWizard.wizardStyle()"""
        return QWizard.WizardStyle()
    def setWizardStyle(_style):
        """None QWizard.setWizardStyle(QWizard.WizardStyle _style)"""
        return None
    def field(_name):
        """QVariant QWizard.field(QString _name)"""
        return QVariant()
    def setField(_name, _value):
        """None QWizard.setField(QString _name, QVariant _value)"""
        return None
    def nextId():
        """int QWizard.nextId()"""
        return int()
    def validateCurrentPage():
        """bool QWizard.validateCurrentPage()"""
        return bool()
    def currentId():
        """int QWizard.currentId()"""
        return int()
    def currentPage():
        """QWizardPage QWizard.currentPage()"""
        return QWizardPage()
    def startId():
        """int QWizard.startId()"""
        return int()
    def setStartId(_id):
        """None QWizard.setStartId(int _id)"""
        return None
    def visitedPages():
        """list-of-int QWizard.visitedPages()"""
        return [int()]
    def hasVisitedPage(_id):
        """bool QWizard.hasVisitedPage(int _id)"""
        return bool()
    def page(_id):
        """QWizardPage QWizard.page(int _id)"""
        return QWizardPage()
    def setPage(_id, _page):
        """None QWizard.setPage(int _id, QWizardPage _page)"""
        return None
    def addPage(_page):
        """int QWizard.addPage(QWizardPage _page)"""
        return int()


class QWizardPage(QWidget):
    """"""
    def __init__(_parent):
        """None QWizardPage.__init__(QWidget _parent)"""
        return None
    def wizard():
        """QWizard QWizardPage.wizard()"""
        return QWizard()
    def registerField(_name, _widget, _property, _changedSignal):
        """None QWizardPage.registerField(QString _name, QWidget _widget, str _property, signal _changedSignal)"""
        return None
    def registerField(_name, _widget, _property, _changedSignal):
        """None QWizardPage.registerField(QString _name, QWidget _widget, str _property, SIGNAL() _changedSignal)"""
        return None
    def field(_name):
        """QVariant QWizardPage.field(QString _name)"""
        return QVariant()
    def setField(_name, _value):
        """None QWizardPage.setField(QString _name, QVariant _value)"""
        return None
    def nextId():
        """int QWizardPage.nextId()"""
        return int()
    def isComplete():
        """bool QWizardPage.isComplete()"""
        return bool()
    def validatePage():
        """bool QWizardPage.validatePage()"""
        return bool()
    def cleanupPage():
        """None QWizardPage.cleanupPage()"""
        return None
    def initializePage():
        """None QWizardPage.initializePage()"""
        return None
    def buttonText(_which):
        """QString QWizardPage.buttonText(QWizard.WizardButton _which)"""
        return QString()
    def setButtonText(_which, _text):
        """None QWizardPage.setButtonText(QWizard.WizardButton _which, QString _text)"""
        return None
    def isCommitPage():
        """bool QWizardPage.isCommitPage()"""
        return bool()
    def setCommitPage(_commitPage):
        """None QWizardPage.setCommitPage(bool _commitPage)"""
        return None
    def isFinalPage():
        """bool QWizardPage.isFinalPage()"""
        return bool()
    def setFinalPage(_finalPage):
        """None QWizardPage.setFinalPage(bool _finalPage)"""
        return None
    def pixmap(_which):
        """QPixmap QWizardPage.pixmap(QWizard.WizardPixmap _which)"""
        return QPixmap()
    def setPixmap(_which, _pixmap):
        """None QWizardPage.setPixmap(QWizard.WizardPixmap _which, QPixmap _pixmap)"""
        return None
    def subTitle():
        """QString QWizardPage.subTitle()"""
        return QString()
    def setSubTitle(_subTitle):
        """None QWizardPage.setSubTitle(QString _subTitle)"""
        return None
    def title():
        """QString QWizardPage.title()"""
        return QString()
    def setTitle(_title):
        """None QWizardPage.setTitle(QString _title)"""
        return None


class QWorkspace(QWidget):
    """"""
    CreationOrder = int() # QWorkspace.WindowOrder enum
    StackingOrder = int() # QWorkspace.WindowOrder enum

    def __init__(_parent):
        """None QWorkspace.__init__(QWidget _parent)"""
        return None
    def wheelEvent(_e):
        """None QWorkspace.wheelEvent(QWheelEvent _e)"""
        return None
    def hideEvent(_e):
        """None QWorkspace.hideEvent(QHideEvent _e)"""
        return None
    def showEvent(_e):
        """None QWorkspace.showEvent(QShowEvent _e)"""
        return None
    def eventFilter():
        """QEvent QWorkspace.eventFilter()"""
        return QEvent()
    def resizeEvent():
        """QResizeEvent QWorkspace.resizeEvent()"""
        return QResizeEvent()
    def childEvent():
        """QChildEvent QWorkspace.childEvent()"""
        return QChildEvent()
    def changeEvent():
        """QEvent QWorkspace.changeEvent()"""
        return QEvent()
    def paintEvent(_e):
        """None QWorkspace.paintEvent(QPaintEvent _e)"""
        return None
    def event(_e):
        """bool QWorkspace.event(QEvent _e)"""
        return bool()
    def activatePreviousWindow():
        """None QWorkspace.activatePreviousWindow()"""
        return None
    def activateNextWindow():
        """None QWorkspace.activateNextWindow()"""
        return None
    def closeAllWindows():
        """None QWorkspace.closeAllWindows()"""
        return None
    def closeActiveWindow():
        """None QWorkspace.closeActiveWindow()"""
        return None
    def arrangeIcons():
        """None QWorkspace.arrangeIcons()"""
        return None
    def tile():
        """None QWorkspace.tile()"""
        return None
    def cascade():
        """None QWorkspace.cascade()"""
        return None
    def setActiveWindow(_w):
        """None QWorkspace.setActiveWindow(QWidget _w)"""
        return None
    def background():
        """QBrush QWorkspace.background()"""
        return QBrush()
    def setBackground(_background):
        """None QWorkspace.setBackground(QBrush _background)"""
        return None
    def setScrollBarsEnabled(_enable):
        """None QWorkspace.setScrollBarsEnabled(bool _enable)"""
        return None
    def scrollBarsEnabled():
        """bool QWorkspace.scrollBarsEnabled()"""
        return bool()
    def sizeHint():
        """QSize QWorkspace.sizeHint()"""
        return QSize()
    def addWindow(_w, _flags):
        """QWidget QWorkspace.addWindow(QWidget _w, Qt.WindowFlags _flags)"""
        return QWidget()
    def windowList(_order):
        """list-of-QWidget QWorkspace.windowList(QWorkspace.WindowOrder _order)"""
        return [QWidget()]
    def activeWindow():
        """QWidget QWorkspace.activeWindow()"""
        return QWidget()


class QX11EmbedWidget(QWidget):
    """"""
    Unknown = int() # QX11EmbedWidget.Error enum
    Internal = int() # QX11EmbedWidget.Error enum
    InvalidWindowID = int() # QX11EmbedWidget.Error enum

    def __init__(_parent):
        """None QX11EmbedWidget.__init__(QWidget _parent)"""
        return None
    def resizeEvent():
        """QResizeEvent QX11EmbedWidget.resizeEvent()"""
        return QResizeEvent()
    def event():
        """QEvent QX11EmbedWidget.event()"""
        return QEvent()
    def eventFilter():
        """QEvent QX11EmbedWidget.eventFilter()"""
        return QEvent()
    def error():
        """QX11EmbedWidget.Error QX11EmbedWidget.error()"""
        return QX11EmbedWidget.Error()
    def containerWinId():
        """int QX11EmbedWidget.containerWinId()"""
        return int()
    def embedInto(_id):
        """None QX11EmbedWidget.embedInto(int _id)"""
        return None


class QX11EmbedContainer(QWidget):
    """"""
    Unknown = int() # QX11EmbedContainer.Error enum
    Internal = int() # QX11EmbedContainer.Error enum
    InvalidWindowID = int() # QX11EmbedContainer.Error enum

    def __init__(_parent):
        """None QX11EmbedContainer.__init__(QWidget _parent)"""
        return None
    def event():
        """QEvent QX11EmbedContainer.event()"""
        return QEvent()
    def hideEvent():
        """QHideEvent QX11EmbedContainer.hideEvent()"""
        return QHideEvent()
    def showEvent():
        """QShowEvent QX11EmbedContainer.showEvent()"""
        return QShowEvent()
    def resizeEvent():
        """QResizeEvent QX11EmbedContainer.resizeEvent()"""
        return QResizeEvent()
    def paintEvent(_e):
        """None QX11EmbedContainer.paintEvent(QPaintEvent _e)"""
        return None
    def eventFilter():
        """QEvent QX11EmbedContainer.eventFilter()"""
        return QEvent()
    def minimumSizeHint():
        """QSize QX11EmbedContainer.minimumSizeHint()"""
        return QSize()
    def error():
        """QX11EmbedContainer.Error QX11EmbedContainer.error()"""
        return QX11EmbedContainer.Error()
    def embedClient(_id):
        """None QX11EmbedContainer.embedClient(int _id)"""
        return None
    def discardClient():
        """None QX11EmbedContainer.discardClient()"""
        return None
    def clientWinId():
        """int QX11EmbedContainer.clientWinId()"""
        return int()


class QX11Info():
    """"""
    def __init__():
        """None QX11Info.__init__()"""
        return None
    def __init__(_other):
        """None QX11Info.__init__(QX11Info _other)"""
        return None
    def isCompositingManagerRunning():
        """bool QX11Info.isCompositingManagerRunning()"""
        return bool()
    def setAppUserTime(_time):
        """None QX11Info.setAppUserTime(int _time)"""
        return None
    def setAppTime(_time):
        """None QX11Info.setAppTime(int _time)"""
        return None
    def appUserTime():
        """int QX11Info.appUserTime()"""
        return int()
    def appTime():
        """int QX11Info.appTime()"""
        return int()
    def setAppDpiY(_screen, _dpi):
        """None QX11Info.setAppDpiY(int _screen, int _dpi)"""
        return None
    def setAppDpiX(_screen, _dpi):
        """None QX11Info.setAppDpiX(int _screen, int _dpi)"""
        return None
    def appDpiY(_screen):
        """int QX11Info.appDpiY(int _screen)"""
        return int()
    def appDpiX(_screen):
        """int QX11Info.appDpiX(int _screen)"""
        return int()
    def appDefaultVisual(_screen):
        """bool QX11Info.appDefaultVisual(int _screen)"""
        return bool()
    def appDefaultColormap(_screen):
        """bool QX11Info.appDefaultColormap(int _screen)"""
        return bool()
    def appRootWindow(_screen):
        """int QX11Info.appRootWindow(int _screen)"""
        return int()
    def appVisual(_screen):
        """sip.voidptr QX11Info.appVisual(int _screen)"""
        return sip.voidptr()
    def appColormap(_screen):
        """int QX11Info.appColormap(int _screen)"""
        return int()
    def appCells(_screen):
        """int QX11Info.appCells(int _screen)"""
        return int()
    def appDepth(_screen):
        """int QX11Info.appDepth(int _screen)"""
        return int()
    def appScreen():
        """int QX11Info.appScreen()"""
        return int()
    def defaultVisual():
        """bool QX11Info.defaultVisual()"""
        return bool()
    def visual():
        """sip.voidptr QX11Info.visual()"""
        return sip.voidptr()
    def defaultColormap():
        """bool QX11Info.defaultColormap()"""
        return bool()
    def colormap():
        """int QX11Info.colormap()"""
        return int()
    def cells():
        """int QX11Info.cells()"""
        return int()
    def depth():
        """int QX11Info.depth()"""
        return int()
    def screen():
        """int QX11Info.screen()"""
        return int()
    def appClass():
        """str QX11Info.appClass()"""
        return str()
    def display():
        """Display QX11Info.display()"""
        return Display()


class QPyTextObject(QObject, QTextObjectInterface):
    """"""
    def __init__(_parent):
        """None QPyTextObject.__init__(QObject _parent)"""
        return None


class QPointF():
    """"""
    def __init__():
        """QPainterPath.Element QPointF.__init__()"""
        return QPainterPath.Element()


class QString():
    """"""
    def __init__():
        """QKeySequence QString.__init__()"""
        return QKeySequence()


qApp = None # QApplication member

def qIsGray(_rgb):
    """bool .qIsGray(int _rgb)"""
    return bool()

def qGray(_r, _g, _b):
    """int .qGray(int _r, int _g, int _b)"""
    return int()

def qGray(_rgb):
    """int .qGray(int _rgb)"""
    return int()

def qRgba(_r, _g, _b, _a):
    """int .qRgba(int _r, int _g, int _b, int _a)"""
    return int()

def qRgb(_r, _g, _b):
    """int .qRgb(int _r, int _g, int _b)"""
    return int()

def qAlpha(_rgb):
    """int .qAlpha(int _rgb)"""
    return int()

def qBlue(_rgb):
    """int .qBlue(int _rgb)"""
    return int()

def qGreen(_rgb):
    """int .qGreen(int _rgb)"""
    return int()

def qRed(_rgb):
    """int .qRed(int _rgb)"""
    return int()

def qFuzzyCompare(_m1, _m2):
    """bool .qFuzzyCompare(QMatrix _m1, QMatrix _m2)"""
    return bool()

def qFuzzyCompare(_m1, _m2):
    """bool .qFuzzyCompare(QMatrix4x4 _m1, QMatrix4x4 _m2)"""
    return bool()

def qFuzzyCompare(_q1, _q2):
    """bool .qFuzzyCompare(QQuaternion _q1, QQuaternion _q2)"""
    return bool()

def qFuzzyCompare(_t1, _t2):
    """bool .qFuzzyCompare(QTransform _t1, QTransform _t2)"""
    return bool()

def qFuzzyCompare(_v1, _v2):
    """bool .qFuzzyCompare(QVector2D _v1, QVector2D _v2)"""
    return bool()

def qFuzzyCompare(_v1, _v2):
    """bool .qFuzzyCompare(QVector3D _v1, QVector3D _v2)"""
    return bool()

def qFuzzyCompare(_v1, _v2):
    """bool .qFuzzyCompare(QVector4D _v1, QVector4D _v2)"""
    return bool()

def __mul__(_m):
    """QPoint .__mul__(QMatrix _m)"""
    return QPoint()

def __mul__(_m):
    """QPointF .__mul__(QMatrix _m)"""
    return QPointF()

def __mul__(_m):
    """QLineF .__mul__(QMatrix _m)"""
    return QLineF()

def __mul__(_m):
    """QLine .__mul__(QMatrix _m)"""
    return QLine()

def __mul__(_matrix):
    """QPoint .__mul__(QMatrix4x4 _matrix)"""
    return QPoint()

def __mul__(_matrix):
    """QPointF .__mul__(QMatrix4x4 _matrix)"""
    return QPointF()

def __mul__(_m):
    """QPoint .__mul__(QTransform _m)"""
    return QPoint()

def __mul__(_m):
    """QPointF .__mul__(QTransform _m)"""
    return QPointF()

def __mul__(_m):
    """QLineF .__mul__(QTransform _m)"""
    return QLineF()

def __mul__(_m):
    """QLine .__mul__(QTransform _m)"""
    return QLine()

def qDrawBorderPixmap(_painter, _target, _margins, _pixmap):
    """None .qDrawBorderPixmap(QPainter _painter, QRect _target, QMargins _margins, QPixmap _pixmap)"""
    return None

def qDrawPlainRect(_p, _x, _y, _w, _h, _lineWidth, _fill):
    """QColor .qDrawPlainRect(QPainter _p, int _x, int _y, int _w, int _h, int _lineWidth, QBrush _fill)"""
    return QColor()

def qDrawPlainRect(_p, _r, _lineWidth, _fill):
    """QColor .qDrawPlainRect(QPainter _p, QRect _r, int _lineWidth, QBrush _fill)"""
    return QColor()

def qDrawWinPanel(_p, _x, _y, _w, _h, _pal, _sunken, _fill):
    """None .qDrawWinPanel(QPainter _p, int _x, int _y, int _w, int _h, QPalette _pal, bool _sunken, QBrush _fill)"""
    return None

def qDrawWinPanel(_p, _r, _pal, _sunken, _fill):
    """None .qDrawWinPanel(QPainter _p, QRect _r, QPalette _pal, bool _sunken, QBrush _fill)"""
    return None

def qDrawWinButton(_p, _x, _y, _w, _h, _pal, _sunken, _fill):
    """None .qDrawWinButton(QPainter _p, int _x, int _y, int _w, int _h, QPalette _pal, bool _sunken, QBrush _fill)"""
    return None

def qDrawWinButton(_p, _r, _pal, _sunken, _fill):
    """None .qDrawWinButton(QPainter _p, QRect _r, QPalette _pal, bool _sunken, QBrush _fill)"""
    return None

def qDrawShadePanel(_p, _x, _y, _w, _h, _pal, _sunken, _lineWidth, _fill):
    """None .qDrawShadePanel(QPainter _p, int _x, int _y, int _w, int _h, QPalette _pal, bool _sunken, int _lineWidth, QBrush _fill)"""
    return None

def qDrawShadePanel(_p, _r, _pal, _sunken, _lineWidth, _fill):
    """None .qDrawShadePanel(QPainter _p, QRect _r, QPalette _pal, bool _sunken, int _lineWidth, QBrush _fill)"""
    return None

def qDrawShadeRect(_p, _x, _y, _w, _h, _pal, _sunken, _lineWidth, _midLineWidth, _fill):
    """None .qDrawShadeRect(QPainter _p, int _x, int _y, int _w, int _h, QPalette _pal, bool _sunken, int _lineWidth, int _midLineWidth, QBrush _fill)"""
    return None

def qDrawShadeRect(_p, _r, _pal, _sunken, _lineWidth, _midLineWidth, _fill):
    """None .qDrawShadeRect(QPainter _p, QRect _r, QPalette _pal, bool _sunken, int _lineWidth, int _midLineWidth, QBrush _fill)"""
    return None

def qDrawShadeLine(_p, _x1, _y1, _x2, _y2, _pal, _sunken, _lineWidth, _midLineWidth):
    """None .qDrawShadeLine(QPainter _p, int _x1, int _y1, int _x2, int _y2, QPalette _pal, bool _sunken, int _lineWidth, int _midLineWidth)"""
    return None

def qDrawShadeLine(_p, _p1, _p2, _pal, _sunken, _lineWidth, _midLineWidth):
    """None .qDrawShadeLine(QPainter _p, QPoint _p1, QPoint _p2, QPalette _pal, bool _sunken, int _lineWidth, int _midLineWidth)"""
    return None

def __rshift__():
    """QColor .__rshift__()"""
    return QColor()

def __rshift__():
    """QBrush .__rshift__()"""
    return QBrush()

def __rshift__(_cursor):
    """QDataStream .__rshift__(QCursor _cursor)"""
    return QDataStream()

def __rshift__():
    """QFont .__rshift__()"""
    return QFont()

def __rshift__():
    """QIcon .__rshift__()"""
    return QIcon()

def __rshift__():
    """QImage .__rshift__()"""
    return QImage()

def __rshift__(_ks):
    """QDataStream .__rshift__(QKeySequence _ks)"""
    return QDataStream()

def __rshift__(_item):
    """QDataStream .__rshift__(QListWidgetItem _item)"""
    return QDataStream()

def __rshift__():
    """QMatrix .__rshift__()"""
    return QMatrix()

def __rshift__():
    """QMatrix4x4 .__rshift__()"""
    return QMatrix4x4()

def __rshift__():
    """QPainterPath .__rshift__()"""
    return QPainterPath()

def __rshift__(_p):
    """QDataStream .__rshift__(QPalette _p)"""
    return QDataStream()

def __rshift__():
    """QPen .__rshift__()"""
    return QPen()

def __rshift__(_p):
    """QDataStream .__rshift__(QPicture _p)"""
    return QDataStream()

def __rshift__():
    """QPixmap .__rshift__()"""
    return QPixmap()

def __rshift__(_array):
    """QDataStream .__rshift__(QPolygonF _array)"""
    return QDataStream()

def __rshift__(_polygon):
    """QDataStream .__rshift__(QPolygon _polygon)"""
    return QDataStream()

def __rshift__():
    """QQuaternion .__rshift__()"""
    return QQuaternion()

def __rshift__():
    """QRegion .__rshift__()"""
    return QRegion()

def __rshift__():
    """QSizePolicy .__rshift__()"""
    return QSizePolicy()

def __rshift__():
    """QSplitter .__rshift__()"""
    return QSplitter()

def __rshift__(_item):
    """QDataStream .__rshift__(QStandardItem _item)"""
    return QDataStream()

def __rshift__(_item):
    """QDataStream .__rshift__(QTableWidgetItem _item)"""
    return QDataStream()

def __rshift__():
    """QTextLength .__rshift__()"""
    return QTextLength()

def __rshift__():
    """QTextFormat .__rshift__()"""
    return QTextFormat()

def __rshift__():
    """QTransform .__rshift__()"""
    return QTransform()

def __rshift__(_item):
    """QDataStream .__rshift__(QTreeWidgetItem _item)"""
    return QDataStream()

def __rshift__():
    """QVector2D .__rshift__()"""
    return QVector2D()

def __rshift__():
    """QVector3D .__rshift__()"""
    return QVector3D()

def __rshift__():
    """QVector4D .__rshift__()"""
    return QVector4D()

def __lshift__():
    """QColor .__lshift__()"""
    return QColor()

def __lshift__():
    """QBrush .__lshift__()"""
    return QBrush()

def __lshift__(_cursor):
    """QDataStream .__lshift__(QCursor _cursor)"""
    return QDataStream()

def __lshift__():
    """QFont .__lshift__()"""
    return QFont()

def __lshift__():
    """QIcon .__lshift__()"""
    return QIcon()

def __lshift__():
    """QImage .__lshift__()"""
    return QImage()

def __lshift__(_ks):
    """QDataStream .__lshift__(QKeySequence _ks)"""
    return QDataStream()

def __lshift__(_item):
    """QDataStream .__lshift__(QListWidgetItem _item)"""
    return QDataStream()

def __lshift__():
    """QMatrix .__lshift__()"""
    return QMatrix()

def __lshift__():
    """QMatrix4x4 .__lshift__()"""
    return QMatrix4x4()

def __lshift__():
    """QPainterPath .__lshift__()"""
    return QPainterPath()

def __lshift__(_p):
    """QDataStream .__lshift__(QPalette _p)"""
    return QDataStream()

def __lshift__():
    """QPen .__lshift__()"""
    return QPen()

def __lshift__(_p):
    """QDataStream .__lshift__(QPicture _p)"""
    return QDataStream()

def __lshift__():
    """QPixmap .__lshift__()"""
    return QPixmap()

def __lshift__(_array):
    """QDataStream .__lshift__(QPolygonF _array)"""
    return QDataStream()

def __lshift__(_polygon):
    """QDataStream .__lshift__(QPolygon _polygon)"""
    return QDataStream()

def __lshift__():
    """QQuaternion .__lshift__()"""
    return QQuaternion()

def __lshift__():
    """QRegion .__lshift__()"""
    return QRegion()

def __lshift__():
    """QSizePolicy .__lshift__()"""
    return QSizePolicy()

def __lshift__():
    """QSplitter .__lshift__()"""
    return QSplitter()

def __lshift__(_item):
    """QDataStream .__lshift__(QStandardItem _item)"""
    return QDataStream()

def __lshift__(_item):
    """QDataStream .__lshift__(QTableWidgetItem _item)"""
    return QDataStream()

def __lshift__():
    """QTextLength .__lshift__()"""
    return QTextLength()

def __lshift__():
    """QTextFormat .__lshift__()"""
    return QTextFormat()

def __lshift__():
    """QTransform .__lshift__()"""
    return QTransform()

def __lshift__(_item):
    """QDataStream .__lshift__(QTreeWidgetItem _item)"""
    return QDataStream()

def __lshift__():
    """QVector2D .__lshift__()"""
    return QVector2D()

def __lshift__():
    """QVector3D .__lshift__()"""
    return QVector3D()

def __lshift__():
    """QVector4D .__lshift__()"""
    return QVector4D()

def qSwap(_value1, _value2):
    """None .qSwap(QBitmap _value1, QBitmap _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QBrush _value1, QBrush _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QIcon _value1, QIcon _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QImage _value1, QImage _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QKeySequence _value1, QKeySequence _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QPen _value1, QPen _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QPicture _value1, QPicture _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QPixmap _value1, QPixmap _value2)"""
    return None

def qt_x11_wait_for_window_manager(_widget):
    """None .qt_x11_wait_for_window_manager(QWidget _widget)"""
    return None

