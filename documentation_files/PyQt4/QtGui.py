class QPaintDevice():
    """"""
    PdmWidth = int() # QPaintDevice.PaintDeviceMetric enum
    PdmHeight = int() # QPaintDevice.PaintDeviceMetric enum
    PdmWidthMM = int() # QPaintDevice.PaintDeviceMetric enum
    PdmHeightMM = int() # QPaintDevice.PaintDeviceMetric enum
    PdmNumColors = int() # QPaintDevice.PaintDeviceMetric enum
    PdmDepth = int() # QPaintDevice.PaintDeviceMetric enum
    PdmDpiX = int() # QPaintDevice.PaintDeviceMetric enum
    PdmDpiY = int() # QPaintDevice.PaintDeviceMetric enum
    PdmPhysicalDpiX = int() # QPaintDevice.PaintDeviceMetric enum
    PdmPhysicalDpiY = int() # QPaintDevice.PaintDeviceMetric enum

    def __init__(self):
        """None QPaintDevice.__init__(None self)"""
        return None
    def metric(self, _metric):
        """int QPaintDevice.metric(None self, QPaintDevice.PaintDeviceMetric _metric)"""
        return int()
    def colorCount(self):
        """int QPaintDevice.colorCount(None self)"""
        return int()
    def paintingActive(self):
        """bool QPaintDevice.paintingActive(None self)"""
        return bool()
    def depth(self):
        """int QPaintDevice.depth(None self)"""
        return int()
    def numColors(self):
        """int QPaintDevice.numColors(None self)"""
        return int()
    def physicalDpiY(self):
        """int QPaintDevice.physicalDpiY(None self)"""
        return int()
    def physicalDpiX(self):
        """int QPaintDevice.physicalDpiX(None self)"""
        return int()
    def logicalDpiY(self):
        """int QPaintDevice.logicalDpiY(None self)"""
        return int()
    def logicalDpiX(self):
        """int QPaintDevice.logicalDpiX(None self)"""
        return int()
    def heightMM(self):
        """int QPaintDevice.heightMM(None self)"""
        return int()
    def widthMM(self):
        """int QPaintDevice.widthMM(None self)"""
        return int()
    def height(self):
        """int QPaintDevice.height(None self)"""
        return int()
    def width(self):
        """int QPaintDevice.width(None self)"""
        return int()
    def paintEngine(self):
        """abstract QPaintEngine QPaintDevice.paintEngine(None self)"""
        return QPaintEngine()


class QWidget(QObject, QPaintDevice):
    """"""
    DrawWindowBackground = int() # QWidget.RenderFlag enum
    DrawChildren = int() # QWidget.RenderFlag enum
    IgnoreMask = int() # QWidget.RenderFlag enum

    def __init__(self, _parent, _flags):
        """None QWidget.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def setInputMethodHints(self, _hints):
        """None QWidget.setInputMethodHints(None self, Qt.InputMethodHints _hints)"""
        return None
    def inputMethodHints(self):
        """Qt.InputMethodHints QWidget.inputMethodHints(None self)"""
        return Qt.InputMethodHints()
    def previousInFocusChain(self):
        """QWidget QWidget.previousInFocusChain(None self)"""
        return QWidget()
    def contentsMargins(self):
        """QMargins QWidget.contentsMargins(None self)"""
        return QMargins()
    def ungrabGesture(self, _type):
        """None QWidget.ungrabGesture(None self, Qt.GestureType _type)"""
        return None
    def grabGesture(self, _type, _flags):
        """None QWidget.grabGesture(None self, Qt.GestureType _type, Qt.GestureFlags _flags)"""
        return None
    def setGraphicsEffect(self, _effect):
        """None QWidget.setGraphicsEffect(None self, QGraphicsEffect _effect)"""
        return None
    def graphicsEffect(self):
        """QGraphicsEffect QWidget.graphicsEffect(None self)"""
        return QGraphicsEffect()
    def graphicsProxyWidget(self):
        """QGraphicsProxyWidget QWidget.graphicsProxyWidget(None self)"""
        return QGraphicsProxyWidget()
    def windowFilePath(self):
        """QString QWidget.windowFilePath(None self)"""
        return QString()
    def setWindowFilePath(self, _filePath):
        """None QWidget.setWindowFilePath(None self, QString _filePath)"""
        return None
    def nativeParentWidget(self):
        """QWidget QWidget.nativeParentWidget(None self)"""
        return QWidget()
    def effectiveWinId(self):
        """int QWidget.effectiveWinId(None self)"""
        return int()
    def unsetLocale(self):
        """None QWidget.unsetLocale(None self)"""
        return None
    def locale(self):
        """QLocale QWidget.locale(None self)"""
        return QLocale()
    def setLocale(self, _locale):
        """None QWidget.setLocale(None self, QLocale _locale)"""
        return None
    def render(self, _target, _targetOffset, _sourceRegion, _flags):
        """None QWidget.render(None self, QPaintDevice _target, QPoint _targetOffset, QRegion _sourceRegion, QWidget.RenderFlags _flags)"""
        return None
    def render(self, _painter, _targetOffset, _sourceRegion, _flags):
        """None QWidget.render(None self, QPainter _painter, QPoint _targetOffset, QRegion _sourceRegion, QWidget.RenderFlags _flags)"""
        return None
    def restoreGeometry(self, _geometry):
        """bool QWidget.restoreGeometry(None self, QByteArray _geometry)"""
        return bool()
    def saveGeometry(self):
        """QByteArray QWidget.saveGeometry(None self)"""
        return QByteArray()
    def setShortcutAutoRepeat(self, _id, _enabled):
        """None QWidget.setShortcutAutoRepeat(None self, int _id, bool _enabled)"""
        return None
    def styleSheet(self):
        """QString QWidget.styleSheet(None self)"""
        return QString()
    def setStyleSheet(self, _styleSheet):
        """None QWidget.setStyleSheet(None self, QString _styleSheet)"""
        return None
    def setAutoFillBackground(self, _enabled):
        """None QWidget.setAutoFillBackground(None self, bool _enabled)"""
        return None
    def autoFillBackground(self):
        """bool QWidget.autoFillBackground(None self)"""
        return bool()
    def setWindowModality(self, _windowModality):
        """None QWidget.setWindowModality(None self, Qt.WindowModality _windowModality)"""
        return None
    def windowModality(self):
        """Qt.WindowModality QWidget.windowModality(None self)"""
        return Qt.WindowModality()
    def testAttribute(self, _attribute):
        """bool QWidget.testAttribute(None self, Qt.WidgetAttribute _attribute)"""
        return bool()
    def parentWidget(self):
        """QWidget QWidget.parentWidget(None self)"""
        return QWidget()
    def height(self):
        """int QWidget.height(None self)"""
        return int()
    def width(self):
        """int QWidget.width(None self)"""
        return int()
    def size(self):
        """QSize QWidget.size(None self)"""
        return QSize()
    def geometry(self):
        """QRect QWidget.geometry(None self)"""
        return QRect()
    def rect(self):
        """QRect QWidget.rect(None self)"""
        return QRect()
    def isHidden(self):
        """bool QWidget.isHidden(None self)"""
        return bool()
    def isVisible(self):
        """bool QWidget.isVisible(None self)"""
        return bool()
    def updatesEnabled(self):
        """bool QWidget.updatesEnabled(None self)"""
        return bool()
    def underMouse(self):
        """bool QWidget.underMouse(None self)"""
        return bool()
    def hasMouseTracking(self):
        """bool QWidget.hasMouseTracking(None self)"""
        return bool()
    def setMouseTracking(self, _enable):
        """None QWidget.setMouseTracking(None self, bool _enable)"""
        return None
    def fontInfo(self):
        """QFontInfo QWidget.fontInfo(None self)"""
        return QFontInfo()
    def fontMetrics(self):
        """QFontMetrics QWidget.fontMetrics(None self)"""
        return QFontMetrics()
    def font(self):
        """QFont QWidget.font(None self)"""
        return QFont()
    def maximumHeight(self):
        """int QWidget.maximumHeight(None self)"""
        return int()
    def maximumWidth(self):
        """int QWidget.maximumWidth(None self)"""
        return int()
    def minimumHeight(self):
        """int QWidget.minimumHeight(None self)"""
        return int()
    def minimumWidth(self):
        """int QWidget.minimumWidth(None self)"""
        return int()
    def isEnabledToTLW(self):
        """bool QWidget.isEnabledToTLW(None self)"""
        return bool()
    def isModal(self):
        """bool QWidget.isModal(None self)"""
        return bool()
    def isEnabled(self):
        """bool QWidget.isEnabled(None self)"""
        return bool()
    def isWindow(self):
        """bool QWidget.isWindow(None self)"""
        return bool()
    def isTopLevel(self):
        """bool QWidget.isTopLevel(None self)"""
        return bool()
    def winId(self):
        """int QWidget.winId(None self)"""
        return int()
    def windowFlags(self):
        """Qt.WindowFlags QWidget.windowFlags(None self)"""
        return Qt.WindowFlags()
    def windowType(self):
        """Qt.WindowType QWidget.windowType(None self)"""
        return Qt.WindowType()
    def languageChange(self):
        """None QWidget.languageChange(None self)"""
        return None
    def windowActivationChange(self):
        """bool QWidget.windowActivationChange(None self)"""
        return bool()
    def fontChange(self):
        """QFont QWidget.fontChange(None self)"""
        return QFont()
    def paletteChange(self):
        """QPalette QWidget.paletteChange(None self)"""
        return QPalette()
    def enabledChange(self):
        """bool QWidget.enabledChange(None self)"""
        return bool()
    def focusPreviousChild(self):
        """bool QWidget.focusPreviousChild(None self)"""
        return bool()
    def focusNextChild(self):
        """bool QWidget.focusNextChild(None self)"""
        return bool()
    def focusNextPrevChild(self, _next):
        """bool QWidget.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def destroy(self, _destroyWindow, _destroySubWindows):
        """None QWidget.destroy(None self, bool _destroyWindow, bool _destroySubWindows)"""
        return None
    def create(self, _window, _initializeWindow, _destroyOldWindow):
        """None QWidget.create(None self, int _window, bool _initializeWindow, bool _destroyOldWindow)"""
        return None
    def updateMicroFocus(self):
        """None QWidget.updateMicroFocus(None self)"""
        return None
    def resetInputContext(self):
        """None QWidget.resetInputContext(None self)"""
        return None
    def inputMethodQuery(self):
        """Qt.InputMethodQuery QWidget.inputMethodQuery(None self)"""
        return Qt.InputMethodQuery()
    def inputMethodEvent(self):
        """QInputMethodEvent QWidget.inputMethodEvent(None self)"""
        return QInputMethodEvent()
    def metric(self):
        """QPaintDevice.PaintDeviceMetric QWidget.metric(None self)"""
        return QPaintDevice.PaintDeviceMetric()
    def changeEvent(self):
        """QEvent QWidget.changeEvent(None self)"""
        return QEvent()
    def hideEvent(self):
        """QHideEvent QWidget.hideEvent(None self)"""
        return QHideEvent()
    def showEvent(self):
        """QShowEvent QWidget.showEvent(None self)"""
        return QShowEvent()
    def dropEvent(self):
        """QDropEvent QWidget.dropEvent(None self)"""
        return QDropEvent()
    def dragLeaveEvent(self):
        """QDragLeaveEvent QWidget.dragLeaveEvent(None self)"""
        return QDragLeaveEvent()
    def dragMoveEvent(self):
        """QDragMoveEvent QWidget.dragMoveEvent(None self)"""
        return QDragMoveEvent()
    def dragEnterEvent(self):
        """QDragEnterEvent QWidget.dragEnterEvent(None self)"""
        return QDragEnterEvent()
    def actionEvent(self):
        """QActionEvent QWidget.actionEvent(None self)"""
        return QActionEvent()
    def tabletEvent(self):
        """QTabletEvent QWidget.tabletEvent(None self)"""
        return QTabletEvent()
    def contextMenuEvent(self):
        """QContextMenuEvent QWidget.contextMenuEvent(None self)"""
        return QContextMenuEvent()
    def closeEvent(self):
        """QCloseEvent QWidget.closeEvent(None self)"""
        return QCloseEvent()
    def resizeEvent(self):
        """QResizeEvent QWidget.resizeEvent(None self)"""
        return QResizeEvent()
    def moveEvent(self):
        """QMoveEvent QWidget.moveEvent(None self)"""
        return QMoveEvent()
    def paintEvent(self):
        """QPaintEvent QWidget.paintEvent(None self)"""
        return QPaintEvent()
    def leaveEvent(self):
        """QEvent QWidget.leaveEvent(None self)"""
        return QEvent()
    def enterEvent(self):
        """QEvent QWidget.enterEvent(None self)"""
        return QEvent()
    def focusOutEvent(self):
        """QFocusEvent QWidget.focusOutEvent(None self)"""
        return QFocusEvent()
    def focusInEvent(self):
        """QFocusEvent QWidget.focusInEvent(None self)"""
        return QFocusEvent()
    def keyReleaseEvent(self):
        """QKeyEvent QWidget.keyReleaseEvent(None self)"""
        return QKeyEvent()
    def keyPressEvent(self):
        """QKeyEvent QWidget.keyPressEvent(None self)"""
        return QKeyEvent()
    def wheelEvent(self):
        """QWheelEvent QWidget.wheelEvent(None self)"""
        return QWheelEvent()
    def mouseMoveEvent(self):
        """QMouseEvent QWidget.mouseMoveEvent(None self)"""
        return QMouseEvent()
    def mouseDoubleClickEvent(self):
        """QMouseEvent QWidget.mouseDoubleClickEvent(None self)"""
        return QMouseEvent()
    def mouseReleaseEvent(self):
        """QMouseEvent QWidget.mouseReleaseEvent(None self)"""
        return QMouseEvent()
    def mousePressEvent(self):
        """QMouseEvent QWidget.mousePressEvent(None self)"""
        return QMouseEvent()
    def event(self):
        """QEvent QWidget.event(None self)"""
        return QEvent()
    def isAncestorOf(self, _child):
        """bool QWidget.isAncestorOf(None self, QWidget _child)"""
        return bool()
    def setInputContext(self):
        """QInputContext QWidget.setInputContext(None self)"""
        return QInputContext()
    def inputContext(self):
        """QInputContext QWidget.inputContext(None self)"""
        return QInputContext()
    def ensurePolished(self):
        """None QWidget.ensurePolished(None self)"""
        return None
    def paintEngine(self):
        """QPaintEngine QWidget.paintEngine(None self)"""
        return QPaintEngine()
    def setAttribute(self, _attribute, _on):
        """None QWidget.setAttribute(None self, Qt.WidgetAttribute _attribute, bool _on)"""
        return None
    def handle(self):
        """int QWidget.handle(None self)"""
        return int()
    def x11PictureHandle(self):
        """int QWidget.x11PictureHandle(None self)"""
        return int()
    def x11Info(self):
        """QX11Info QWidget.x11Info(None self)"""
        return QX11Info()
    def childAt(self, _p):
        """QWidget QWidget.childAt(None self, QPoint _p)"""
        return QWidget()
    def childAt(self, _ax, _ay):
        """QWidget QWidget.childAt(None self, int _ax, int _ay)"""
        return QWidget()
    def find(self):
        """int QWidget.find(None self)"""
        return int()
    def overrideWindowFlags(self, _type):
        """None QWidget.overrideWindowFlags(None self, Qt.WindowFlags _type)"""
        return None
    def setWindowFlags(self, _type):
        """None QWidget.setWindowFlags(None self, Qt.WindowFlags _type)"""
        return None
    def actions(self):
        """list-of-QAction QWidget.actions(None self)"""
        return [QAction()]
    def removeAction(self, _action):
        """None QWidget.removeAction(None self, QAction _action)"""
        return None
    def insertActions(self, _before, _actions):
        """None QWidget.insertActions(None self, QAction _before, list-of-QAction _actions)"""
        return None
    def insertAction(self, _before, _action):
        """None QWidget.insertAction(None self, QAction _before, QAction _action)"""
        return None
    def addActions(self, _actions):
        """None QWidget.addActions(None self, list-of-QAction _actions)"""
        return None
    def addAction(self, _action):
        """None QWidget.addAction(None self, QAction _action)"""
        return None
    def setAcceptDrops(self, _on):
        """None QWidget.setAcceptDrops(None self, bool _on)"""
        return None
    def acceptDrops(self):
        """bool QWidget.acceptDrops(None self)"""
        return bool()
    def nextInFocusChain(self):
        """QWidget QWidget.nextInFocusChain(None self)"""
        return QWidget()
    def focusWidget(self):
        """QWidget QWidget.focusWidget(None self)"""
        return QWidget()
    def scroll(self, _dx, _dy):
        """None QWidget.scroll(None self, int _dx, int _dy)"""
        return None
    def scroll(self, _dx, _dy):
        """QRect QWidget.scroll(None self, int _dx, int _dy)"""
        return QRect()
    def setParent(self, _parent):
        """None QWidget.setParent(None self, QWidget _parent)"""
        return None
    def setParent(self, _parent, _f):
        """None QWidget.setParent(None self, QWidget _parent, Qt.WindowFlags _f)"""
        return None
    def updateGeometry(self):
        """None QWidget.updateGeometry(None self)"""
        return None
    def setLayout(self):
        """QLayout QWidget.setLayout(None self)"""
        return QLayout()
    def layout(self):
        """QLayout QWidget.layout(None self)"""
        return QLayout()
    def contentsRect(self):
        """QRect QWidget.contentsRect(None self)"""
        return QRect()
    def getContentsMargins(self, _left, _top, _right, _bottom):
        """None QWidget.getContentsMargins(None self, int _left, int _top, int _right, int _bottom)"""
        return None
    def setContentsMargins(self, _left, _top, _right, _bottom):
        """None QWidget.setContentsMargins(None self, int _left, int _top, int _right, int _bottom)"""
        return None
    def setContentsMargins(self, _margins):
        """None QWidget.setContentsMargins(None self, QMargins _margins)"""
        return None
    def visibleRegion(self):
        """QRegion QWidget.visibleRegion(None self)"""
        return QRegion()
    def heightForWidth(self):
        """int QWidget.heightForWidth(None self)"""
        return int()
    def setSizePolicy(self):
        """QSizePolicy QWidget.setSizePolicy(None self)"""
        return QSizePolicy()
    def setSizePolicy(self, _hor, _ver):
        """None QWidget.setSizePolicy(None self, QSizePolicy.Policy _hor, QSizePolicy.Policy _ver)"""
        return None
    def sizePolicy(self):
        """QSizePolicy QWidget.sizePolicy(None self)"""
        return QSizePolicy()
    def minimumSizeHint(self):
        """QSize QWidget.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QWidget.sizeHint(None self)"""
        return QSize()
    def overrideWindowState(self, _state):
        """None QWidget.overrideWindowState(None self, Qt.WindowStates _state)"""
        return None
    def setWindowState(self, _state):
        """None QWidget.setWindowState(None self, Qt.WindowStates _state)"""
        return None
    def windowState(self):
        """Qt.WindowStates QWidget.windowState(None self)"""
        return Qt.WindowStates()
    def isFullScreen(self):
        """bool QWidget.isFullScreen(None self)"""
        return bool()
    def isMaximized(self):
        """bool QWidget.isMaximized(None self)"""
        return bool()
    def isMinimized(self):
        """bool QWidget.isMinimized(None self)"""
        return bool()
    def isVisibleTo(self):
        """QWidget QWidget.isVisibleTo(None self)"""
        return QWidget()
    def adjustSize(self):
        """None QWidget.adjustSize(None self)"""
        return None
    def setGeometry(self):
        """QRect QWidget.setGeometry(None self)"""
        return QRect()
    def setGeometry(self, _ax, _ay, _aw, _ah):
        """None QWidget.setGeometry(None self, int _ax, int _ay, int _aw, int _ah)"""
        return None
    def resize(self):
        """QSize QWidget.resize(None self)"""
        return QSize()
    def resize(self, _w, _h):
        """None QWidget.resize(None self, int _w, int _h)"""
        return None
    def move(self):
        """QPoint QWidget.move(None self)"""
        return QPoint()
    def move(self, _ax, _ay):
        """None QWidget.move(None self, int _ax, int _ay)"""
        return None
    def stackUnder(self):
        """QWidget QWidget.stackUnder(None self)"""
        return QWidget()
    def lower(self):
        """None QWidget.lower(None self)"""
        return None
    def raise_(self):
        """None QWidget.raise_(None self)"""
        return None
    def close(self):
        """bool QWidget.close(None self)"""
        return bool()
    def showNormal(self):
        """None QWidget.showNormal(None self)"""
        return None
    def showFullScreen(self):
        """None QWidget.showFullScreen(None self)"""
        return None
    def showMaximized(self):
        """None QWidget.showMaximized(None self)"""
        return None
    def showMinimized(self):
        """None QWidget.showMinimized(None self)"""
        return None
    def setShown(self, _shown):
        """None QWidget.setShown(None self, bool _shown)"""
        return None
    def hide(self):
        """None QWidget.hide(None self)"""
        return None
    def show(self):
        """None QWidget.show(None self)"""
        return None
    def setHidden(self, _hidden):
        """None QWidget.setHidden(None self, bool _hidden)"""
        return None
    def setVisible(self, _visible):
        """None QWidget.setVisible(None self, bool _visible)"""
        return None
    def repaint(self):
        """None QWidget.repaint(None self)"""
        return None
    def repaint(self, _x, _y, _w, _h):
        """None QWidget.repaint(None self, int _x, int _y, int _w, int _h)"""
        return None
    def repaint(self):
        """QRect QWidget.repaint(None self)"""
        return QRect()
    def repaint(self):
        """QRegion QWidget.repaint(None self)"""
        return QRegion()
    def update(self):
        """None QWidget.update(None self)"""
        return None
    def update(self):
        """QRect QWidget.update(None self)"""
        return QRect()
    def update(self):
        """QRegion QWidget.update(None self)"""
        return QRegion()
    def update(self, _ax, _ay, _aw, _ah):
        """None QWidget.update(None self, int _ax, int _ay, int _aw, int _ah)"""
        return None
    def setUpdatesEnabled(self, _enable):
        """None QWidget.setUpdatesEnabled(None self, bool _enable)"""
        return None
    def keyboardGrabber(self):
        """QWidget QWidget.keyboardGrabber(None self)"""
        return QWidget()
    def mouseGrabber(self):
        """QWidget QWidget.mouseGrabber(None self)"""
        return QWidget()
    def setShortcutEnabled(self, _id, _enabled):
        """None QWidget.setShortcutEnabled(None self, int _id, bool _enabled)"""
        return None
    def releaseShortcut(self, _id):
        """None QWidget.releaseShortcut(None self, int _id)"""
        return None
    def grabShortcut(self, _key, _context):
        """int QWidget.grabShortcut(None self, QKeySequence _key, Qt.ShortcutContext _context)"""
        return int()
    def releaseKeyboard(self):
        """None QWidget.releaseKeyboard(None self)"""
        return None
    def grabKeyboard(self):
        """None QWidget.grabKeyboard(None self)"""
        return None
    def releaseMouse(self):
        """None QWidget.releaseMouse(None self)"""
        return None
    def grabMouse(self):
        """None QWidget.grabMouse(None self)"""
        return None
    def grabMouse(self):
        """QCursor QWidget.grabMouse(None self)"""
        return QCursor()
    def setContextMenuPolicy(self, _policy):
        """None QWidget.setContextMenuPolicy(None self, Qt.ContextMenuPolicy _policy)"""
        return None
    def contextMenuPolicy(self):
        """Qt.ContextMenuPolicy QWidget.contextMenuPolicy(None self)"""
        return Qt.ContextMenuPolicy()
    def focusProxy(self):
        """QWidget QWidget.focusProxy(None self)"""
        return QWidget()
    def setFocusProxy(self):
        """QWidget QWidget.setFocusProxy(None self)"""
        return QWidget()
    def setTabOrder(self):
        """QWidget QWidget.setTabOrder(None self)"""
        return QWidget()
    def hasFocus(self):
        """bool QWidget.hasFocus(None self)"""
        return bool()
    def setFocusPolicy(self, _policy):
        """None QWidget.setFocusPolicy(None self, Qt.FocusPolicy _policy)"""
        return None
    def focusPolicy(self):
        """Qt.FocusPolicy QWidget.focusPolicy(None self)"""
        return Qt.FocusPolicy()
    def clearFocus(self):
        """None QWidget.clearFocus(None self)"""
        return None
    def activateWindow(self):
        """None QWidget.activateWindow(None self)"""
        return None
    def isActiveWindow(self):
        """bool QWidget.isActiveWindow(None self)"""
        return bool()
    def setFocus(self):
        """None QWidget.setFocus(None self)"""
        return None
    def setFocus(self, _reason):
        """None QWidget.setFocus(None self, Qt.FocusReason _reason)"""
        return None
    def isLeftToRight(self):
        """bool QWidget.isLeftToRight(None self)"""
        return bool()
    def isRightToLeft(self):
        """bool QWidget.isRightToLeft(None self)"""
        return bool()
    def unsetLayoutDirection(self):
        """None QWidget.unsetLayoutDirection(None self)"""
        return None
    def layoutDirection(self):
        """Qt.LayoutDirection QWidget.layoutDirection(None self)"""
        return Qt.LayoutDirection()
    def setLayoutDirection(self, _direction):
        """None QWidget.setLayoutDirection(None self, Qt.LayoutDirection _direction)"""
        return None
    def setAccessibleDescription(self, _description):
        """None QWidget.setAccessibleDescription(None self, QString _description)"""
        return None
    def accessibleDescription(self):
        """QString QWidget.accessibleDescription(None self)"""
        return QString()
    def setAccessibleName(self, _name):
        """None QWidget.setAccessibleName(None self, QString _name)"""
        return None
    def accessibleName(self):
        """QString QWidget.accessibleName(None self)"""
        return QString()
    def whatsThis(self):
        """QString QWidget.whatsThis(None self)"""
        return QString()
    def setWhatsThis(self):
        """QString QWidget.setWhatsThis(None self)"""
        return QString()
    def statusTip(self):
        """QString QWidget.statusTip(None self)"""
        return QString()
    def setStatusTip(self):
        """QString QWidget.setStatusTip(None self)"""
        return QString()
    def toolTip(self):
        """QString QWidget.toolTip(None self)"""
        return QString()
    def setToolTip(self):
        """QString QWidget.setToolTip(None self)"""
        return QString()
    def isWindowModified(self):
        """bool QWidget.isWindowModified(None self)"""
        return bool()
    def windowOpacity(self):
        """float QWidget.windowOpacity(None self)"""
        return float()
    def setWindowOpacity(self, _level):
        """None QWidget.setWindowOpacity(None self, float _level)"""
        return None
    def windowRole(self):
        """QString QWidget.windowRole(None self)"""
        return QString()
    def setWindowRole(self):
        """QString QWidget.setWindowRole(None self)"""
        return QString()
    def windowIconText(self):
        """QString QWidget.windowIconText(None self)"""
        return QString()
    def setWindowIconText(self):
        """QString QWidget.setWindowIconText(None self)"""
        return QString()
    def windowIcon(self):
        """QIcon QWidget.windowIcon(None self)"""
        return QIcon()
    def setWindowIcon(self, _icon):
        """None QWidget.setWindowIcon(None self, QIcon _icon)"""
        return None
    def windowTitle(self):
        """QString QWidget.windowTitle(None self)"""
        return QString()
    def setWindowTitle(self):
        """QString QWidget.setWindowTitle(None self)"""
        return QString()
    def clearMask(self):
        """None QWidget.clearMask(None self)"""
        return None
    def mask(self):
        """QRegion QWidget.mask(None self)"""
        return QRegion()
    def setMask(self):
        """QBitmap QWidget.setMask(None self)"""
        return QBitmap()
    def setMask(self):
        """QRegion QWidget.setMask(None self)"""
        return QRegion()
    def unsetCursor(self):
        """None QWidget.unsetCursor(None self)"""
        return None
    def setCursor(self):
        """QCursor QWidget.setCursor(None self)"""
        return QCursor()
    def cursor(self):
        """QCursor QWidget.cursor(None self)"""
        return QCursor()
    def setFont(self):
        """QFont QWidget.setFont(None self)"""
        return QFont()
    def foregroundRole(self):
        """QPalette.ColorRole QWidget.foregroundRole(None self)"""
        return QPalette.ColorRole()
    def setForegroundRole(self):
        """QPalette.ColorRole QWidget.setForegroundRole(None self)"""
        return QPalette.ColorRole()
    def backgroundRole(self):
        """QPalette.ColorRole QWidget.backgroundRole(None self)"""
        return QPalette.ColorRole()
    def setBackgroundRole(self):
        """QPalette.ColorRole QWidget.setBackgroundRole(None self)"""
        return QPalette.ColorRole()
    def setPalette(self):
        """QPalette QWidget.setPalette(None self)"""
        return QPalette()
    def palette(self):
        """QPalette QWidget.palette(None self)"""
        return QPalette()
    def topLevelWidget(self):
        """QWidget QWidget.topLevelWidget(None self)"""
        return QWidget()
    def window(self):
        """QWidget QWidget.window(None self)"""
        return QWidget()
    def mapFrom(self):
        """QPoint QWidget.mapFrom(None self)"""
        return QPoint()
    def mapTo(self):
        """QPoint QWidget.mapTo(None self)"""
        return QPoint()
    def mapFromParent(self):
        """QPoint QWidget.mapFromParent(None self)"""
        return QPoint()
    def mapToParent(self):
        """QPoint QWidget.mapToParent(None self)"""
        return QPoint()
    def mapFromGlobal(self):
        """QPoint QWidget.mapFromGlobal(None self)"""
        return QPoint()
    def mapToGlobal(self):
        """QPoint QWidget.mapToGlobal(None self)"""
        return QPoint()
    def setFixedHeight(self, _h):
        """None QWidget.setFixedHeight(None self, int _h)"""
        return None
    def setFixedWidth(self, _w):
        """None QWidget.setFixedWidth(None self, int _w)"""
        return None
    def setFixedSize(self):
        """QSize QWidget.setFixedSize(None self)"""
        return QSize()
    def setFixedSize(self, _w, _h):
        """None QWidget.setFixedSize(None self, int _w, int _h)"""
        return None
    def setBaseSize(self, _basew, _baseh):
        """None QWidget.setBaseSize(None self, int _basew, int _baseh)"""
        return None
    def setBaseSize(self, _s):
        """None QWidget.setBaseSize(None self, QSize _s)"""
        return None
    def baseSize(self):
        """QSize QWidget.baseSize(None self)"""
        return QSize()
    def setSizeIncrement(self, _w, _h):
        """None QWidget.setSizeIncrement(None self, int _w, int _h)"""
        return None
    def setSizeIncrement(self, _s):
        """None QWidget.setSizeIncrement(None self, QSize _s)"""
        return None
    def sizeIncrement(self):
        """QSize QWidget.sizeIncrement(None self)"""
        return QSize()
    def setMaximumHeight(self, _maxh):
        """None QWidget.setMaximumHeight(None self, int _maxh)"""
        return None
    def setMaximumWidth(self, _maxw):
        """None QWidget.setMaximumWidth(None self, int _maxw)"""
        return None
    def setMinimumHeight(self, _minh):
        """None QWidget.setMinimumHeight(None self, int _minh)"""
        return None
    def setMinimumWidth(self, _minw):
        """None QWidget.setMinimumWidth(None self, int _minw)"""
        return None
    def setMaximumSize(self, _maxw, _maxh):
        """None QWidget.setMaximumSize(None self, int _maxw, int _maxh)"""
        return None
    def setMaximumSize(self, _s):
        """None QWidget.setMaximumSize(None self, QSize _s)"""
        return None
    def setMinimumSize(self, _minw, _minh):
        """None QWidget.setMinimumSize(None self, int _minw, int _minh)"""
        return None
    def setMinimumSize(self, _s):
        """None QWidget.setMinimumSize(None self, QSize _s)"""
        return None
    def maximumSize(self):
        """QSize QWidget.maximumSize(None self)"""
        return QSize()
    def minimumSize(self):
        """QSize QWidget.minimumSize(None self)"""
        return QSize()
    def childrenRegion(self):
        """QRegion QWidget.childrenRegion(None self)"""
        return QRegion()
    def childrenRect(self):
        """QRect QWidget.childrenRect(None self)"""
        return QRect()
    def frameSize(self):
        """QSize QWidget.frameSize(None self)"""
        return QSize()
    def pos(self):
        """QPoint QWidget.pos(None self)"""
        return QPoint()
    def y(self):
        """int QWidget.y(None self)"""
        return int()
    def x(self):
        """int QWidget.x(None self)"""
        return int()
    def normalGeometry(self):
        """QRect QWidget.normalGeometry(None self)"""
        return QRect()
    def frameGeometry(self):
        """QRect QWidget.frameGeometry(None self)"""
        return QRect()
    def setWindowModified(self):
        """bool QWidget.setWindowModified(None self)"""
        return bool()
    def setDisabled(self):
        """bool QWidget.setDisabled(None self)"""
        return bool()
    def setEnabled(self):
        """bool QWidget.setEnabled(None self)"""
        return bool()
    def isEnabledTo(self):
        """QWidget QWidget.isEnabledTo(None self)"""
        return QWidget()
    def setStyle(self):
        """QStyle QWidget.setStyle(None self)"""
        return QStyle()
    def style(self):
        """QStyle QWidget.style(None self)"""
        return QStyle()
    def devType(self):
        """int QWidget.devType(None self)"""
        return int()


class QAbstractButton(QWidget):
    """"""
    def __init__(self, _parent):
        """None QAbstractButton.__init__(None self, QWidget _parent)"""
        return None
    def timerEvent(self, _e):
        """None QAbstractButton.timerEvent(None self, QTimerEvent _e)"""
        return None
    def changeEvent(self, _e):
        """None QAbstractButton.changeEvent(None self, QEvent _e)"""
        return None
    def focusOutEvent(self, _e):
        """None QAbstractButton.focusOutEvent(None self, QFocusEvent _e)"""
        return None
    def focusInEvent(self, _e):
        """None QAbstractButton.focusInEvent(None self, QFocusEvent _e)"""
        return None
    def mouseMoveEvent(self, _e):
        """None QAbstractButton.mouseMoveEvent(None self, QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(self, _e):
        """None QAbstractButton.mouseReleaseEvent(None self, QMouseEvent _e)"""
        return None
    def mousePressEvent(self, _e):
        """None QAbstractButton.mousePressEvent(None self, QMouseEvent _e)"""
        return None
    def keyReleaseEvent(self, _e):
        """None QAbstractButton.keyReleaseEvent(None self, QKeyEvent _e)"""
        return None
    def keyPressEvent(self, _e):
        """None QAbstractButton.keyPressEvent(None self, QKeyEvent _e)"""
        return None
    def event(self, _e):
        """bool QAbstractButton.event(None self, QEvent _e)"""
        return bool()
    def nextCheckState(self):
        """None QAbstractButton.nextCheckState(None self)"""
        return None
    def checkStateSet(self):
        """None QAbstractButton.checkStateSet(None self)"""
        return None
    def hitButton(self, _pos):
        """bool QAbstractButton.hitButton(None self, QPoint _pos)"""
        return bool()
    def paintEvent(self, _e):
        """abstract None QAbstractButton.paintEvent(None self, QPaintEvent _e)"""
        return None
    def setChecked(self):
        """bool QAbstractButton.setChecked(None self)"""
        return bool()
    def toggle(self):
        """None QAbstractButton.toggle(None self)"""
        return None
    def click(self):
        """None QAbstractButton.click(None self)"""
        return None
    def animateClick(self, _msecs):
        """None QAbstractButton.animateClick(None self, int _msecs)"""
        return None
    def setIconSize(self, _size):
        """None QAbstractButton.setIconSize(None self, QSize _size)"""
        return None
    def group(self):
        """QButtonGroup QAbstractButton.group(None self)"""
        return QButtonGroup()
    def autoExclusive(self):
        """bool QAbstractButton.autoExclusive(None self)"""
        return bool()
    def setAutoExclusive(self):
        """bool QAbstractButton.setAutoExclusive(None self)"""
        return bool()
    def autoRepeat(self):
        """bool QAbstractButton.autoRepeat(None self)"""
        return bool()
    def setAutoRepeat(self):
        """bool QAbstractButton.setAutoRepeat(None self)"""
        return bool()
    def isDown(self):
        """bool QAbstractButton.isDown(None self)"""
        return bool()
    def setDown(self):
        """bool QAbstractButton.setDown(None self)"""
        return bool()
    def isChecked(self):
        """bool QAbstractButton.isChecked(None self)"""
        return bool()
    def isCheckable(self):
        """bool QAbstractButton.isCheckable(None self)"""
        return bool()
    def setCheckable(self):
        """bool QAbstractButton.setCheckable(None self)"""
        return bool()
    def shortcut(self):
        """QKeySequence QAbstractButton.shortcut(None self)"""
        return QKeySequence()
    def setShortcut(self, _key):
        """None QAbstractButton.setShortcut(None self, QKeySequence _key)"""
        return None
    def iconSize(self):
        """QSize QAbstractButton.iconSize(None self)"""
        return QSize()
    def icon(self):
        """QIcon QAbstractButton.icon(None self)"""
        return QIcon()
    def setIcon(self, _icon):
        """None QAbstractButton.setIcon(None self, QIcon _icon)"""
        return None
    def text(self):
        """QString QAbstractButton.text(None self)"""
        return QString()
    def setText(self, _text):
        """None QAbstractButton.setText(None self, QString _text)"""
        return None
    def autoRepeatInterval(self):
        """int QAbstractButton.autoRepeatInterval(None self)"""
        return int()
    def setAutoRepeatInterval(self):
        """int QAbstractButton.setAutoRepeatInterval(None self)"""
        return int()
    def autoRepeatDelay(self):
        """int QAbstractButton.autoRepeatDelay(None self)"""
        return int()
    def setAutoRepeatDelay(self):
        """int QAbstractButton.setAutoRepeatDelay(None self)"""
        return int()


class QAbstractItemDelegate(QObject):
    """"""
    NoHint = int() # QAbstractItemDelegate.EndEditHint enum
    EditNextItem = int() # QAbstractItemDelegate.EndEditHint enum
    EditPreviousItem = int() # QAbstractItemDelegate.EndEditHint enum
    SubmitModelCache = int() # QAbstractItemDelegate.EndEditHint enum
    RevertModelCache = int() # QAbstractItemDelegate.EndEditHint enum

    def __init__(self, _parent):
        """None QAbstractItemDelegate.__init__(None self, QObject _parent)"""
        return None
    def helpEvent(self, _event, _view, _option, _index):
        """bool QAbstractItemDelegate.helpEvent(None self, QHelpEvent _event, QAbstractItemView _view, QStyleOptionViewItem _option, QModelIndex _index)"""
        return bool()
    def elidedText(self, _fontMetrics, _width, _mode, _text):
        """QString QAbstractItemDelegate.elidedText(None self, QFontMetrics _fontMetrics, int _width, Qt.TextElideMode _mode, QString _text)"""
        return QString()
    def editorEvent(self, _event, _model, _option, _index):
        """bool QAbstractItemDelegate.editorEvent(None self, QEvent _event, QAbstractItemModel _model, QStyleOptionViewItem _option, QModelIndex _index)"""
        return bool()
    def updateEditorGeometry(self, _editor, _option, _index):
        """None QAbstractItemDelegate.updateEditorGeometry(None self, QWidget _editor, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None
    def setModelData(self, _editor, _model, _index):
        """None QAbstractItemDelegate.setModelData(None self, QWidget _editor, QAbstractItemModel _model, QModelIndex _index)"""
        return None
    def setEditorData(self, _editor, _index):
        """None QAbstractItemDelegate.setEditorData(None self, QWidget _editor, QModelIndex _index)"""
        return None
    def createEditor(self, _parent, _option, _index):
        """QWidget QAbstractItemDelegate.createEditor(None self, QWidget _parent, QStyleOptionViewItem _option, QModelIndex _index)"""
        return QWidget()
    def sizeHint(self, _option, _index):
        """abstract QSize QAbstractItemDelegate.sizeHint(None self, QStyleOptionViewItem _option, QModelIndex _index)"""
        return QSize()
    def paint(self, _painter, _option, _index):
        """abstract None QAbstractItemDelegate.paint(None self, QPainter _painter, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None


class QFrame(QWidget):
    """"""
    Shadow_Mask = int() # QFrame.StyleMask enum
    Shape_Mask = int() # QFrame.StyleMask enum

    NoFrame = int() # QFrame.Shape enum
    Box = int() # QFrame.Shape enum
    Panel = int() # QFrame.Shape enum
    WinPanel = int() # QFrame.Shape enum
    HLine = int() # QFrame.Shape enum
    VLine = int() # QFrame.Shape enum
    StyledPanel = int() # QFrame.Shape enum

    Plain = int() # QFrame.Shadow enum
    Raised = int() # QFrame.Shadow enum
    Sunken = int() # QFrame.Shadow enum

    def __init__(self, _parent, _flags):
        """None QFrame.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def drawFrame(self):
        """QPainter QFrame.drawFrame(None self)"""
        return QPainter()
    def changeEvent(self):
        """QEvent QFrame.changeEvent(None self)"""
        return QEvent()
    def paintEvent(self):
        """QPaintEvent QFrame.paintEvent(None self)"""
        return QPaintEvent()
    def event(self, _e):
        """bool QFrame.event(None self, QEvent _e)"""
        return bool()
    def setFrameRect(self):
        """QRect QFrame.setFrameRect(None self)"""
        return QRect()
    def frameRect(self):
        """QRect QFrame.frameRect(None self)"""
        return QRect()
    def setMidLineWidth(self):
        """int QFrame.setMidLineWidth(None self)"""
        return int()
    def midLineWidth(self):
        """int QFrame.midLineWidth(None self)"""
        return int()
    def setLineWidth(self):
        """int QFrame.setLineWidth(None self)"""
        return int()
    def lineWidth(self):
        """int QFrame.lineWidth(None self)"""
        return int()
    def setFrameShadow(self):
        """QFrame.Shadow QFrame.setFrameShadow(None self)"""
        return QFrame.Shadow()
    def frameShadow(self):
        """QFrame.Shadow QFrame.frameShadow(None self)"""
        return QFrame.Shadow()
    def setFrameShape(self):
        """QFrame.Shape QFrame.setFrameShape(None self)"""
        return QFrame.Shape()
    def frameShape(self):
        """QFrame.Shape QFrame.frameShape(None self)"""
        return QFrame.Shape()
    def sizeHint(self):
        """QSize QFrame.sizeHint(None self)"""
        return QSize()
    def frameWidth(self):
        """int QFrame.frameWidth(None self)"""
        return int()
    def setFrameStyle(self):
        """int QFrame.setFrameStyle(None self)"""
        return int()
    def frameStyle(self):
        """int QFrame.frameStyle(None self)"""
        return int()


class QAbstractScrollArea(QFrame):
    """"""
    def __init__(self, _parent):
        """None QAbstractScrollArea.__init__(None self, QWidget _parent)"""
        return None
    def setupViewport(self, _viewport):
        """None QAbstractScrollArea.setupViewport(None self, QWidget _viewport)"""
        return None
    def setViewport(self, _widget):
        """None QAbstractScrollArea.setViewport(None self, QWidget _widget)"""
        return None
    def scrollBarWidgets(self, _alignment):
        """list-of-QWidget QAbstractScrollArea.scrollBarWidgets(None self, Qt.Alignment _alignment)"""
        return [QWidget()]
    def addScrollBarWidget(self, _widget, _alignment):
        """None QAbstractScrollArea.addScrollBarWidget(None self, QWidget _widget, Qt.Alignment _alignment)"""
        return None
    def setCornerWidget(self, _widget):
        """None QAbstractScrollArea.setCornerWidget(None self, QWidget _widget)"""
        return None
    def cornerWidget(self):
        """QWidget QAbstractScrollArea.cornerWidget(None self)"""
        return QWidget()
    def setHorizontalScrollBar(self, _scrollbar):
        """None QAbstractScrollArea.setHorizontalScrollBar(None self, QScrollBar _scrollbar)"""
        return None
    def setVerticalScrollBar(self, _scrollbar):
        """None QAbstractScrollArea.setVerticalScrollBar(None self, QScrollBar _scrollbar)"""
        return None
    def scrollContentsBy(self, _dx, _dy):
        """None QAbstractScrollArea.scrollContentsBy(None self, int _dx, int _dy)"""
        return None
    def keyPressEvent(self):
        """QKeyEvent QAbstractScrollArea.keyPressEvent(None self)"""
        return QKeyEvent()
    def dropEvent(self):
        """QDropEvent QAbstractScrollArea.dropEvent(None self)"""
        return QDropEvent()
    def dragLeaveEvent(self):
        """QDragLeaveEvent QAbstractScrollArea.dragLeaveEvent(None self)"""
        return QDragLeaveEvent()
    def dragMoveEvent(self):
        """QDragMoveEvent QAbstractScrollArea.dragMoveEvent(None self)"""
        return QDragMoveEvent()
    def dragEnterEvent(self):
        """QDragEnterEvent QAbstractScrollArea.dragEnterEvent(None self)"""
        return QDragEnterEvent()
    def contextMenuEvent(self):
        """QContextMenuEvent QAbstractScrollArea.contextMenuEvent(None self)"""
        return QContextMenuEvent()
    def wheelEvent(self):
        """QWheelEvent QAbstractScrollArea.wheelEvent(None self)"""
        return QWheelEvent()
    def mouseMoveEvent(self):
        """QMouseEvent QAbstractScrollArea.mouseMoveEvent(None self)"""
        return QMouseEvent()
    def mouseDoubleClickEvent(self):
        """QMouseEvent QAbstractScrollArea.mouseDoubleClickEvent(None self)"""
        return QMouseEvent()
    def mouseReleaseEvent(self):
        """QMouseEvent QAbstractScrollArea.mouseReleaseEvent(None self)"""
        return QMouseEvent()
    def mousePressEvent(self):
        """QMouseEvent QAbstractScrollArea.mousePressEvent(None self)"""
        return QMouseEvent()
    def paintEvent(self):
        """QPaintEvent QAbstractScrollArea.paintEvent(None self)"""
        return QPaintEvent()
    def resizeEvent(self):
        """QResizeEvent QAbstractScrollArea.resizeEvent(None self)"""
        return QResizeEvent()
    def viewportEvent(self):
        """QEvent QAbstractScrollArea.viewportEvent(None self)"""
        return QEvent()
    def event(self):
        """QEvent QAbstractScrollArea.event(None self)"""
        return QEvent()
    def setViewportMargins(self, _left, _top, _right, _bottom):
        """None QAbstractScrollArea.setViewportMargins(None self, int _left, int _top, int _right, int _bottom)"""
        return None
    def setViewportMargins(self, _margins):
        """None QAbstractScrollArea.setViewportMargins(None self, QMargins _margins)"""
        return None
    def sizeHint(self):
        """QSize QAbstractScrollArea.sizeHint(None self)"""
        return QSize()
    def minimumSizeHint(self):
        """QSize QAbstractScrollArea.minimumSizeHint(None self)"""
        return QSize()
    def maximumViewportSize(self):
        """QSize QAbstractScrollArea.maximumViewportSize(None self)"""
        return QSize()
    def viewport(self):
        """QWidget QAbstractScrollArea.viewport(None self)"""
        return QWidget()
    def horizontalScrollBar(self):
        """QScrollBar QAbstractScrollArea.horizontalScrollBar(None self)"""
        return QScrollBar()
    def setHorizontalScrollBarPolicy(self):
        """Qt.ScrollBarPolicy QAbstractScrollArea.setHorizontalScrollBarPolicy(None self)"""
        return Qt.ScrollBarPolicy()
    def horizontalScrollBarPolicy(self):
        """Qt.ScrollBarPolicy QAbstractScrollArea.horizontalScrollBarPolicy(None self)"""
        return Qt.ScrollBarPolicy()
    def verticalScrollBar(self):
        """QScrollBar QAbstractScrollArea.verticalScrollBar(None self)"""
        return QScrollBar()
    def setVerticalScrollBarPolicy(self):
        """Qt.ScrollBarPolicy QAbstractScrollArea.setVerticalScrollBarPolicy(None self)"""
        return Qt.ScrollBarPolicy()
    def verticalScrollBarPolicy(self):
        """Qt.ScrollBarPolicy QAbstractScrollArea.verticalScrollBarPolicy(None self)"""
        return Qt.ScrollBarPolicy()


class QAbstractItemView(QAbstractScrollArea):
    """"""
    OnItem = int() # QAbstractItemView.DropIndicatorPosition enum
    AboveItem = int() # QAbstractItemView.DropIndicatorPosition enum
    BelowItem = int() # QAbstractItemView.DropIndicatorPosition enum
    OnViewport = int() # QAbstractItemView.DropIndicatorPosition enum

    NoState = int() # QAbstractItemView.State enum
    DraggingState = int() # QAbstractItemView.State enum
    DragSelectingState = int() # QAbstractItemView.State enum
    EditingState = int() # QAbstractItemView.State enum
    ExpandingState = int() # QAbstractItemView.State enum
    CollapsingState = int() # QAbstractItemView.State enum
    AnimatingState = int() # QAbstractItemView.State enum

    MoveUp = int() # QAbstractItemView.CursorAction enum
    MoveDown = int() # QAbstractItemView.CursorAction enum
    MoveLeft = int() # QAbstractItemView.CursorAction enum
    MoveRight = int() # QAbstractItemView.CursorAction enum
    MoveHome = int() # QAbstractItemView.CursorAction enum
    MoveEnd = int() # QAbstractItemView.CursorAction enum
    MovePageUp = int() # QAbstractItemView.CursorAction enum
    MovePageDown = int() # QAbstractItemView.CursorAction enum
    MoveNext = int() # QAbstractItemView.CursorAction enum
    MovePrevious = int() # QAbstractItemView.CursorAction enum

    NoSelection = int() # QAbstractItemView.SelectionMode enum
    SingleSelection = int() # QAbstractItemView.SelectionMode enum
    MultiSelection = int() # QAbstractItemView.SelectionMode enum
    ExtendedSelection = int() # QAbstractItemView.SelectionMode enum
    ContiguousSelection = int() # QAbstractItemView.SelectionMode enum

    SelectItems = int() # QAbstractItemView.SelectionBehavior enum
    SelectRows = int() # QAbstractItemView.SelectionBehavior enum
    SelectColumns = int() # QAbstractItemView.SelectionBehavior enum

    ScrollPerItem = int() # QAbstractItemView.ScrollMode enum
    ScrollPerPixel = int() # QAbstractItemView.ScrollMode enum

    EnsureVisible = int() # QAbstractItemView.ScrollHint enum
    PositionAtTop = int() # QAbstractItemView.ScrollHint enum
    PositionAtBottom = int() # QAbstractItemView.ScrollHint enum
    PositionAtCenter = int() # QAbstractItemView.ScrollHint enum

    NoEditTriggers = int() # QAbstractItemView.EditTrigger enum
    CurrentChanged = int() # QAbstractItemView.EditTrigger enum
    DoubleClicked = int() # QAbstractItemView.EditTrigger enum
    SelectedClicked = int() # QAbstractItemView.EditTrigger enum
    EditKeyPressed = int() # QAbstractItemView.EditTrigger enum
    AnyKeyPressed = int() # QAbstractItemView.EditTrigger enum
    AllEditTriggers = int() # QAbstractItemView.EditTrigger enum

    NoDragDrop = int() # QAbstractItemView.DragDropMode enum
    DragOnly = int() # QAbstractItemView.DragDropMode enum
    DropOnly = int() # QAbstractItemView.DragDropMode enum
    DragDrop = int() # QAbstractItemView.DragDropMode enum
    InternalMove = int() # QAbstractItemView.DragDropMode enum

    def __init__(self, _parent):
        """None QAbstractItemView.__init__(None self, QWidget _parent)"""
        return None
    def defaultDropAction(self):
        """Qt.DropAction QAbstractItemView.defaultDropAction(None self)"""
        return Qt.DropAction()
    def setDefaultDropAction(self, _dropAction):
        """None QAbstractItemView.setDefaultDropAction(None self, Qt.DropAction _dropAction)"""
        return None
    def inputMethodEvent(self, _event):
        """None QAbstractItemView.inputMethodEvent(None self, QInputMethodEvent _event)"""
        return None
    def focusNextPrevChild(self, _next):
        """bool QAbstractItemView.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def autoScrollMargin(self):
        """int QAbstractItemView.autoScrollMargin(None self)"""
        return int()
    def setAutoScrollMargin(self, _margin):
        """None QAbstractItemView.setAutoScrollMargin(None self, int _margin)"""
        return None
    def inputMethodQuery(self, _query):
        """QVariant QAbstractItemView.inputMethodQuery(None self, Qt.InputMethodQuery _query)"""
        return QVariant()
    def itemDelegateForColumn(self, _column):
        """QAbstractItemDelegate QAbstractItemView.itemDelegateForColumn(None self, int _column)"""
        return QAbstractItemDelegate()
    def setItemDelegateForColumn(self, _column, _delegate):
        """None QAbstractItemView.setItemDelegateForColumn(None self, int _column, QAbstractItemDelegate _delegate)"""
        return None
    def itemDelegateForRow(self, _row):
        """QAbstractItemDelegate QAbstractItemView.itemDelegateForRow(None self, int _row)"""
        return QAbstractItemDelegate()
    def setItemDelegateForRow(self, _row, _delegate):
        """None QAbstractItemView.setItemDelegateForRow(None self, int _row, QAbstractItemDelegate _delegate)"""
        return None
    def dragDropMode(self):
        """QAbstractItemView.DragDropMode QAbstractItemView.dragDropMode(None self)"""
        return QAbstractItemView.DragDropMode()
    def setDragDropMode(self, _behavior):
        """None QAbstractItemView.setDragDropMode(None self, QAbstractItemView.DragDropMode _behavior)"""
        return None
    def dragDropOverwriteMode(self):
        """bool QAbstractItemView.dragDropOverwriteMode(None self)"""
        return bool()
    def setDragDropOverwriteMode(self, _overwrite):
        """None QAbstractItemView.setDragDropOverwriteMode(None self, bool _overwrite)"""
        return None
    def horizontalScrollMode(self):
        """QAbstractItemView.ScrollMode QAbstractItemView.horizontalScrollMode(None self)"""
        return QAbstractItemView.ScrollMode()
    def setHorizontalScrollMode(self, _mode):
        """None QAbstractItemView.setHorizontalScrollMode(None self, QAbstractItemView.ScrollMode _mode)"""
        return None
    def verticalScrollMode(self):
        """QAbstractItemView.ScrollMode QAbstractItemView.verticalScrollMode(None self)"""
        return QAbstractItemView.ScrollMode()
    def setVerticalScrollMode(self, _mode):
        """None QAbstractItemView.setVerticalScrollMode(None self, QAbstractItemView.ScrollMode _mode)"""
        return None
    def dropIndicatorPosition(self):
        """QAbstractItemView.DropIndicatorPosition QAbstractItemView.dropIndicatorPosition(None self)"""
        return QAbstractItemView.DropIndicatorPosition()
    def timerEvent(self, _e):
        """None QAbstractItemView.timerEvent(None self, QTimerEvent _e)"""
        return None
    def resizeEvent(self, _e):
        """None QAbstractItemView.resizeEvent(None self, QResizeEvent _e)"""
        return None
    def keyPressEvent(self, _e):
        """None QAbstractItemView.keyPressEvent(None self, QKeyEvent _e)"""
        return None
    def focusOutEvent(self, _e):
        """None QAbstractItemView.focusOutEvent(None self, QFocusEvent _e)"""
        return None
    def focusInEvent(self, _e):
        """None QAbstractItemView.focusInEvent(None self, QFocusEvent _e)"""
        return None
    def dropEvent(self, _e):
        """None QAbstractItemView.dropEvent(None self, QDropEvent _e)"""
        return None
    def dragLeaveEvent(self, _e):
        """None QAbstractItemView.dragLeaveEvent(None self, QDragLeaveEvent _e)"""
        return None
    def dragMoveEvent(self, _e):
        """None QAbstractItemView.dragMoveEvent(None self, QDragMoveEvent _e)"""
        return None
    def dragEnterEvent(self, _e):
        """None QAbstractItemView.dragEnterEvent(None self, QDragEnterEvent _e)"""
        return None
    def mouseDoubleClickEvent(self, _e):
        """None QAbstractItemView.mouseDoubleClickEvent(None self, QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(self, _e):
        """None QAbstractItemView.mouseReleaseEvent(None self, QMouseEvent _e)"""
        return None
    def mouseMoveEvent(self, _e):
        """None QAbstractItemView.mouseMoveEvent(None self, QMouseEvent _e)"""
        return None
    def mousePressEvent(self, _e):
        """None QAbstractItemView.mousePressEvent(None self, QMouseEvent _e)"""
        return None
    def viewportEvent(self, _e):
        """bool QAbstractItemView.viewportEvent(None self, QEvent _e)"""
        return bool()
    def event(self, _event):
        """bool QAbstractItemView.event(None self, QEvent _event)"""
        return bool()
    def dirtyRegionOffset(self):
        """QPoint QAbstractItemView.dirtyRegionOffset(None self)"""
        return QPoint()
    def setDirtyRegion(self, _region):
        """None QAbstractItemView.setDirtyRegion(None self, QRegion _region)"""
        return None
    def scrollDirtyRegion(self, _dx, _dy):
        """None QAbstractItemView.scrollDirtyRegion(None self, int _dx, int _dy)"""
        return None
    def executeDelayedItemsLayout(self):
        """None QAbstractItemView.executeDelayedItemsLayout(None self)"""
        return None
    def scheduleDelayedItemsLayout(self):
        """None QAbstractItemView.scheduleDelayedItemsLayout(None self)"""
        return None
    def setState(self, _state):
        """None QAbstractItemView.setState(None self, QAbstractItemView.State _state)"""
        return None
    def state(self):
        """QAbstractItemView.State QAbstractItemView.state(None self)"""
        return QAbstractItemView.State()
    def viewOptions(self):
        """QStyleOptionViewItem QAbstractItemView.viewOptions(None self)"""
        return QStyleOptionViewItem()
    def startDrag(self, _supportedActions):
        """None QAbstractItemView.startDrag(None self, Qt.DropActions _supportedActions)"""
        return None
    def selectionCommand(self, _index, _event):
        """QItemSelectionModel.SelectionFlags QAbstractItemView.selectionCommand(None self, QModelIndex _index, QEvent _event)"""
        return QItemSelectionModel.SelectionFlags()
    def selectedIndexes(self):
        """list-of-QModelIndex QAbstractItemView.selectedIndexes(None self)"""
        return [QModelIndex()]
    def visualRegionForSelection(self, _selection):
        """abstract QRegion QAbstractItemView.visualRegionForSelection(None self, QItemSelection _selection)"""
        return QRegion()
    def setSelection(self, _rect, _command):
        """abstract None QAbstractItemView.setSelection(None self, QRect _rect, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def isIndexHidden(self, _index):
        """abstract bool QAbstractItemView.isIndexHidden(None self, QModelIndex _index)"""
        return bool()
    def verticalOffset(self):
        """abstract int QAbstractItemView.verticalOffset(None self)"""
        return int()
    def horizontalOffset(self):
        """abstract int QAbstractItemView.horizontalOffset(None self)"""
        return int()
    def moveCursor(self, _cursorAction, _modifiers):
        """abstract QModelIndex QAbstractItemView.moveCursor(None self, QAbstractItemView.CursorAction _cursorAction, Qt.KeyboardModifiers _modifiers)"""
        return QModelIndex()
    def verticalStepsPerItem(self):
        """int QAbstractItemView.verticalStepsPerItem(None self)"""
        return int()
    def setVerticalStepsPerItem(self, _steps):
        """None QAbstractItemView.setVerticalStepsPerItem(None self, int _steps)"""
        return None
    def horizontalStepsPerItem(self):
        """int QAbstractItemView.horizontalStepsPerItem(None self)"""
        return int()
    def setHorizontalStepsPerItem(self, _steps):
        """None QAbstractItemView.setHorizontalStepsPerItem(None self, int _steps)"""
        return None
    def editorDestroyed(self, _editor):
        """None QAbstractItemView.editorDestroyed(None self, QObject _editor)"""
        return None
    def commitData(self, _editor):
        """None QAbstractItemView.commitData(None self, QWidget _editor)"""
        return None
    def closeEditor(self, _editor, _hint):
        """None QAbstractItemView.closeEditor(None self, QWidget _editor, QAbstractItemDelegate.EndEditHint _hint)"""
        return None
    def horizontalScrollbarValueChanged(self, _value):
        """None QAbstractItemView.horizontalScrollbarValueChanged(None self, int _value)"""
        return None
    def verticalScrollbarValueChanged(self, _value):
        """None QAbstractItemView.verticalScrollbarValueChanged(None self, int _value)"""
        return None
    def horizontalScrollbarAction(self, _action):
        """None QAbstractItemView.horizontalScrollbarAction(None self, int _action)"""
        return None
    def verticalScrollbarAction(self, _action):
        """None QAbstractItemView.verticalScrollbarAction(None self, int _action)"""
        return None
    def updateGeometries(self):
        """None QAbstractItemView.updateGeometries(None self)"""
        return None
    def updateEditorGeometries(self):
        """None QAbstractItemView.updateEditorGeometries(None self)"""
        return None
    def updateEditorData(self):
        """None QAbstractItemView.updateEditorData(None self)"""
        return None
    def currentChanged(self, _current, _previous):
        """None QAbstractItemView.currentChanged(None self, QModelIndex _current, QModelIndex _previous)"""
        return None
    def selectionChanged(self, _selected, _deselected):
        """None QAbstractItemView.selectionChanged(None self, QItemSelection _selected, QItemSelection _deselected)"""
        return None
    def rowsAboutToBeRemoved(self, _parent, _start, _end):
        """None QAbstractItemView.rowsAboutToBeRemoved(None self, QModelIndex _parent, int _start, int _end)"""
        return None
    def rowsInserted(self, _parent, _start, _end):
        """None QAbstractItemView.rowsInserted(None self, QModelIndex _parent, int _start, int _end)"""
        return None
    def dataChanged(self, _topLeft, _bottomRight):
        """None QAbstractItemView.dataChanged(None self, QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None
    def update(self):
        """None QAbstractItemView.update(None self)"""
        return None
    def update(self, _index):
        """None QAbstractItemView.update(None self, QModelIndex _index)"""
        return None
    def scrollToBottom(self):
        """None QAbstractItemView.scrollToBottom(None self)"""
        return None
    def scrollToTop(self):
        """None QAbstractItemView.scrollToTop(None self)"""
        return None
    def setCurrentIndex(self, _index):
        """None QAbstractItemView.setCurrentIndex(None self, QModelIndex _index)"""
        return None
    def clearSelection(self):
        """None QAbstractItemView.clearSelection(None self)"""
        return None
    def edit(self, _index):
        """None QAbstractItemView.edit(None self, QModelIndex _index)"""
        return None
    def edit(self, _index, _trigger, _event):
        """bool QAbstractItemView.edit(None self, QModelIndex _index, QAbstractItemView.EditTrigger _trigger, QEvent _event)"""
        return bool()
    def selectAll(self):
        """None QAbstractItemView.selectAll(None self)"""
        return None
    def doItemsLayout(self):
        """None QAbstractItemView.doItemsLayout(None self)"""
        return None
    def setRootIndex(self, _index):
        """None QAbstractItemView.setRootIndex(None self, QModelIndex _index)"""
        return None
    def reset(self):
        """None QAbstractItemView.reset(None self)"""
        return None
    def indexWidget(self, _index):
        """QWidget QAbstractItemView.indexWidget(None self, QModelIndex _index)"""
        return QWidget()
    def setIndexWidget(self, _index, _widget):
        """None QAbstractItemView.setIndexWidget(None self, QModelIndex _index, QWidget _widget)"""
        return None
    def closePersistentEditor(self, _index):
        """None QAbstractItemView.closePersistentEditor(None self, QModelIndex _index)"""
        return None
    def openPersistentEditor(self, _index):
        """None QAbstractItemView.openPersistentEditor(None self, QModelIndex _index)"""
        return None
    def sizeHintForColumn(self, _column):
        """int QAbstractItemView.sizeHintForColumn(None self, int _column)"""
        return int()
    def sizeHintForRow(self, _row):
        """int QAbstractItemView.sizeHintForRow(None self, int _row)"""
        return int()
    def sizeHintForIndex(self, _index):
        """QSize QAbstractItemView.sizeHintForIndex(None self, QModelIndex _index)"""
        return QSize()
    def indexAt(self, _p):
        """abstract QModelIndex QAbstractItemView.indexAt(None self, QPoint _p)"""
        return QModelIndex()
    def scrollTo(self, _index, _hint):
        """abstract None QAbstractItemView.scrollTo(None self, QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def visualRect(self, _index):
        """abstract QRect QAbstractItemView.visualRect(None self, QModelIndex _index)"""
        return QRect()
    def keyboardSearch(self, _search):
        """None QAbstractItemView.keyboardSearch(None self, QString _search)"""
        return None
    def textElideMode(self):
        """Qt.TextElideMode QAbstractItemView.textElideMode(None self)"""
        return Qt.TextElideMode()
    def setTextElideMode(self, _mode):
        """None QAbstractItemView.setTextElideMode(None self, Qt.TextElideMode _mode)"""
        return None
    def iconSize(self):
        """QSize QAbstractItemView.iconSize(None self)"""
        return QSize()
    def setIconSize(self, _size):
        """None QAbstractItemView.setIconSize(None self, QSize _size)"""
        return None
    def alternatingRowColors(self):
        """bool QAbstractItemView.alternatingRowColors(None self)"""
        return bool()
    def setAlternatingRowColors(self, _enable):
        """None QAbstractItemView.setAlternatingRowColors(None self, bool _enable)"""
        return None
    def dragEnabled(self):
        """bool QAbstractItemView.dragEnabled(None self)"""
        return bool()
    def setDragEnabled(self, _enable):
        """None QAbstractItemView.setDragEnabled(None self, bool _enable)"""
        return None
    def showDropIndicator(self):
        """bool QAbstractItemView.showDropIndicator(None self)"""
        return bool()
    def setDropIndicatorShown(self, _enable):
        """None QAbstractItemView.setDropIndicatorShown(None self, bool _enable)"""
        return None
    def tabKeyNavigation(self):
        """bool QAbstractItemView.tabKeyNavigation(None self)"""
        return bool()
    def setTabKeyNavigation(self, _enable):
        """None QAbstractItemView.setTabKeyNavigation(None self, bool _enable)"""
        return None
    def hasAutoScroll(self):
        """bool QAbstractItemView.hasAutoScroll(None self)"""
        return bool()
    def setAutoScroll(self, _enable):
        """None QAbstractItemView.setAutoScroll(None self, bool _enable)"""
        return None
    def editTriggers(self):
        """QAbstractItemView.EditTriggers QAbstractItemView.editTriggers(None self)"""
        return QAbstractItemView.EditTriggers()
    def setEditTriggers(self, _triggers):
        """None QAbstractItemView.setEditTriggers(None self, QAbstractItemView.EditTriggers _triggers)"""
        return None
    def rootIndex(self):
        """QModelIndex QAbstractItemView.rootIndex(None self)"""
        return QModelIndex()
    def currentIndex(self):
        """QModelIndex QAbstractItemView.currentIndex(None self)"""
        return QModelIndex()
    def selectionBehavior(self):
        """QAbstractItemView.SelectionBehavior QAbstractItemView.selectionBehavior(None self)"""
        return QAbstractItemView.SelectionBehavior()
    def setSelectionBehavior(self, _behavior):
        """None QAbstractItemView.setSelectionBehavior(None self, QAbstractItemView.SelectionBehavior _behavior)"""
        return None
    def selectionMode(self):
        """QAbstractItemView.SelectionMode QAbstractItemView.selectionMode(None self)"""
        return QAbstractItemView.SelectionMode()
    def setSelectionMode(self, _mode):
        """None QAbstractItemView.setSelectionMode(None self, QAbstractItemView.SelectionMode _mode)"""
        return None
    def itemDelegate(self):
        """QAbstractItemDelegate QAbstractItemView.itemDelegate(None self)"""
        return QAbstractItemDelegate()
    def itemDelegate(self, _index):
        """QAbstractItemDelegate QAbstractItemView.itemDelegate(None self, QModelIndex _index)"""
        return QAbstractItemDelegate()
    def setItemDelegate(self, _delegate):
        """None QAbstractItemView.setItemDelegate(None self, QAbstractItemDelegate _delegate)"""
        return None
    def selectionModel(self):
        """QItemSelectionModel QAbstractItemView.selectionModel(None self)"""
        return QItemSelectionModel()
    def setSelectionModel(self, _selectionModel):
        """None QAbstractItemView.setSelectionModel(None self, QItemSelectionModel _selectionModel)"""
        return None
    def model(self):
        """QAbstractItemModel QAbstractItemView.model(None self)"""
        return QAbstractItemModel()
    def setModel(self, _model):
        """None QAbstractItemView.setModel(None self, QAbstractItemModel _model)"""
        return None


class QDialog(QWidget):
    """"""
    Rejected = int() # QDialog.DialogCode enum
    Accepted = int() # QDialog.DialogCode enum

    def __init__(self, _parent, _flags):
        """None QDialog.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def eventFilter(self):
        """QEvent QDialog.eventFilter(None self)"""
        return QEvent()
    def contextMenuEvent(self):
        """QContextMenuEvent QDialog.contextMenuEvent(None self)"""
        return QContextMenuEvent()
    def resizeEvent(self):
        """QResizeEvent QDialog.resizeEvent(None self)"""
        return QResizeEvent()
    def showEvent(self):
        """QShowEvent QDialog.showEvent(None self)"""
        return QShowEvent()
    def closeEvent(self):
        """QCloseEvent QDialog.closeEvent(None self)"""
        return QCloseEvent()
    def keyPressEvent(self):
        """QKeyEvent QDialog.keyPressEvent(None self)"""
        return QKeyEvent()
    def open(self):
        """None QDialog.open(None self)"""
        return None
    def showExtension(self):
        """bool QDialog.showExtension(None self)"""
        return bool()
    def reject(self):
        """None QDialog.reject(None self)"""
        return None
    def accept(self):
        """None QDialog.accept(None self)"""
        return None
    def done(self):
        """int QDialog.done(None self)"""
        return int()
    def exec_(self):
        """int QDialog.exec_(None self)"""
        return int()
    def setResult(self, _r):
        """None QDialog.setResult(None self, int _r)"""
        return None
    def setModal(self, _modal):
        """None QDialog.setModal(None self, bool _modal)"""
        return None
    def isSizeGripEnabled(self):
        """bool QDialog.isSizeGripEnabled(None self)"""
        return bool()
    def setSizeGripEnabled(self):
        """bool QDialog.setSizeGripEnabled(None self)"""
        return bool()
    def minimumSizeHint(self):
        """QSize QDialog.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QDialog.sizeHint(None self)"""
        return QSize()
    def extension(self):
        """QWidget QDialog.extension(None self)"""
        return QWidget()
    def setExtension(self, _extension):
        """None QDialog.setExtension(None self, QWidget _extension)"""
        return None
    def orientation(self):
        """Qt.Orientation QDialog.orientation(None self)"""
        return Qt.Orientation()
    def setOrientation(self, _orientation):
        """None QDialog.setOrientation(None self, Qt.Orientation _orientation)"""
        return None
    def setVisible(self, _visible):
        """None QDialog.setVisible(None self, bool _visible)"""
        return None
    def result(self):
        """int QDialog.result(None self)"""
        return int()


class QAbstractPrintDialog(QDialog):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintToFile = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintSelection = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintPageRange = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintCollateCopies = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintShowPageSize = int() # QAbstractPrintDialog.PrintDialogOption enum
    DontUseSheet = int() # QAbstractPrintDialog.PrintDialogOption enum
    PrintCurrentPage = int() # QAbstractPrintDialog.PrintDialogOption enum

    AllPages = int() # QAbstractPrintDialog.PrintRange enum
    Selection = int() # QAbstractPrintDialog.PrintRange enum
    PageRange = int() # QAbstractPrintDialog.PrintRange enum
    CurrentPage = int() # QAbstractPrintDialog.PrintRange enum

    def __init__(self, _printer, _parent):
        """None QAbstractPrintDialog.__init__(None self, QPrinter _printer, QWidget _parent)"""
        return None
    def setOptionTabs(self, _tabs):
        """None QAbstractPrintDialog.setOptionTabs(None self, list-of-QWidget _tabs)"""
        return None
    def printer(self):
        """QPrinter QAbstractPrintDialog.printer(None self)"""
        return QPrinter()
    def toPage(self):
        """int QAbstractPrintDialog.toPage(None self)"""
        return int()
    def fromPage(self):
        """int QAbstractPrintDialog.fromPage(None self)"""
        return int()
    def setFromTo(self, _fromPage, _toPage):
        """None QAbstractPrintDialog.setFromTo(None self, int _fromPage, int _toPage)"""
        return None
    def maxPage(self):
        """int QAbstractPrintDialog.maxPage(None self)"""
        return int()
    def minPage(self):
        """int QAbstractPrintDialog.minPage(None self)"""
        return int()
    def setMinMax(self, _min, _max):
        """None QAbstractPrintDialog.setMinMax(None self, int _min, int _max)"""
        return None
    def printRange(self):
        """QAbstractPrintDialog.PrintRange QAbstractPrintDialog.printRange(None self)"""
        return QAbstractPrintDialog.PrintRange()
    def setPrintRange(self, _range):
        """None QAbstractPrintDialog.setPrintRange(None self, QAbstractPrintDialog.PrintRange _range)"""
        return None
    def isOptionEnabled(self, _option):
        """bool QAbstractPrintDialog.isOptionEnabled(None self, QAbstractPrintDialog.PrintDialogOption _option)"""
        return bool()
    def enabledOptions(self):
        """QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.enabledOptions(None self)"""
        return QAbstractPrintDialog.PrintDialogOptions()
    def setEnabledOptions(self, _options):
        """None QAbstractPrintDialog.setEnabledOptions(None self, QAbstractPrintDialog.PrintDialogOptions _options)"""
        return None
    def addEnabledOption(self, _option):
        """None QAbstractPrintDialog.addEnabledOption(None self, QAbstractPrintDialog.PrintDialogOption _option)"""
        return None
    def exec_(self):
        """abstract int QAbstractPrintDialog.exec_(None self)"""
        return int()


class QAbstractProxyModel(QAbstractItemModel):
    """"""
    def __init__(self, _parent):
        """None QAbstractProxyModel.__init__(None self, QObject _parent)"""
        return None
    def flags(self, _index):
        """Qt.ItemFlags QAbstractProxyModel.flags(None self, QModelIndex _index)"""
        return Qt.ItemFlags()
    def itemData(self, _index):
        """dict-of-int-QVariant QAbstractProxyModel.itemData(None self, QModelIndex _index)"""
        return dict-of-int-QVariant()
    def setHeaderData(self, _section, _orientation, _value, _role):
        """bool QAbstractProxyModel.setHeaderData(None self, int _section, Qt.Orientation _orientation, QVariant _value, int _role)"""
        return bool()
    def headerData(self, _section, _orientation, _role):
        """QVariant QAbstractProxyModel.headerData(None self, int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(self, _index, _value, _role):
        """bool QAbstractProxyModel.setData(None self, QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def data(self, _proxyIndex, _role):
        """QVariant QAbstractProxyModel.data(None self, QModelIndex _proxyIndex, int _role)"""
        return QVariant()
    def revert(self):
        """None QAbstractProxyModel.revert(None self)"""
        return None
    def submit(self):
        """bool QAbstractProxyModel.submit(None self)"""
        return bool()
    def mapSelectionFromSource(self, _selection):
        """QItemSelection QAbstractProxyModel.mapSelectionFromSource(None self, QItemSelection _selection)"""
        return QItemSelection()
    def mapSelectionToSource(self, _selection):
        """QItemSelection QAbstractProxyModel.mapSelectionToSource(None self, QItemSelection _selection)"""
        return QItemSelection()
    def mapFromSource(self, _sourceIndex):
        """abstract QModelIndex QAbstractProxyModel.mapFromSource(None self, QModelIndex _sourceIndex)"""
        return QModelIndex()
    def mapToSource(self, _proxyIndex):
        """abstract QModelIndex QAbstractProxyModel.mapToSource(None self, QModelIndex _proxyIndex)"""
        return QModelIndex()
    def sourceModel(self):
        """QAbstractItemModel QAbstractProxyModel.sourceModel(None self)"""
        return QAbstractItemModel()
    def setSourceModel(self, _sourceModel):
        """None QAbstractProxyModel.setSourceModel(None self, QAbstractItemModel _sourceModel)"""
        return None


class QAbstractSpinBox(QWidget):
    """"""
    CorrectToPreviousValue = int() # QAbstractSpinBox.CorrectionMode enum
    CorrectToNearestValue = int() # QAbstractSpinBox.CorrectionMode enum

    UpDownArrows = int() # QAbstractSpinBox.ButtonSymbols enum
    PlusMinus = int() # QAbstractSpinBox.ButtonSymbols enum
    NoButtons = int() # QAbstractSpinBox.ButtonSymbols enum

    StepNone = int() # QAbstractSpinBox.StepEnabledFlag enum
    StepUpEnabled = int() # QAbstractSpinBox.StepEnabledFlag enum
    StepDownEnabled = int() # QAbstractSpinBox.StepEnabledFlag enum

    def __init__(self, _parent):
        """None QAbstractSpinBox.__init__(None self, QWidget _parent)"""
        return None
    def inputMethodQuery(self):
        """Qt.InputMethodQuery QAbstractSpinBox.inputMethodQuery(None self)"""
        return Qt.InputMethodQuery()
    def initStyleOption(self, _option):
        """None QAbstractSpinBox.initStyleOption(None self, QStyleOptionSpinBox _option)"""
        return None
    def keyboardTracking(self):
        """bool QAbstractSpinBox.keyboardTracking(None self)"""
        return bool()
    def setKeyboardTracking(self, _kt):
        """None QAbstractSpinBox.setKeyboardTracking(None self, bool _kt)"""
        return None
    def isAccelerated(self):
        """bool QAbstractSpinBox.isAccelerated(None self)"""
        return bool()
    def setAccelerated(self, _on):
        """None QAbstractSpinBox.setAccelerated(None self, bool _on)"""
        return None
    def hasAcceptableInput(self):
        """bool QAbstractSpinBox.hasAcceptableInput(None self)"""
        return bool()
    def correctionMode(self):
        """QAbstractSpinBox.CorrectionMode QAbstractSpinBox.correctionMode(None self)"""
        return QAbstractSpinBox.CorrectionMode()
    def setCorrectionMode(self, _cm):
        """None QAbstractSpinBox.setCorrectionMode(None self, QAbstractSpinBox.CorrectionMode _cm)"""
        return None
    def stepEnabled(self):
        """QAbstractSpinBox.StepEnabled QAbstractSpinBox.stepEnabled(None self)"""
        return QAbstractSpinBox.StepEnabled()
    def setLineEdit(self, _e):
        """None QAbstractSpinBox.setLineEdit(None self, QLineEdit _e)"""
        return None
    def lineEdit(self):
        """QLineEdit QAbstractSpinBox.lineEdit(None self)"""
        return QLineEdit()
    def showEvent(self, _e):
        """None QAbstractSpinBox.showEvent(None self, QShowEvent _e)"""
        return None
    def paintEvent(self, _e):
        """None QAbstractSpinBox.paintEvent(None self, QPaintEvent _e)"""
        return None
    def timerEvent(self, _e):
        """None QAbstractSpinBox.timerEvent(None self, QTimerEvent _e)"""
        return None
    def mouseMoveEvent(self, _e):
        """None QAbstractSpinBox.mouseMoveEvent(None self, QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(self, _e):
        """None QAbstractSpinBox.mouseReleaseEvent(None self, QMouseEvent _e)"""
        return None
    def mousePressEvent(self, _e):
        """None QAbstractSpinBox.mousePressEvent(None self, QMouseEvent _e)"""
        return None
    def hideEvent(self, _e):
        """None QAbstractSpinBox.hideEvent(None self, QHideEvent _e)"""
        return None
    def closeEvent(self, _e):
        """None QAbstractSpinBox.closeEvent(None self, QCloseEvent _e)"""
        return None
    def changeEvent(self, _e):
        """None QAbstractSpinBox.changeEvent(None self, QEvent _e)"""
        return None
    def contextMenuEvent(self, _e):
        """None QAbstractSpinBox.contextMenuEvent(None self, QContextMenuEvent _e)"""
        return None
    def focusOutEvent(self, _e):
        """None QAbstractSpinBox.focusOutEvent(None self, QFocusEvent _e)"""
        return None
    def focusInEvent(self, _e):
        """None QAbstractSpinBox.focusInEvent(None self, QFocusEvent _e)"""
        return None
    def wheelEvent(self, _e):
        """None QAbstractSpinBox.wheelEvent(None self, QWheelEvent _e)"""
        return None
    def keyReleaseEvent(self, _e):
        """None QAbstractSpinBox.keyReleaseEvent(None self, QKeyEvent _e)"""
        return None
    def keyPressEvent(self, _e):
        """None QAbstractSpinBox.keyPressEvent(None self, QKeyEvent _e)"""
        return None
    def resizeEvent(self, _e):
        """None QAbstractSpinBox.resizeEvent(None self, QResizeEvent _e)"""
        return None
    def clear(self):
        """None QAbstractSpinBox.clear(None self)"""
        return None
    def selectAll(self):
        """None QAbstractSpinBox.selectAll(None self)"""
        return None
    def stepDown(self):
        """None QAbstractSpinBox.stepDown(None self)"""
        return None
    def stepUp(self):
        """None QAbstractSpinBox.stepUp(None self)"""
        return None
    def stepBy(self, _steps):
        """None QAbstractSpinBox.stepBy(None self, int _steps)"""
        return None
    def fixup(self, _input):
        """None QAbstractSpinBox.fixup(None self, QString _input)"""
        return None
    def fixup(self, _input):
        """None QAbstractSpinBox.fixup(None self, QString _input)"""
        return None
    def validate(self, _input, _pos):
        """QValidator.State QAbstractSpinBox.validate(None self, QString _input, int _pos)"""
        return QValidator.State()
    def validate(self, _input, _pos):
        """QValidator.State QAbstractSpinBox.validate(None self, QString _input, int _pos)"""
        return QValidator.State()
    def event(self, _event):
        """bool QAbstractSpinBox.event(None self, QEvent _event)"""
        return bool()
    def interpretText(self):
        """None QAbstractSpinBox.interpretText(None self)"""
        return None
    def minimumSizeHint(self):
        """QSize QAbstractSpinBox.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QAbstractSpinBox.sizeHint(None self)"""
        return QSize()
    def hasFrame(self):
        """bool QAbstractSpinBox.hasFrame(None self)"""
        return bool()
    def setFrame(self):
        """bool QAbstractSpinBox.setFrame(None self)"""
        return bool()
    def alignment(self):
        """Qt.Alignment QAbstractSpinBox.alignment(None self)"""
        return Qt.Alignment()
    def setAlignment(self, _flag):
        """None QAbstractSpinBox.setAlignment(None self, Qt.Alignment _flag)"""
        return None
    def isReadOnly(self):
        """bool QAbstractSpinBox.isReadOnly(None self)"""
        return bool()
    def setReadOnly(self, _r):
        """None QAbstractSpinBox.setReadOnly(None self, bool _r)"""
        return None
    def setWrapping(self, _w):
        """None QAbstractSpinBox.setWrapping(None self, bool _w)"""
        return None
    def wrapping(self):
        """bool QAbstractSpinBox.wrapping(None self)"""
        return bool()
    def setSpecialValueText(self, _s):
        """None QAbstractSpinBox.setSpecialValueText(None self, QString _s)"""
        return None
    def specialValueText(self):
        """QString QAbstractSpinBox.specialValueText(None self)"""
        return QString()
    def text(self):
        """QString QAbstractSpinBox.text(None self)"""
        return QString()
    def setButtonSymbols(self, _bs):
        """None QAbstractSpinBox.setButtonSymbols(None self, QAbstractSpinBox.ButtonSymbols _bs)"""
        return None
    def buttonSymbols(self):
        """QAbstractSpinBox.ButtonSymbols QAbstractSpinBox.buttonSymbols(None self)"""
        return QAbstractSpinBox.ButtonSymbols()


class QAbstractSlider(QWidget):
    """"""
    SliderRangeChange = int() # QAbstractSlider.SliderChange enum
    SliderOrientationChange = int() # QAbstractSlider.SliderChange enum
    SliderStepsChange = int() # QAbstractSlider.SliderChange enum
    SliderValueChange = int() # QAbstractSlider.SliderChange enum

    SliderNoAction = int() # QAbstractSlider.SliderAction enum
    SliderSingleStepAdd = int() # QAbstractSlider.SliderAction enum
    SliderSingleStepSub = int() # QAbstractSlider.SliderAction enum
    SliderPageStepAdd = int() # QAbstractSlider.SliderAction enum
    SliderPageStepSub = int() # QAbstractSlider.SliderAction enum
    SliderToMinimum = int() # QAbstractSlider.SliderAction enum
    SliderToMaximum = int() # QAbstractSlider.SliderAction enum
    SliderMove = int() # QAbstractSlider.SliderAction enum

    def __init__(self, _parent):
        """None QAbstractSlider.__init__(None self, QWidget _parent)"""
        return None
    def changeEvent(self, _e):
        """None QAbstractSlider.changeEvent(None self, QEvent _e)"""
        return None
    def wheelEvent(self, _e):
        """None QAbstractSlider.wheelEvent(None self, QWheelEvent _e)"""
        return None
    def timerEvent(self):
        """QTimerEvent QAbstractSlider.timerEvent(None self)"""
        return QTimerEvent()
    def keyPressEvent(self, _ev):
        """None QAbstractSlider.keyPressEvent(None self, QKeyEvent _ev)"""
        return None
    def event(self, _e):
        """bool QAbstractSlider.event(None self, QEvent _e)"""
        return bool()
    def sliderChange(self, _change):
        """None QAbstractSlider.sliderChange(None self, QAbstractSlider.SliderChange _change)"""
        return None
    def repeatAction(self):
        """QAbstractSlider.SliderAction QAbstractSlider.repeatAction(None self)"""
        return QAbstractSlider.SliderAction()
    def setRepeatAction(self, _action, _thresholdTime, _repeatTime):
        """None QAbstractSlider.setRepeatAction(None self, QAbstractSlider.SliderAction _action, int _thresholdTime, int _repeatTime)"""
        return None
    def setOrientation(self):
        """Qt.Orientation QAbstractSlider.setOrientation(None self)"""
        return Qt.Orientation()
    def setValue(self):
        """int QAbstractSlider.setValue(None self)"""
        return int()
    def triggerAction(self, _action):
        """None QAbstractSlider.triggerAction(None self, QAbstractSlider.SliderAction _action)"""
        return None
    def value(self):
        """int QAbstractSlider.value(None self)"""
        return int()
    def invertedControls(self):
        """bool QAbstractSlider.invertedControls(None self)"""
        return bool()
    def setInvertedControls(self):
        """bool QAbstractSlider.setInvertedControls(None self)"""
        return bool()
    def invertedAppearance(self):
        """bool QAbstractSlider.invertedAppearance(None self)"""
        return bool()
    def setInvertedAppearance(self):
        """bool QAbstractSlider.setInvertedAppearance(None self)"""
        return bool()
    def sliderPosition(self):
        """int QAbstractSlider.sliderPosition(None self)"""
        return int()
    def setSliderPosition(self):
        """int QAbstractSlider.setSliderPosition(None self)"""
        return int()
    def isSliderDown(self):
        """bool QAbstractSlider.isSliderDown(None self)"""
        return bool()
    def setSliderDown(self):
        """bool QAbstractSlider.setSliderDown(None self)"""
        return bool()
    def hasTracking(self):
        """bool QAbstractSlider.hasTracking(None self)"""
        return bool()
    def setTracking(self, _enable):
        """None QAbstractSlider.setTracking(None self, bool _enable)"""
        return None
    def pageStep(self):
        """int QAbstractSlider.pageStep(None self)"""
        return int()
    def setPageStep(self):
        """int QAbstractSlider.setPageStep(None self)"""
        return int()
    def singleStep(self):
        """int QAbstractSlider.singleStep(None self)"""
        return int()
    def setSingleStep(self):
        """int QAbstractSlider.setSingleStep(None self)"""
        return int()
    def setRange(self, _min, _max):
        """None QAbstractSlider.setRange(None self, int _min, int _max)"""
        return None
    def maximum(self):
        """int QAbstractSlider.maximum(None self)"""
        return int()
    def setMaximum(self):
        """int QAbstractSlider.setMaximum(None self)"""
        return int()
    def minimum(self):
        """int QAbstractSlider.minimum(None self)"""
        return int()
    def setMinimum(self):
        """int QAbstractSlider.setMinimum(None self)"""
        return int()
    def orientation(self):
        """Qt.Orientation QAbstractSlider.orientation(None self)"""
        return Qt.Orientation()


class QAbstractTextDocumentLayout(QObject):
    """"""
    def __init__(self, _doc):
        """None QAbstractTextDocumentLayout.__init__(None self, QTextDocument _doc)"""
        return None
    def format(self, _pos):
        """QTextCharFormat QAbstractTextDocumentLayout.format(None self, int _pos)"""
        return QTextCharFormat()
    def drawInlineObject(self, _painter, _rect, _object, _posInDocument, _format):
        """None QAbstractTextDocumentLayout.drawInlineObject(None self, QPainter _painter, QRectF _rect, QTextInlineObject _object, int _posInDocument, QTextFormat _format)"""
        return None
    def positionInlineObject(self, _item, _posInDocument, _format):
        """None QAbstractTextDocumentLayout.positionInlineObject(None self, QTextInlineObject _item, int _posInDocument, QTextFormat _format)"""
        return None
    def resizeInlineObject(self, _item, _posInDocument, _format):
        """None QAbstractTextDocumentLayout.resizeInlineObject(None self, QTextInlineObject _item, int _posInDocument, QTextFormat _format)"""
        return None
    def documentChanged(self, _from, _charsRemoved, _charsAdded):
        """abstract None QAbstractTextDocumentLayout.documentChanged(None self, int _from, int _charsRemoved, int _charsAdded)"""
        return None
    def handlerForObject(self, _objectType):
        """QTextObjectInterface QAbstractTextDocumentLayout.handlerForObject(None self, int _objectType)"""
        return QTextObjectInterface()
    def registerHandler(self, _objectType, _component):
        """None QAbstractTextDocumentLayout.registerHandler(None self, int _objectType, QObject _component)"""
        return None
    def document(self):
        """QTextDocument QAbstractTextDocumentLayout.document(None self)"""
        return QTextDocument()
    def paintDevice(self):
        """QPaintDevice QAbstractTextDocumentLayout.paintDevice(None self)"""
        return QPaintDevice()
    def setPaintDevice(self, _device):
        """None QAbstractTextDocumentLayout.setPaintDevice(None self, QPaintDevice _device)"""
        return None
    def blockBoundingRect(self, _block):
        """abstract QRectF QAbstractTextDocumentLayout.blockBoundingRect(None self, QTextBlock _block)"""
        return QRectF()
    def frameBoundingRect(self, _frame):
        """abstract QRectF QAbstractTextDocumentLayout.frameBoundingRect(None self, QTextFrame _frame)"""
        return QRectF()
    def documentSize(self):
        """abstract QSizeF QAbstractTextDocumentLayout.documentSize(None self)"""
        return QSizeF()
    def pageCount(self):
        """abstract int QAbstractTextDocumentLayout.pageCount(None self)"""
        return int()
    def anchorAt(self, _pos):
        """QString QAbstractTextDocumentLayout.anchorAt(None self, QPointF _pos)"""
        return QString()
    def hitTest(self, _point, _accuracy):
        """abstract int QAbstractTextDocumentLayout.hitTest(None self, QPointF _point, Qt.HitTestAccuracy _accuracy)"""
        return int()
    def draw(self, _painter, _context):
        """abstract None QAbstractTextDocumentLayout.draw(None self, QPainter _painter, QAbstractTextDocumentLayout.PaintContext _context)"""
        return None


class QTextObjectInterface():
    """"""
    def __init__(self):
        """None QTextObjectInterface.__init__(None self)"""
        return None
    def __init__(self):
        """QTextObjectInterface QTextObjectInterface.__init__(None self)"""
        return QTextObjectInterface()
    def drawObject(self, _painter, _rect, _doc, _posInDocument, _format):
        """abstract None QTextObjectInterface.drawObject(None self, QPainter _painter, QRectF _rect, QTextDocument _doc, int _posInDocument, QTextFormat _format)"""
        return None
    def intrinsicSize(self, _doc, _posInDocument, _format):
        """abstract QSizeF QTextObjectInterface.intrinsicSize(None self, QTextDocument _doc, int _posInDocument, QTextFormat _format)"""
        return QSizeF()


class QAction(QObject):
    """"""
    LowPriority = int() # QAction.Priority enum
    NormalPriority = int() # QAction.Priority enum
    HighPriority = int() # QAction.Priority enum

    NoSoftKey = int() # QAction.SoftKeyRole enum
    PositiveSoftKey = int() # QAction.SoftKeyRole enum
    NegativeSoftKey = int() # QAction.SoftKeyRole enum
    SelectSoftKey = int() # QAction.SoftKeyRole enum

    NoRole = int() # QAction.MenuRole enum
    TextHeuristicRole = int() # QAction.MenuRole enum
    ApplicationSpecificRole = int() # QAction.MenuRole enum
    AboutQtRole = int() # QAction.MenuRole enum
    AboutRole = int() # QAction.MenuRole enum
    PreferencesRole = int() # QAction.MenuRole enum
    QuitRole = int() # QAction.MenuRole enum

    Trigger = int() # QAction.ActionEvent enum
    Hover = int() # QAction.ActionEvent enum

    def __init__(self, _parent):
        """None QAction.__init__(None self, QObject _parent)"""
        return None
    def __init__(self, _text, _parent):
        """None QAction.__init__(None self, QString _text, QObject _parent)"""
        return None
    def __init__(self, _icon, _text, _parent):
        """None QAction.__init__(None self, QIcon _icon, QString _text, QObject _parent)"""
        return None
    def softKeyRole(self):
        """QAction.SoftKeyRole QAction.softKeyRole(None self)"""
        return QAction.SoftKeyRole()
    def setSoftKeyRole(self, _softKeyRole):
        """None QAction.setSoftKeyRole(None self, QAction.SoftKeyRole _softKeyRole)"""
        return None
    def priority(self):
        """QAction.Priority QAction.priority(None self)"""
        return QAction.Priority()
    def setPriority(self, _priority):
        """None QAction.setPriority(None self, QAction.Priority _priority)"""
        return None
    def isIconVisibleInMenu(self):
        """bool QAction.isIconVisibleInMenu(None self)"""
        return bool()
    def setIconVisibleInMenu(self, _visible):
        """None QAction.setIconVisibleInMenu(None self, bool _visible)"""
        return None
    def associatedGraphicsWidgets(self):
        """list-of-QGraphicsWidget QAction.associatedGraphicsWidgets(None self)"""
        return [QGraphicsWidget()]
    def associatedWidgets(self):
        """list-of-QWidget QAction.associatedWidgets(None self)"""
        return [QWidget()]
    def menuRole(self):
        """QAction.MenuRole QAction.menuRole(None self)"""
        return QAction.MenuRole()
    def setMenuRole(self, _menuRole):
        """None QAction.setMenuRole(None self, QAction.MenuRole _menuRole)"""
        return None
    def autoRepeat(self):
        """bool QAction.autoRepeat(None self)"""
        return bool()
    def setAutoRepeat(self):
        """bool QAction.setAutoRepeat(None self)"""
        return bool()
    def shortcuts(self):
        """list-of-QKeySequence QAction.shortcuts(None self)"""
        return [QKeySequence()]
    def setShortcuts(self, _shortcuts):
        """None QAction.setShortcuts(None self, list-of-QKeySequence _shortcuts)"""
        return None
    def setShortcuts(self):
        """QKeySequence.StandardKey QAction.setShortcuts(None self)"""
        return QKeySequence.StandardKey()
    def setVisible(self):
        """bool QAction.setVisible(None self)"""
        return bool()
    def setDisabled(self, _b):
        """None QAction.setDisabled(None self, bool _b)"""
        return None
    def setEnabled(self):
        """bool QAction.setEnabled(None self)"""
        return bool()
    def toggle(self):
        """None QAction.toggle(None self)"""
        return None
    def setChecked(self):
        """bool QAction.setChecked(None self)"""
        return bool()
    def hover(self):
        """None QAction.hover(None self)"""
        return None
    def trigger(self):
        """None QAction.trigger(None self)"""
        return None
    def event(self):
        """QEvent QAction.event(None self)"""
        return QEvent()
    def parentWidget(self):
        """QWidget QAction.parentWidget(None self)"""
        return QWidget()
    def showStatusText(self, _widget):
        """bool QAction.showStatusText(None self, QWidget _widget)"""
        return bool()
    def activate(self, _event):
        """None QAction.activate(None self, QAction.ActionEvent _event)"""
        return None
    def isVisible(self):
        """bool QAction.isVisible(None self)"""
        return bool()
    def isEnabled(self):
        """bool QAction.isEnabled(None self)"""
        return bool()
    def isChecked(self):
        """bool QAction.isChecked(None self)"""
        return bool()
    def setData(self, _var):
        """None QAction.setData(None self, QVariant _var)"""
        return None
    def data(self):
        """QVariant QAction.data(None self)"""
        return QVariant()
    def isCheckable(self):
        """bool QAction.isCheckable(None self)"""
        return bool()
    def setCheckable(self):
        """bool QAction.setCheckable(None self)"""
        return bool()
    def font(self):
        """QFont QAction.font(None self)"""
        return QFont()
    def setFont(self, _font):
        """None QAction.setFont(None self, QFont _font)"""
        return None
    def shortcutContext(self):
        """Qt.ShortcutContext QAction.shortcutContext(None self)"""
        return Qt.ShortcutContext()
    def setShortcutContext(self, _context):
        """None QAction.setShortcutContext(None self, Qt.ShortcutContext _context)"""
        return None
    def shortcut(self):
        """QKeySequence QAction.shortcut(None self)"""
        return QKeySequence()
    def setShortcut(self, _shortcut):
        """None QAction.setShortcut(None self, QKeySequence _shortcut)"""
        return None
    def isSeparator(self):
        """bool QAction.isSeparator(None self)"""
        return bool()
    def setSeparator(self, _b):
        """None QAction.setSeparator(None self, bool _b)"""
        return None
    def setMenu(self, _menu):
        """None QAction.setMenu(None self, QMenu _menu)"""
        return None
    def menu(self):
        """QMenu QAction.menu(None self)"""
        return QMenu()
    def whatsThis(self):
        """QString QAction.whatsThis(None self)"""
        return QString()
    def setWhatsThis(self, _what):
        """None QAction.setWhatsThis(None self, QString _what)"""
        return None
    def statusTip(self):
        """QString QAction.statusTip(None self)"""
        return QString()
    def setStatusTip(self, _statusTip):
        """None QAction.setStatusTip(None self, QString _statusTip)"""
        return None
    def toolTip(self):
        """QString QAction.toolTip(None self)"""
        return QString()
    def setToolTip(self, _tip):
        """None QAction.setToolTip(None self, QString _tip)"""
        return None
    def iconText(self):
        """QString QAction.iconText(None self)"""
        return QString()
    def setIconText(self, _text):
        """None QAction.setIconText(None self, QString _text)"""
        return None
    def text(self):
        """QString QAction.text(None self)"""
        return QString()
    def setText(self, _text):
        """None QAction.setText(None self, QString _text)"""
        return None
    def icon(self):
        """QIcon QAction.icon(None self)"""
        return QIcon()
    def setIcon(self, _icon):
        """None QAction.setIcon(None self, QIcon _icon)"""
        return None
    def actionGroup(self):
        """QActionGroup QAction.actionGroup(None self)"""
        return QActionGroup()
    def setActionGroup(self, _group):
        """None QAction.setActionGroup(None self, QActionGroup _group)"""
        return None


class QActionGroup(QObject):
    """"""
    def __init__(self, _parent):
        """None QActionGroup.__init__(None self, QObject _parent)"""
        return None
    def setExclusive(self):
        """bool QActionGroup.setExclusive(None self)"""
        return bool()
    def setVisible(self):
        """bool QActionGroup.setVisible(None self)"""
        return bool()
    def setDisabled(self, _b):
        """None QActionGroup.setDisabled(None self, bool _b)"""
        return None
    def setEnabled(self):
        """bool QActionGroup.setEnabled(None self)"""
        return bool()
    def isVisible(self):
        """bool QActionGroup.isVisible(None self)"""
        return bool()
    def isEnabled(self):
        """bool QActionGroup.isEnabled(None self)"""
        return bool()
    def isExclusive(self):
        """bool QActionGroup.isExclusive(None self)"""
        return bool()
    def checkedAction(self):
        """QAction QActionGroup.checkedAction(None self)"""
        return QAction()
    def actions(self):
        """list-of-QAction QActionGroup.actions(None self)"""
        return [QAction()]
    def removeAction(self, _a):
        """None QActionGroup.removeAction(None self, QAction _a)"""
        return None
    def addAction(self, _a):
        """QAction QActionGroup.addAction(None self, QAction _a)"""
        return QAction()
    def addAction(self, _text):
        """QAction QActionGroup.addAction(None self, QString _text)"""
        return QAction()
    def addAction(self, _icon, _text):
        """QAction QActionGroup.addAction(None self, QIcon _icon, QString _text)"""
        return QAction()


class QApplication(QCoreApplication):
    """"""
    NormalColor = int() # QApplication.ColorSpec enum
    CustomColor = int() # QApplication.ColorSpec enum
    ManyColor = int() # QApplication.ColorSpec enum

    Tty = int() # QApplication.Type enum
    GuiClient = int() # QApplication.Type enum
    GuiServer = int() # QApplication.Type enum

    def __init__(self, _argv):
        """None QApplication.__init__(None self, list-of-str _argv)"""
        return None
    def __init__(self, _argv, _GUIenabled):
        """None QApplication.__init__(None self, list-of-str _argv, bool _GUIenabled)"""
        return None
    def __init__(self, _argv):
        """QApplication.Type QApplication.__init__(None self, list-of-str _argv)"""
        return QApplication.Type()
    def __init__(self, _display, _visual, _colormap):
        """None QApplication.__init__(None self, Display _display, int _visual, int _colormap)"""
        return None
    def __init__(self, _dpy, _argv, _visual, _cmap):
        """None QApplication.__init__(None self, Display _dpy, list-of-str _argv, int _visual, int _cmap)"""
        return None
    def autoSipEnabled(self):
        """bool QApplication.autoSipEnabled(None self)"""
        return bool()
    def setAutoSipEnabled(self, _enabled):
        """None QApplication.setAutoSipEnabled(None self, bool _enabled)"""
        return None
    def setGraphicsSystem(self):
        """QString QApplication.setGraphicsSystem(None self)"""
        return QString()
    def alert(self, _widget, _msecs):
        """None QApplication.alert(None self, QWidget _widget, int _msecs)"""
        return None
    def styleSheet(self):
        """QString QApplication.styleSheet(None self)"""
        return QString()
    def keyboardInputDirection(self):
        """Qt.LayoutDirection QApplication.keyboardInputDirection(None self)"""
        return Qt.LayoutDirection()
    def keyboardInputLocale(self):
        """QLocale QApplication.keyboardInputLocale(None self)"""
        return QLocale()
    def font(self):
        """QFont QApplication.font(None self)"""
        return QFont()
    def font(self):
        """QWidget QApplication.font(None self)"""
        return QWidget()
    def font(self, _className):
        """QFont QApplication.font(None self, str _className)"""
        return QFont()
    def event(self):
        """QEvent QApplication.event(None self)"""
        return QEvent()
    def setStyleSheet(self, _sheet):
        """None QApplication.setStyleSheet(None self, QString _sheet)"""
        return None
    def closeAllWindows(self):
        """None QApplication.closeAllWindows(None self)"""
        return None
    def aboutQt(self):
        """None QApplication.aboutQt(None self)"""
        return None
    def quitOnLastWindowClosed(self):
        """bool QApplication.quitOnLastWindowClosed(None self)"""
        return bool()
    def setQuitOnLastWindowClosed(self, _quit):
        """None QApplication.setQuitOnLastWindowClosed(None self, bool _quit)"""
        return None
    def notify(self):
        """QEvent QApplication.notify(None self)"""
        return QEvent()
    def exec_(self):
        """int QApplication.exec_(None self)"""
        return int()
    def inputContext(self):
        """QInputContext QApplication.inputContext(None self)"""
        return QInputContext()
    def setInputContext(self):
        """QInputContext QApplication.setInputContext(None self)"""
        return QInputContext()
    def saveState(self, _sm):
        """None QApplication.saveState(None self, QSessionManager _sm)"""
        return None
    def commitData(self, _sm):
        """None QApplication.commitData(None self, QSessionManager _sm)"""
        return None
    def sessionKey(self):
        """QString QApplication.sessionKey(None self)"""
        return QString()
    def sessionId(self):
        """QString QApplication.sessionId(None self)"""
        return QString()
    def isSessionRestored(self):
        """bool QApplication.isSessionRestored(None self)"""
        return bool()
    def x11ProcessEvent(self):
        """sip.voidptr QApplication.x11ProcessEvent(None self)"""
        return sip.voidptr()
    def x11EventFilter(self):
        """sip.voidptr QApplication.x11EventFilter(None self)"""
        return sip.voidptr()
    def setEffectEnabled(self, _effect, _enabled):
        """None QApplication.setEffectEnabled(None self, Qt.UIEffect _effect, bool _enabled)"""
        return None
    def isEffectEnabled(self):
        """Qt.UIEffect QApplication.isEffectEnabled(None self)"""
        return Qt.UIEffect()
    def isLeftToRight(self):
        """bool QApplication.isLeftToRight(None self)"""
        return bool()
    def isRightToLeft(self):
        """bool QApplication.isRightToLeft(None self)"""
        return bool()
    def layoutDirection(self):
        """Qt.LayoutDirection QApplication.layoutDirection(None self)"""
        return Qt.LayoutDirection()
    def setLayoutDirection(self, _direction):
        """None QApplication.setLayoutDirection(None self, Qt.LayoutDirection _direction)"""
        return None
    def startDragDistance(self):
        """int QApplication.startDragDistance(None self)"""
        return int()
    def setStartDragDistance(self, _l):
        """None QApplication.setStartDragDistance(None self, int _l)"""
        return None
    def startDragTime(self):
        """int QApplication.startDragTime(None self)"""
        return int()
    def setStartDragTime(self, _ms):
        """None QApplication.setStartDragTime(None self, int _ms)"""
        return None
    def globalStrut(self):
        """QSize QApplication.globalStrut(None self)"""
        return QSize()
    def setGlobalStrut(self):
        """QSize QApplication.setGlobalStrut(None self)"""
        return QSize()
    def wheelScrollLines(self):
        """int QApplication.wheelScrollLines(None self)"""
        return int()
    def setWheelScrollLines(self):
        """int QApplication.setWheelScrollLines(None self)"""
        return int()
    def keyboardInputInterval(self):
        """int QApplication.keyboardInputInterval(None self)"""
        return int()
    def setKeyboardInputInterval(self):
        """int QApplication.setKeyboardInputInterval(None self)"""
        return int()
    def doubleClickInterval(self):
        """int QApplication.doubleClickInterval(None self)"""
        return int()
    def setDoubleClickInterval(self):
        """int QApplication.setDoubleClickInterval(None self)"""
        return int()
    def cursorFlashTime(self):
        """int QApplication.cursorFlashTime(None self)"""
        return int()
    def setCursorFlashTime(self):
        """int QApplication.setCursorFlashTime(None self)"""
        return int()
    def desktopSettingsAware(self):
        """bool QApplication.desktopSettingsAware(None self)"""
        return bool()
    def setDesktopSettingsAware(self):
        """bool QApplication.setDesktopSettingsAware(None self)"""
        return bool()
    def mouseButtons(self):
        """Qt.MouseButtons QApplication.mouseButtons(None self)"""
        return Qt.MouseButtons()
    def keyboardModifiers(self):
        """Qt.KeyboardModifiers QApplication.keyboardModifiers(None self)"""
        return Qt.KeyboardModifiers()
    def beep(self):
        """None QApplication.beep(None self)"""
        return None
    def syncX(self):
        """None QApplication.syncX(None self)"""
        return None
    def topLevelAt(self, _p):
        """QWidget QApplication.topLevelAt(None self, QPoint _p)"""
        return QWidget()
    def topLevelAt(self, _x, _y):
        """QWidget QApplication.topLevelAt(None self, int _x, int _y)"""
        return QWidget()
    def widgetAt(self, _p):
        """QWidget QApplication.widgetAt(None self, QPoint _p)"""
        return QWidget()
    def widgetAt(self, _x, _y):
        """QWidget QApplication.widgetAt(None self, int _x, int _y)"""
        return QWidget()
    def setActiveWindow(self, _act):
        """None QApplication.setActiveWindow(None self, QWidget _act)"""
        return None
    def activeWindow(self):
        """QWidget QApplication.activeWindow(None self)"""
        return QWidget()
    def focusWidget(self):
        """QWidget QApplication.focusWidget(None self)"""
        return QWidget()
    def clipboard(self):
        """QClipboard QApplication.clipboard(None self)"""
        return QClipboard()
    def activeModalWidget(self):
        """QWidget QApplication.activeModalWidget(None self)"""
        return QWidget()
    def activePopupWidget(self):
        """QWidget QApplication.activePopupWidget(None self)"""
        return QWidget()
    def desktop(self):
        """QDesktopWidget QApplication.desktop(None self)"""
        return QDesktopWidget()
    def topLevelWidgets(self):
        """list-of-QWidget QApplication.topLevelWidgets(None self)"""
        return [QWidget()]
    def allWidgets(self):
        """list-of-QWidget QApplication.allWidgets(None self)"""
        return [QWidget()]
    def windowIcon(self):
        """QIcon QApplication.windowIcon(None self)"""
        return QIcon()
    def setWindowIcon(self, _icon):
        """None QApplication.setWindowIcon(None self, QIcon _icon)"""
        return None
    def fontMetrics(self):
        """QFontMetrics QApplication.fontMetrics(None self)"""
        return QFontMetrics()
    def setFont(self, _font, _className):
        """None QApplication.setFont(None self, QFont _font, str _className)"""
        return None
    def setPalette(self, _palette, _className):
        """None QApplication.setPalette(None self, QPalette _palette, str _className)"""
        return None
    def palette(self):
        """QPalette QApplication.palette(None self)"""
        return QPalette()
    def palette(self):
        """QWidget QApplication.palette(None self)"""
        return QWidget()
    def palette(self, _className):
        """QPalette QApplication.palette(None self, str _className)"""
        return QPalette()
    def restoreOverrideCursor(self):
        """None QApplication.restoreOverrideCursor(None self)"""
        return None
    def changeOverrideCursor(self):
        """QCursor QApplication.changeOverrideCursor(None self)"""
        return QCursor()
    def setOverrideCursor(self):
        """QCursor QApplication.setOverrideCursor(None self)"""
        return QCursor()
    def overrideCursor(self):
        """QCursor QApplication.overrideCursor(None self)"""
        return QCursor()
    def setColorSpec(self):
        """int QApplication.setColorSpec(None self)"""
        return int()
    def colorSpec(self):
        """int QApplication.colorSpec(None self)"""
        return int()
    def setStyle(self):
        """QStyle QApplication.setStyle(None self)"""
        return QStyle()
    def setStyle(self):
        """QString QApplication.setStyle(None self)"""
        return QString()
    def style(self):
        """QStyle QApplication.style(None self)"""
        return QStyle()
    def type(self):
        """QApplication.Type QApplication.type(None self)"""
        return QApplication.Type()


class QPixmap(QPaintDevice):
    """"""
    ImplicitlyShared = int() # QPixmap.ShareMode enum
    ExplicitlyShared = int() # QPixmap.ShareMode enum

    def __init__(self):
        """None QPixmap.__init__(None self)"""
        return None
    def __init__(self, _w, _h):
        """None QPixmap.__init__(None self, int _w, int _h)"""
        return None
    def __init__(self):
        """QSize QPixmap.__init__(None self)"""
        return QSize()
    def __init__(self, _fileName, _format, _flags):
        """None QPixmap.__init__(None self, QString _fileName, str _format, Qt.ImageConversionFlags _flags)"""
        return None
    def __init__(self, _xpm):
        """None QPixmap.__init__(None self, list-of-str _xpm)"""
        return None
    def __init__(self):
        """QPixmap QPixmap.__init__(None self)"""
        return QPixmap()
    def __init__(self, _variant):
        """None QPixmap.__init__(None self, QVariant _variant)"""
        return None
    def scroll(self, _dx, _dy, _rect, _exposed):
        """None QPixmap.scroll(None self, int _dx, int _dy, QRect _rect, QRegion _exposed)"""
        return None
    def scroll(self, _dx, _dy, _x, _y, _width, _height, _exposed):
        """None QPixmap.scroll(None self, int _dx, int _dy, int _x, int _y, int _width, int _height, QRegion _exposed)"""
        return None
    def fromX11Pixmap(self, _pixmap, _mode):
        """QPixmap QPixmap.fromX11Pixmap(None self, int _pixmap, QPixmap.ShareMode _mode)"""
        return QPixmap()
    def cacheKey(self):
        """int QPixmap.cacheKey(None self)"""
        return int()
    def metric(self):
        """QPaintDevice.PaintDeviceMetric QPixmap.metric(None self)"""
        return QPaintDevice.PaintDeviceMetric()
    def paintEngine(self):
        """QPaintEngine QPixmap.paintEngine(None self)"""
        return QPaintEngine()
    def handle(self):
        """int QPixmap.handle(None self)"""
        return int()
    def x11Info(self):
        """QX11Info QPixmap.x11Info(None self)"""
        return QX11Info()
    def isQBitmap(self):
        """bool QPixmap.isQBitmap(None self)"""
        return bool()
    def x11PictureHandle(self):
        """int QPixmap.x11PictureHandle(None self)"""
        return int()
    def detach(self):
        """None QPixmap.detach(None self)"""
        return None
    def serialNumber(self):
        """int QPixmap.serialNumber(None self)"""
        return int()
    def copy(self, _rect):
        """QPixmap QPixmap.copy(None self, QRect _rect)"""
        return QPixmap()
    def copy(self, _ax, _ay, _awidth, _aheight):
        """QPixmap QPixmap.copy(None self, int _ax, int _ay, int _awidth, int _aheight)"""
        return QPixmap()
    def save(self, _fileName, _format, _quality):
        """bool QPixmap.save(None self, QString _fileName, str _format, int _quality)"""
        return bool()
    def save(self, _device, _format, _quality):
        """bool QPixmap.save(None self, QIODevice _device, str _format, int _quality)"""
        return bool()
    def loadFromData(self, _buf, _format, _flags):
        """bool QPixmap.loadFromData(None self, str _buf, str _format, Qt.ImageConversionFlags _flags)"""
        return bool()
    def loadFromData(self, _buf, _format, _flags):
        """bool QPixmap.loadFromData(None self, QByteArray _buf, str _format, Qt.ImageConversionFlags _flags)"""
        return bool()
    def load(self, _fileName, _format, _flags):
        """bool QPixmap.load(None self, QString _fileName, str _format, Qt.ImageConversionFlags _flags)"""
        return bool()
    def convertFromImage(self, _img, _flags):
        """bool QPixmap.convertFromImage(None self, QImage _img, Qt.ImageConversionFlags _flags)"""
        return bool()
    def fromImageReader(self, _imageReader, _flags):
        """QPixmap QPixmap.fromImageReader(None self, QImageReader _imageReader, Qt.ImageConversionFlags _flags)"""
        return QPixmap()
    def fromImage(self, _image, _flags):
        """QPixmap QPixmap.fromImage(None self, QImage _image, Qt.ImageConversionFlags _flags)"""
        return QPixmap()
    def toImage(self):
        """QImage QPixmap.toImage(None self)"""
        return QImage()
    def trueMatrix(self, _m, _w, _h):
        """QMatrix QPixmap.trueMatrix(None self, QMatrix _m, int _w, int _h)"""
        return QMatrix()
    def trueMatrix(self, _m, _w, _h):
        """QTransform QPixmap.trueMatrix(None self, QTransform _m, int _w, int _h)"""
        return QTransform()
    def transformed(self, _matrix, _mode):
        """QPixmap QPixmap.transformed(None self, QMatrix _matrix, Qt.TransformationMode _mode)"""
        return QPixmap()
    def transformed(self, _transform, _mode):
        """QPixmap QPixmap.transformed(None self, QTransform _transform, Qt.TransformationMode _mode)"""
        return QPixmap()
    def scaledToHeight(self, _height, _mode):
        """QPixmap QPixmap.scaledToHeight(None self, int _height, Qt.TransformationMode _mode)"""
        return QPixmap()
    def scaledToWidth(self, _width, _mode):
        """QPixmap QPixmap.scaledToWidth(None self, int _width, Qt.TransformationMode _mode)"""
        return QPixmap()
    def scaled(self, _width, _height, _aspectRatioMode, _transformMode):
        """QPixmap QPixmap.scaled(None self, int _width, int _height, Qt.AspectRatioMode _aspectRatioMode, Qt.TransformationMode _transformMode)"""
        return QPixmap()
    def scaled(self, _size, _aspectRatioMode, _transformMode):
        """QPixmap QPixmap.scaled(None self, QSize _size, Qt.AspectRatioMode _aspectRatioMode, Qt.TransformationMode _transformMode)"""
        return QPixmap()
    def grabWidget(self, _widget, _rect):
        """QPixmap QPixmap.grabWidget(None self, QWidget _widget, QRect _rect)"""
        return QPixmap()
    def grabWidget(self, _widget, _x, _y, _width, _height):
        """QPixmap QPixmap.grabWidget(None self, QWidget _widget, int _x, int _y, int _width, int _height)"""
        return QPixmap()
    def grabWindow(self, _window, _x, _y, _width, _height):
        """QPixmap QPixmap.grabWindow(None self, int _window, int _x, int _y, int _width, int _height)"""
        return QPixmap()
    def createMaskFromColor(self, _maskColor, _mode):
        """QBitmap QPixmap.createMaskFromColor(None self, QColor _maskColor, Qt.MaskMode _mode)"""
        return QBitmap()
    def createMaskFromColor(self, _maskColor):
        """QBitmap QPixmap.createMaskFromColor(None self, QColor _maskColor)"""
        return QBitmap()
    def createHeuristicMask(self, _clipTight):
        """QBitmap QPixmap.createHeuristicMask(None self, bool _clipTight)"""
        return QBitmap()
    def hasAlphaChannel(self):
        """bool QPixmap.hasAlphaChannel(None self)"""
        return bool()
    def hasAlpha(self):
        """bool QPixmap.hasAlpha(None self)"""
        return bool()
    def setAlphaChannel(self):
        """QPixmap QPixmap.setAlphaChannel(None self)"""
        return QPixmap()
    def alphaChannel(self):
        """QPixmap QPixmap.alphaChannel(None self)"""
        return QPixmap()
    def setMask(self):
        """QBitmap QPixmap.setMask(None self)"""
        return QBitmap()
    def mask(self):
        """QBitmap QPixmap.mask(None self)"""
        return QBitmap()
    def fill(self, _color):
        """None QPixmap.fill(None self, QColor _color)"""
        return None
    def fill(self, _widget, _ofs):
        """None QPixmap.fill(None self, QWidget _widget, QPoint _ofs)"""
        return None
    def fill(self, _widget, _xofs, _yofs):
        """None QPixmap.fill(None self, QWidget _widget, int _xofs, int _yofs)"""
        return None
    def defaultDepth(self):
        """int QPixmap.defaultDepth(None self)"""
        return int()
    def depth(self):
        """int QPixmap.depth(None self)"""
        return int()
    def rect(self):
        """QRect QPixmap.rect(None self)"""
        return QRect()
    def size(self):
        """QSize QPixmap.size(None self)"""
        return QSize()
    def height(self):
        """int QPixmap.height(None self)"""
        return int()
    def width(self):
        """int QPixmap.width(None self)"""
        return int()
    def devType(self):
        """int QPixmap.devType(None self)"""
        return int()
    def isNull(self):
        """bool QPixmap.isNull(None self)"""
        return bool()


class QBitmap(QPixmap):
    """"""
    def __init__(self):
        """None QBitmap.__init__(None self)"""
        return None
    def __init__(self):
        """QPixmap QBitmap.__init__(None self)"""
        return QPixmap()
    def __init__(self, _w, _h):
        """None QBitmap.__init__(None self, int _w, int _h)"""
        return None
    def __init__(self):
        """QSize QBitmap.__init__(None self)"""
        return QSize()
    def __init__(self, _fileName, _format):
        """None QBitmap.__init__(None self, QString _fileName, str _format)"""
        return None
    def __init__(self, _variant):
        """None QBitmap.__init__(None self, QVariant _variant)"""
        return None
    def __init__(self):
        """QBitmap QBitmap.__init__(None self)"""
        return QBitmap()
    def transformed(self):
        """QMatrix QBitmap.transformed(None self)"""
        return QMatrix()
    def transformed(self, _matrix):
        """QBitmap QBitmap.transformed(None self, QTransform _matrix)"""
        return QBitmap()
    def fromData(self, _size, _bits, _format):
        """QBitmap QBitmap.fromData(None self, QSize _size, str _bits, QImage.Format _format)"""
        return QBitmap()
    def fromImage(self, _image, _flags):
        """QBitmap QBitmap.fromImage(None self, QImage _image, Qt.ImageConversionFlags _flags)"""
        return QBitmap()
    def clear(self):
        """None QBitmap.clear(None self)"""
        return None


class QLayoutItem():
    """"""
    def __init__(self, _alignment):
        """None QLayoutItem.__init__(None self, Qt.Alignment _alignment)"""
        return None
    def __init__(self):
        """QLayoutItem QLayoutItem.__init__(None self)"""
        return QLayoutItem()
    def controlTypes(self):
        """QSizePolicy.ControlTypes QLayoutItem.controlTypes(None self)"""
        return QSizePolicy.ControlTypes()
    def setAlignment(self, _a):
        """None QLayoutItem.setAlignment(None self, Qt.Alignment _a)"""
        return None
    def alignment(self):
        """Qt.Alignment QLayoutItem.alignment(None self)"""
        return Qt.Alignment()
    def spacerItem(self):
        """QSpacerItem QLayoutItem.spacerItem(None self)"""
        return QSpacerItem()
    def layout(self):
        """QLayout QLayoutItem.layout(None self)"""
        return QLayout()
    def widget(self):
        """QWidget QLayoutItem.widget(None self)"""
        return QWidget()
    def invalidate(self):
        """None QLayoutItem.invalidate(None self)"""
        return None
    def minimumHeightForWidth(self):
        """int QLayoutItem.minimumHeightForWidth(None self)"""
        return int()
    def heightForWidth(self):
        """int QLayoutItem.heightForWidth(None self)"""
        return int()
    def hasHeightForWidth(self):
        """bool QLayoutItem.hasHeightForWidth(None self)"""
        return bool()
    def isEmpty(self):
        """abstract bool QLayoutItem.isEmpty(None self)"""
        return bool()
    def geometry(self):
        """abstract QRect QLayoutItem.geometry(None self)"""
        return QRect()
    def setGeometry(self):
        """abstract QRect QLayoutItem.setGeometry(None self)"""
        return QRect()
    def expandingDirections(self):
        """abstract Qt.Orientations QLayoutItem.expandingDirections(None self)"""
        return Qt.Orientations()
    def maximumSize(self):
        """abstract QSize QLayoutItem.maximumSize(None self)"""
        return QSize()
    def minimumSize(self):
        """abstract QSize QLayoutItem.minimumSize(None self)"""
        return QSize()
    def sizeHint(self):
        """abstract QSize QLayoutItem.sizeHint(None self)"""
        return QSize()


class QLayout(QObject, QLayoutItem):
    """"""
    SetDefaultConstraint = int() # QLayout.SizeConstraint enum
    SetNoConstraint = int() # QLayout.SizeConstraint enum
    SetMinimumSize = int() # QLayout.SizeConstraint enum
    SetFixedSize = int() # QLayout.SizeConstraint enum
    SetMaximumSize = int() # QLayout.SizeConstraint enum
    SetMinAndMaxSize = int() # QLayout.SizeConstraint enum

    def __init__(self, _parent):
        """None QLayout.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self):
        """None QLayout.__init__(None self)"""
        return None
    def contentsMargins(self):
        """QMargins QLayout.contentsMargins(None self)"""
        return QMargins()
    def contentsRect(self):
        """QRect QLayout.contentsRect(None self)"""
        return QRect()
    def getContentsMargins(self, _left, _top, _right, _bottom):
        """None QLayout.getContentsMargins(None self, int _left, int _top, int _right, int _bottom)"""
        return None
    def setContentsMargins(self, _left, _top, _right, _bottom):
        """None QLayout.setContentsMargins(None self, int _left, int _top, int _right, int _bottom)"""
        return None
    def setContentsMargins(self, _margins):
        """None QLayout.setContentsMargins(None self, QMargins _margins)"""
        return None
    def alignmentRect(self):
        """QRect QLayout.alignmentRect(None self)"""
        return QRect()
    def addChildWidget(self, _w):
        """None QLayout.addChildWidget(None self, QWidget _w)"""
        return None
    def addChildLayout(self, _l):
        """None QLayout.addChildLayout(None self, QLayout _l)"""
        return None
    def childEvent(self, _e):
        """None QLayout.childEvent(None self, QChildEvent _e)"""
        return None
    def widgetEvent(self):
        """QEvent QLayout.widgetEvent(None self)"""
        return QEvent()
    def closestAcceptableSize(self, _w, _s):
        """QSize QLayout.closestAcceptableSize(None self, QWidget _w, QSize _s)"""
        return QSize()
    def isEnabled(self):
        """bool QLayout.isEnabled(None self)"""
        return bool()
    def setEnabled(self):
        """bool QLayout.setEnabled(None self)"""
        return bool()
    def layout(self):
        """QLayout QLayout.layout(None self)"""
        return QLayout()
    def totalSizeHint(self):
        """QSize QLayout.totalSizeHint(None self)"""
        return QSize()
    def totalMaximumSize(self):
        """QSize QLayout.totalMaximumSize(None self)"""
        return QSize()
    def totalMinimumSize(self):
        """QSize QLayout.totalMinimumSize(None self)"""
        return QSize()
    def totalHeightForWidth(self, _w):
        """int QLayout.totalHeightForWidth(None self, int _w)"""
        return int()
    def isEmpty(self):
        """bool QLayout.isEmpty(None self)"""
        return bool()
    def __len__(self):
        """ QLayout.__len__(None self)"""
        return ()
    def count(self):
        """abstract int QLayout.count(None self)"""
        return int()
    def indexOf(self):
        """QWidget QLayout.indexOf(None self)"""
        return QWidget()
    def takeAt(self, _index):
        """abstract QLayoutItem QLayout.takeAt(None self, int _index)"""
        return QLayoutItem()
    def itemAt(self, _index):
        """abstract QLayoutItem QLayout.itemAt(None self, int _index)"""
        return QLayoutItem()
    def setGeometry(self):
        """QRect QLayout.setGeometry(None self)"""
        return QRect()
    def maximumSize(self):
        """QSize QLayout.maximumSize(None self)"""
        return QSize()
    def minimumSize(self):
        """QSize QLayout.minimumSize(None self)"""
        return QSize()
    def expandingDirections(self):
        """Qt.Orientations QLayout.expandingDirections(None self)"""
        return Qt.Orientations()
    def removeItem(self):
        """QLayoutItem QLayout.removeItem(None self)"""
        return QLayoutItem()
    def removeWidget(self, _w):
        """None QLayout.removeWidget(None self, QWidget _w)"""
        return None
    def addItem(self):
        """abstract QLayoutItem QLayout.addItem(None self)"""
        return QLayoutItem()
    def addWidget(self, _w):
        """None QLayout.addWidget(None self, QWidget _w)"""
        return None
    def update(self):
        """None QLayout.update(None self)"""
        return None
    def activate(self):
        """bool QLayout.activate(None self)"""
        return bool()
    def geometry(self):
        """QRect QLayout.geometry(None self)"""
        return QRect()
    def invalidate(self):
        """None QLayout.invalidate(None self)"""
        return None
    def parentWidget(self):
        """QWidget QLayout.parentWidget(None self)"""
        return QWidget()
    def menuBar(self):
        """QWidget QLayout.menuBar(None self)"""
        return QWidget()
    def setMenuBar(self, _w):
        """None QLayout.setMenuBar(None self, QWidget _w)"""
        return None
    def sizeConstraint(self):
        """QLayout.SizeConstraint QLayout.sizeConstraint(None self)"""
        return QLayout.SizeConstraint()
    def setSizeConstraint(self):
        """QLayout.SizeConstraint QLayout.setSizeConstraint(None self)"""
        return QLayout.SizeConstraint()
    def setAlignment(self, _w, _alignment):
        """bool QLayout.setAlignment(None self, QWidget _w, Qt.Alignment _alignment)"""
        return bool()
    def setAlignment(self, _l, _alignment):
        """bool QLayout.setAlignment(None self, QLayout _l, Qt.Alignment _alignment)"""
        return bool()
    def setAlignment(self, _alignment):
        """None QLayout.setAlignment(None self, Qt.Alignment _alignment)"""
        return None
    def setSpacing(self):
        """int QLayout.setSpacing(None self)"""
        return int()
    def setMargin(self):
        """int QLayout.setMargin(None self)"""
        return int()
    def spacing(self):
        """int QLayout.spacing(None self)"""
        return int()
    def margin(self):
        """int QLayout.margin(None self)"""
        return int()


class QBoxLayout(QLayout):
    """"""
    LeftToRight = int() # QBoxLayout.Direction enum
    RightToLeft = int() # QBoxLayout.Direction enum
    TopToBottom = int() # QBoxLayout.Direction enum
    BottomToTop = int() # QBoxLayout.Direction enum
    Down = int() # QBoxLayout.Direction enum
    Up = int() # QBoxLayout.Direction enum

    def __init__(self, _direction, _parent):
        """None QBoxLayout.__init__(None self, QBoxLayout.Direction _direction, QWidget _parent)"""
        return None
    def insertItem(self, _index):
        """QLayoutItem QBoxLayout.insertItem(None self, int _index)"""
        return QLayoutItem()
    def stretch(self, _index):
        """int QBoxLayout.stretch(None self, int _index)"""
        return int()
    def setStretch(self, _index, _stretch):
        """None QBoxLayout.setStretch(None self, int _index, int _stretch)"""
        return None
    def insertSpacerItem(self, _index, _spacerItem):
        """None QBoxLayout.insertSpacerItem(None self, int _index, QSpacerItem _spacerItem)"""
        return None
    def addSpacerItem(self, _spacerItem):
        """None QBoxLayout.addSpacerItem(None self, QSpacerItem _spacerItem)"""
        return None
    def setSpacing(self, _spacing):
        """None QBoxLayout.setSpacing(None self, int _spacing)"""
        return None
    def spacing(self):
        """int QBoxLayout.spacing(None self)"""
        return int()
    def setGeometry(self):
        """QRect QBoxLayout.setGeometry(None self)"""
        return QRect()
    def count(self):
        """int QBoxLayout.count(None self)"""
        return int()
    def takeAt(self):
        """int QBoxLayout.takeAt(None self)"""
        return int()
    def itemAt(self):
        """int QBoxLayout.itemAt(None self)"""
        return int()
    def invalidate(self):
        """None QBoxLayout.invalidate(None self)"""
        return None
    def expandingDirections(self):
        """Qt.Orientations QBoxLayout.expandingDirections(None self)"""
        return Qt.Orientations()
    def minimumHeightForWidth(self):
        """int QBoxLayout.minimumHeightForWidth(None self)"""
        return int()
    def heightForWidth(self):
        """int QBoxLayout.heightForWidth(None self)"""
        return int()
    def hasHeightForWidth(self):
        """bool QBoxLayout.hasHeightForWidth(None self)"""
        return bool()
    def maximumSize(self):
        """QSize QBoxLayout.maximumSize(None self)"""
        return QSize()
    def minimumSize(self):
        """QSize QBoxLayout.minimumSize(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QBoxLayout.sizeHint(None self)"""
        return QSize()
    def setStretchFactor(self, _w, _stretch):
        """bool QBoxLayout.setStretchFactor(None self, QWidget _w, int _stretch)"""
        return bool()
    def setStretchFactor(self, _l, _stretch):
        """bool QBoxLayout.setStretchFactor(None self, QLayout _l, int _stretch)"""
        return bool()
    def insertLayout(self, _index, _layout, _stretch):
        """None QBoxLayout.insertLayout(None self, int _index, QLayout _layout, int _stretch)"""
        return None
    def insertWidget(self, _index, _widget, _stretch, _alignment):
        """None QBoxLayout.insertWidget(None self, int _index, QWidget _widget, int _stretch, Qt.Alignment _alignment)"""
        return None
    def insertStretch(self, _index, _stretch):
        """None QBoxLayout.insertStretch(None self, int _index, int _stretch)"""
        return None
    def insertSpacing(self, _index, _size):
        """None QBoxLayout.insertSpacing(None self, int _index, int _size)"""
        return None
    def addItem(self):
        """QLayoutItem QBoxLayout.addItem(None self)"""
        return QLayoutItem()
    def addStrut(self):
        """int QBoxLayout.addStrut(None self)"""
        return int()
    def addLayout(self, _layout, _stretch):
        """None QBoxLayout.addLayout(None self, QLayout _layout, int _stretch)"""
        return None
    def addWidget(self, _stretch, _alignment):
        """QWidget QBoxLayout.addWidget(None self, int _stretch, Qt.Alignment _alignment)"""
        return QWidget()
    def addStretch(self, _stretch):
        """None QBoxLayout.addStretch(None self, int _stretch)"""
        return None
    def addSpacing(self, _size):
        """None QBoxLayout.addSpacing(None self, int _size)"""
        return None
    def setDirection(self):
        """QBoxLayout.Direction QBoxLayout.setDirection(None self)"""
        return QBoxLayout.Direction()
    def direction(self):
        """QBoxLayout.Direction QBoxLayout.direction(None self)"""
        return QBoxLayout.Direction()


class QHBoxLayout(QBoxLayout):
    """"""
    def __init__(self):
        """None QHBoxLayout.__init__(None self)"""
        return None
    def __init__(self, _parent):
        """None QHBoxLayout.__init__(None self, QWidget _parent)"""
        return None


class QVBoxLayout(QBoxLayout):
    """"""
    def __init__(self):
        """None QVBoxLayout.__init__(None self)"""
        return None
    def __init__(self, _parent):
        """None QVBoxLayout.__init__(None self, QWidget _parent)"""
        return None


class QColor():
    """"""
    Invalid = int() # QColor.Spec enum
    Rgb = int() # QColor.Spec enum
    Hsv = int() # QColor.Spec enum
    Cmyk = int() # QColor.Spec enum
    Hsl = int() # QColor.Spec enum

    def __init__(self, _color):
        """None QColor.__init__(None self, Qt.GlobalColor _color)"""
        return None
    def __init__(self, _rgb):
        """None QColor.__init__(None self, int _rgb)"""
        return None
    def __init__(self, _variant):
        """None QColor.__init__(None self, QVariant _variant)"""
        return None
    def __init__(self):
        """None QColor.__init__(None self)"""
        return None
    def __init__(self, _r, _g, _b, _alpha):
        """None QColor.__init__(None self, int _r, int _g, int _b, int _alpha)"""
        return None
    def __init__(self, _aname):
        """None QColor.__init__(None self, QString _aname)"""
        return None
    def __init__(self, _acolor):
        """None QColor.__init__(None self, QColor _acolor)"""
        return None
    def isValidColor(self, _name):
        """bool QColor.isValidColor(None self, QString _name)"""
        return bool()
    def fromHslF(self, _h, _s, _l, _alpha):
        """QColor QColor.fromHslF(None self, float _h, float _s, float _l, float _alpha)"""
        return QColor()
    def fromHsl(self, _h, _s, _l, _alpha):
        """QColor QColor.fromHsl(None self, int _h, int _s, int _l, int _alpha)"""
        return QColor()
    def toHsl(self):
        """QColor QColor.toHsl(None self)"""
        return QColor()
    def setHslF(self, _h, _s, _l, _alpha):
        """None QColor.setHslF(None self, float _h, float _s, float _l, float _alpha)"""
        return None
    def getHslF(self, _h, _s, _l, _alpha):
        """None QColor.getHslF(None self, float _h, float _s, float _l, float _alpha)"""
        return None
    def setHsl(self, _h, _s, _l, _alpha):
        """None QColor.setHsl(None self, int _h, int _s, int _l, int _alpha)"""
        return None
    def getHsl(self, _h, _s, _l, _alpha):
        """None QColor.getHsl(None self, int _h, int _s, int _l, int _alpha)"""
        return None
    def lightnessF(self):
        """float QColor.lightnessF(None self)"""
        return float()
    def hslSaturationF(self):
        """float QColor.hslSaturationF(None self)"""
        return float()
    def hslHueF(self):
        """float QColor.hslHueF(None self)"""
        return float()
    def lightness(self):
        """int QColor.lightness(None self)"""
        return int()
    def hslSaturation(self):
        """int QColor.hslSaturation(None self)"""
        return int()
    def hslHue(self):
        """int QColor.hslHue(None self)"""
        return int()
    def hsvSaturationF(self):
        """float QColor.hsvSaturationF(None self)"""
        return float()
    def hsvHueF(self):
        """float QColor.hsvHueF(None self)"""
        return float()
    def hsvSaturation(self):
        """int QColor.hsvSaturation(None self)"""
        return int()
    def hsvHue(self):
        """int QColor.hsvHue(None self)"""
        return int()
    def darker(self, _factor):
        """QColor QColor.darker(None self, int _factor)"""
        return QColor()
    def lighter(self, _factor):
        """QColor QColor.lighter(None self, int _factor)"""
        return QColor()
    def setAllowX11ColorNames(self, _enabled):
        """None QColor.setAllowX11ColorNames(None self, bool _enabled)"""
        return None
    def allowX11ColorNames(self):
        """bool QColor.allowX11ColorNames(None self)"""
        return bool()
    def isValid(self):
        """bool QColor.isValid(None self)"""
        return bool()
    def __ne__(self, _c):
        """bool QColor.__ne__(None self, QColor _c)"""
        return bool()
    def __eq__(self, _c):
        """bool QColor.__eq__(None self, QColor _c)"""
        return bool()
    def dark(self, _factor):
        """QColor QColor.dark(None self, int _factor)"""
        return QColor()
    def light(self, _factor):
        """QColor QColor.light(None self, int _factor)"""
        return QColor()
    def fromCmykF(self, _c, _m, _y, _k, _alpha):
        """QColor QColor.fromCmykF(None self, float _c, float _m, float _y, float _k, float _alpha)"""
        return QColor()
    def fromCmyk(self, _c, _m, _y, _k, _alpha):
        """QColor QColor.fromCmyk(None self, int _c, int _m, int _y, int _k, int _alpha)"""
        return QColor()
    def fromHsvF(self, _h, _s, _v, _alpha):
        """QColor QColor.fromHsvF(None self, float _h, float _s, float _v, float _alpha)"""
        return QColor()
    def fromHsv(self, _h, _s, _v, _alpha):
        """QColor QColor.fromHsv(None self, int _h, int _s, int _v, int _alpha)"""
        return QColor()
    def fromRgbF(self, _r, _g, _b, _alpha):
        """QColor QColor.fromRgbF(None self, float _r, float _g, float _b, float _alpha)"""
        return QColor()
    def fromRgba(self, _rgba):
        """QColor QColor.fromRgba(None self, int _rgba)"""
        return QColor()
    def fromRgb(self, _rgb):
        """QColor QColor.fromRgb(None self, int _rgb)"""
        return QColor()
    def fromRgb(self, _r, _g, _b, _alpha):
        """QColor QColor.fromRgb(None self, int _r, int _g, int _b, int _alpha)"""
        return QColor()
    def convertTo(self, _colorSpec):
        """QColor QColor.convertTo(None self, QColor.Spec _colorSpec)"""
        return QColor()
    def toCmyk(self):
        """QColor QColor.toCmyk(None self)"""
        return QColor()
    def toHsv(self):
        """QColor QColor.toHsv(None self)"""
        return QColor()
    def toRgb(self):
        """QColor QColor.toRgb(None self)"""
        return QColor()
    def setCmykF(self, _c, _m, _y, _k, _alpha):
        """None QColor.setCmykF(None self, float _c, float _m, float _y, float _k, float _alpha)"""
        return None
    def getCmykF(self, _c, _m, _y, _k, _alpha):
        """None QColor.getCmykF(None self, float _c, float _m, float _y, float _k, float _alpha)"""
        return None
    def setCmyk(self, _c, _m, _y, _k, _alpha):
        """None QColor.setCmyk(None self, int _c, int _m, int _y, int _k, int _alpha)"""
        return None
    def getCmyk(self, _c, _m, _y, _k, _alpha):
        """None QColor.getCmyk(None self, int _c, int _m, int _y, int _k, int _alpha)"""
        return None
    def blackF(self):
        """float QColor.blackF(None self)"""
        return float()
    def yellowF(self):
        """float QColor.yellowF(None self)"""
        return float()
    def magentaF(self):
        """float QColor.magentaF(None self)"""
        return float()
    def cyanF(self):
        """float QColor.cyanF(None self)"""
        return float()
    def black(self):
        """int QColor.black(None self)"""
        return int()
    def yellow(self):
        """int QColor.yellow(None self)"""
        return int()
    def magenta(self):
        """int QColor.magenta(None self)"""
        return int()
    def cyan(self):
        """int QColor.cyan(None self)"""
        return int()
    def setHsvF(self, _h, _s, _v, _alpha):
        """None QColor.setHsvF(None self, float _h, float _s, float _v, float _alpha)"""
        return None
    def getHsvF(self, _h, _s, _v, _alpha):
        """None QColor.getHsvF(None self, float _h, float _s, float _v, float _alpha)"""
        return None
    def setHsv(self, _h, _s, _v, _alpha):
        """None QColor.setHsv(None self, int _h, int _s, int _v, int _alpha)"""
        return None
    def getHsv(self, _h, _s, _v, _alpha):
        """None QColor.getHsv(None self, int _h, int _s, int _v, int _alpha)"""
        return None
    def valueF(self):
        """float QColor.valueF(None self)"""
        return float()
    def saturationF(self):
        """float QColor.saturationF(None self)"""
        return float()
    def hueF(self):
        """float QColor.hueF(None self)"""
        return float()
    def value(self):
        """int QColor.value(None self)"""
        return int()
    def saturation(self):
        """int QColor.saturation(None self)"""
        return int()
    def hue(self):
        """int QColor.hue(None self)"""
        return int()
    def rgb(self):
        """int QColor.rgb(None self)"""
        return int()
    def setRgba(self, _rgba):
        """None QColor.setRgba(None self, int _rgba)"""
        return None
    def rgba(self):
        """int QColor.rgba(None self)"""
        return int()
    def setRgbF(self, _r, _g, _b, _alpha):
        """None QColor.setRgbF(None self, float _r, float _g, float _b, float _alpha)"""
        return None
    def getRgbF(self, _r, _g, _b, _alpha):
        """None QColor.getRgbF(None self, float _r, float _g, float _b, float _alpha)"""
        return None
    def setRgb(self, _r, _g, _b, _alpha):
        """None QColor.setRgb(None self, int _r, int _g, int _b, int _alpha)"""
        return None
    def setRgb(self, _rgb):
        """None QColor.setRgb(None self, int _rgb)"""
        return None
    def getRgb(self, _r, _g, _b, _alpha):
        """None QColor.getRgb(None self, int _r, int _g, int _b, int _alpha)"""
        return None
    def setBlueF(self, _blue):
        """None QColor.setBlueF(None self, float _blue)"""
        return None
    def setGreenF(self, _green):
        """None QColor.setGreenF(None self, float _green)"""
        return None
    def setRedF(self, _red):
        """None QColor.setRedF(None self, float _red)"""
        return None
    def blueF(self):
        """float QColor.blueF(None self)"""
        return float()
    def greenF(self):
        """float QColor.greenF(None self)"""
        return float()
    def redF(self):
        """float QColor.redF(None self)"""
        return float()
    def setBlue(self, _blue):
        """None QColor.setBlue(None self, int _blue)"""
        return None
    def setGreen(self, _green):
        """None QColor.setGreen(None self, int _green)"""
        return None
    def setRed(self, _red):
        """None QColor.setRed(None self, int _red)"""
        return None
    def blue(self):
        """int QColor.blue(None self)"""
        return int()
    def green(self):
        """int QColor.green(None self)"""
        return int()
    def red(self):
        """int QColor.red(None self)"""
        return int()
    def setAlphaF(self, _alpha):
        """None QColor.setAlphaF(None self, float _alpha)"""
        return None
    def alphaF(self):
        """float QColor.alphaF(None self)"""
        return float()
    def setAlpha(self, _alpha):
        """None QColor.setAlpha(None self, int _alpha)"""
        return None
    def alpha(self):
        """int QColor.alpha(None self)"""
        return int()
    def spec(self):
        """QColor.Spec QColor.spec(None self)"""
        return QColor.Spec()
    def colorNames(self):
        """QStringList QColor.colorNames(None self)"""
        return QStringList()
    def setNamedColor(self, _name):
        """None QColor.setNamedColor(None self, QString _name)"""
        return None
    def name(self):
        """QString QColor.name(None self)"""
        return QString()


class QPushButton(QAbstractButton):
    """"""
    def __init__(self, _parent):
        """None QPushButton.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _text, _parent):
        """None QPushButton.__init__(None self, QString _text, QWidget _parent)"""
        return None
    def __init__(self, _icon, _text, _parent):
        """None QPushButton.__init__(None self, QIcon _icon, QString _text, QWidget _parent)"""
        return None
    def focusOutEvent(self):
        """QFocusEvent QPushButton.focusOutEvent(None self)"""
        return QFocusEvent()
    def focusInEvent(self):
        """QFocusEvent QPushButton.focusInEvent(None self)"""
        return QFocusEvent()
    def keyPressEvent(self):
        """QKeyEvent QPushButton.keyPressEvent(None self)"""
        return QKeyEvent()
    def paintEvent(self):
        """QPaintEvent QPushButton.paintEvent(None self)"""
        return QPaintEvent()
    def event(self, _e):
        """bool QPushButton.event(None self, QEvent _e)"""
        return bool()
    def initStyleOption(self, _option):
        """None QPushButton.initStyleOption(None self, QStyleOptionButton _option)"""
        return None
    def showMenu(self):
        """None QPushButton.showMenu(None self)"""
        return None
    def isFlat(self):
        """bool QPushButton.isFlat(None self)"""
        return bool()
    def setFlat(self):
        """bool QPushButton.setFlat(None self)"""
        return bool()
    def menu(self):
        """QMenu QPushButton.menu(None self)"""
        return QMenu()
    def setMenu(self, _menu):
        """None QPushButton.setMenu(None self, QMenu _menu)"""
        return None
    def setDefault(self):
        """bool QPushButton.setDefault(None self)"""
        return bool()
    def isDefault(self):
        """bool QPushButton.isDefault(None self)"""
        return bool()
    def setAutoDefault(self):
        """bool QPushButton.setAutoDefault(None self)"""
        return bool()
    def autoDefault(self):
        """bool QPushButton.autoDefault(None self)"""
        return bool()
    def minimumSizeHint(self):
        """QSize QPushButton.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QPushButton.sizeHint(None self)"""
        return QSize()


class QCommandLinkButton(QPushButton):
    """"""
    def __init__(self, _parent):
        """None QCommandLinkButton.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _text, _parent):
        """None QCommandLinkButton.__init__(None self, QString _text, QWidget _parent)"""
        return None
    def __init__(self, _text, _description, _parent):
        """None QCommandLinkButton.__init__(None self, QString _text, QString _description, QWidget _parent)"""
        return None
    def paintEvent(self):
        """QPaintEvent QCommandLinkButton.paintEvent(None self)"""
        return QPaintEvent()
    def event(self, _e):
        """bool QCommandLinkButton.event(None self, QEvent _e)"""
        return bool()
    def minimumSizeHint(self):
        """QSize QCommandLinkButton.minimumSizeHint(None self)"""
        return QSize()
    def heightForWidth(self):
        """int QCommandLinkButton.heightForWidth(None self)"""
        return int()
    def sizeHint(self):
        """QSize QCommandLinkButton.sizeHint(None self)"""
        return QSize()
    def setDescription(self, _description):
        """None QCommandLinkButton.setDescription(None self, QString _description)"""
        return None
    def description(self):
        """QString QCommandLinkButton.description(None self)"""
        return QString()


class QBrush():
    """"""
    def __init__(self):
        """None QBrush.__init__(None self)"""
        return None
    def __init__(self, _bs):
        """None QBrush.__init__(None self, Qt.BrushStyle _bs)"""
        return None
    def __init__(self, _color, _style):
        """None QBrush.__init__(None self, QColor _color, Qt.BrushStyle _style)"""
        return None
    def __init__(self, _color, _style):
        """None QBrush.__init__(None self, Qt.GlobalColor _color, Qt.BrushStyle _style)"""
        return None
    def __init__(self, _color, _pixmap):
        """None QBrush.__init__(None self, QColor _color, QPixmap _pixmap)"""
        return None
    def __init__(self, _color, _pixmap):
        """None QBrush.__init__(None self, Qt.GlobalColor _color, QPixmap _pixmap)"""
        return None
    def __init__(self, _pixmap):
        """None QBrush.__init__(None self, QPixmap _pixmap)"""
        return None
    def __init__(self, _image):
        """None QBrush.__init__(None self, QImage _image)"""
        return None
    def __init__(self, _gradient):
        """None QBrush.__init__(None self, QGradient _gradient)"""
        return None
    def __init__(self, _brush):
        """None QBrush.__init__(None self, QBrush _brush)"""
        return None
    def __init__(self, _variant):
        """None QBrush.__init__(None self, QVariant _variant)"""
        return None
    def transform(self):
        """QTransform QBrush.transform(None self)"""
        return QTransform()
    def setTransform(self):
        """QTransform QBrush.setTransform(None self)"""
        return QTransform()
    def textureImage(self):
        """QImage QBrush.textureImage(None self)"""
        return QImage()
    def setTextureImage(self, _image):
        """None QBrush.setTextureImage(None self, QImage _image)"""
        return None
    def matrix(self):
        """QMatrix QBrush.matrix(None self)"""
        return QMatrix()
    def setMatrix(self, _mat):
        """None QBrush.setMatrix(None self, QMatrix _mat)"""
        return None
    def color(self):
        """QColor QBrush.color(None self)"""
        return QColor()
    def style(self):
        """Qt.BrushStyle QBrush.style(None self)"""
        return Qt.BrushStyle()
    def __ne__(self, _b):
        """bool QBrush.__ne__(None self, QBrush _b)"""
        return bool()
    def __eq__(self, _b):
        """bool QBrush.__eq__(None self, QBrush _b)"""
        return bool()
    def isOpaque(self):
        """bool QBrush.isOpaque(None self)"""
        return bool()
    def gradient(self):
        """QGradient QBrush.gradient(None self)"""
        return QGradient()
    def setColor(self, _color):
        """None QBrush.setColor(None self, QColor _color)"""
        return None
    def setColor(self, _acolor):
        """None QBrush.setColor(None self, Qt.GlobalColor _acolor)"""
        return None
    def setTexture(self, _pixmap):
        """None QBrush.setTexture(None self, QPixmap _pixmap)"""
        return None
    def texture(self):
        """QPixmap QBrush.texture(None self)"""
        return QPixmap()
    def setStyle(self):
        """Qt.BrushStyle QBrush.setStyle(None self)"""
        return Qt.BrushStyle()


class QGradient():
    """"""
    PadSpread = int() # QGradient.Spread enum
    ReflectSpread = int() # QGradient.Spread enum
    RepeatSpread = int() # QGradient.Spread enum

    LinearGradient = int() # QGradient.Type enum
    RadialGradient = int() # QGradient.Type enum
    ConicalGradient = int() # QGradient.Type enum
    NoGradient = int() # QGradient.Type enum

    LogicalMode = int() # QGradient.CoordinateMode enum
    StretchToDeviceMode = int() # QGradient.CoordinateMode enum
    ObjectBoundingMode = int() # QGradient.CoordinateMode enum

    def __init__(self):
        """None QGradient.__init__(None self)"""
        return None
    def __init__(self):
        """QGradient QGradient.__init__(None self)"""
        return QGradient()
    def setCoordinateMode(self, _mode):
        """None QGradient.setCoordinateMode(None self, QGradient.CoordinateMode _mode)"""
        return None
    def coordinateMode(self):
        """QGradient.CoordinateMode QGradient.coordinateMode(None self)"""
        return QGradient.CoordinateMode()
    def setSpread(self, _aspread):
        """None QGradient.setSpread(None self, QGradient.Spread _aspread)"""
        return None
    def __ne__(self, _other):
        """bool QGradient.__ne__(None self, QGradient _other)"""
        return bool()
    def __eq__(self, _gradient):
        """bool QGradient.__eq__(None self, QGradient _gradient)"""
        return bool()
    def stops(self):
        """list-of-tuple-of-float-QColor QGradient.stops(None self)"""
        return [tuple-of-float-QColor()]
    def setStops(self, _stops):
        """None QGradient.setStops(None self, list-of-tuple-of-float-QColor _stops)"""
        return None
    def setColorAt(self, _pos, _color):
        """None QGradient.setColorAt(None self, float _pos, QColor _color)"""
        return None
    def spread(self):
        """QGradient.Spread QGradient.spread(None self)"""
        return QGradient.Spread()
    def type(self):
        """QGradient.Type QGradient.type(None self)"""
        return QGradient.Type()


class QLinearGradient(QGradient):
    """"""
    def __init__(self):
        """None QLinearGradient.__init__(None self)"""
        return None
    def __init__(self, _start, _finalStop):
        """None QLinearGradient.__init__(None self, QPointF _start, QPointF _finalStop)"""
        return None
    def __init__(self, _xStart, _yStart, _xFinalStop, _yFinalStop):
        """None QLinearGradient.__init__(None self, float _xStart, float _yStart, float _xFinalStop, float _yFinalStop)"""
        return None
    def __init__(self):
        """QLinearGradient QLinearGradient.__init__(None self)"""
        return QLinearGradient()
    def setFinalStop(self, _stop):
        """None QLinearGradient.setFinalStop(None self, QPointF _stop)"""
        return None
    def setFinalStop(self, _x, _y):
        """None QLinearGradient.setFinalStop(None self, float _x, float _y)"""
        return None
    def setStart(self, _start):
        """None QLinearGradient.setStart(None self, QPointF _start)"""
        return None
    def setStart(self, _x, _y):
        """None QLinearGradient.setStart(None self, float _x, float _y)"""
        return None
    def finalStop(self):
        """QPointF QLinearGradient.finalStop(None self)"""
        return QPointF()
    def start(self):
        """QPointF QLinearGradient.start(None self)"""
        return QPointF()


class QRadialGradient(QGradient):
    """"""
    def __init__(self):
        """None QRadialGradient.__init__(None self)"""
        return None
    def __init__(self, _center, _radius, _focalPoint):
        """None QRadialGradient.__init__(None self, QPointF _center, float _radius, QPointF _focalPoint)"""
        return None
    def __init__(self, _center, _radius):
        """None QRadialGradient.__init__(None self, QPointF _center, float _radius)"""
        return None
    def __init__(self, _cx, _cy, _radius, _fx, _fy):
        """None QRadialGradient.__init__(None self, float _cx, float _cy, float _radius, float _fx, float _fy)"""
        return None
    def __init__(self, _cx, _cy, _radius):
        """None QRadialGradient.__init__(None self, float _cx, float _cy, float _radius)"""
        return None
    def __init__(self):
        """QRadialGradient QRadialGradient.__init__(None self)"""
        return QRadialGradient()
    def setRadius(self, _radius):
        """None QRadialGradient.setRadius(None self, float _radius)"""
        return None
    def setFocalPoint(self, _focalPoint):
        """None QRadialGradient.setFocalPoint(None self, QPointF _focalPoint)"""
        return None
    def setFocalPoint(self, _x, _y):
        """None QRadialGradient.setFocalPoint(None self, float _x, float _y)"""
        return None
    def setCenter(self, _center):
        """None QRadialGradient.setCenter(None self, QPointF _center)"""
        return None
    def setCenter(self, _x, _y):
        """None QRadialGradient.setCenter(None self, float _x, float _y)"""
        return None
    def radius(self):
        """float QRadialGradient.radius(None self)"""
        return float()
    def focalPoint(self):
        """QPointF QRadialGradient.focalPoint(None self)"""
        return QPointF()
    def center(self):
        """QPointF QRadialGradient.center(None self)"""
        return QPointF()


class QConicalGradient(QGradient):
    """"""
    def __init__(self):
        """None QConicalGradient.__init__(None self)"""
        return None
    def __init__(self, _center, _startAngle):
        """None QConicalGradient.__init__(None self, QPointF _center, float _startAngle)"""
        return None
    def __init__(self, _cx, _cy, _startAngle):
        """None QConicalGradient.__init__(None self, float _cx, float _cy, float _startAngle)"""
        return None
    def __init__(self):
        """QConicalGradient QConicalGradient.__init__(None self)"""
        return QConicalGradient()
    def setAngle(self, _angle):
        """None QConicalGradient.setAngle(None self, float _angle)"""
        return None
    def setCenter(self, _center):
        """None QConicalGradient.setCenter(None self, QPointF _center)"""
        return None
    def setCenter(self, _x, _y):
        """None QConicalGradient.setCenter(None self, float _x, float _y)"""
        return None
    def angle(self):
        """float QConicalGradient.angle(None self)"""
        return float()
    def center(self):
        """QPointF QConicalGradient.center(None self)"""
        return QPointF()


class QButtonGroup(QObject):
    """"""
    def __init__(self, _parent):
        """None QButtonGroup.__init__(None self, QObject _parent)"""
        return None
    def checkedId(self):
        """int QButtonGroup.checkedId(None self)"""
        return int()
    def id(self, _button):
        """int QButtonGroup.id(None self, QAbstractButton _button)"""
        return int()
    def setId(self, _button, _id):
        """None QButtonGroup.setId(None self, QAbstractButton _button, int _id)"""
        return None
    def checkedButton(self):
        """QAbstractButton QButtonGroup.checkedButton(None self)"""
        return QAbstractButton()
    def button(self, _id):
        """QAbstractButton QButtonGroup.button(None self, int _id)"""
        return QAbstractButton()
    def buttons(self):
        """list-of-QAbstractButton QButtonGroup.buttons(None self)"""
        return [QAbstractButton()]
    def removeButton(self):
        """QAbstractButton QButtonGroup.removeButton(None self)"""
        return QAbstractButton()
    def addButton(self):
        """QAbstractButton QButtonGroup.addButton(None self)"""
        return QAbstractButton()
    def addButton(self, _id):
        """QAbstractButton QButtonGroup.addButton(None self, int _id)"""
        return QAbstractButton()
    def exclusive(self):
        """bool QButtonGroup.exclusive(None self)"""
        return bool()
    def setExclusive(self):
        """bool QButtonGroup.setExclusive(None self)"""
        return bool()


class QCalendarWidget(QWidget):
    """"""
    NoSelection = int() # QCalendarWidget.SelectionMode enum
    SingleSelection = int() # QCalendarWidget.SelectionMode enum

    NoVerticalHeader = int() # QCalendarWidget.VerticalHeaderFormat enum
    ISOWeekNumbers = int() # QCalendarWidget.VerticalHeaderFormat enum

    NoHorizontalHeader = int() # QCalendarWidget.HorizontalHeaderFormat enum
    SingleLetterDayNames = int() # QCalendarWidget.HorizontalHeaderFormat enum
    ShortDayNames = int() # QCalendarWidget.HorizontalHeaderFormat enum
    LongDayNames = int() # QCalendarWidget.HorizontalHeaderFormat enum

    def __init__(self, _parent):
        """None QCalendarWidget.__init__(None self, QWidget _parent)"""
        return None
    def setNavigationBarVisible(self, _visible):
        """None QCalendarWidget.setNavigationBarVisible(None self, bool _visible)"""
        return None
    def setDateEditAcceptDelay(self, _delay):
        """None QCalendarWidget.setDateEditAcceptDelay(None self, int _delay)"""
        return None
    def dateEditAcceptDelay(self):
        """int QCalendarWidget.dateEditAcceptDelay(None self)"""
        return int()
    def setDateEditEnabled(self, _enable):
        """None QCalendarWidget.setDateEditEnabled(None self, bool _enable)"""
        return None
    def isDateEditEnabled(self):
        """bool QCalendarWidget.isDateEditEnabled(None self)"""
        return bool()
    def isNavigationBarVisible(self):
        """bool QCalendarWidget.isNavigationBarVisible(None self)"""
        return bool()
    def showToday(self):
        """None QCalendarWidget.showToday(None self)"""
        return None
    def showSelectedDate(self):
        """None QCalendarWidget.showSelectedDate(None self)"""
        return None
    def showPreviousYear(self):
        """None QCalendarWidget.showPreviousYear(None self)"""
        return None
    def showPreviousMonth(self):
        """None QCalendarWidget.showPreviousMonth(None self)"""
        return None
    def showNextYear(self):
        """None QCalendarWidget.showNextYear(None self)"""
        return None
    def showNextMonth(self):
        """None QCalendarWidget.showNextMonth(None self)"""
        return None
    def setSelectedDate(self, _date):
        """None QCalendarWidget.setSelectedDate(None self, QDate _date)"""
        return None
    def setDateRange(self, _min, _max):
        """None QCalendarWidget.setDateRange(None self, QDate _min, QDate _max)"""
        return None
    def setCurrentPage(self, _year, _month):
        """None QCalendarWidget.setCurrentPage(None self, int _year, int _month)"""
        return None
    def paintCell(self, _painter, _rect, _date):
        """None QCalendarWidget.paintCell(None self, QPainter _painter, QRect _rect, QDate _date)"""
        return None
    def keyPressEvent(self, _event):
        """None QCalendarWidget.keyPressEvent(None self, QKeyEvent _event)"""
        return None
    def resizeEvent(self, _event):
        """None QCalendarWidget.resizeEvent(None self, QResizeEvent _event)"""
        return None
    def mousePressEvent(self, _event):
        """None QCalendarWidget.mousePressEvent(None self, QMouseEvent _event)"""
        return None
    def eventFilter(self, _watched, _event):
        """bool QCalendarWidget.eventFilter(None self, QObject _watched, QEvent _event)"""
        return bool()
    def event(self, _event):
        """bool QCalendarWidget.event(None self, QEvent _event)"""
        return bool()
    def updateCells(self):
        """None QCalendarWidget.updateCells(None self)"""
        return None
    def updateCell(self, _date):
        """None QCalendarWidget.updateCell(None self, QDate _date)"""
        return None
    def setDateTextFormat(self, _date, _color):
        """None QCalendarWidget.setDateTextFormat(None self, QDate _date, QTextCharFormat _color)"""
        return None
    def dateTextFormat(self):
        """dict-of-QDate-QTextCharFormat QCalendarWidget.dateTextFormat(None self)"""
        return dict-of-QDate-QTextCharFormat()
    def dateTextFormat(self, _date):
        """QTextCharFormat QCalendarWidget.dateTextFormat(None self, QDate _date)"""
        return QTextCharFormat()
    def setWeekdayTextFormat(self, _dayOfWeek, _format):
        """None QCalendarWidget.setWeekdayTextFormat(None self, Qt.DayOfWeek _dayOfWeek, QTextCharFormat _format)"""
        return None
    def weekdayTextFormat(self, _dayOfWeek):
        """QTextCharFormat QCalendarWidget.weekdayTextFormat(None self, Qt.DayOfWeek _dayOfWeek)"""
        return QTextCharFormat()
    def setHeaderTextFormat(self, _format):
        """None QCalendarWidget.setHeaderTextFormat(None self, QTextCharFormat _format)"""
        return None
    def headerTextFormat(self):
        """QTextCharFormat QCalendarWidget.headerTextFormat(None self)"""
        return QTextCharFormat()
    def setVerticalHeaderFormat(self, _format):
        """None QCalendarWidget.setVerticalHeaderFormat(None self, QCalendarWidget.VerticalHeaderFormat _format)"""
        return None
    def verticalHeaderFormat(self):
        """QCalendarWidget.VerticalHeaderFormat QCalendarWidget.verticalHeaderFormat(None self)"""
        return QCalendarWidget.VerticalHeaderFormat()
    def setHorizontalHeaderFormat(self, _format):
        """None QCalendarWidget.setHorizontalHeaderFormat(None self, QCalendarWidget.HorizontalHeaderFormat _format)"""
        return None
    def horizontalHeaderFormat(self):
        """QCalendarWidget.HorizontalHeaderFormat QCalendarWidget.horizontalHeaderFormat(None self)"""
        return QCalendarWidget.HorizontalHeaderFormat()
    def setSelectionMode(self, _mode):
        """None QCalendarWidget.setSelectionMode(None self, QCalendarWidget.SelectionMode _mode)"""
        return None
    def selectionMode(self):
        """QCalendarWidget.SelectionMode QCalendarWidget.selectionMode(None self)"""
        return QCalendarWidget.SelectionMode()
    def setGridVisible(self, _show):
        """None QCalendarWidget.setGridVisible(None self, bool _show)"""
        return None
    def isGridVisible(self):
        """bool QCalendarWidget.isGridVisible(None self)"""
        return bool()
    def setHeaderVisible(self, _show):
        """None QCalendarWidget.setHeaderVisible(None self, bool _show)"""
        return None
    def isHeaderVisible(self):
        """bool QCalendarWidget.isHeaderVisible(None self)"""
        return bool()
    def setFirstDayOfWeek(self, _dayOfWeek):
        """None QCalendarWidget.setFirstDayOfWeek(None self, Qt.DayOfWeek _dayOfWeek)"""
        return None
    def firstDayOfWeek(self):
        """Qt.DayOfWeek QCalendarWidget.firstDayOfWeek(None self)"""
        return Qt.DayOfWeek()
    def setMaximumDate(self, _date):
        """None QCalendarWidget.setMaximumDate(None self, QDate _date)"""
        return None
    def maximumDate(self):
        """QDate QCalendarWidget.maximumDate(None self)"""
        return QDate()
    def setMinimumDate(self, _date):
        """None QCalendarWidget.setMinimumDate(None self, QDate _date)"""
        return None
    def minimumDate(self):
        """QDate QCalendarWidget.minimumDate(None self)"""
        return QDate()
    def monthShown(self):
        """int QCalendarWidget.monthShown(None self)"""
        return int()
    def yearShown(self):
        """int QCalendarWidget.yearShown(None self)"""
        return int()
    def selectedDate(self):
        """QDate QCalendarWidget.selectedDate(None self)"""
        return QDate()
    def minimumSizeHint(self):
        """QSize QCalendarWidget.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QCalendarWidget.sizeHint(None self)"""
        return QSize()


class QCheckBox(QAbstractButton):
    """"""
    def __init__(self, _parent):
        """None QCheckBox.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _text, _parent):
        """None QCheckBox.__init__(None self, QString _text, QWidget _parent)"""
        return None
    def initStyleOption(self, _option):
        """None QCheckBox.initStyleOption(None self, QStyleOptionButton _option)"""
        return None
    def mouseMoveEvent(self):
        """QMouseEvent QCheckBox.mouseMoveEvent(None self)"""
        return QMouseEvent()
    def paintEvent(self):
        """QPaintEvent QCheckBox.paintEvent(None self)"""
        return QPaintEvent()
    def event(self, _e):
        """bool QCheckBox.event(None self, QEvent _e)"""
        return bool()
    def nextCheckState(self):
        """None QCheckBox.nextCheckState(None self)"""
        return None
    def checkStateSet(self):
        """None QCheckBox.checkStateSet(None self)"""
        return None
    def hitButton(self, _pos):
        """bool QCheckBox.hitButton(None self, QPoint _pos)"""
        return bool()
    def setCheckState(self, _state):
        """None QCheckBox.setCheckState(None self, Qt.CheckState _state)"""
        return None
    def checkState(self):
        """Qt.CheckState QCheckBox.checkState(None self)"""
        return Qt.CheckState()
    def isTristate(self):
        """bool QCheckBox.isTristate(None self)"""
        return bool()
    def setTristate(self, _on):
        """None QCheckBox.setTristate(None self, bool _on)"""
        return None
    def sizeHint(self):
        """QSize QCheckBox.sizeHint(None self)"""
        return QSize()


class QClipboard(QObject):
    """"""
    Clipboard = int() # QClipboard.Mode enum
    Selection = int() # QClipboard.Mode enum
    FindBuffer = int() # QClipboard.Mode enum

    def event(self):
        """QEvent QClipboard.event(None self)"""
        return QEvent()
    def connectNotify(self):
        """SIGNAL() QClipboard.connectNotify(None self)"""
        return SIGNAL()()
    def setPixmap(self, _mode):
        """QPixmap QClipboard.setPixmap(None self, QClipboard.Mode _mode)"""
        return QPixmap()
    def setImage(self, _mode):
        """QImage QClipboard.setImage(None self, QClipboard.Mode _mode)"""
        return QImage()
    def pixmap(self, _mode):
        """QPixmap QClipboard.pixmap(None self, QClipboard.Mode _mode)"""
        return QPixmap()
    def image(self, _mode):
        """QImage QClipboard.image(None self, QClipboard.Mode _mode)"""
        return QImage()
    def setMimeData(self, _data, _mode):
        """None QClipboard.setMimeData(None self, QMimeData _data, QClipboard.Mode _mode)"""
        return None
    def mimeData(self, _mode):
        """QMimeData QClipboard.mimeData(None self, QClipboard.Mode _mode)"""
        return QMimeData()
    def setText(self, _mode):
        """QString QClipboard.setText(None self, QClipboard.Mode _mode)"""
        return QString()
    def text(self, _mode):
        """QString QClipboard.text(None self, QClipboard.Mode _mode)"""
        return QString()
    def text(self, _subtype, _mode):
        """(QString, QString) QClipboard.text(None self, QString _subtype, QClipboard.Mode _mode)"""
        return (QString, QString)()
    def text(self, _subtype, _mode):
        """QString QClipboard.text(None self, QString _subtype, QClipboard.Mode _mode)"""
        return QString()
    def ownsSelection(self):
        """bool QClipboard.ownsSelection(None self)"""
        return bool()
    def ownsFindBuffer(self):
        """bool QClipboard.ownsFindBuffer(None self)"""
        return bool()
    def ownsClipboard(self):
        """bool QClipboard.ownsClipboard(None self)"""
        return bool()
    def supportsSelection(self):
        """bool QClipboard.supportsSelection(None self)"""
        return bool()
    def supportsFindBuffer(self):
        """bool QClipboard.supportsFindBuffer(None self)"""
        return bool()
    def clear(self, _mode):
        """None QClipboard.clear(None self, QClipboard.Mode _mode)"""
        return None


class QColumnView(QAbstractItemView):
    """"""
    def __init__(self, _parent):
        """None QColumnView.__init__(None self, QWidget _parent)"""
        return None
    def currentChanged(self, _current, _previous):
        """None QColumnView.currentChanged(None self, QModelIndex _current, QModelIndex _previous)"""
        return None
    def rowsInserted(self, _parent, _start, _end):
        """None QColumnView.rowsInserted(None self, QModelIndex _parent, int _start, int _end)"""
        return None
    def scrollContentsBy(self, _dx, _dy):
        """None QColumnView.scrollContentsBy(None self, int _dx, int _dy)"""
        return None
    def verticalOffset(self):
        """int QColumnView.verticalOffset(None self)"""
        return int()
    def horizontalOffset(self):
        """int QColumnView.horizontalOffset(None self)"""
        return int()
    def visualRegionForSelection(self, _selection):
        """QRegion QColumnView.visualRegionForSelection(None self, QItemSelection _selection)"""
        return QRegion()
    def setSelection(self, _rect, _command):
        """None QColumnView.setSelection(None self, QRect _rect, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def resizeEvent(self, _event):
        """None QColumnView.resizeEvent(None self, QResizeEvent _event)"""
        return None
    def moveCursor(self, _cursorAction, _modifiers):
        """QModelIndex QColumnView.moveCursor(None self, QAbstractItemView.CursorAction _cursorAction, Qt.KeyboardModifiers _modifiers)"""
        return QModelIndex()
    def isIndexHidden(self, _index):
        """bool QColumnView.isIndexHidden(None self, QModelIndex _index)"""
        return bool()
    def initializeColumn(self, _column):
        """None QColumnView.initializeColumn(None self, QAbstractItemView _column)"""
        return None
    def createColumn(self, _rootIndex):
        """QAbstractItemView QColumnView.createColumn(None self, QModelIndex _rootIndex)"""
        return QAbstractItemView()
    def selectAll(self):
        """None QColumnView.selectAll(None self)"""
        return None
    def setRootIndex(self, _index):
        """None QColumnView.setRootIndex(None self, QModelIndex _index)"""
        return None
    def setSelectionModel(self, _selectionModel):
        """None QColumnView.setSelectionModel(None self, QItemSelectionModel _selectionModel)"""
        return None
    def setModel(self, _model):
        """None QColumnView.setModel(None self, QAbstractItemModel _model)"""
        return None
    def visualRect(self, _index):
        """QRect QColumnView.visualRect(None self, QModelIndex _index)"""
        return QRect()
    def sizeHint(self):
        """QSize QColumnView.sizeHint(None self)"""
        return QSize()
    def scrollTo(self, _index, _hint):
        """None QColumnView.scrollTo(None self, QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def indexAt(self, _point):
        """QModelIndex QColumnView.indexAt(None self, QPoint _point)"""
        return QModelIndex()
    def setResizeGripsVisible(self, _visible):
        """None QColumnView.setResizeGripsVisible(None self, bool _visible)"""
        return None
    def setPreviewWidget(self, _widget):
        """None QColumnView.setPreviewWidget(None self, QWidget _widget)"""
        return None
    def setColumnWidths(self, _list):
        """None QColumnView.setColumnWidths(None self, list-of-int _list)"""
        return None
    def resizeGripsVisible(self):
        """bool QColumnView.resizeGripsVisible(None self)"""
        return bool()
    def previewWidget(self):
        """QWidget QColumnView.previewWidget(None self)"""
        return QWidget()
    def columnWidths(self):
        """list-of-int QColumnView.columnWidths(None self)"""
        return [int()]


class QColorDialog(QDialog):
    """"""
    ShowAlphaChannel = int() # QColorDialog.ColorDialogOption enum
    NoButtons = int() # QColorDialog.ColorDialogOption enum
    DontUseNativeDialog = int() # QColorDialog.ColorDialogOption enum

    def __init__(self, _parent):
        """None QColorDialog.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _initial, _parent):
        """None QColorDialog.__init__(None self, QColor _initial, QWidget _parent)"""
        return None
    def setVisible(self, _visible):
        """None QColorDialog.setVisible(None self, bool _visible)"""
        return None
    def open(self):
        """None QColorDialog.open(None self)"""
        return None
    def open(self, _receiver, _member):
        """None QColorDialog.open(None self, QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(self, _receiver):
        """None QColorDialog.open(None self, callable _receiver)"""
        return None
    def options(self):
        """QColorDialog.ColorDialogOptions QColorDialog.options(None self)"""
        return QColorDialog.ColorDialogOptions()
    def setOptions(self, _options):
        """None QColorDialog.setOptions(None self, QColorDialog.ColorDialogOptions _options)"""
        return None
    def testOption(self, _option):
        """bool QColorDialog.testOption(None self, QColorDialog.ColorDialogOption _option)"""
        return bool()
    def setOption(self, _option, _on):
        """None QColorDialog.setOption(None self, QColorDialog.ColorDialogOption _option, bool _on)"""
        return None
    def selectedColor(self):
        """QColor QColorDialog.selectedColor(None self)"""
        return QColor()
    def currentColor(self):
        """QColor QColorDialog.currentColor(None self)"""
        return QColor()
    def setCurrentColor(self, _color):
        """None QColorDialog.setCurrentColor(None self, QColor _color)"""
        return None
    def done(self, _result):
        """None QColorDialog.done(None self, int _result)"""
        return None
    def changeEvent(self, _e):
        """None QColorDialog.changeEvent(None self, QEvent _e)"""
        return None
    def setStandardColor(self):
        """int QColorDialog.setStandardColor(None self)"""
        return int()
    def setCustomColor(self):
        """int QColorDialog.setCustomColor(None self)"""
        return int()
    def customColor(self):
        """int QColorDialog.customColor(None self)"""
        return int()
    def customCount(self):
        """int QColorDialog.customCount(None self)"""
        return int()
    def getRgba(self, _initial, _ok, _parent):
        """int QColorDialog.getRgba(None self, int _initial, bool _ok, QWidget _parent)"""
        return int()
    def getColor(self, _initial, _parent):
        """QColor QColorDialog.getColor(None self, QColor _initial, QWidget _parent)"""
        return QColor()
    def getColor(self, _initial, _parent, _title, _options):
        """QColor QColorDialog.getColor(None self, QColor _initial, QWidget _parent, QString _title, QColorDialog.ColorDialogOptions _options)"""
        return QColor()


class QComboBox(QWidget):
    """"""
    AdjustToContents = int() # QComboBox.SizeAdjustPolicy enum
    AdjustToContentsOnFirstShow = int() # QComboBox.SizeAdjustPolicy enum
    AdjustToMinimumContentsLength = int() # QComboBox.SizeAdjustPolicy enum
    AdjustToMinimumContentsLengthWithIcon = int() # QComboBox.SizeAdjustPolicy enum

    NoInsert = int() # QComboBox.InsertPolicy enum
    InsertAtTop = int() # QComboBox.InsertPolicy enum
    InsertAtCurrent = int() # QComboBox.InsertPolicy enum
    InsertAtBottom = int() # QComboBox.InsertPolicy enum
    InsertAfterCurrent = int() # QComboBox.InsertPolicy enum
    InsertBeforeCurrent = int() # QComboBox.InsertPolicy enum
    InsertAlphabetically = int() # QComboBox.InsertPolicy enum

    def __init__(self, _parent):
        """None QComboBox.__init__(None self, QWidget _parent)"""
        return None
    def inputMethodQuery(self):
        """Qt.InputMethodQuery QComboBox.inputMethodQuery(None self)"""
        return Qt.InputMethodQuery()
    def inputMethodEvent(self):
        """QInputMethodEvent QComboBox.inputMethodEvent(None self)"""
        return QInputMethodEvent()
    def contextMenuEvent(self, _e):
        """None QComboBox.contextMenuEvent(None self, QContextMenuEvent _e)"""
        return None
    def wheelEvent(self, _e):
        """None QComboBox.wheelEvent(None self, QWheelEvent _e)"""
        return None
    def keyReleaseEvent(self, _e):
        """None QComboBox.keyReleaseEvent(None self, QKeyEvent _e)"""
        return None
    def keyPressEvent(self, _e):
        """None QComboBox.keyPressEvent(None self, QKeyEvent _e)"""
        return None
    def mouseReleaseEvent(self, _e):
        """None QComboBox.mouseReleaseEvent(None self, QMouseEvent _e)"""
        return None
    def mousePressEvent(self, _e):
        """None QComboBox.mousePressEvent(None self, QMouseEvent _e)"""
        return None
    def hideEvent(self, _e):
        """None QComboBox.hideEvent(None self, QHideEvent _e)"""
        return None
    def showEvent(self, _e):
        """None QComboBox.showEvent(None self, QShowEvent _e)"""
        return None
    def paintEvent(self, _e):
        """None QComboBox.paintEvent(None self, QPaintEvent _e)"""
        return None
    def resizeEvent(self, _e):
        """None QComboBox.resizeEvent(None self, QResizeEvent _e)"""
        return None
    def changeEvent(self, _e):
        """None QComboBox.changeEvent(None self, QEvent _e)"""
        return None
    def focusOutEvent(self, _e):
        """None QComboBox.focusOutEvent(None self, QFocusEvent _e)"""
        return None
    def focusInEvent(self, _e):
        """None QComboBox.focusInEvent(None self, QFocusEvent _e)"""
        return None
    def initStyleOption(self, _option):
        """None QComboBox.initStyleOption(None self, QStyleOptionComboBox _option)"""
        return None
    def setEditText(self, _text):
        """None QComboBox.setEditText(None self, QString _text)"""
        return None
    def clearEditText(self):
        """None QComboBox.clearEditText(None self)"""
        return None
    def clear(self):
        """None QComboBox.clear(None self)"""
        return None
    def insertSeparator(self, _index):
        """None QComboBox.insertSeparator(None self, int _index)"""
        return None
    def completer(self):
        """QCompleter QComboBox.completer(None self)"""
        return QCompleter()
    def setCompleter(self, _c):
        """None QComboBox.setCompleter(None self, QCompleter _c)"""
        return None
    def event(self, _event):
        """bool QComboBox.event(None self, QEvent _event)"""
        return bool()
    def hidePopup(self):
        """None QComboBox.hidePopup(None self)"""
        return None
    def showPopup(self):
        """None QComboBox.showPopup(None self)"""
        return None
    def minimumSizeHint(self):
        """QSize QComboBox.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QComboBox.sizeHint(None self)"""
        return QSize()
    def setView(self, _itemView):
        """None QComboBox.setView(None self, QAbstractItemView _itemView)"""
        return None
    def view(self):
        """QAbstractItemView QComboBox.view(None self)"""
        return QAbstractItemView()
    def setItemData(self, _index, _value, _role):
        """None QComboBox.setItemData(None self, int _index, QVariant _value, int _role)"""
        return None
    def setItemIcon(self, _index, _icon):
        """None QComboBox.setItemIcon(None self, int _index, QIcon _icon)"""
        return None
    def setItemText(self, _index, _text):
        """None QComboBox.setItemText(None self, int _index, QString _text)"""
        return None
    def removeItem(self, _index):
        """None QComboBox.removeItem(None self, int _index)"""
        return None
    def insertItems(self, _index, _texts):
        """None QComboBox.insertItems(None self, int _index, QStringList _texts)"""
        return None
    def insertItem(self, _index, _text, _userData):
        """None QComboBox.insertItem(None self, int _index, QString _text, QVariant _userData)"""
        return None
    def insertItem(self, _index, _icon, _text, _userData):
        """None QComboBox.insertItem(None self, int _index, QIcon _icon, QString _text, QVariant _userData)"""
        return None
    def addItem(self, _text, _userData):
        """None QComboBox.addItem(None self, QString _text, QVariant _userData)"""
        return None
    def addItem(self, _icon, _text, _userData):
        """None QComboBox.addItem(None self, QIcon _icon, QString _text, QVariant _userData)"""
        return None
    def addItems(self, _texts):
        """None QComboBox.addItems(None self, QStringList _texts)"""
        return None
    def itemData(self, _index, _role):
        """QVariant QComboBox.itemData(None self, int _index, int _role)"""
        return QVariant()
    def itemIcon(self, _index):
        """QIcon QComboBox.itemIcon(None self, int _index)"""
        return QIcon()
    def itemText(self, _index):
        """QString QComboBox.itemText(None self, int _index)"""
        return QString()
    def currentText(self):
        """QString QComboBox.currentText(None self)"""
        return QString()
    def setCurrentIndex(self, _index):
        """None QComboBox.setCurrentIndex(None self, int _index)"""
        return None
    def currentIndex(self):
        """int QComboBox.currentIndex(None self)"""
        return int()
    def setModelColumn(self, _visibleColumn):
        """None QComboBox.setModelColumn(None self, int _visibleColumn)"""
        return None
    def modelColumn(self):
        """int QComboBox.modelColumn(None self)"""
        return int()
    def setRootModelIndex(self, _index):
        """None QComboBox.setRootModelIndex(None self, QModelIndex _index)"""
        return None
    def rootModelIndex(self):
        """QModelIndex QComboBox.rootModelIndex(None self)"""
        return QModelIndex()
    def setModel(self, _model):
        """None QComboBox.setModel(None self, QAbstractItemModel _model)"""
        return None
    def model(self):
        """QAbstractItemModel QComboBox.model(None self)"""
        return QAbstractItemModel()
    def setItemDelegate(self, _delegate):
        """None QComboBox.setItemDelegate(None self, QAbstractItemDelegate _delegate)"""
        return None
    def itemDelegate(self):
        """QAbstractItemDelegate QComboBox.itemDelegate(None self)"""
        return QAbstractItemDelegate()
    def validator(self):
        """QValidator QComboBox.validator(None self)"""
        return QValidator()
    def setValidator(self, _v):
        """None QComboBox.setValidator(None self, QValidator _v)"""
        return None
    def lineEdit(self):
        """QLineEdit QComboBox.lineEdit(None self)"""
        return QLineEdit()
    def setLineEdit(self, _edit):
        """None QComboBox.setLineEdit(None self, QLineEdit _edit)"""
        return None
    def setEditable(self, _editable):
        """None QComboBox.setEditable(None self, bool _editable)"""
        return None
    def isEditable(self):
        """bool QComboBox.isEditable(None self)"""
        return bool()
    def setIconSize(self, _size):
        """None QComboBox.setIconSize(None self, QSize _size)"""
        return None
    def iconSize(self):
        """QSize QComboBox.iconSize(None self)"""
        return QSize()
    def setMinimumContentsLength(self, _characters):
        """None QComboBox.setMinimumContentsLength(None self, int _characters)"""
        return None
    def minimumContentsLength(self):
        """int QComboBox.minimumContentsLength(None self)"""
        return int()
    def setSizeAdjustPolicy(self, _policy):
        """None QComboBox.setSizeAdjustPolicy(None self, QComboBox.SizeAdjustPolicy _policy)"""
        return None
    def sizeAdjustPolicy(self):
        """QComboBox.SizeAdjustPolicy QComboBox.sizeAdjustPolicy(None self)"""
        return QComboBox.SizeAdjustPolicy()
    def setInsertPolicy(self, _policy):
        """None QComboBox.setInsertPolicy(None self, QComboBox.InsertPolicy _policy)"""
        return None
    def insertPolicy(self):
        """QComboBox.InsertPolicy QComboBox.insertPolicy(None self)"""
        return QComboBox.InsertPolicy()
    def findData(self, _data, _role, _flags):
        """int QComboBox.findData(None self, QVariant _data, int _role, Qt.MatchFlags _flags)"""
        return int()
    def findText(self, _text, _flags):
        """int QComboBox.findText(None self, QString _text, Qt.MatchFlags _flags)"""
        return int()
    def hasFrame(self):
        """bool QComboBox.hasFrame(None self)"""
        return bool()
    def setFrame(self):
        """bool QComboBox.setFrame(None self)"""
        return bool()
    def setDuplicatesEnabled(self, _enable):
        """None QComboBox.setDuplicatesEnabled(None self, bool _enable)"""
        return None
    def duplicatesEnabled(self):
        """bool QComboBox.duplicatesEnabled(None self)"""
        return bool()
    def setAutoCompletionCaseSensitivity(self, _sensitivity):
        """None QComboBox.setAutoCompletionCaseSensitivity(None self, Qt.CaseSensitivity _sensitivity)"""
        return None
    def autoCompletionCaseSensitivity(self):
        """Qt.CaseSensitivity QComboBox.autoCompletionCaseSensitivity(None self)"""
        return Qt.CaseSensitivity()
    def setAutoCompletion(self, _enable):
        """None QComboBox.setAutoCompletion(None self, bool _enable)"""
        return None
    def autoCompletion(self):
        """bool QComboBox.autoCompletion(None self)"""
        return bool()
    def maxCount(self):
        """int QComboBox.maxCount(None self)"""
        return int()
    def setMaxCount(self, _max):
        """None QComboBox.setMaxCount(None self, int _max)"""
        return None
    def __len__(self):
        """ QComboBox.__len__(None self)"""
        return ()
    def count(self):
        """int QComboBox.count(None self)"""
        return int()
    def setMaxVisibleItems(self, _maxItems):
        """None QComboBox.setMaxVisibleItems(None self, int _maxItems)"""
        return None
    def maxVisibleItems(self):
        """int QComboBox.maxVisibleItems(None self)"""
        return int()


class QCompleter(QObject):
    """"""
    UnsortedModel = int() # QCompleter.ModelSorting enum
    CaseSensitivelySortedModel = int() # QCompleter.ModelSorting enum
    CaseInsensitivelySortedModel = int() # QCompleter.ModelSorting enum

    PopupCompletion = int() # QCompleter.CompletionMode enum
    UnfilteredPopupCompletion = int() # QCompleter.CompletionMode enum
    InlineCompletion = int() # QCompleter.CompletionMode enum

    def __init__(self, _parent):
        """None QCompleter.__init__(None self, QObject _parent)"""
        return None
    def __init__(self, _model, _parent):
        """None QCompleter.__init__(None self, QAbstractItemModel _model, QObject _parent)"""
        return None
    def __init__(self, _list, _parent):
        """None QCompleter.__init__(None self, QStringList _list, QObject _parent)"""
        return None
    def setMaxVisibleItems(self, _maxItems):
        """None QCompleter.setMaxVisibleItems(None self, int _maxItems)"""
        return None
    def maxVisibleItems(self):
        """int QCompleter.maxVisibleItems(None self)"""
        return int()
    def event(self):
        """QEvent QCompleter.event(None self)"""
        return QEvent()
    def eventFilter(self, _o, _e):
        """bool QCompleter.eventFilter(None self, QObject _o, QEvent _e)"""
        return bool()
    def setWrapAround(self, _wrap):
        """None QCompleter.setWrapAround(None self, bool _wrap)"""
        return None
    def setCompletionPrefix(self, _prefix):
        """None QCompleter.setCompletionPrefix(None self, QString _prefix)"""
        return None
    def complete(self, _rect):
        """None QCompleter.complete(None self, QRect _rect)"""
        return None
    def wrapAround(self):
        """bool QCompleter.wrapAround(None self)"""
        return bool()
    def splitPath(self, _path):
        """QStringList QCompleter.splitPath(None self, QString _path)"""
        return QStringList()
    def pathFromIndex(self, _index):
        """QString QCompleter.pathFromIndex(None self, QModelIndex _index)"""
        return QString()
    def completionPrefix(self):
        """QString QCompleter.completionPrefix(None self)"""
        return QString()
    def completionModel(self):
        """QAbstractItemModel QCompleter.completionModel(None self)"""
        return QAbstractItemModel()
    def currentCompletion(self):
        """QString QCompleter.currentCompletion(None self)"""
        return QString()
    def currentIndex(self):
        """QModelIndex QCompleter.currentIndex(None self)"""
        return QModelIndex()
    def currentRow(self):
        """int QCompleter.currentRow(None self)"""
        return int()
    def setCurrentRow(self, _row):
        """bool QCompleter.setCurrentRow(None self, int _row)"""
        return bool()
    def completionCount(self):
        """int QCompleter.completionCount(None self)"""
        return int()
    def completionRole(self):
        """int QCompleter.completionRole(None self)"""
        return int()
    def setCompletionRole(self, _role):
        """None QCompleter.setCompletionRole(None self, int _role)"""
        return None
    def completionColumn(self):
        """int QCompleter.completionColumn(None self)"""
        return int()
    def setCompletionColumn(self, _column):
        """None QCompleter.setCompletionColumn(None self, int _column)"""
        return None
    def modelSorting(self):
        """QCompleter.ModelSorting QCompleter.modelSorting(None self)"""
        return QCompleter.ModelSorting()
    def setModelSorting(self, _sorting):
        """None QCompleter.setModelSorting(None self, QCompleter.ModelSorting _sorting)"""
        return None
    def caseSensitivity(self):
        """Qt.CaseSensitivity QCompleter.caseSensitivity(None self)"""
        return Qt.CaseSensitivity()
    def setCaseSensitivity(self, _caseSensitivity):
        """None QCompleter.setCaseSensitivity(None self, Qt.CaseSensitivity _caseSensitivity)"""
        return None
    def setPopup(self, _popup):
        """None QCompleter.setPopup(None self, QAbstractItemView _popup)"""
        return None
    def popup(self):
        """QAbstractItemView QCompleter.popup(None self)"""
        return QAbstractItemView()
    def completionMode(self):
        """QCompleter.CompletionMode QCompleter.completionMode(None self)"""
        return QCompleter.CompletionMode()
    def setCompletionMode(self, _mode):
        """None QCompleter.setCompletionMode(None self, QCompleter.CompletionMode _mode)"""
        return None
    def model(self):
        """QAbstractItemModel QCompleter.model(None self)"""
        return QAbstractItemModel()
    def setModel(self, _c):
        """None QCompleter.setModel(None self, QAbstractItemModel _c)"""
        return None
    def widget(self):
        """QWidget QCompleter.widget(None self)"""
        return QWidget()
    def setWidget(self, _widget):
        """None QCompleter.setWidget(None self, QWidget _widget)"""
        return None


class QCursor():
    """"""
    def __init__(self):
        """None QCursor.__init__(None self)"""
        return None
    def __init__(self, _shape):
        """None QCursor.__init__(None self, Qt.CursorShape _shape)"""
        return None
    def __init__(self, _bitmap, _mask, _hotX, _hotY):
        """None QCursor.__init__(None self, QBitmap _bitmap, QBitmap _mask, int _hotX, int _hotY)"""
        return None
    def __init__(self, _pixmap, _hotX, _hotY):
        """None QCursor.__init__(None self, QPixmap _pixmap, int _hotX, int _hotY)"""
        return None
    def __init__(self, _cursor):
        """None QCursor.__init__(None self, QCursor _cursor)"""
        return None
    def __init__(self, _variant):
        """None QCursor.__init__(None self, QVariant _variant)"""
        return None
    def setPos(self, _x, _y):
        """None QCursor.setPos(None self, int _x, int _y)"""
        return None
    def setPos(self, _p):
        """None QCursor.setPos(None self, QPoint _p)"""
        return None
    def pos(self):
        """QPoint QCursor.pos(None self)"""
        return QPoint()
    def hotSpot(self):
        """QPoint QCursor.hotSpot(None self)"""
        return QPoint()
    def pixmap(self):
        """QPixmap QCursor.pixmap(None self)"""
        return QPixmap()
    def mask(self):
        """QBitmap QCursor.mask(None self)"""
        return QBitmap()
    def bitmap(self):
        """QBitmap QCursor.bitmap(None self)"""
        return QBitmap()
    def setShape(self, _newShape):
        """None QCursor.setShape(None self, Qt.CursorShape _newShape)"""
        return None
    def shape(self):
        """Qt.CursorShape QCursor.shape(None self)"""
        return Qt.CursorShape()


class QDataWidgetMapper(QObject):
    """"""
    AutoSubmit = int() # QDataWidgetMapper.SubmitPolicy enum
    ManualSubmit = int() # QDataWidgetMapper.SubmitPolicy enum

    def __init__(self, _parent):
        """None QDataWidgetMapper.__init__(None self, QObject _parent)"""
        return None
    def toPrevious(self):
        """None QDataWidgetMapper.toPrevious(None self)"""
        return None
    def toNext(self):
        """None QDataWidgetMapper.toNext(None self)"""
        return None
    def toLast(self):
        """None QDataWidgetMapper.toLast(None self)"""
        return None
    def toFirst(self):
        """None QDataWidgetMapper.toFirst(None self)"""
        return None
    def submit(self):
        """bool QDataWidgetMapper.submit(None self)"""
        return bool()
    def setCurrentModelIndex(self, _index):
        """None QDataWidgetMapper.setCurrentModelIndex(None self, QModelIndex _index)"""
        return None
    def setCurrentIndex(self, _index):
        """None QDataWidgetMapper.setCurrentIndex(None self, int _index)"""
        return None
    def revert(self):
        """None QDataWidgetMapper.revert(None self)"""
        return None
    def currentIndex(self):
        """int QDataWidgetMapper.currentIndex(None self)"""
        return int()
    def clearMapping(self):
        """None QDataWidgetMapper.clearMapping(None self)"""
        return None
    def mappedWidgetAt(self, _section):
        """QWidget QDataWidgetMapper.mappedWidgetAt(None self, int _section)"""
        return QWidget()
    def mappedSection(self, _widget):
        """int QDataWidgetMapper.mappedSection(None self, QWidget _widget)"""
        return int()
    def mappedPropertyName(self, _widget):
        """QByteArray QDataWidgetMapper.mappedPropertyName(None self, QWidget _widget)"""
        return QByteArray()
    def removeMapping(self, _widget):
        """None QDataWidgetMapper.removeMapping(None self, QWidget _widget)"""
        return None
    def addMapping(self, _widget, _section):
        """None QDataWidgetMapper.addMapping(None self, QWidget _widget, int _section)"""
        return None
    def addMapping(self, _widget, _section, _propertyName):
        """None QDataWidgetMapper.addMapping(None self, QWidget _widget, int _section, QByteArray _propertyName)"""
        return None
    def submitPolicy(self):
        """QDataWidgetMapper.SubmitPolicy QDataWidgetMapper.submitPolicy(None self)"""
        return QDataWidgetMapper.SubmitPolicy()
    def setSubmitPolicy(self, _policy):
        """None QDataWidgetMapper.setSubmitPolicy(None self, QDataWidgetMapper.SubmitPolicy _policy)"""
        return None
    def orientation(self):
        """Qt.Orientation QDataWidgetMapper.orientation(None self)"""
        return Qt.Orientation()
    def setOrientation(self, _aOrientation):
        """None QDataWidgetMapper.setOrientation(None self, Qt.Orientation _aOrientation)"""
        return None
    def rootIndex(self):
        """QModelIndex QDataWidgetMapper.rootIndex(None self)"""
        return QModelIndex()
    def setRootIndex(self, _index):
        """None QDataWidgetMapper.setRootIndex(None self, QModelIndex _index)"""
        return None
    def itemDelegate(self):
        """QAbstractItemDelegate QDataWidgetMapper.itemDelegate(None self)"""
        return QAbstractItemDelegate()
    def setItemDelegate(self, _delegate):
        """None QDataWidgetMapper.setItemDelegate(None self, QAbstractItemDelegate _delegate)"""
        return None
    def model(self):
        """QAbstractItemModel QDataWidgetMapper.model(None self)"""
        return QAbstractItemModel()
    def setModel(self, _model):
        """None QDataWidgetMapper.setModel(None self, QAbstractItemModel _model)"""
        return None


class QDateTimeEdit(QAbstractSpinBox):
    """"""
    NoSection = int() # QDateTimeEdit.Section enum
    AmPmSection = int() # QDateTimeEdit.Section enum
    MSecSection = int() # QDateTimeEdit.Section enum
    SecondSection = int() # QDateTimeEdit.Section enum
    MinuteSection = int() # QDateTimeEdit.Section enum
    HourSection = int() # QDateTimeEdit.Section enum
    DaySection = int() # QDateTimeEdit.Section enum
    MonthSection = int() # QDateTimeEdit.Section enum
    YearSection = int() # QDateTimeEdit.Section enum
    TimeSections_Mask = int() # QDateTimeEdit.Section enum
    DateSections_Mask = int() # QDateTimeEdit.Section enum

    def __init__(self, _parent):
        """None QDateTimeEdit.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _datetime, _parent):
        """None QDateTimeEdit.__init__(None self, QDateTime _datetime, QWidget _parent)"""
        return None
    def __init__(self, _date, _parent):
        """None QDateTimeEdit.__init__(None self, QDate _date, QWidget _parent)"""
        return None
    def __init__(self, _time, _parent):
        """None QDateTimeEdit.__init__(None self, QTime _time, QWidget _parent)"""
        return None
    def setTimeSpec(self, _spec):
        """None QDateTimeEdit.setTimeSpec(None self, Qt.TimeSpec _spec)"""
        return None
    def timeSpec(self):
        """Qt.TimeSpec QDateTimeEdit.timeSpec(None self)"""
        return Qt.TimeSpec()
    def setCalendarWidget(self, _calendarWidget):
        """None QDateTimeEdit.setCalendarWidget(None self, QCalendarWidget _calendarWidget)"""
        return None
    def calendarWidget(self):
        """QCalendarWidget QDateTimeEdit.calendarWidget(None self)"""
        return QCalendarWidget()
    def setDateTimeRange(self, _min, _max):
        """None QDateTimeEdit.setDateTimeRange(None self, QDateTime _min, QDateTime _max)"""
        return None
    def setMaximumDateTime(self, _dt):
        """None QDateTimeEdit.setMaximumDateTime(None self, QDateTime _dt)"""
        return None
    def clearMaximumDateTime(self):
        """None QDateTimeEdit.clearMaximumDateTime(None self)"""
        return None
    def maximumDateTime(self):
        """QDateTime QDateTimeEdit.maximumDateTime(None self)"""
        return QDateTime()
    def setMinimumDateTime(self, _dt):
        """None QDateTimeEdit.setMinimumDateTime(None self, QDateTime _dt)"""
        return None
    def clearMinimumDateTime(self):
        """None QDateTimeEdit.clearMinimumDateTime(None self)"""
        return None
    def minimumDateTime(self):
        """QDateTime QDateTimeEdit.minimumDateTime(None self)"""
        return QDateTime()
    def stepEnabled(self):
        """QAbstractSpinBox.StepEnabled QDateTimeEdit.stepEnabled(None self)"""
        return QAbstractSpinBox.StepEnabled()
    def textFromDateTime(self, _dt):
        """QString QDateTimeEdit.textFromDateTime(None self, QDateTime _dt)"""
        return QString()
    def dateTimeFromText(self, _text):
        """QDateTime QDateTimeEdit.dateTimeFromText(None self, QString _text)"""
        return QDateTime()
    def fixup(self, _input):
        """None QDateTimeEdit.fixup(None self, QString _input)"""
        return None
    def fixup(self, _input):
        """None QDateTimeEdit.fixup(None self, QString _input)"""
        return None
    def validate(self, _input, _pos):
        """QValidator.State QDateTimeEdit.validate(None self, QString _input, int _pos)"""
        return QValidator.State()
    def validate(self, _input, _pos):
        """QValidator.State QDateTimeEdit.validate(None self, QString _input, int _pos)"""
        return QValidator.State()
    def paintEvent(self, _event):
        """None QDateTimeEdit.paintEvent(None self, QPaintEvent _event)"""
        return None
    def mousePressEvent(self, _event):
        """None QDateTimeEdit.mousePressEvent(None self, QMouseEvent _event)"""
        return None
    def focusNextPrevChild(self, _next):
        """bool QDateTimeEdit.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def focusInEvent(self, _e):
        """None QDateTimeEdit.focusInEvent(None self, QFocusEvent _e)"""
        return None
    def wheelEvent(self, _e):
        """None QDateTimeEdit.wheelEvent(None self, QWheelEvent _e)"""
        return None
    def keyPressEvent(self, _e):
        """None QDateTimeEdit.keyPressEvent(None self, QKeyEvent _e)"""
        return None
    def initStyleOption(self, _option):
        """None QDateTimeEdit.initStyleOption(None self, QStyleOptionSpinBox _option)"""
        return None
    def setTime(self, _time):
        """None QDateTimeEdit.setTime(None self, QTime _time)"""
        return None
    def setDate(self, _date):
        """None QDateTimeEdit.setDate(None self, QDate _date)"""
        return None
    def setDateTime(self, _dateTime):
        """None QDateTimeEdit.setDateTime(None self, QDateTime _dateTime)"""
        return None
    def sectionCount(self):
        """int QDateTimeEdit.sectionCount(None self)"""
        return int()
    def setCurrentSectionIndex(self, _index):
        """None QDateTimeEdit.setCurrentSectionIndex(None self, int _index)"""
        return None
    def currentSectionIndex(self):
        """int QDateTimeEdit.currentSectionIndex(None self)"""
        return int()
    def sectionAt(self, _index):
        """QDateTimeEdit.Section QDateTimeEdit.sectionAt(None self, int _index)"""
        return QDateTimeEdit.Section()
    def event(self, _e):
        """bool QDateTimeEdit.event(None self, QEvent _e)"""
        return bool()
    def stepBy(self, _steps):
        """None QDateTimeEdit.stepBy(None self, int _steps)"""
        return None
    def clear(self):
        """None QDateTimeEdit.clear(None self)"""
        return None
    def sizeHint(self):
        """QSize QDateTimeEdit.sizeHint(None self)"""
        return QSize()
    def setSelectedSection(self, _section):
        """None QDateTimeEdit.setSelectedSection(None self, QDateTimeEdit.Section _section)"""
        return None
    def setCalendarPopup(self, _enable):
        """None QDateTimeEdit.setCalendarPopup(None self, bool _enable)"""
        return None
    def calendarPopup(self):
        """bool QDateTimeEdit.calendarPopup(None self)"""
        return bool()
    def setDisplayFormat(self, _format):
        """None QDateTimeEdit.setDisplayFormat(None self, QString _format)"""
        return None
    def displayFormat(self):
        """QString QDateTimeEdit.displayFormat(None self)"""
        return QString()
    def sectionText(self, _s):
        """QString QDateTimeEdit.sectionText(None self, QDateTimeEdit.Section _s)"""
        return QString()
    def setCurrentSection(self, _section):
        """None QDateTimeEdit.setCurrentSection(None self, QDateTimeEdit.Section _section)"""
        return None
    def currentSection(self):
        """QDateTimeEdit.Section QDateTimeEdit.currentSection(None self)"""
        return QDateTimeEdit.Section()
    def displayedSections(self):
        """QDateTimeEdit.Sections QDateTimeEdit.displayedSections(None self)"""
        return QDateTimeEdit.Sections()
    def setTimeRange(self, _min, _max):
        """None QDateTimeEdit.setTimeRange(None self, QTime _min, QTime _max)"""
        return None
    def clearMaximumTime(self):
        """None QDateTimeEdit.clearMaximumTime(None self)"""
        return None
    def setMaximumTime(self, _max):
        """None QDateTimeEdit.setMaximumTime(None self, QTime _max)"""
        return None
    def maximumTime(self):
        """QTime QDateTimeEdit.maximumTime(None self)"""
        return QTime()
    def clearMinimumTime(self):
        """None QDateTimeEdit.clearMinimumTime(None self)"""
        return None
    def setMinimumTime(self, _min):
        """None QDateTimeEdit.setMinimumTime(None self, QTime _min)"""
        return None
    def minimumTime(self):
        """QTime QDateTimeEdit.minimumTime(None self)"""
        return QTime()
    def setDateRange(self, _min, _max):
        """None QDateTimeEdit.setDateRange(None self, QDate _min, QDate _max)"""
        return None
    def clearMaximumDate(self):
        """None QDateTimeEdit.clearMaximumDate(None self)"""
        return None
    def setMaximumDate(self, _max):
        """None QDateTimeEdit.setMaximumDate(None self, QDate _max)"""
        return None
    def maximumDate(self):
        """QDate QDateTimeEdit.maximumDate(None self)"""
        return QDate()
    def clearMinimumDate(self):
        """None QDateTimeEdit.clearMinimumDate(None self)"""
        return None
    def setMinimumDate(self, _min):
        """None QDateTimeEdit.setMinimumDate(None self, QDate _min)"""
        return None
    def minimumDate(self):
        """QDate QDateTimeEdit.minimumDate(None self)"""
        return QDate()
    def time(self):
        """QTime QDateTimeEdit.time(None self)"""
        return QTime()
    def date(self):
        """QDate QDateTimeEdit.date(None self)"""
        return QDate()
    def dateTime(self):
        """QDateTime QDateTimeEdit.dateTime(None self)"""
        return QDateTime()


class QTimeEdit(QDateTimeEdit):
    """"""
    def __init__(self, _parent):
        """None QTimeEdit.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _time, _parent):
        """None QTimeEdit.__init__(None self, QTime _time, QWidget _parent)"""
        return None


class QDateEdit(QDateTimeEdit):
    """"""
    def __init__(self, _parent):
        """None QDateEdit.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _date, _parent):
        """None QDateEdit.__init__(None self, QDate _date, QWidget _parent)"""
        return None


class QDesktopServices():
    """"""
    DesktopLocation = int() # QDesktopServices.StandardLocation enum
    DocumentsLocation = int() # QDesktopServices.StandardLocation enum
    FontsLocation = int() # QDesktopServices.StandardLocation enum
    ApplicationsLocation = int() # QDesktopServices.StandardLocation enum
    MusicLocation = int() # QDesktopServices.StandardLocation enum
    MoviesLocation = int() # QDesktopServices.StandardLocation enum
    PicturesLocation = int() # QDesktopServices.StandardLocation enum
    TempLocation = int() # QDesktopServices.StandardLocation enum
    HomeLocation = int() # QDesktopServices.StandardLocation enum
    DataLocation = int() # QDesktopServices.StandardLocation enum
    CacheLocation = int() # QDesktopServices.StandardLocation enum

    def __init__(self):
        """None QDesktopServices.__init__(None self)"""
        return None
    def __init__(self):
        """QDesktopServices QDesktopServices.__init__(None self)"""
        return QDesktopServices()
    def displayName(self, _type):
        """QString QDesktopServices.displayName(None self, QDesktopServices.StandardLocation _type)"""
        return QString()
    def storageLocation(self, _type):
        """QString QDesktopServices.storageLocation(None self, QDesktopServices.StandardLocation _type)"""
        return QString()
    def unsetUrlHandler(self, _scheme):
        """None QDesktopServices.unsetUrlHandler(None self, QString _scheme)"""
        return None
    def setUrlHandler(self, _scheme, _receiver, _method):
        """None QDesktopServices.setUrlHandler(None self, QString _scheme, QObject _receiver, str _method)"""
        return None
    def setUrlHandler(self, _scheme, _method):
        """None QDesktopServices.setUrlHandler(None self, QString _scheme, callable _method)"""
        return None
    def openUrl(self, _url):
        """bool QDesktopServices.openUrl(None self, QUrl _url)"""
        return bool()


class QDesktopWidget(QWidget):
    """"""
    def __init__(self):
        """None QDesktopWidget.__init__(None self)"""
        return None
    def resizeEvent(self, _e):
        """None QDesktopWidget.resizeEvent(None self, QResizeEvent _e)"""
        return None
    def availableGeometry(self, _screen):
        """QRect QDesktopWidget.availableGeometry(None self, int _screen)"""
        return QRect()
    def availableGeometry(self, _widget):
        """QRect QDesktopWidget.availableGeometry(None self, QWidget _widget)"""
        return QRect()
    def availableGeometry(self, _point):
        """QRect QDesktopWidget.availableGeometry(None self, QPoint _point)"""
        return QRect()
    def screenGeometry(self, _screen):
        """QRect QDesktopWidget.screenGeometry(None self, int _screen)"""
        return QRect()
    def screenGeometry(self, _widget):
        """QRect QDesktopWidget.screenGeometry(None self, QWidget _widget)"""
        return QRect()
    def screenGeometry(self, _point):
        """QRect QDesktopWidget.screenGeometry(None self, QPoint _point)"""
        return QRect()
    def screenCount(self):
        """int QDesktopWidget.screenCount(None self)"""
        return int()
    def screen(self, _screen):
        """QWidget QDesktopWidget.screen(None self, int _screen)"""
        return QWidget()
    def screenNumber(self, _widget):
        """int QDesktopWidget.screenNumber(None self, QWidget _widget)"""
        return int()
    def screenNumber(self):
        """QPoint QDesktopWidget.screenNumber(None self)"""
        return QPoint()
    def primaryScreen(self):
        """int QDesktopWidget.primaryScreen(None self)"""
        return int()
    def numScreens(self):
        """int QDesktopWidget.numScreens(None self)"""
        return int()
    def isVirtualDesktop(self):
        """bool QDesktopWidget.isVirtualDesktop(None self)"""
        return bool()


class QDial(QAbstractSlider):
    """"""
    def __init__(self, _parent):
        """None QDial.__init__(None self, QWidget _parent)"""
        return None
    def sliderChange(self, _change):
        """None QDial.sliderChange(None self, QAbstractSlider.SliderChange _change)"""
        return None
    def mouseMoveEvent(self, _me):
        """None QDial.mouseMoveEvent(None self, QMouseEvent _me)"""
        return None
    def mouseReleaseEvent(self, _me):
        """None QDial.mouseReleaseEvent(None self, QMouseEvent _me)"""
        return None
    def mousePressEvent(self, _me):
        """None QDial.mousePressEvent(None self, QMouseEvent _me)"""
        return None
    def paintEvent(self, _pe):
        """None QDial.paintEvent(None self, QPaintEvent _pe)"""
        return None
    def resizeEvent(self, _re):
        """None QDial.resizeEvent(None self, QResizeEvent _re)"""
        return None
    def event(self, _e):
        """bool QDial.event(None self, QEvent _e)"""
        return bool()
    def initStyleOption(self, _option):
        """None QDial.initStyleOption(None self, QStyleOptionSlider _option)"""
        return None
    def setWrapping(self, _on):
        """None QDial.setWrapping(None self, bool _on)"""
        return None
    def setNotchesVisible(self, _visible):
        """None QDial.setNotchesVisible(None self, bool _visible)"""
        return None
    def minimumSizeHint(self):
        """QSize QDial.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QDial.sizeHint(None self)"""
        return QSize()
    def notchesVisible(self):
        """bool QDial.notchesVisible(None self)"""
        return bool()
    def notchTarget(self):
        """float QDial.notchTarget(None self)"""
        return float()
    def setNotchTarget(self, _target):
        """None QDial.setNotchTarget(None self, float _target)"""
        return None
    def notchSize(self):
        """int QDial.notchSize(None self)"""
        return int()
    def wrapping(self):
        """bool QDial.wrapping(None self)"""
        return bool()


class QDialogButtonBox(QWidget):
    """"""
    NoButton = int() # QDialogButtonBox.StandardButton enum
    Ok = int() # QDialogButtonBox.StandardButton enum
    Save = int() # QDialogButtonBox.StandardButton enum
    SaveAll = int() # QDialogButtonBox.StandardButton enum
    Open = int() # QDialogButtonBox.StandardButton enum
    Yes = int() # QDialogButtonBox.StandardButton enum
    YesToAll = int() # QDialogButtonBox.StandardButton enum
    No = int() # QDialogButtonBox.StandardButton enum
    NoToAll = int() # QDialogButtonBox.StandardButton enum
    Abort = int() # QDialogButtonBox.StandardButton enum
    Retry = int() # QDialogButtonBox.StandardButton enum
    Ignore = int() # QDialogButtonBox.StandardButton enum
    Close = int() # QDialogButtonBox.StandardButton enum
    Cancel = int() # QDialogButtonBox.StandardButton enum
    Discard = int() # QDialogButtonBox.StandardButton enum
    Help = int() # QDialogButtonBox.StandardButton enum
    Apply = int() # QDialogButtonBox.StandardButton enum
    Reset = int() # QDialogButtonBox.StandardButton enum
    RestoreDefaults = int() # QDialogButtonBox.StandardButton enum

    InvalidRole = int() # QDialogButtonBox.ButtonRole enum
    AcceptRole = int() # QDialogButtonBox.ButtonRole enum
    RejectRole = int() # QDialogButtonBox.ButtonRole enum
    DestructiveRole = int() # QDialogButtonBox.ButtonRole enum
    ActionRole = int() # QDialogButtonBox.ButtonRole enum
    HelpRole = int() # QDialogButtonBox.ButtonRole enum
    YesRole = int() # QDialogButtonBox.ButtonRole enum
    NoRole = int() # QDialogButtonBox.ButtonRole enum
    ResetRole = int() # QDialogButtonBox.ButtonRole enum
    ApplyRole = int() # QDialogButtonBox.ButtonRole enum

    WinLayout = int() # QDialogButtonBox.ButtonLayout enum
    MacLayout = int() # QDialogButtonBox.ButtonLayout enum
    KdeLayout = int() # QDialogButtonBox.ButtonLayout enum
    GnomeLayout = int() # QDialogButtonBox.ButtonLayout enum

    def __init__(self, _parent):
        """None QDialogButtonBox.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _orientation, _parent):
        """None QDialogButtonBox.__init__(None self, Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def __init__(self, _buttons, _orientation, _parent):
        """None QDialogButtonBox.__init__(None self, QDialogButtonBox.StandardButtons _buttons, Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def event(self, _event):
        """bool QDialogButtonBox.event(None self, QEvent _event)"""
        return bool()
    def changeEvent(self, _event):
        """None QDialogButtonBox.changeEvent(None self, QEvent _event)"""
        return None
    def centerButtons(self):
        """bool QDialogButtonBox.centerButtons(None self)"""
        return bool()
    def setCenterButtons(self, _center):
        """None QDialogButtonBox.setCenterButtons(None self, bool _center)"""
        return None
    def button(self, _which):
        """QPushButton QDialogButtonBox.button(None self, QDialogButtonBox.StandardButton _which)"""
        return QPushButton()
    def standardButton(self, _button):
        """QDialogButtonBox.StandardButton QDialogButtonBox.standardButton(None self, QAbstractButton _button)"""
        return QDialogButtonBox.StandardButton()
    def standardButtons(self):
        """QDialogButtonBox.StandardButtons QDialogButtonBox.standardButtons(None self)"""
        return QDialogButtonBox.StandardButtons()
    def setStandardButtons(self, _buttons):
        """None QDialogButtonBox.setStandardButtons(None self, QDialogButtonBox.StandardButtons _buttons)"""
        return None
    def buttonRole(self, _button):
        """QDialogButtonBox.ButtonRole QDialogButtonBox.buttonRole(None self, QAbstractButton _button)"""
        return QDialogButtonBox.ButtonRole()
    def buttons(self):
        """list-of-QAbstractButton QDialogButtonBox.buttons(None self)"""
        return [QAbstractButton()]
    def clear(self):
        """None QDialogButtonBox.clear(None self)"""
        return None
    def removeButton(self, _button):
        """None QDialogButtonBox.removeButton(None self, QAbstractButton _button)"""
        return None
    def addButton(self, _button, _role):
        """None QDialogButtonBox.addButton(None self, QAbstractButton _button, QDialogButtonBox.ButtonRole _role)"""
        return None
    def addButton(self, _text, _role):
        """QPushButton QDialogButtonBox.addButton(None self, QString _text, QDialogButtonBox.ButtonRole _role)"""
        return QPushButton()
    def addButton(self, _button):
        """QPushButton QDialogButtonBox.addButton(None self, QDialogButtonBox.StandardButton _button)"""
        return QPushButton()
    def orientation(self):
        """Qt.Orientation QDialogButtonBox.orientation(None self)"""
        return Qt.Orientation()
    def setOrientation(self, _orientation):
        """None QDialogButtonBox.setOrientation(None self, Qt.Orientation _orientation)"""
        return None


class QDirModel(QAbstractItemModel):
    """"""
    FileIconRole = int() # QDirModel.Roles enum
    FilePathRole = int() # QDirModel.Roles enum
    FileNameRole = int() # QDirModel.Roles enum

    def __init__(self, _nameFilters, _filters, _sort, _parent):
        """None QDirModel.__init__(None self, QStringList _nameFilters, QDir.Filters _filters, QDir.SortFlags _sort, QObject _parent)"""
        return None
    def __init__(self, _parent):
        """None QDirModel.__init__(None self, QObject _parent)"""
        return None
    def fileInfo(self, _index):
        """QFileInfo QDirModel.fileInfo(None self, QModelIndex _index)"""
        return QFileInfo()
    def fileIcon(self, _index):
        """QIcon QDirModel.fileIcon(None self, QModelIndex _index)"""
        return QIcon()
    def fileName(self, _index):
        """QString QDirModel.fileName(None self, QModelIndex _index)"""
        return QString()
    def filePath(self, _index):
        """QString QDirModel.filePath(None self, QModelIndex _index)"""
        return QString()
    def remove(self, _index):
        """bool QDirModel.remove(None self, QModelIndex _index)"""
        return bool()
    def rmdir(self, _index):
        """bool QDirModel.rmdir(None self, QModelIndex _index)"""
        return bool()
    def mkdir(self, _parent, _name):
        """QModelIndex QDirModel.mkdir(None self, QModelIndex _parent, QString _name)"""
        return QModelIndex()
    def isDir(self, _index):
        """bool QDirModel.isDir(None self, QModelIndex _index)"""
        return bool()
    def refresh(self, _parent):
        """None QDirModel.refresh(None self, QModelIndex _parent)"""
        return None
    def lazyChildCount(self):
        """bool QDirModel.lazyChildCount(None self)"""
        return bool()
    def setLazyChildCount(self, _enable):
        """None QDirModel.setLazyChildCount(None self, bool _enable)"""
        return None
    def isReadOnly(self):
        """bool QDirModel.isReadOnly(None self)"""
        return bool()
    def setReadOnly(self, _enable):
        """None QDirModel.setReadOnly(None self, bool _enable)"""
        return None
    def resolveSymlinks(self):
        """bool QDirModel.resolveSymlinks(None self)"""
        return bool()
    def setResolveSymlinks(self, _enable):
        """None QDirModel.setResolveSymlinks(None self, bool _enable)"""
        return None
    def sorting(self):
        """QDir.SortFlags QDirModel.sorting(None self)"""
        return QDir.SortFlags()
    def setSorting(self, _sort):
        """None QDirModel.setSorting(None self, QDir.SortFlags _sort)"""
        return None
    def filter(self):
        """QDir.Filters QDirModel.filter(None self)"""
        return QDir.Filters()
    def setFilter(self, _filters):
        """None QDirModel.setFilter(None self, QDir.Filters _filters)"""
        return None
    def nameFilters(self):
        """QStringList QDirModel.nameFilters(None self)"""
        return QStringList()
    def setNameFilters(self, _filters):
        """None QDirModel.setNameFilters(None self, QStringList _filters)"""
        return None
    def iconProvider(self):
        """QFileIconProvider QDirModel.iconProvider(None self)"""
        return QFileIconProvider()
    def setIconProvider(self, _provider):
        """None QDirModel.setIconProvider(None self, QFileIconProvider _provider)"""
        return None
    def supportedDropActions(self):
        """Qt.DropActions QDirModel.supportedDropActions(None self)"""
        return Qt.DropActions()
    def dropMimeData(self, _data, _action, _row, _column, _parent):
        """bool QDirModel.dropMimeData(None self, QMimeData _data, Qt.DropAction _action, int _row, int _column, QModelIndex _parent)"""
        return bool()
    def mimeData(self, _indexes):
        """QMimeData QDirModel.mimeData(None self, list-of-QModelIndex _indexes)"""
        return QMimeData()
    def mimeTypes(self):
        """QStringList QDirModel.mimeTypes(None self)"""
        return QStringList()
    def sort(self, _column, _order):
        """None QDirModel.sort(None self, int _column, Qt.SortOrder _order)"""
        return None
    def flags(self, _index):
        """Qt.ItemFlags QDirModel.flags(None self, QModelIndex _index)"""
        return Qt.ItemFlags()
    def hasChildren(self, _parent):
        """bool QDirModel.hasChildren(None self, QModelIndex _parent)"""
        return bool()
    def headerData(self, _section, _orientation, _role):
        """QVariant QDirModel.headerData(None self, int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(self, _index, _value, _role):
        """bool QDirModel.setData(None self, QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def data(self, _index, _role):
        """QVariant QDirModel.data(None self, QModelIndex _index, int _role)"""
        return QVariant()
    def columnCount(self, _parent):
        """int QDirModel.columnCount(None self, QModelIndex _parent)"""
        return int()
    def rowCount(self, _parent):
        """int QDirModel.rowCount(None self, QModelIndex _parent)"""
        return int()
    def parent(self, _child):
        """QModelIndex QDirModel.parent(None self, QModelIndex _child)"""
        return QModelIndex()
    def parent(self):
        """QObject QDirModel.parent(None self)"""
        return QObject()
    def index(self, _row, _column, _parent):
        """QModelIndex QDirModel.index(None self, int _row, int _column, QModelIndex _parent)"""
        return QModelIndex()
    def index(self, _path, _column):
        """QModelIndex QDirModel.index(None self, QString _path, int _column)"""
        return QModelIndex()


class QDockWidget(QWidget):
    """"""
    DockWidgetClosable = int() # QDockWidget.DockWidgetFeature enum
    DockWidgetMovable = int() # QDockWidget.DockWidgetFeature enum
    DockWidgetFloatable = int() # QDockWidget.DockWidgetFeature enum
    DockWidgetVerticalTitleBar = int() # QDockWidget.DockWidgetFeature enum
    AllDockWidgetFeatures = int() # QDockWidget.DockWidgetFeature enum
    NoDockWidgetFeatures = int() # QDockWidget.DockWidgetFeature enum

    def __init__(self, _title, _parent, _flags):
        """None QDockWidget.__init__(None self, QString _title, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(self, _parent, _flags):
        """None QDockWidget.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def event(self, _event):
        """bool QDockWidget.event(None self, QEvent _event)"""
        return bool()
    def paintEvent(self, _event):
        """None QDockWidget.paintEvent(None self, QPaintEvent _event)"""
        return None
    def closeEvent(self, _event):
        """None QDockWidget.closeEvent(None self, QCloseEvent _event)"""
        return None
    def changeEvent(self, _event):
        """None QDockWidget.changeEvent(None self, QEvent _event)"""
        return None
    def initStyleOption(self, _option):
        """None QDockWidget.initStyleOption(None self, QStyleOptionDockWidget _option)"""
        return None
    def titleBarWidget(self):
        """QWidget QDockWidget.titleBarWidget(None self)"""
        return QWidget()
    def setTitleBarWidget(self, _widget):
        """None QDockWidget.setTitleBarWidget(None self, QWidget _widget)"""
        return None
    def toggleViewAction(self):
        """QAction QDockWidget.toggleViewAction(None self)"""
        return QAction()
    def isAreaAllowed(self, _area):
        """bool QDockWidget.isAreaAllowed(None self, Qt.DockWidgetArea _area)"""
        return bool()
    def allowedAreas(self):
        """Qt.DockWidgetAreas QDockWidget.allowedAreas(None self)"""
        return Qt.DockWidgetAreas()
    def setAllowedAreas(self, _areas):
        """None QDockWidget.setAllowedAreas(None self, Qt.DockWidgetAreas _areas)"""
        return None
    def isFloating(self):
        """bool QDockWidget.isFloating(None self)"""
        return bool()
    def setFloating(self, _floating):
        """None QDockWidget.setFloating(None self, bool _floating)"""
        return None
    def features(self):
        """QDockWidget.DockWidgetFeatures QDockWidget.features(None self)"""
        return QDockWidget.DockWidgetFeatures()
    def setFeatures(self, _features):
        """None QDockWidget.setFeatures(None self, QDockWidget.DockWidgetFeatures _features)"""
        return None
    def setWidget(self, _widget):
        """None QDockWidget.setWidget(None self, QWidget _widget)"""
        return None
    def widget(self):
        """QWidget QDockWidget.widget(None self)"""
        return QWidget()


class QDrag(QObject):
    """"""
    def __init__(self, _dragSource):
        """None QDrag.__init__(None self, QWidget _dragSource)"""
        return None
    def setDragCursor(self, _cursor, _action):
        """None QDrag.setDragCursor(None self, QPixmap _cursor, Qt.DropAction _action)"""
        return None
    def start(self, _supportedActions):
        """Qt.DropAction QDrag.start(None self, Qt.DropActions _supportedActions)"""
        return Qt.DropAction()
    def target(self):
        """QWidget QDrag.target(None self)"""
        return QWidget()
    def source(self):
        """QWidget QDrag.source(None self)"""
        return QWidget()
    def hotSpot(self):
        """QPoint QDrag.hotSpot(None self)"""
        return QPoint()
    def setHotSpot(self, _hotspot):
        """None QDrag.setHotSpot(None self, QPoint _hotspot)"""
        return None
    def pixmap(self):
        """QPixmap QDrag.pixmap(None self)"""
        return QPixmap()
    def setPixmap(self):
        """QPixmap QDrag.setPixmap(None self)"""
        return QPixmap()
    def mimeData(self):
        """QMimeData QDrag.mimeData(None self)"""
        return QMimeData()
    def setMimeData(self, _data):
        """None QDrag.setMimeData(None self, QMimeData _data)"""
        return None
    def exec_(self, _supportedActions):
        """Qt.DropAction QDrag.exec_(None self, Qt.DropActions _supportedActions)"""
        return Qt.DropAction()
    def exec_(self, _supportedActions, _defaultDropAction):
        """Qt.DropAction QDrag.exec_(None self, Qt.DropActions _supportedActions, Qt.DropAction _defaultDropAction)"""
        return Qt.DropAction()


class QErrorMessage(QDialog):
    """"""
    def __init__(self, _parent):
        """None QErrorMessage.__init__(None self, QWidget _parent)"""
        return None
    def done(self):
        """int QErrorMessage.done(None self)"""
        return int()
    def changeEvent(self, _e):
        """None QErrorMessage.changeEvent(None self, QEvent _e)"""
        return None
    def showMessage(self, _message):
        """None QErrorMessage.showMessage(None self, QString _message)"""
        return None
    def showMessage(self, _message, _type):
        """None QErrorMessage.showMessage(None self, QString _message, QString _type)"""
        return None
    def qtHandler(self):
        """QErrorMessage QErrorMessage.qtHandler(None self)"""
        return QErrorMessage()


class QInputEvent(QEvent):
    """"""
    def modifiers(self):
        """Qt.KeyboardModifiers QInputEvent.modifiers(None self)"""
        return Qt.KeyboardModifiers()


class QMouseEvent(QInputEvent):
    """"""
    def __init__(self, _type, _pos, _button, _buttons, _modifiers):
        """None QMouseEvent.__init__(None self, QEvent.Type _type, QPoint _pos, Qt.MouseButton _button, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers)"""
        return None
    def __init__(self, _type, _pos, _globalPos, _button, _buttons, _modifiers):
        """None QMouseEvent.__init__(None self, QEvent.Type _type, QPoint _pos, QPoint _globalPos, Qt.MouseButton _button, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers)"""
        return None
    def __init__(self):
        """QMouseEvent QMouseEvent.__init__(None self)"""
        return QMouseEvent()
    def posF(self):
        """QPointF QMouseEvent.posF(None self)"""
        return QPointF()
    def hasExtendedInfo(self):
        """bool QMouseEvent.hasExtendedInfo(None self)"""
        return bool()
    def buttons(self):
        """Qt.MouseButtons QMouseEvent.buttons(None self)"""
        return Qt.MouseButtons()
    def button(self):
        """Qt.MouseButton QMouseEvent.button(None self)"""
        return Qt.MouseButton()
    def globalY(self):
        """int QMouseEvent.globalY(None self)"""
        return int()
    def globalX(self):
        """int QMouseEvent.globalX(None self)"""
        return int()
    def y(self):
        """int QMouseEvent.y(None self)"""
        return int()
    def x(self):
        """int QMouseEvent.x(None self)"""
        return int()
    def globalPos(self):
        """QPoint QMouseEvent.globalPos(None self)"""
        return QPoint()
    def pos(self):
        """QPoint QMouseEvent.pos(None self)"""
        return QPoint()


class QHoverEvent(QEvent):
    """"""
    def __init__(self, _type, _pos, _oldPos):
        """None QHoverEvent.__init__(None self, QEvent.Type _type, QPoint _pos, QPoint _oldPos)"""
        return None
    def __init__(self):
        """QHoverEvent QHoverEvent.__init__(None self)"""
        return QHoverEvent()
    def oldPos(self):
        """QPoint QHoverEvent.oldPos(None self)"""
        return QPoint()
    def pos(self):
        """QPoint QHoverEvent.pos(None self)"""
        return QPoint()


class QWheelEvent(QInputEvent):
    """"""
    def __init__(self, _pos, _delta, _buttons, _modifiers, _orientation):
        """None QWheelEvent.__init__(None self, QPoint _pos, int _delta, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers, Qt.Orientation _orientation)"""
        return None
    def __init__(self, _pos, _globalPos, _delta, _buttons, _modifiers, _orientation):
        """None QWheelEvent.__init__(None self, QPoint _pos, QPoint _globalPos, int _delta, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers, Qt.Orientation _orientation)"""
        return None
    def __init__(self):
        """QWheelEvent QWheelEvent.__init__(None self)"""
        return QWheelEvent()
    def orientation(self):
        """Qt.Orientation QWheelEvent.orientation(None self)"""
        return Qt.Orientation()
    def buttons(self):
        """Qt.MouseButtons QWheelEvent.buttons(None self)"""
        return Qt.MouseButtons()
    def globalY(self):
        """int QWheelEvent.globalY(None self)"""
        return int()
    def globalX(self):
        """int QWheelEvent.globalX(None self)"""
        return int()
    def y(self):
        """int QWheelEvent.y(None self)"""
        return int()
    def x(self):
        """int QWheelEvent.x(None self)"""
        return int()
    def globalPos(self):
        """QPoint QWheelEvent.globalPos(None self)"""
        return QPoint()
    def pos(self):
        """QPoint QWheelEvent.pos(None self)"""
        return QPoint()
    def delta(self):
        """int QWheelEvent.delta(None self)"""
        return int()


class QTabletEvent(QInputEvent):
    """"""
    UnknownPointer = int() # QTabletEvent.PointerType enum
    Pen = int() # QTabletEvent.PointerType enum
    Cursor = int() # QTabletEvent.PointerType enum
    Eraser = int() # QTabletEvent.PointerType enum

    NoDevice = int() # QTabletEvent.TabletDevice enum
    Puck = int() # QTabletEvent.TabletDevice enum
    Stylus = int() # QTabletEvent.TabletDevice enum
    Airbrush = int() # QTabletEvent.TabletDevice enum
    FourDMouse = int() # QTabletEvent.TabletDevice enum
    XFreeEraser = int() # QTabletEvent.TabletDevice enum
    RotationStylus = int() # QTabletEvent.TabletDevice enum

    def __init__(self, _t, _pos, _globalPos, _hiResGlobalPos, _device, _pointerType, _pressure, _xTilt, _yTilt, _tangentialPressure, _rotation, _z, _keyState, _uniqueID):
        """None QTabletEvent.__init__(None self, QEvent.Type _t, QPoint _pos, QPoint _globalPos, QPointF _hiResGlobalPos, int _device, int _pointerType, float _pressure, int _xTilt, int _yTilt, float _tangentialPressure, float _rotation, int _z, Qt.KeyboardModifiers _keyState, int _uniqueID)"""
        return None
    def __init__(self):
        """QTabletEvent QTabletEvent.__init__(None self)"""
        return QTabletEvent()
    def yTilt(self):
        """int QTabletEvent.yTilt(None self)"""
        return int()
    def xTilt(self):
        """int QTabletEvent.xTilt(None self)"""
        return int()
    def rotation(self):
        """float QTabletEvent.rotation(None self)"""
        return float()
    def tangentialPressure(self):
        """float QTabletEvent.tangentialPressure(None self)"""
        return float()
    def z(self):
        """int QTabletEvent.z(None self)"""
        return int()
    def pressure(self):
        """float QTabletEvent.pressure(None self)"""
        return float()
    def uniqueId(self):
        """int QTabletEvent.uniqueId(None self)"""
        return int()
    def pointerType(self):
        """QTabletEvent.PointerType QTabletEvent.pointerType(None self)"""
        return QTabletEvent.PointerType()
    def device(self):
        """QTabletEvent.TabletDevice QTabletEvent.device(None self)"""
        return QTabletEvent.TabletDevice()
    def hiResGlobalY(self):
        """float QTabletEvent.hiResGlobalY(None self)"""
        return float()
    def hiResGlobalX(self):
        """float QTabletEvent.hiResGlobalX(None self)"""
        return float()
    def globalY(self):
        """int QTabletEvent.globalY(None self)"""
        return int()
    def globalX(self):
        """int QTabletEvent.globalX(None self)"""
        return int()
    def y(self):
        """int QTabletEvent.y(None self)"""
        return int()
    def x(self):
        """int QTabletEvent.x(None self)"""
        return int()
    def hiResGlobalPos(self):
        """QPointF QTabletEvent.hiResGlobalPos(None self)"""
        return QPointF()
    def globalPos(self):
        """QPoint QTabletEvent.globalPos(None self)"""
        return QPoint()
    def pos(self):
        """QPoint QTabletEvent.pos(None self)"""
        return QPoint()


class QKeyEvent(QInputEvent):
    """"""
    def __init__(self, _type, _key, _modifiers, _text, _autorep, _count):
        """None QKeyEvent.__init__(None self, QEvent.Type _type, int _key, Qt.KeyboardModifiers _modifiers, QString _text, bool _autorep, int _count)"""
        return None
    def __init__(self):
        """QKeyEvent QKeyEvent.__init__(None self)"""
        return QKeyEvent()
    def __ne__(self, _key):
        """bool QKeyEvent.__ne__(None self, QKeySequence.StandardKey _key)"""
        return bool()
    def __eq__(self, _key):
        """bool QKeyEvent.__eq__(None self, QKeySequence.StandardKey _key)"""
        return bool()
    def nativeVirtualKey(self):
        """int QKeyEvent.nativeVirtualKey(None self)"""
        return int()
    def nativeScanCode(self):
        """int QKeyEvent.nativeScanCode(None self)"""
        return int()
    def nativeModifiers(self):
        """int QKeyEvent.nativeModifiers(None self)"""
        return int()
    def matches(self, _key):
        """bool QKeyEvent.matches(None self, QKeySequence.StandardKey _key)"""
        return bool()
    def __len__(self):
        """ QKeyEvent.__len__(None self)"""
        return ()
    def count(self):
        """int QKeyEvent.count(None self)"""
        return int()
    def isAutoRepeat(self):
        """bool QKeyEvent.isAutoRepeat(None self)"""
        return bool()
    def text(self):
        """QString QKeyEvent.text(None self)"""
        return QString()
    def modifiers(self):
        """Qt.KeyboardModifiers QKeyEvent.modifiers(None self)"""
        return Qt.KeyboardModifiers()
    def key(self):
        """int QKeyEvent.key(None self)"""
        return int()


class QFocusEvent(QEvent):
    """"""
    def __init__(self, _type, _reason):
        """None QFocusEvent.__init__(None self, QEvent.Type _type, Qt.FocusReason _reason)"""
        return None
    def __init__(self):
        """QFocusEvent QFocusEvent.__init__(None self)"""
        return QFocusEvent()
    def reason(self):
        """Qt.FocusReason QFocusEvent.reason(None self)"""
        return Qt.FocusReason()
    def lostFocus(self):
        """bool QFocusEvent.lostFocus(None self)"""
        return bool()
    def gotFocus(self):
        """bool QFocusEvent.gotFocus(None self)"""
        return bool()


class QPaintEvent(QEvent):
    """"""
    def __init__(self, _paintRegion):
        """None QPaintEvent.__init__(None self, QRegion _paintRegion)"""
        return None
    def __init__(self, _paintRect):
        """None QPaintEvent.__init__(None self, QRect _paintRect)"""
        return None
    def __init__(self):
        """QPaintEvent QPaintEvent.__init__(None self)"""
        return QPaintEvent()
    def region(self):
        """QRegion QPaintEvent.region(None self)"""
        return QRegion()
    def rect(self):
        """QRect QPaintEvent.rect(None self)"""
        return QRect()


class QMoveEvent(QEvent):
    """"""
    def __init__(self, _pos, _oldPos):
        """None QMoveEvent.__init__(None self, QPoint _pos, QPoint _oldPos)"""
        return None
    def __init__(self):
        """QMoveEvent QMoveEvent.__init__(None self)"""
        return QMoveEvent()
    def oldPos(self):
        """QPoint QMoveEvent.oldPos(None self)"""
        return QPoint()
    def pos(self):
        """QPoint QMoveEvent.pos(None self)"""
        return QPoint()


class QResizeEvent(QEvent):
    """"""
    def __init__(self, _size, _oldSize):
        """None QResizeEvent.__init__(None self, QSize _size, QSize _oldSize)"""
        return None
    def __init__(self):
        """QResizeEvent QResizeEvent.__init__(None self)"""
        return QResizeEvent()
    def oldSize(self):
        """QSize QResizeEvent.oldSize(None self)"""
        return QSize()
    def size(self):
        """QSize QResizeEvent.size(None self)"""
        return QSize()


class QCloseEvent(QEvent):
    """"""
    def __init__(self):
        """None QCloseEvent.__init__(None self)"""
        return None
    def __init__(self):
        """QCloseEvent QCloseEvent.__init__(None self)"""
        return QCloseEvent()


class QIconDragEvent(QEvent):
    """"""
    def __init__(self):
        """None QIconDragEvent.__init__(None self)"""
        return None
    def __init__(self):
        """QIconDragEvent QIconDragEvent.__init__(None self)"""
        return QIconDragEvent()


class QShowEvent(QEvent):
    """"""
    def __init__(self):
        """None QShowEvent.__init__(None self)"""
        return None
    def __init__(self):
        """QShowEvent QShowEvent.__init__(None self)"""
        return QShowEvent()


class QHideEvent(QEvent):
    """"""
    def __init__(self):
        """None QHideEvent.__init__(None self)"""
        return None
    def __init__(self):
        """QHideEvent QHideEvent.__init__(None self)"""
        return QHideEvent()


class QContextMenuEvent(QInputEvent):
    """"""
    Mouse = int() # QContextMenuEvent.Reason enum
    Keyboard = int() # QContextMenuEvent.Reason enum
    Other = int() # QContextMenuEvent.Reason enum

    def __init__(self, _reason, _pos, _globalPos, _modifiers):
        """None QContextMenuEvent.__init__(None self, QContextMenuEvent.Reason _reason, QPoint _pos, QPoint _globalPos, Qt.KeyboardModifiers _modifiers)"""
        return None
    def __init__(self, _reason, _pos, _globalPos):
        """None QContextMenuEvent.__init__(None self, QContextMenuEvent.Reason _reason, QPoint _pos, QPoint _globalPos)"""
        return None
    def __init__(self, _reason, _pos):
        """None QContextMenuEvent.__init__(None self, QContextMenuEvent.Reason _reason, QPoint _pos)"""
        return None
    def __init__(self):
        """QContextMenuEvent QContextMenuEvent.__init__(None self)"""
        return QContextMenuEvent()
    def reason(self):
        """QContextMenuEvent.Reason QContextMenuEvent.reason(None self)"""
        return QContextMenuEvent.Reason()
    def globalPos(self):
        """QPoint QContextMenuEvent.globalPos(None self)"""
        return QPoint()
    def pos(self):
        """QPoint QContextMenuEvent.pos(None self)"""
        return QPoint()
    def globalY(self):
        """int QContextMenuEvent.globalY(None self)"""
        return int()
    def globalX(self):
        """int QContextMenuEvent.globalX(None self)"""
        return int()
    def y(self):
        """int QContextMenuEvent.y(None self)"""
        return int()
    def x(self):
        """int QContextMenuEvent.x(None self)"""
        return int()


class QInputMethodEvent(QEvent):
    """"""
    TextFormat = int() # QInputMethodEvent.AttributeType enum
    Cursor = int() # QInputMethodEvent.AttributeType enum
    Language = int() # QInputMethodEvent.AttributeType enum
    Ruby = int() # QInputMethodEvent.AttributeType enum
    Selection = int() # QInputMethodEvent.AttributeType enum

    def __init__(self):
        """None QInputMethodEvent.__init__(None self)"""
        return None
    def __init__(self, _preeditText, _attributes):
        """None QInputMethodEvent.__init__(None self, QString _preeditText, list-of-QInputMethodEvent.Attribute _attributes)"""
        return None
    def __init__(self, _other):
        """None QInputMethodEvent.__init__(None self, QInputMethodEvent _other)"""
        return None
    def replacementLength(self):
        """int QInputMethodEvent.replacementLength(None self)"""
        return int()
    def replacementStart(self):
        """int QInputMethodEvent.replacementStart(None self)"""
        return int()
    def commitString(self):
        """QString QInputMethodEvent.commitString(None self)"""
        return QString()
    def preeditString(self):
        """QString QInputMethodEvent.preeditString(None self)"""
        return QString()
    def attributes(self):
        """list-of-QInputMethodEvent.Attribute QInputMethodEvent.attributes(None self)"""
        return [QInputMethodEvent.Attribute()]
    def setCommitString(self, _commitString, _from, _length):
        """None QInputMethodEvent.setCommitString(None self, QString _commitString, int _from, int _length)"""
        return None


class QMimeSource():
    """"""
    def __init__(self):
        """None QMimeSource.__init__(None self)"""
        return None
    def __init__(self):
        """QMimeSource QMimeSource.__init__(None self)"""
        return QMimeSource()
    def encodedData(self):
        """abstract str QMimeSource.encodedData(None self)"""
        return str()
    def provides(self):
        """str QMimeSource.provides(None self)"""
        return str()
    def format(self, _i):
        """abstract str QMimeSource.format(None self, int _i)"""
        return str()


class QDropEvent(QEvent, QMimeSource):
    """"""
    def __init__(self, _pos, _actions, _data, _buttons, _modifiers, _type):
        """None QDropEvent.__init__(None self, QPoint _pos, Qt.DropActions _actions, QMimeData _data, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers, QEvent.Type _type)"""
        return None
    def __init__(self):
        """QDropEvent QDropEvent.__init__(None self)"""
        return QDropEvent()
    def provides(self):
        """str QDropEvent.provides(None self)"""
        return str()
    def encodedData(self):
        """str QDropEvent.encodedData(None self)"""
        return str()
    def format(self, _n):
        """str QDropEvent.format(None self, int _n)"""
        return str()
    def mimeData(self):
        """QMimeData QDropEvent.mimeData(None self)"""
        return QMimeData()
    def source(self):
        """QWidget QDropEvent.source(None self)"""
        return QWidget()
    def setDropAction(self, _action):
        """None QDropEvent.setDropAction(None self, Qt.DropAction _action)"""
        return None
    def dropAction(self):
        """Qt.DropAction QDropEvent.dropAction(None self)"""
        return Qt.DropAction()
    def acceptProposedAction(self):
        """None QDropEvent.acceptProposedAction(None self)"""
        return None
    def proposedAction(self):
        """Qt.DropAction QDropEvent.proposedAction(None self)"""
        return Qt.DropAction()
    def possibleActions(self):
        """Qt.DropActions QDropEvent.possibleActions(None self)"""
        return Qt.DropActions()
    def keyboardModifiers(self):
        """Qt.KeyboardModifiers QDropEvent.keyboardModifiers(None self)"""
        return Qt.KeyboardModifiers()
    def mouseButtons(self):
        """Qt.MouseButtons QDropEvent.mouseButtons(None self)"""
        return Qt.MouseButtons()
    def pos(self):
        """QPoint QDropEvent.pos(None self)"""
        return QPoint()


class QDragMoveEvent(QDropEvent):
    """"""
    def __init__(self, _pos, _actions, _data, _buttons, _modifiers, _type):
        """None QDragMoveEvent.__init__(None self, QPoint _pos, Qt.DropActions _actions, QMimeData _data, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers, QEvent.Type _type)"""
        return None
    def __init__(self):
        """QDragMoveEvent QDragMoveEvent.__init__(None self)"""
        return QDragMoveEvent()
    def ignore(self):
        """None QDragMoveEvent.ignore(None self)"""
        return None
    def ignore(self, _r):
        """None QDragMoveEvent.ignore(None self, QRect _r)"""
        return None
    def accept(self):
        """None QDragMoveEvent.accept(None self)"""
        return None
    def accept(self, _r):
        """None QDragMoveEvent.accept(None self, QRect _r)"""
        return None
    def answerRect(self):
        """QRect QDragMoveEvent.answerRect(None self)"""
        return QRect()


class QDragEnterEvent(QDragMoveEvent):
    """"""
    def __init__(self, _pos, _actions, _data, _buttons, _modifiers):
        """None QDragEnterEvent.__init__(None self, QPoint _pos, Qt.DropActions _actions, QMimeData _data, Qt.MouseButtons _buttons, Qt.KeyboardModifiers _modifiers)"""
        return None
    def __init__(self):
        """QDragEnterEvent QDragEnterEvent.__init__(None self)"""
        return QDragEnterEvent()


class QDragLeaveEvent(QEvent):
    """"""
    def __init__(self):
        """None QDragLeaveEvent.__init__(None self)"""
        return None
    def __init__(self):
        """QDragLeaveEvent QDragLeaveEvent.__init__(None self)"""
        return QDragLeaveEvent()


class QHelpEvent(QEvent):
    """"""
    def __init__(self, _type, _pos, _globalPos):
        """None QHelpEvent.__init__(None self, QEvent.Type _type, QPoint _pos, QPoint _globalPos)"""
        return None
    def __init__(self):
        """QHelpEvent QHelpEvent.__init__(None self)"""
        return QHelpEvent()
    def globalPos(self):
        """QPoint QHelpEvent.globalPos(None self)"""
        return QPoint()
    def pos(self):
        """QPoint QHelpEvent.pos(None self)"""
        return QPoint()
    def globalY(self):
        """int QHelpEvent.globalY(None self)"""
        return int()
    def globalX(self):
        """int QHelpEvent.globalX(None self)"""
        return int()
    def y(self):
        """int QHelpEvent.y(None self)"""
        return int()
    def x(self):
        """int QHelpEvent.x(None self)"""
        return int()


class QStatusTipEvent(QEvent):
    """"""
    def __init__(self, _tip):
        """None QStatusTipEvent.__init__(None self, QString _tip)"""
        return None
    def __init__(self):
        """QStatusTipEvent QStatusTipEvent.__init__(None self)"""
        return QStatusTipEvent()
    def tip(self):
        """QString QStatusTipEvent.tip(None self)"""
        return QString()


class QWhatsThisClickedEvent(QEvent):
    """"""
    def __init__(self, _href):
        """None QWhatsThisClickedEvent.__init__(None self, QString _href)"""
        return None
    def __init__(self):
        """QWhatsThisClickedEvent QWhatsThisClickedEvent.__init__(None self)"""
        return QWhatsThisClickedEvent()
    def href(self):
        """QString QWhatsThisClickedEvent.href(None self)"""
        return QString()


class QActionEvent(QEvent):
    """"""
    def __init__(self, _type, _action, _before):
        """None QActionEvent.__init__(None self, int _type, QAction _action, QAction _before)"""
        return None
    def __init__(self):
        """QActionEvent QActionEvent.__init__(None self)"""
        return QActionEvent()
    def before(self):
        """QAction QActionEvent.before(None self)"""
        return QAction()
    def action(self):
        """QAction QActionEvent.action(None self)"""
        return QAction()


class QFileOpenEvent(QEvent):
    """"""
    def url(self):
        """QUrl QFileOpenEvent.url(None self)"""
        return QUrl()
    def file(self):
        """QString QFileOpenEvent.file(None self)"""
        return QString()


class QShortcutEvent(QEvent):
    """"""
    def __init__(self, _key, _id, _ambiguous):
        """None QShortcutEvent.__init__(None self, QKeySequence _key, int _id, bool _ambiguous)"""
        return None
    def __init__(self):
        """QShortcutEvent QShortcutEvent.__init__(None self)"""
        return QShortcutEvent()
    def shortcutId(self):
        """int QShortcutEvent.shortcutId(None self)"""
        return int()
    def key(self):
        """QKeySequence QShortcutEvent.key(None self)"""
        return QKeySequence()
    def isAmbiguous(self):
        """bool QShortcutEvent.isAmbiguous(None self)"""
        return bool()


class QWindowStateChangeEvent(QEvent):
    """"""
    def oldState(self):
        """Qt.WindowStates QWindowStateChangeEvent.oldState(None self)"""
        return Qt.WindowStates()


class QTouchEvent(QInputEvent):
    """"""
    TouchScreen = int() # QTouchEvent.DeviceType enum
    TouchPad = int() # QTouchEvent.DeviceType enum

    def __init__(self, _eventType, _deviceType, _modifiers, _touchPointStates, _touchPoints):
        """None QTouchEvent.__init__(None self, QEvent.Type _eventType, QTouchEvent.DeviceType _deviceType, Qt.KeyboardModifiers _modifiers, Qt.TouchPointStates _touchPointStates, list-of-QTouchEvent.TouchPoint _touchPoints)"""
        return None
    def __init__(self):
        """QTouchEvent QTouchEvent.__init__(None self)"""
        return QTouchEvent()
    def touchPoints(self):
        """list-of-QTouchEvent.TouchPoint QTouchEvent.touchPoints(None self)"""
        return [QTouchEvent.TouchPoint()]
    def touchPointStates(self):
        """Qt.TouchPointStates QTouchEvent.touchPointStates(None self)"""
        return Qt.TouchPointStates()
    def deviceType(self):
        """QTouchEvent.DeviceType QTouchEvent.deviceType(None self)"""
        return QTouchEvent.DeviceType()
    def widget(self):
        """QWidget QTouchEvent.widget(None self)"""
        return QWidget()


class QGestureEvent(QEvent):
    """"""
    def __init__(self, _gestures):
        """None QGestureEvent.__init__(None self, list-of-QGesture _gestures)"""
        return None
    def __init__(self):
        """QGestureEvent QGestureEvent.__init__(None self)"""
        return QGestureEvent()
    def mapToGraphicsScene(self, _gesturePoint):
        """QPointF QGestureEvent.mapToGraphicsScene(None self, QPointF _gesturePoint)"""
        return QPointF()
    def widget(self):
        """QWidget QGestureEvent.widget(None self)"""
        return QWidget()
    def ignore(self):
        """None QGestureEvent.ignore(None self)"""
        return None
    def ignore(self):
        """QGesture QGestureEvent.ignore(None self)"""
        return QGesture()
    def ignore(self):
        """Qt.GestureType QGestureEvent.ignore(None self)"""
        return Qt.GestureType()
    def accept(self):
        """None QGestureEvent.accept(None self)"""
        return None
    def accept(self):
        """QGesture QGestureEvent.accept(None self)"""
        return QGesture()
    def accept(self):
        """Qt.GestureType QGestureEvent.accept(None self)"""
        return Qt.GestureType()
    def isAccepted(self):
        """bool QGestureEvent.isAccepted(None self)"""
        return bool()
    def isAccepted(self):
        """QGesture QGestureEvent.isAccepted(None self)"""
        return QGesture()
    def isAccepted(self):
        """Qt.GestureType QGestureEvent.isAccepted(None self)"""
        return Qt.GestureType()
    def setAccepted(self, _accepted):
        """None QGestureEvent.setAccepted(None self, bool _accepted)"""
        return None
    def setAccepted(self):
        """bool QGestureEvent.setAccepted(None self)"""
        return bool()
    def setAccepted(self):
        """bool QGestureEvent.setAccepted(None self)"""
        return bool()
    def canceledGestures(self):
        """list-of-QGesture QGestureEvent.canceledGestures(None self)"""
        return [QGesture()]
    def activeGestures(self):
        """list-of-QGesture QGestureEvent.activeGestures(None self)"""
        return [QGesture()]
    def gesture(self, _type):
        """QGesture QGestureEvent.gesture(None self, Qt.GestureType _type)"""
        return QGesture()
    def gestures(self):
        """list-of-QGesture QGestureEvent.gestures(None self)"""
        return [QGesture()]


class QFileDialog(QDialog):
    """"""
    ShowDirsOnly = int() # QFileDialog.Option enum
    DontResolveSymlinks = int() # QFileDialog.Option enum
    DontConfirmOverwrite = int() # QFileDialog.Option enum
    DontUseSheet = int() # QFileDialog.Option enum
    DontUseNativeDialog = int() # QFileDialog.Option enum
    ReadOnly = int() # QFileDialog.Option enum
    HideNameFilterDetails = int() # QFileDialog.Option enum

    LookIn = int() # QFileDialog.DialogLabel enum
    FileName = int() # QFileDialog.DialogLabel enum
    FileType = int() # QFileDialog.DialogLabel enum
    Accept = int() # QFileDialog.DialogLabel enum
    Reject = int() # QFileDialog.DialogLabel enum

    AcceptOpen = int() # QFileDialog.AcceptMode enum
    AcceptSave = int() # QFileDialog.AcceptMode enum

    AnyFile = int() # QFileDialog.FileMode enum
    ExistingFile = int() # QFileDialog.FileMode enum
    Directory = int() # QFileDialog.FileMode enum
    ExistingFiles = int() # QFileDialog.FileMode enum
    DirectoryOnly = int() # QFileDialog.FileMode enum

    Detail = int() # QFileDialog.ViewMode enum
    List = int() # QFileDialog.ViewMode enum

    def __init__(self, _parent, _f):
        """None QFileDialog.__init__(None self, QWidget _parent, Qt.WindowFlags _f)"""
        return None
    def __init__(self, _parent, _caption, _directory, _filter):
        """None QFileDialog.__init__(None self, QWidget _parent, QString _caption, QString _directory, QString _filter)"""
        return None
    def setVisible(self, _visible):
        """None QFileDialog.setVisible(None self, bool _visible)"""
        return None
    def open(self):
        """None QFileDialog.open(None self)"""
        return None
    def open(self, _receiver, _member):
        """None QFileDialog.open(None self, QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(self, _receiver):
        """None QFileDialog.open(None self, callable _receiver)"""
        return None
    def options(self):
        """QFileDialog.Options QFileDialog.options(None self)"""
        return QFileDialog.Options()
    def setOptions(self, _options):
        """None QFileDialog.setOptions(None self, QFileDialog.Options _options)"""
        return None
    def testOption(self, _option):
        """bool QFileDialog.testOption(None self, QFileDialog.Option _option)"""
        return bool()
    def setOption(self, _option, _on):
        """None QFileDialog.setOption(None self, QFileDialog.Option _option, bool _on)"""
        return None
    def filter(self):
        """QDir.Filters QFileDialog.filter(None self)"""
        return QDir.Filters()
    def selectedNameFilter(self):
        """QString QFileDialog.selectedNameFilter(None self)"""
        return QString()
    def selectNameFilter(self, _filter):
        """None QFileDialog.selectNameFilter(None self, QString _filter)"""
        return None
    def nameFilters(self):
        """QStringList QFileDialog.nameFilters(None self)"""
        return QStringList()
    def setNameFilters(self, _filters):
        """None QFileDialog.setNameFilters(None self, QStringList _filters)"""
        return None
    def setNameFilter(self, _filter):
        """None QFileDialog.setNameFilter(None self, QString _filter)"""
        return None
    def isNameFilterDetailsVisible(self):
        """bool QFileDialog.isNameFilterDetailsVisible(None self)"""
        return bool()
    def setNameFilterDetailsVisible(self, _enabled):
        """None QFileDialog.setNameFilterDetailsVisible(None self, bool _enabled)"""
        return None
    def proxyModel(self):
        """QAbstractProxyModel QFileDialog.proxyModel(None self)"""
        return QAbstractProxyModel()
    def setProxyModel(self, _model):
        """None QFileDialog.setProxyModel(None self, QAbstractProxyModel _model)"""
        return None
    def restoreState(self, _state):
        """bool QFileDialog.restoreState(None self, QByteArray _state)"""
        return bool()
    def saveState(self):
        """QByteArray QFileDialog.saveState(None self)"""
        return QByteArray()
    def sidebarUrls(self):
        """list-of-QUrl QFileDialog.sidebarUrls(None self)"""
        return [QUrl()]
    def setSidebarUrls(self, _urls):
        """None QFileDialog.setSidebarUrls(None self, list-of-QUrl _urls)"""
        return None
    def changeEvent(self, _e):
        """None QFileDialog.changeEvent(None self, QEvent _e)"""
        return None
    def accept(self):
        """None QFileDialog.accept(None self)"""
        return None
    def done(self, _result):
        """None QFileDialog.done(None self, int _result)"""
        return None
    def getSaveFileNameAndFilter(self, _parent, _caption, _directory, _filter, _initialFilter, _options):
        """(QString, QString) QFileDialog.getSaveFileNameAndFilter(None self, QWidget _parent, QString _caption, QString _directory, QString _filter, QString _initialFilter, QFileDialog.Options _options)"""
        return (QString, QString)()
    def getSaveFileName(self, _parent, _caption, _directory, _filter, _options):
        """QString QFileDialog.getSaveFileName(None self, QWidget _parent, QString _caption, QString _directory, QString _filter, QFileDialog.Options _options)"""
        return QString()
    def getSaveFileName(self, _parent, _caption, _directory, _filter, _selectedFilter, _options):
        """QString QFileDialog.getSaveFileName(None self, QWidget _parent, QString _caption, QString _directory, QString _filter, QString _selectedFilter, QFileDialog.Options _options)"""
        return QString()
    def getOpenFileNamesAndFilter(self, _parent, _caption, _directory, _filter, _initialFilter, _options):
        """(QString, QString) QFileDialog.getOpenFileNamesAndFilter(None self, QWidget _parent, QString _caption, QString _directory, QString _filter, QString _initialFilter, QFileDialog.Options _options)"""
        return (QString, QString)()
    def getOpenFileNames(self, _parent, _caption, _directory, _filter, _options):
        """QStringList QFileDialog.getOpenFileNames(None self, QWidget _parent, QString _caption, QString _directory, QString _filter, QFileDialog.Options _options)"""
        return QStringList()
    def getOpenFileNames(self, _parent, _caption, _directory, _filter, _selectedFilter, _options):
        """QStringList QFileDialog.getOpenFileNames(None self, QWidget _parent, QString _caption, QString _directory, QString _filter, QString _selectedFilter, QFileDialog.Options _options)"""
        return QStringList()
    def getOpenFileNameAndFilter(self, _parent, _caption, _directory, _filter, _initialFilter, _options):
        """(QString, QString) QFileDialog.getOpenFileNameAndFilter(None self, QWidget _parent, QString _caption, QString _directory, QString _filter, QString _initialFilter, QFileDialog.Options _options)"""
        return (QString, QString)()
    def getOpenFileName(self, _parent, _caption, _directory, _filter, _options):
        """QString QFileDialog.getOpenFileName(None self, QWidget _parent, QString _caption, QString _directory, QString _filter, QFileDialog.Options _options)"""
        return QString()
    def getOpenFileName(self, _parent, _caption, _directory, _filter, _selectedFilter, _options):
        """QString QFileDialog.getOpenFileName(None self, QWidget _parent, QString _caption, QString _directory, QString _filter, QString _selectedFilter, QFileDialog.Options _options)"""
        return QString()
    def getExistingDirectory(self, _parent, _caption, _directory, _options):
        """QString QFileDialog.getExistingDirectory(None self, QWidget _parent, QString _caption, QString _directory, QFileDialog.Options _options)"""
        return QString()
    def labelText(self, _label):
        """QString QFileDialog.labelText(None self, QFileDialog.DialogLabel _label)"""
        return QString()
    def setLabelText(self, _label, _text):
        """None QFileDialog.setLabelText(None self, QFileDialog.DialogLabel _label, QString _text)"""
        return None
    def iconProvider(self):
        """QFileIconProvider QFileDialog.iconProvider(None self)"""
        return QFileIconProvider()
    def setIconProvider(self, _provider):
        """None QFileDialog.setIconProvider(None self, QFileIconProvider _provider)"""
        return None
    def itemDelegate(self):
        """QAbstractItemDelegate QFileDialog.itemDelegate(None self)"""
        return QAbstractItemDelegate()
    def setItemDelegate(self, _delegate):
        """None QFileDialog.setItemDelegate(None self, QAbstractItemDelegate _delegate)"""
        return None
    def history(self):
        """QStringList QFileDialog.history(None self)"""
        return QStringList()
    def setHistory(self, _paths):
        """None QFileDialog.setHistory(None self, QStringList _paths)"""
        return None
    def defaultSuffix(self):
        """QString QFileDialog.defaultSuffix(None self)"""
        return QString()
    def setDefaultSuffix(self, _suffix):
        """None QFileDialog.setDefaultSuffix(None self, QString _suffix)"""
        return None
    def confirmOverwrite(self):
        """bool QFileDialog.confirmOverwrite(None self)"""
        return bool()
    def setConfirmOverwrite(self, _enabled):
        """None QFileDialog.setConfirmOverwrite(None self, bool _enabled)"""
        return None
    def resolveSymlinks(self):
        """bool QFileDialog.resolveSymlinks(None self)"""
        return bool()
    def setResolveSymlinks(self, _enabled):
        """None QFileDialog.setResolveSymlinks(None self, bool _enabled)"""
        return None
    def isReadOnly(self):
        """bool QFileDialog.isReadOnly(None self)"""
        return bool()
    def setReadOnly(self, _enabled):
        """None QFileDialog.setReadOnly(None self, bool _enabled)"""
        return None
    def acceptMode(self):
        """QFileDialog.AcceptMode QFileDialog.acceptMode(None self)"""
        return QFileDialog.AcceptMode()
    def setAcceptMode(self, _mode):
        """None QFileDialog.setAcceptMode(None self, QFileDialog.AcceptMode _mode)"""
        return None
    def fileMode(self):
        """QFileDialog.FileMode QFileDialog.fileMode(None self)"""
        return QFileDialog.FileMode()
    def setFileMode(self, _mode):
        """None QFileDialog.setFileMode(None self, QFileDialog.FileMode _mode)"""
        return None
    def viewMode(self):
        """QFileDialog.ViewMode QFileDialog.viewMode(None self)"""
        return QFileDialog.ViewMode()
    def setViewMode(self, _mode):
        """None QFileDialog.setViewMode(None self, QFileDialog.ViewMode _mode)"""
        return None
    def selectedFilter(self):
        """QString QFileDialog.selectedFilter(None self)"""
        return QString()
    def selectFilter(self, _filter):
        """None QFileDialog.selectFilter(None self, QString _filter)"""
        return None
    def filters(self):
        """QStringList QFileDialog.filters(None self)"""
        return QStringList()
    def setFilters(self, _filters):
        """None QFileDialog.setFilters(None self, QStringList _filters)"""
        return None
    def setFilter(self, _filter):
        """None QFileDialog.setFilter(None self, QString _filter)"""
        return None
    def setFilter(self, _filters):
        """None QFileDialog.setFilter(None self, QDir.Filters _filters)"""
        return None
    def selectedFiles(self):
        """QStringList QFileDialog.selectedFiles(None self)"""
        return QStringList()
    def selectFile(self, _filename):
        """None QFileDialog.selectFile(None self, QString _filename)"""
        return None
    def directory(self):
        """QDir QFileDialog.directory(None self)"""
        return QDir()
    def setDirectory(self, _directory):
        """None QFileDialog.setDirectory(None self, QString _directory)"""
        return None
    def setDirectory(self, _adirectory):
        """None QFileDialog.setDirectory(None self, QDir _adirectory)"""
        return None


class QFileIconProvider():
    """"""
    Computer = int() # QFileIconProvider.IconType enum
    Desktop = int() # QFileIconProvider.IconType enum
    Trashcan = int() # QFileIconProvider.IconType enum
    Network = int() # QFileIconProvider.IconType enum
    Drive = int() # QFileIconProvider.IconType enum
    Folder = int() # QFileIconProvider.IconType enum
    File = int() # QFileIconProvider.IconType enum

    def __init__(self):
        """None QFileIconProvider.__init__(None self)"""
        return None
    def type(self, _info):
        """QString QFileIconProvider.type(None self, QFileInfo _info)"""
        return QString()
    def icon(self, _type):
        """QIcon QFileIconProvider.icon(None self, QFileIconProvider.IconType _type)"""
        return QIcon()
    def icon(self, _info):
        """QIcon QFileIconProvider.icon(None self, QFileInfo _info)"""
        return QIcon()


class QFileSystemModel(QAbstractItemModel):
    """"""
    FileIconRole = int() # QFileSystemModel.Roles enum
    FilePathRole = int() # QFileSystemModel.Roles enum
    FileNameRole = int() # QFileSystemModel.Roles enum
    FilePermissions = int() # QFileSystemModel.Roles enum

    def __init__(self, _parent):
        """None QFileSystemModel.__init__(None self, QObject _parent)"""
        return None
    def timerEvent(self, _event):
        """None QFileSystemModel.timerEvent(None self, QTimerEvent _event)"""
        return None
    def event(self, _event):
        """bool QFileSystemModel.event(None self, QEvent _event)"""
        return bool()
    def remove(self, _aindex):
        """bool QFileSystemModel.remove(None self, QModelIndex _aindex)"""
        return bool()
    def fileInfo(self, _aindex):
        """QFileInfo QFileSystemModel.fileInfo(None self, QModelIndex _aindex)"""
        return QFileInfo()
    def fileIcon(self, _aindex):
        """QIcon QFileSystemModel.fileIcon(None self, QModelIndex _aindex)"""
        return QIcon()
    def fileName(self, _aindex):
        """QString QFileSystemModel.fileName(None self, QModelIndex _aindex)"""
        return QString()
    def rmdir(self, _aindex):
        """bool QFileSystemModel.rmdir(None self, QModelIndex _aindex)"""
        return bool()
    def permissions(self, _index):
        """QFile.Permissions QFileSystemModel.permissions(None self, QModelIndex _index)"""
        return QFile.Permissions()
    def mkdir(self, _parent, _name):
        """QModelIndex QFileSystemModel.mkdir(None self, QModelIndex _parent, QString _name)"""
        return QModelIndex()
    def lastModified(self, _index):
        """QDateTime QFileSystemModel.lastModified(None self, QModelIndex _index)"""
        return QDateTime()
    def type(self, _index):
        """QString QFileSystemModel.type(None self, QModelIndex _index)"""
        return QString()
    def size(self, _index):
        """int QFileSystemModel.size(None self, QModelIndex _index)"""
        return int()
    def isDir(self, _index):
        """bool QFileSystemModel.isDir(None self, QModelIndex _index)"""
        return bool()
    def filePath(self, _index):
        """QString QFileSystemModel.filePath(None self, QModelIndex _index)"""
        return QString()
    def nameFilters(self):
        """QStringList QFileSystemModel.nameFilters(None self)"""
        return QStringList()
    def setNameFilters(self, _filters):
        """None QFileSystemModel.setNameFilters(None self, QStringList _filters)"""
        return None
    def nameFilterDisables(self):
        """bool QFileSystemModel.nameFilterDisables(None self)"""
        return bool()
    def setNameFilterDisables(self, _enable):
        """None QFileSystemModel.setNameFilterDisables(None self, bool _enable)"""
        return None
    def isReadOnly(self):
        """bool QFileSystemModel.isReadOnly(None self)"""
        return bool()
    def setReadOnly(self, _enable):
        """None QFileSystemModel.setReadOnly(None self, bool _enable)"""
        return None
    def resolveSymlinks(self):
        """bool QFileSystemModel.resolveSymlinks(None self)"""
        return bool()
    def setResolveSymlinks(self, _enable):
        """None QFileSystemModel.setResolveSymlinks(None self, bool _enable)"""
        return None
    def filter(self):
        """QDir.Filters QFileSystemModel.filter(None self)"""
        return QDir.Filters()
    def setFilter(self, _filters):
        """None QFileSystemModel.setFilter(None self, QDir.Filters _filters)"""
        return None
    def iconProvider(self):
        """QFileIconProvider QFileSystemModel.iconProvider(None self)"""
        return QFileIconProvider()
    def setIconProvider(self, _provider):
        """None QFileSystemModel.setIconProvider(None self, QFileIconProvider _provider)"""
        return None
    def rootDirectory(self):
        """QDir QFileSystemModel.rootDirectory(None self)"""
        return QDir()
    def rootPath(self):
        """QString QFileSystemModel.rootPath(None self)"""
        return QString()
    def setRootPath(self, _path):
        """QModelIndex QFileSystemModel.setRootPath(None self, QString _path)"""
        return QModelIndex()
    def supportedDropActions(self):
        """Qt.DropActions QFileSystemModel.supportedDropActions(None self)"""
        return Qt.DropActions()
    def dropMimeData(self, _data, _action, _row, _column, _parent):
        """bool QFileSystemModel.dropMimeData(None self, QMimeData _data, Qt.DropAction _action, int _row, int _column, QModelIndex _parent)"""
        return bool()
    def mimeData(self, _indexes):
        """QMimeData QFileSystemModel.mimeData(None self, list-of-QModelIndex _indexes)"""
        return QMimeData()
    def mimeTypes(self):
        """QStringList QFileSystemModel.mimeTypes(None self)"""
        return QStringList()
    def sort(self, _column, _order):
        """None QFileSystemModel.sort(None self, int _column, Qt.SortOrder _order)"""
        return None
    def flags(self, _index):
        """Qt.ItemFlags QFileSystemModel.flags(None self, QModelIndex _index)"""
        return Qt.ItemFlags()
    def headerData(self, _section, _orientation, _role):
        """QVariant QFileSystemModel.headerData(None self, int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(self, _idx, _value, _role):
        """bool QFileSystemModel.setData(None self, QModelIndex _idx, QVariant _value, int _role)"""
        return bool()
    def data(self, _index, _role):
        """QVariant QFileSystemModel.data(None self, QModelIndex _index, int _role)"""
        return QVariant()
    def myComputer(self, _role):
        """QVariant QFileSystemModel.myComputer(None self, int _role)"""
        return QVariant()
    def columnCount(self, _parent):
        """int QFileSystemModel.columnCount(None self, QModelIndex _parent)"""
        return int()
    def rowCount(self, _parent):
        """int QFileSystemModel.rowCount(None self, QModelIndex _parent)"""
        return int()
    def fetchMore(self, _parent):
        """None QFileSystemModel.fetchMore(None self, QModelIndex _parent)"""
        return None
    def canFetchMore(self, _parent):
        """bool QFileSystemModel.canFetchMore(None self, QModelIndex _parent)"""
        return bool()
    def hasChildren(self, _parent):
        """bool QFileSystemModel.hasChildren(None self, QModelIndex _parent)"""
        return bool()
    def parent(self, _child):
        """QModelIndex QFileSystemModel.parent(None self, QModelIndex _child)"""
        return QModelIndex()
    def index(self, _row, _column, _parent):
        """QModelIndex QFileSystemModel.index(None self, int _row, int _column, QModelIndex _parent)"""
        return QModelIndex()
    def index(self, _path, _column):
        """QModelIndex QFileSystemModel.index(None self, QString _path, int _column)"""
        return QModelIndex()


class QFocusFrame(QWidget):
    """"""
    def __init__(self, _parent):
        """None QFocusFrame.__init__(None self, QWidget _parent)"""
        return None
    def paintEvent(self):
        """QPaintEvent QFocusFrame.paintEvent(None self)"""
        return QPaintEvent()
    def event(self, _e):
        """bool QFocusFrame.event(None self, QEvent _e)"""
        return bool()
    def eventFilter(self):
        """QEvent QFocusFrame.eventFilter(None self)"""
        return QEvent()
    def initStyleOption(self, _option):
        """None QFocusFrame.initStyleOption(None self, QStyleOption _option)"""
        return None
    def widget(self):
        """QWidget QFocusFrame.widget(None self)"""
        return QWidget()
    def setWidget(self, _widget):
        """None QFocusFrame.setWidget(None self, QWidget _widget)"""
        return None


class QFont():
    """"""
    PercentageSpacing = int() # QFont.SpacingType enum
    AbsoluteSpacing = int() # QFont.SpacingType enum

    MixedCase = int() # QFont.Capitalization enum
    AllUppercase = int() # QFont.Capitalization enum
    AllLowercase = int() # QFont.Capitalization enum
    SmallCaps = int() # QFont.Capitalization enum
    Capitalize = int() # QFont.Capitalization enum

    UltraCondensed = int() # QFont.Stretch enum
    ExtraCondensed = int() # QFont.Stretch enum
    Condensed = int() # QFont.Stretch enum
    SemiCondensed = int() # QFont.Stretch enum
    Unstretched = int() # QFont.Stretch enum
    SemiExpanded = int() # QFont.Stretch enum
    Expanded = int() # QFont.Stretch enum
    ExtraExpanded = int() # QFont.Stretch enum
    UltraExpanded = int() # QFont.Stretch enum

    StyleNormal = int() # QFont.Style enum
    StyleItalic = int() # QFont.Style enum
    StyleOblique = int() # QFont.Style enum

    Light = int() # QFont.Weight enum
    Normal = int() # QFont.Weight enum
    DemiBold = int() # QFont.Weight enum
    Bold = int() # QFont.Weight enum
    Black = int() # QFont.Weight enum

    PreferDefault = int() # QFont.StyleStrategy enum
    PreferBitmap = int() # QFont.StyleStrategy enum
    PreferDevice = int() # QFont.StyleStrategy enum
    PreferOutline = int() # QFont.StyleStrategy enum
    ForceOutline = int() # QFont.StyleStrategy enum
    PreferMatch = int() # QFont.StyleStrategy enum
    PreferQuality = int() # QFont.StyleStrategy enum
    PreferAntialias = int() # QFont.StyleStrategy enum
    NoAntialias = int() # QFont.StyleStrategy enum
    OpenGLCompatible = int() # QFont.StyleStrategy enum
    NoFontMerging = int() # QFont.StyleStrategy enum
    ForceIntegerMetrics = int() # QFont.StyleStrategy enum

    Helvetica = int() # QFont.StyleHint enum
    SansSerif = int() # QFont.StyleHint enum
    Times = int() # QFont.StyleHint enum
    Serif = int() # QFont.StyleHint enum
    Courier = int() # QFont.StyleHint enum
    TypeWriter = int() # QFont.StyleHint enum
    OldEnglish = int() # QFont.StyleHint enum
    Decorative = int() # QFont.StyleHint enum
    System = int() # QFont.StyleHint enum
    AnyStyle = int() # QFont.StyleHint enum
    Cursive = int() # QFont.StyleHint enum
    Monospace = int() # QFont.StyleHint enum
    Fantasy = int() # QFont.StyleHint enum

    def __init__(self):
        """None QFont.__init__(None self)"""
        return None
    def __init__(self, _family, _pointSize, _weight, _italic):
        """None QFont.__init__(None self, QString _family, int _pointSize, int _weight, bool _italic)"""
        return None
    def __init__(self, _pd):
        """QFont QFont.__init__(None self, QPaintDevice _pd)"""
        return QFont()
    def __init__(self):
        """QFont QFont.__init__(None self)"""
        return QFont()
    def __init__(self, _variant):
        """None QFont.__init__(None self, QVariant _variant)"""
        return None
    def __ge__(self):
        """QFont QFont.__ge__(None self)"""
        return QFont()
    def capitalization(self):
        """QFont.Capitalization QFont.capitalization(None self)"""
        return QFont.Capitalization()
    def setCapitalization(self):
        """QFont.Capitalization QFont.setCapitalization(None self)"""
        return QFont.Capitalization()
    def setWordSpacing(self, _spacing):
        """None QFont.setWordSpacing(None self, float _spacing)"""
        return None
    def wordSpacing(self):
        """float QFont.wordSpacing(None self)"""
        return float()
    def setLetterSpacing(self, _type, _spacing):
        """None QFont.setLetterSpacing(None self, QFont.SpacingType _type, float _spacing)"""
        return None
    def letterSpacingType(self):
        """QFont.SpacingType QFont.letterSpacingType(None self)"""
        return QFont.SpacingType()
    def letterSpacing(self):
        """float QFont.letterSpacing(None self)"""
        return float()
    def setItalic(self, _b):
        """None QFont.setItalic(None self, bool _b)"""
        return None
    def italic(self):
        """bool QFont.italic(None self)"""
        return bool()
    def setBold(self, _enable):
        """None QFont.setBold(None self, bool _enable)"""
        return None
    def bold(self):
        """bool QFont.bold(None self)"""
        return bool()
    def resolve(self):
        """QFont QFont.resolve(None self)"""
        return QFont()
    def lastResortFont(self):
        """QString QFont.lastResortFont(None self)"""
        return QString()
    def lastResortFamily(self):
        """QString QFont.lastResortFamily(None self)"""
        return QString()
    def defaultFamily(self):
        """QString QFont.defaultFamily(None self)"""
        return QString()
    def cacheStatistics(self):
        """None QFont.cacheStatistics(None self)"""
        return None
    def cleanup(self):
        """None QFont.cleanup(None self)"""
        return None
    def initialize(self):
        """None QFont.initialize(None self)"""
        return None
    def removeSubstitution(self):
        """QString QFont.removeSubstitution(None self)"""
        return QString()
    def insertSubstitutions(self):
        """QStringList QFont.insertSubstitutions(None self)"""
        return QStringList()
    def insertSubstitution(self):
        """QString QFont.insertSubstitution(None self)"""
        return QString()
    def substitutions(self):
        """QStringList QFont.substitutions(None self)"""
        return QStringList()
    def substitutes(self):
        """QString QFont.substitutes(None self)"""
        return QString()
    def substitute(self):
        """QString QFont.substitute(None self)"""
        return QString()
    def fromString(self):
        """QString QFont.fromString(None self)"""
        return QString()
    def toString(self):
        """QString QFont.toString(None self)"""
        return QString()
    def key(self):
        """QString QFont.key(None self)"""
        return QString()
    def rawName(self):
        """QString QFont.rawName(None self)"""
        return QString()
    def setRawName(self):
        """QString QFont.setRawName(None self)"""
        return QString()
    def handle(self):
        """int QFont.handle(None self)"""
        return int()
    def isCopyOf(self):
        """QFont QFont.isCopyOf(None self)"""
        return QFont()
    def __lt__(self):
        """QFont QFont.__lt__(None self)"""
        return QFont()
    def __ne__(self):
        """QFont QFont.__ne__(None self)"""
        return QFont()
    def __eq__(self):
        """QFont QFont.__eq__(None self)"""
        return QFont()
    def exactMatch(self):
        """bool QFont.exactMatch(None self)"""
        return bool()
    def setRawMode(self):
        """bool QFont.setRawMode(None self)"""
        return bool()
    def rawMode(self):
        """bool QFont.rawMode(None self)"""
        return bool()
    def setStretch(self):
        """int QFont.setStretch(None self)"""
        return int()
    def stretch(self):
        """int QFont.stretch(None self)"""
        return int()
    def setStyleStrategy(self, _s):
        """None QFont.setStyleStrategy(None self, QFont.StyleStrategy _s)"""
        return None
    def setStyleHint(self, _hint, _strategy):
        """None QFont.setStyleHint(None self, QFont.StyleHint _hint, QFont.StyleStrategy _strategy)"""
        return None
    def styleStrategy(self):
        """QFont.StyleStrategy QFont.styleStrategy(None self)"""
        return QFont.StyleStrategy()
    def styleHint(self):
        """QFont.StyleHint QFont.styleHint(None self)"""
        return QFont.StyleHint()
    def setKerning(self):
        """bool QFont.setKerning(None self)"""
        return bool()
    def kerning(self):
        """bool QFont.kerning(None self)"""
        return bool()
    def setFixedPitch(self):
        """bool QFont.setFixedPitch(None self)"""
        return bool()
    def fixedPitch(self):
        """bool QFont.fixedPitch(None self)"""
        return bool()
    def setStrikeOut(self):
        """bool QFont.setStrikeOut(None self)"""
        return bool()
    def strikeOut(self):
        """bool QFont.strikeOut(None self)"""
        return bool()
    def setOverline(self):
        """bool QFont.setOverline(None self)"""
        return bool()
    def overline(self):
        """bool QFont.overline(None self)"""
        return bool()
    def setUnderline(self):
        """bool QFont.setUnderline(None self)"""
        return bool()
    def underline(self):
        """bool QFont.underline(None self)"""
        return bool()
    def style(self):
        """QFont.Style QFont.style(None self)"""
        return QFont.Style()
    def setStyle(self, _style):
        """None QFont.setStyle(None self, QFont.Style _style)"""
        return None
    def setWeight(self):
        """int QFont.setWeight(None self)"""
        return int()
    def weight(self):
        """int QFont.weight(None self)"""
        return int()
    def setPixelSize(self):
        """int QFont.setPixelSize(None self)"""
        return int()
    def pixelSize(self):
        """int QFont.pixelSize(None self)"""
        return int()
    def setPointSizeF(self):
        """float QFont.setPointSizeF(None self)"""
        return float()
    def pointSizeF(self):
        """float QFont.pointSizeF(None self)"""
        return float()
    def setPointSize(self):
        """int QFont.setPointSize(None self)"""
        return int()
    def pointSize(self):
        """int QFont.pointSize(None self)"""
        return int()
    def setFamily(self):
        """QString QFont.setFamily(None self)"""
        return QString()
    def family(self):
        """QString QFont.family(None self)"""
        return QString()


class QFontComboBox(QComboBox):
    """"""
    AllFonts = int() # QFontComboBox.FontFilter enum
    ScalableFonts = int() # QFontComboBox.FontFilter enum
    NonScalableFonts = int() # QFontComboBox.FontFilter enum
    MonospacedFonts = int() # QFontComboBox.FontFilter enum
    ProportionalFonts = int() # QFontComboBox.FontFilter enum

    def __init__(self, _parent):
        """None QFontComboBox.__init__(None self, QWidget _parent)"""
        return None
    def event(self, _e):
        """bool QFontComboBox.event(None self, QEvent _e)"""
        return bool()
    def setCurrentFont(self, _f):
        """None QFontComboBox.setCurrentFont(None self, QFont _f)"""
        return None
    def sizeHint(self):
        """QSize QFontComboBox.sizeHint(None self)"""
        return QSize()
    def currentFont(self):
        """QFont QFontComboBox.currentFont(None self)"""
        return QFont()
    def setFontFilters(self, _filters):
        """None QFontComboBox.setFontFilters(None self, QFontComboBox.FontFilters _filters)"""
        return None
    def writingSystem(self):
        """QFontDatabase.WritingSystem QFontComboBox.writingSystem(None self)"""
        return QFontDatabase.WritingSystem()
    def setWritingSystem(self):
        """QFontDatabase.WritingSystem QFontComboBox.setWritingSystem(None self)"""
        return QFontDatabase.WritingSystem()
    def fontFilters(self):
        """QFontComboBox.FontFilters QFontComboBox.fontFilters(None self)"""
        return QFontComboBox.FontFilters()


class QFontDatabase():
    """"""
    Any = int() # QFontDatabase.WritingSystem enum
    Latin = int() # QFontDatabase.WritingSystem enum
    Greek = int() # QFontDatabase.WritingSystem enum
    Cyrillic = int() # QFontDatabase.WritingSystem enum
    Armenian = int() # QFontDatabase.WritingSystem enum
    Hebrew = int() # QFontDatabase.WritingSystem enum
    Arabic = int() # QFontDatabase.WritingSystem enum
    Syriac = int() # QFontDatabase.WritingSystem enum
    Thaana = int() # QFontDatabase.WritingSystem enum
    Devanagari = int() # QFontDatabase.WritingSystem enum
    Bengali = int() # QFontDatabase.WritingSystem enum
    Gurmukhi = int() # QFontDatabase.WritingSystem enum
    Gujarati = int() # QFontDatabase.WritingSystem enum
    Oriya = int() # QFontDatabase.WritingSystem enum
    Tamil = int() # QFontDatabase.WritingSystem enum
    Telugu = int() # QFontDatabase.WritingSystem enum
    Kannada = int() # QFontDatabase.WritingSystem enum
    Malayalam = int() # QFontDatabase.WritingSystem enum
    Sinhala = int() # QFontDatabase.WritingSystem enum
    Thai = int() # QFontDatabase.WritingSystem enum
    Lao = int() # QFontDatabase.WritingSystem enum
    Tibetan = int() # QFontDatabase.WritingSystem enum
    Myanmar = int() # QFontDatabase.WritingSystem enum
    Georgian = int() # QFontDatabase.WritingSystem enum
    Khmer = int() # QFontDatabase.WritingSystem enum
    SimplifiedChinese = int() # QFontDatabase.WritingSystem enum
    TraditionalChinese = int() # QFontDatabase.WritingSystem enum
    Japanese = int() # QFontDatabase.WritingSystem enum
    Korean = int() # QFontDatabase.WritingSystem enum
    Vietnamese = int() # QFontDatabase.WritingSystem enum
    Other = int() # QFontDatabase.WritingSystem enum
    Symbol = int() # QFontDatabase.WritingSystem enum
    Ogham = int() # QFontDatabase.WritingSystem enum
    Runic = int() # QFontDatabase.WritingSystem enum
    Nko = int() # QFontDatabase.WritingSystem enum

    def __init__(self):
        """None QFontDatabase.__init__(None self)"""
        return None
    def __init__(self):
        """QFontDatabase QFontDatabase.__init__(None self)"""
        return QFontDatabase()
    def supportsThreadedFontRendering(self):
        """bool QFontDatabase.supportsThreadedFontRendering(None self)"""
        return bool()
    def removeAllApplicationFonts(self):
        """bool QFontDatabase.removeAllApplicationFonts(None self)"""
        return bool()
    def removeApplicationFont(self, _id):
        """bool QFontDatabase.removeApplicationFont(None self, int _id)"""
        return bool()
    def applicationFontFamilies(self, _id):
        """QStringList QFontDatabase.applicationFontFamilies(None self, int _id)"""
        return QStringList()
    def addApplicationFontFromData(self, _fontData):
        """int QFontDatabase.addApplicationFontFromData(None self, QByteArray _fontData)"""
        return int()
    def addApplicationFont(self, _fileName):
        """int QFontDatabase.addApplicationFont(None self, QString _fileName)"""
        return int()
    def writingSystemSample(self, _writingSystem):
        """QString QFontDatabase.writingSystemSample(None self, QFontDatabase.WritingSystem _writingSystem)"""
        return QString()
    def writingSystemName(self, _writingSystem):
        """QString QFontDatabase.writingSystemName(None self, QFontDatabase.WritingSystem _writingSystem)"""
        return QString()
    def weight(self, _family, _style):
        """int QFontDatabase.weight(None self, QString _family, QString _style)"""
        return int()
    def bold(self, _family, _style):
        """bool QFontDatabase.bold(None self, QString _family, QString _style)"""
        return bool()
    def italic(self, _family, _style):
        """bool QFontDatabase.italic(None self, QString _family, QString _style)"""
        return bool()
    def isFixedPitch(self, _family, _style):
        """bool QFontDatabase.isFixedPitch(None self, QString _family, QString _style)"""
        return bool()
    def isScalable(self, _family, _style):
        """bool QFontDatabase.isScalable(None self, QString _family, QString _style)"""
        return bool()
    def isSmoothlyScalable(self, _family, _style):
        """bool QFontDatabase.isSmoothlyScalable(None self, QString _family, QString _style)"""
        return bool()
    def isBitmapScalable(self, _family, _style):
        """bool QFontDatabase.isBitmapScalable(None self, QString _family, QString _style)"""
        return bool()
    def font(self, _family, _style, _pointSize):
        """QFont QFontDatabase.font(None self, QString _family, QString _style, int _pointSize)"""
        return QFont()
    def styleString(self, _font):
        """QString QFontDatabase.styleString(None self, QFont _font)"""
        return QString()
    def styleString(self, _fontInfo):
        """QString QFontDatabase.styleString(None self, QFontInfo _fontInfo)"""
        return QString()
    def smoothSizes(self, _family, _style):
        """list-of-int QFontDatabase.smoothSizes(None self, QString _family, QString _style)"""
        return [int()]
    def pointSizes(self, _family, _style):
        """list-of-int QFontDatabase.pointSizes(None self, QString _family, QString _style)"""
        return [int()]
    def styles(self, _family):
        """QStringList QFontDatabase.styles(None self, QString _family)"""
        return QStringList()
    def families(self, _writingSystem):
        """QStringList QFontDatabase.families(None self, QFontDatabase.WritingSystem _writingSystem)"""
        return QStringList()
    def writingSystems(self):
        """list-of-QFontDatabase.WritingSystem QFontDatabase.writingSystems(None self)"""
        return [QFontDatabase.WritingSystem()]
    def writingSystems(self, _family):
        """list-of-QFontDatabase.WritingSystem QFontDatabase.writingSystems(None self, QString _family)"""
        return [QFontDatabase.WritingSystem()]
    def standardSizes(self):
        """list-of-int QFontDatabase.standardSizes(None self)"""
        return [int()]


class QFontDialog(QDialog):
    """"""
    NoButtons = int() # QFontDialog.FontDialogOption enum
    DontUseNativeDialog = int() # QFontDialog.FontDialogOption enum

    def __init__(self, _parent):
        """None QFontDialog.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _initial, _parent):
        """None QFontDialog.__init__(None self, QFont _initial, QWidget _parent)"""
        return None
    def setVisible(self, _visible):
        """None QFontDialog.setVisible(None self, bool _visible)"""
        return None
    def open(self):
        """None QFontDialog.open(None self)"""
        return None
    def open(self, _receiver, _member):
        """None QFontDialog.open(None self, QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(self, _receiver):
        """None QFontDialog.open(None self, callable _receiver)"""
        return None
    def options(self):
        """QFontDialog.FontDialogOptions QFontDialog.options(None self)"""
        return QFontDialog.FontDialogOptions()
    def setOptions(self, _options):
        """None QFontDialog.setOptions(None self, QFontDialog.FontDialogOptions _options)"""
        return None
    def testOption(self, _option):
        """bool QFontDialog.testOption(None self, QFontDialog.FontDialogOption _option)"""
        return bool()
    def setOption(self, _option, _on):
        """None QFontDialog.setOption(None self, QFontDialog.FontDialogOption _option, bool _on)"""
        return None
    def selectedFont(self):
        """QFont QFontDialog.selectedFont(None self)"""
        return QFont()
    def currentFont(self):
        """QFont QFontDialog.currentFont(None self)"""
        return QFont()
    def setCurrentFont(self, _font):
        """None QFontDialog.setCurrentFont(None self, QFont _font)"""
        return None
    def done(self, _result):
        """None QFontDialog.done(None self, int _result)"""
        return None
    def changeEvent(self, _e):
        """None QFontDialog.changeEvent(None self, QEvent _e)"""
        return None
    def getFont(self, _ok, _initial, _parent, _title, _options):
        """QFont QFontDialog.getFont(None self, bool _ok, QFont _initial, QWidget _parent, QString _title, QFontDialog.FontDialogOptions _options)"""
        return QFont()
    def getFont(self, _ok, _def, _parent, _caption):
        """QFont QFontDialog.getFont(None self, bool _ok, QFont _def, QWidget _parent, QString _caption)"""
        return QFont()
    def getFont(self, _ok, _initial, _parent):
        """QFont QFontDialog.getFont(None self, bool _ok, QFont _initial, QWidget _parent)"""
        return QFont()
    def getFont(self, _ok, _parent):
        """QFont QFontDialog.getFont(None self, bool _ok, QWidget _parent)"""
        return QFont()


class QFontInfo():
    """"""
    def __init__(self):
        """QFont QFontInfo.__init__(None self)"""
        return QFont()
    def __init__(self):
        """QFontInfo QFontInfo.__init__(None self)"""
        return QFontInfo()
    def exactMatch(self):
        """bool QFontInfo.exactMatch(None self)"""
        return bool()
    def rawMode(self):
        """bool QFontInfo.rawMode(None self)"""
        return bool()
    def styleHint(self):
        """QFont.StyleHint QFontInfo.styleHint(None self)"""
        return QFont.StyleHint()
    def fixedPitch(self):
        """bool QFontInfo.fixedPitch(None self)"""
        return bool()
    def bold(self):
        """bool QFontInfo.bold(None self)"""
        return bool()
    def weight(self):
        """int QFontInfo.weight(None self)"""
        return int()
    def style(self):
        """QFont.Style QFontInfo.style(None self)"""
        return QFont.Style()
    def italic(self):
        """bool QFontInfo.italic(None self)"""
        return bool()
    def pointSizeF(self):
        """float QFontInfo.pointSizeF(None self)"""
        return float()
    def pointSize(self):
        """int QFontInfo.pointSize(None self)"""
        return int()
    def pixelSize(self):
        """int QFontInfo.pixelSize(None self)"""
        return int()
    def family(self):
        """QString QFontInfo.family(None self)"""
        return QString()


class QFontMetrics():
    """"""
    def __init__(self):
        """QFont QFontMetrics.__init__(None self)"""
        return QFont()
    def __init__(self, _pd):
        """QFont QFontMetrics.__init__(None self, QPaintDevice _pd)"""
        return QFont()
    def __init__(self):
        """QFontMetrics QFontMetrics.__init__(None self)"""
        return QFontMetrics()
    def tightBoundingRect(self, _text):
        """QRect QFontMetrics.tightBoundingRect(None self, QString _text)"""
        return QRect()
    def __ne__(self, _other):
        """bool QFontMetrics.__ne__(None self, QFontMetrics _other)"""
        return bool()
    def __eq__(self, _other):
        """bool QFontMetrics.__eq__(None self, QFontMetrics _other)"""
        return bool()
    def elidedText(self, _text, _mode, _width, _flags):
        """QString QFontMetrics.elidedText(None self, QString _text, Qt.TextElideMode _mode, int _width, int _flags)"""
        return QString()
    def averageCharWidth(self):
        """int QFontMetrics.averageCharWidth(None self)"""
        return int()
    def lineWidth(self):
        """int QFontMetrics.lineWidth(None self)"""
        return int()
    def strikeOutPos(self):
        """int QFontMetrics.strikeOutPos(None self)"""
        return int()
    def overlinePos(self):
        """int QFontMetrics.overlinePos(None self)"""
        return int()
    def underlinePos(self):
        """int QFontMetrics.underlinePos(None self)"""
        return int()
    def size(self, _flags, _text, _tabStops, _tabArray):
        """QSize QFontMetrics.size(None self, int _flags, QString _text, int _tabStops, list-of-int _tabArray)"""
        return QSize()
    def boundingRect(self):
        """QChar QFontMetrics.boundingRect(None self)"""
        return QChar()
    def boundingRect(self, _text):
        """QRect QFontMetrics.boundingRect(None self, QString _text)"""
        return QRect()
    def boundingRect(self, _rect, _flags, _text, _tabStops, _tabArray):
        """QRect QFontMetrics.boundingRect(None self, QRect _rect, int _flags, QString _text, int _tabStops, list-of-int _tabArray)"""
        return QRect()
    def boundingRect(self, _x, _y, _width, _height, _flags, _text, _tabStops, _tabArray):
        """QRect QFontMetrics.boundingRect(None self, int _x, int _y, int _width, int _height, int _flags, QString _text, int _tabStops, list-of-int _tabArray)"""
        return QRect()
    def boundingRectChar(self):
        """QChar QFontMetrics.boundingRectChar(None self)"""
        return QChar()
    def charWidth(self, _str, _pos):
        """int QFontMetrics.charWidth(None self, QString _str, int _pos)"""
        return int()
    def width(self):
        """QChar QFontMetrics.width(None self)"""
        return QChar()
    def width(self, _text, _length):
        """int QFontMetrics.width(None self, QString _text, int _length)"""
        return int()
    def widthChar(self):
        """QChar QFontMetrics.widthChar(None self)"""
        return QChar()
    def rightBearing(self):
        """QChar QFontMetrics.rightBearing(None self)"""
        return QChar()
    def leftBearing(self):
        """QChar QFontMetrics.leftBearing(None self)"""
        return QChar()
    def inFont(self):
        """QChar QFontMetrics.inFont(None self)"""
        return QChar()
    def xHeight(self):
        """int QFontMetrics.xHeight(None self)"""
        return int()
    def maxWidth(self):
        """int QFontMetrics.maxWidth(None self)"""
        return int()
    def minRightBearing(self):
        """int QFontMetrics.minRightBearing(None self)"""
        return int()
    def minLeftBearing(self):
        """int QFontMetrics.minLeftBearing(None self)"""
        return int()
    def lineSpacing(self):
        """int QFontMetrics.lineSpacing(None self)"""
        return int()
    def leading(self):
        """int QFontMetrics.leading(None self)"""
        return int()
    def height(self):
        """int QFontMetrics.height(None self)"""
        return int()
    def descent(self):
        """int QFontMetrics.descent(None self)"""
        return int()
    def ascent(self):
        """int QFontMetrics.ascent(None self)"""
        return int()


class QFontMetricsF():
    """"""
    def __init__(self):
        """QFont QFontMetricsF.__init__(None self)"""
        return QFont()
    def __init__(self, _pd):
        """QFont QFontMetricsF.__init__(None self, QPaintDevice _pd)"""
        return QFont()
    def __init__(self):
        """QFontMetrics QFontMetricsF.__init__(None self)"""
        return QFontMetrics()
    def __init__(self):
        """QFontMetricsF QFontMetricsF.__init__(None self)"""
        return QFontMetricsF()
    def tightBoundingRect(self, _text):
        """QRectF QFontMetricsF.tightBoundingRect(None self, QString _text)"""
        return QRectF()
    def __ne__(self, _other):
        """bool QFontMetricsF.__ne__(None self, QFontMetricsF _other)"""
        return bool()
    def __eq__(self, _other):
        """bool QFontMetricsF.__eq__(None self, QFontMetricsF _other)"""
        return bool()
    def elidedText(self, _text, _mode, _width, _flags):
        """QString QFontMetricsF.elidedText(None self, QString _text, Qt.TextElideMode _mode, float _width, int _flags)"""
        return QString()
    def averageCharWidth(self):
        """float QFontMetricsF.averageCharWidth(None self)"""
        return float()
    def lineWidth(self):
        """float QFontMetricsF.lineWidth(None self)"""
        return float()
    def strikeOutPos(self):
        """float QFontMetricsF.strikeOutPos(None self)"""
        return float()
    def overlinePos(self):
        """float QFontMetricsF.overlinePos(None self)"""
        return float()
    def underlinePos(self):
        """float QFontMetricsF.underlinePos(None self)"""
        return float()
    def size(self, _flags, _text, _tabStops, _tabArray):
        """QSizeF QFontMetricsF.size(None self, int _flags, QString _text, int _tabStops, list-of-int _tabArray)"""
        return QSizeF()
    def boundingRect(self):
        """QChar QFontMetricsF.boundingRect(None self)"""
        return QChar()
    def boundingRect(self, _string):
        """QRectF QFontMetricsF.boundingRect(None self, QString _string)"""
        return QRectF()
    def boundingRect(self, _rect, _flags, _text, _tabStops, _tabArray):
        """QRectF QFontMetricsF.boundingRect(None self, QRectF _rect, int _flags, QString _text, int _tabStops, list-of-int _tabArray)"""
        return QRectF()
    def boundingRectChar(self):
        """QChar QFontMetricsF.boundingRectChar(None self)"""
        return QChar()
    def width(self):
        """QChar QFontMetricsF.width(None self)"""
        return QChar()
    def width(self, _string):
        """float QFontMetricsF.width(None self, QString _string)"""
        return float()
    def widthChar(self):
        """QChar QFontMetricsF.widthChar(None self)"""
        return QChar()
    def rightBearing(self):
        """QChar QFontMetricsF.rightBearing(None self)"""
        return QChar()
    def leftBearing(self):
        """QChar QFontMetricsF.leftBearing(None self)"""
        return QChar()
    def inFont(self):
        """QChar QFontMetricsF.inFont(None self)"""
        return QChar()
    def xHeight(self):
        """float QFontMetricsF.xHeight(None self)"""
        return float()
    def maxWidth(self):
        """float QFontMetricsF.maxWidth(None self)"""
        return float()
    def minRightBearing(self):
        """float QFontMetricsF.minRightBearing(None self)"""
        return float()
    def minLeftBearing(self):
        """float QFontMetricsF.minLeftBearing(None self)"""
        return float()
    def lineSpacing(self):
        """float QFontMetricsF.lineSpacing(None self)"""
        return float()
    def leading(self):
        """float QFontMetricsF.leading(None self)"""
        return float()
    def height(self):
        """float QFontMetricsF.height(None self)"""
        return float()
    def descent(self):
        """float QFontMetricsF.descent(None self)"""
        return float()
    def ascent(self):
        """float QFontMetricsF.ascent(None self)"""
        return float()


class QFormLayout(QLayout):
    """"""
    LabelRole = int() # QFormLayout.ItemRole enum
    FieldRole = int() # QFormLayout.ItemRole enum
    SpanningRole = int() # QFormLayout.ItemRole enum

    DontWrapRows = int() # QFormLayout.RowWrapPolicy enum
    WrapLongRows = int() # QFormLayout.RowWrapPolicy enum
    WrapAllRows = int() # QFormLayout.RowWrapPolicy enum

    FieldsStayAtSizeHint = int() # QFormLayout.FieldGrowthPolicy enum
    ExpandingFieldsGrow = int() # QFormLayout.FieldGrowthPolicy enum
    AllNonFixedFieldsGrow = int() # QFormLayout.FieldGrowthPolicy enum

    def __init__(self, _parent):
        """None QFormLayout.__init__(None self, QWidget _parent)"""
        return None
    def rowCount(self):
        """int QFormLayout.rowCount(None self)"""
        return int()
    def count(self):
        """int QFormLayout.count(None self)"""
        return int()
    def expandingDirections(self):
        """Qt.Orientations QFormLayout.expandingDirections(None self)"""
        return Qt.Orientations()
    def heightForWidth(self, _width):
        """int QFormLayout.heightForWidth(None self, int _width)"""
        return int()
    def hasHeightForWidth(self):
        """bool QFormLayout.hasHeightForWidth(None self)"""
        return bool()
    def invalidate(self):
        """None QFormLayout.invalidate(None self)"""
        return None
    def sizeHint(self):
        """QSize QFormLayout.sizeHint(None self)"""
        return QSize()
    def minimumSize(self):
        """QSize QFormLayout.minimumSize(None self)"""
        return QSize()
    def setGeometry(self, _rect):
        """None QFormLayout.setGeometry(None self, QRect _rect)"""
        return None
    def takeAt(self, _index):
        """QLayoutItem QFormLayout.takeAt(None self, int _index)"""
        return QLayoutItem()
    def addItem(self, _item):
        """None QFormLayout.addItem(None self, QLayoutItem _item)"""
        return None
    def labelForField(self, _field):
        """QWidget QFormLayout.labelForField(None self, QWidget _field)"""
        return QWidget()
    def labelForField(self, _field):
        """QWidget QFormLayout.labelForField(None self, QLayout _field)"""
        return QWidget()
    def getLayoutPosition(self, _layout, _rowPtr, _rolePtr):
        """None QFormLayout.getLayoutPosition(None self, QLayout _layout, int _rowPtr, QFormLayout.ItemRole _rolePtr)"""
        return None
    def getWidgetPosition(self, _widget, _rowPtr, _rolePtr):
        """None QFormLayout.getWidgetPosition(None self, QWidget _widget, int _rowPtr, QFormLayout.ItemRole _rolePtr)"""
        return None
    def getItemPosition(self, _index, _rowPtr, _rolePtr):
        """None QFormLayout.getItemPosition(None self, int _index, int _rowPtr, QFormLayout.ItemRole _rolePtr)"""
        return None
    def itemAt(self, _row, _role):
        """QLayoutItem QFormLayout.itemAt(None self, int _row, QFormLayout.ItemRole _role)"""
        return QLayoutItem()
    def itemAt(self, _index):
        """QLayoutItem QFormLayout.itemAt(None self, int _index)"""
        return QLayoutItem()
    def setLayout(self, _row, _role, _layout):
        """None QFormLayout.setLayout(None self, int _row, QFormLayout.ItemRole _role, QLayout _layout)"""
        return None
    def setWidget(self, _row, _role, _widget):
        """None QFormLayout.setWidget(None self, int _row, QFormLayout.ItemRole _role, QWidget _widget)"""
        return None
    def setItem(self, _row, _role, _item):
        """None QFormLayout.setItem(None self, int _row, QFormLayout.ItemRole _role, QLayoutItem _item)"""
        return None
    def insertRow(self, _row, _label, _field):
        """None QFormLayout.insertRow(None self, int _row, QWidget _label, QWidget _field)"""
        return None
    def insertRow(self, _row, _label, _field):
        """None QFormLayout.insertRow(None self, int _row, QWidget _label, QLayout _field)"""
        return None
    def insertRow(self, _row, _labelText, _field):
        """None QFormLayout.insertRow(None self, int _row, QString _labelText, QWidget _field)"""
        return None
    def insertRow(self, _row, _labelText, _field):
        """None QFormLayout.insertRow(None self, int _row, QString _labelText, QLayout _field)"""
        return None
    def insertRow(self, _row, _widget):
        """None QFormLayout.insertRow(None self, int _row, QWidget _widget)"""
        return None
    def insertRow(self, _row, _layout):
        """None QFormLayout.insertRow(None self, int _row, QLayout _layout)"""
        return None
    def addRow(self, _label, _field):
        """None QFormLayout.addRow(None self, QWidget _label, QWidget _field)"""
        return None
    def addRow(self, _label, _field):
        """None QFormLayout.addRow(None self, QWidget _label, QLayout _field)"""
        return None
    def addRow(self, _labelText, _field):
        """None QFormLayout.addRow(None self, QString _labelText, QWidget _field)"""
        return None
    def addRow(self, _labelText, _field):
        """None QFormLayout.addRow(None self, QString _labelText, QLayout _field)"""
        return None
    def addRow(self, _widget):
        """None QFormLayout.addRow(None self, QWidget _widget)"""
        return None
    def addRow(self, _layout):
        """None QFormLayout.addRow(None self, QLayout _layout)"""
        return None
    def setSpacing(self):
        """int QFormLayout.setSpacing(None self)"""
        return int()
    def spacing(self):
        """int QFormLayout.spacing(None self)"""
        return int()
    def verticalSpacing(self):
        """int QFormLayout.verticalSpacing(None self)"""
        return int()
    def setVerticalSpacing(self, _spacing):
        """None QFormLayout.setVerticalSpacing(None self, int _spacing)"""
        return None
    def horizontalSpacing(self):
        """int QFormLayout.horizontalSpacing(None self)"""
        return int()
    def setHorizontalSpacing(self, _spacing):
        """None QFormLayout.setHorizontalSpacing(None self, int _spacing)"""
        return None
    def formAlignment(self):
        """Qt.Alignment QFormLayout.formAlignment(None self)"""
        return Qt.Alignment()
    def setFormAlignment(self, _alignment):
        """None QFormLayout.setFormAlignment(None self, Qt.Alignment _alignment)"""
        return None
    def labelAlignment(self):
        """Qt.Alignment QFormLayout.labelAlignment(None self)"""
        return Qt.Alignment()
    def setLabelAlignment(self, _alignment):
        """None QFormLayout.setLabelAlignment(None self, Qt.Alignment _alignment)"""
        return None
    def rowWrapPolicy(self):
        """QFormLayout.RowWrapPolicy QFormLayout.rowWrapPolicy(None self)"""
        return QFormLayout.RowWrapPolicy()
    def setRowWrapPolicy(self, _policy):
        """None QFormLayout.setRowWrapPolicy(None self, QFormLayout.RowWrapPolicy _policy)"""
        return None
    def fieldGrowthPolicy(self):
        """QFormLayout.FieldGrowthPolicy QFormLayout.fieldGrowthPolicy(None self)"""
        return QFormLayout.FieldGrowthPolicy()
    def setFieldGrowthPolicy(self, _policy):
        """None QFormLayout.setFieldGrowthPolicy(None self, QFormLayout.FieldGrowthPolicy _policy)"""
        return None


class QMatrix4x3():
    """"""
    def __init__(self):
        """None QMatrix4x3.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QMatrix4x3.__init__(None self, QMatrix4x3 _other)"""
        return None
    def __init__(self, _values):
        """None QMatrix4x3.__init__(None self, sequence-of-float _values)"""
        return None
    def __ne__(self):
        """QMatrix4x3 QMatrix4x3.__ne__(None self)"""
        return QMatrix4x3()
    def __eq__(self):
        """QMatrix4x3 QMatrix4x3.__eq__(None self)"""
        return QMatrix4x3()
    def __idiv__(self):
        """float QMatrix4x3.__idiv__(None self)"""
        return float()
    def __imul__(self):
        """float QMatrix4x3.__imul__(None self)"""
        return float()
    def __isub__(self):
        """QMatrix4x3 QMatrix4x3.__isub__(None self)"""
        return QMatrix4x3()
    def __iadd__(self):
        """QMatrix4x3 QMatrix4x3.__iadd__(None self)"""
        return QMatrix4x3()
    def transposed(self):
        """QMatrix3x4 QMatrix4x3.transposed(None self)"""
        return QMatrix3x4()
    def fill(self, _value):
        """None QMatrix4x3.fill(None self, float _value)"""
        return None
    def setToIdentity(self):
        """None QMatrix4x3.setToIdentity(None self)"""
        return None
    def isIdentity(self):
        """bool QMatrix4x3.isIdentity(None self)"""
        return bool()
    def __setitem__(self):
        """float QMatrix4x3.__setitem__(None self)"""
        return float()
    def __getitem__(self):
        """object QMatrix4x3.__getitem__(None self)"""
        return object()
    def copyDataTo(self):
        """list-of-float QMatrix4x3.copyDataTo(None self)"""
        return [float()]
    def data(self):
        """list-of-float QMatrix4x3.data(None self)"""
        return [float()]
    def __repr__(self):
        """str QMatrix4x3.__repr__(None self)"""
        return str()


class QMatrix4x2():
    """"""
    def __init__(self):
        """None QMatrix4x2.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QMatrix4x2.__init__(None self, QMatrix4x2 _other)"""
        return None
    def __init__(self, _values):
        """None QMatrix4x2.__init__(None self, sequence-of-float _values)"""
        return None
    def __ne__(self):
        """QMatrix4x2 QMatrix4x2.__ne__(None self)"""
        return QMatrix4x2()
    def __eq__(self):
        """QMatrix4x2 QMatrix4x2.__eq__(None self)"""
        return QMatrix4x2()
    def __idiv__(self):
        """float QMatrix4x2.__idiv__(None self)"""
        return float()
    def __imul__(self):
        """float QMatrix4x2.__imul__(None self)"""
        return float()
    def __isub__(self):
        """QMatrix4x2 QMatrix4x2.__isub__(None self)"""
        return QMatrix4x2()
    def __iadd__(self):
        """QMatrix4x2 QMatrix4x2.__iadd__(None self)"""
        return QMatrix4x2()
    def transposed(self):
        """QMatrix2x4 QMatrix4x2.transposed(None self)"""
        return QMatrix2x4()
    def fill(self, _value):
        """None QMatrix4x2.fill(None self, float _value)"""
        return None
    def setToIdentity(self):
        """None QMatrix4x2.setToIdentity(None self)"""
        return None
    def isIdentity(self):
        """bool QMatrix4x2.isIdentity(None self)"""
        return bool()
    def __setitem__(self):
        """float QMatrix4x2.__setitem__(None self)"""
        return float()
    def __getitem__(self):
        """object QMatrix4x2.__getitem__(None self)"""
        return object()
    def copyDataTo(self):
        """list-of-float QMatrix4x2.copyDataTo(None self)"""
        return [float()]
    def data(self):
        """list-of-float QMatrix4x2.data(None self)"""
        return [float()]
    def __repr__(self):
        """str QMatrix4x2.__repr__(None self)"""
        return str()


class QMatrix3x4():
    """"""
    def __init__(self):
        """None QMatrix3x4.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QMatrix3x4.__init__(None self, QMatrix3x4 _other)"""
        return None
    def __init__(self, _values):
        """None QMatrix3x4.__init__(None self, sequence-of-float _values)"""
        return None
    def __ne__(self):
        """QMatrix3x4 QMatrix3x4.__ne__(None self)"""
        return QMatrix3x4()
    def __eq__(self):
        """QMatrix3x4 QMatrix3x4.__eq__(None self)"""
        return QMatrix3x4()
    def __idiv__(self):
        """float QMatrix3x4.__idiv__(None self)"""
        return float()
    def __imul__(self):
        """float QMatrix3x4.__imul__(None self)"""
        return float()
    def __isub__(self):
        """QMatrix3x4 QMatrix3x4.__isub__(None self)"""
        return QMatrix3x4()
    def __iadd__(self):
        """QMatrix3x4 QMatrix3x4.__iadd__(None self)"""
        return QMatrix3x4()
    def transposed(self):
        """QMatrix4x3 QMatrix3x4.transposed(None self)"""
        return QMatrix4x3()
    def fill(self, _value):
        """None QMatrix3x4.fill(None self, float _value)"""
        return None
    def setToIdentity(self):
        """None QMatrix3x4.setToIdentity(None self)"""
        return None
    def isIdentity(self):
        """bool QMatrix3x4.isIdentity(None self)"""
        return bool()
    def __setitem__(self):
        """float QMatrix3x4.__setitem__(None self)"""
        return float()
    def __getitem__(self):
        """object QMatrix3x4.__getitem__(None self)"""
        return object()
    def copyDataTo(self):
        """list-of-float QMatrix3x4.copyDataTo(None self)"""
        return [float()]
    def data(self):
        """list-of-float QMatrix3x4.data(None self)"""
        return [float()]
    def __repr__(self):
        """str QMatrix3x4.__repr__(None self)"""
        return str()


class QMatrix3x3():
    """"""
    def __init__(self):
        """None QMatrix3x3.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QMatrix3x3.__init__(None self, QMatrix3x3 _other)"""
        return None
    def __init__(self, _values):
        """None QMatrix3x3.__init__(None self, sequence-of-float _values)"""
        return None
    def __ne__(self):
        """QMatrix3x3 QMatrix3x3.__ne__(None self)"""
        return QMatrix3x3()
    def __eq__(self):
        """QMatrix3x3 QMatrix3x3.__eq__(None self)"""
        return QMatrix3x3()
    def __idiv__(self):
        """float QMatrix3x3.__idiv__(None self)"""
        return float()
    def __imul__(self):
        """float QMatrix3x3.__imul__(None self)"""
        return float()
    def __isub__(self):
        """QMatrix3x3 QMatrix3x3.__isub__(None self)"""
        return QMatrix3x3()
    def __iadd__(self):
        """QMatrix3x3 QMatrix3x3.__iadd__(None self)"""
        return QMatrix3x3()
    def transposed(self):
        """QMatrix3x3 QMatrix3x3.transposed(None self)"""
        return QMatrix3x3()
    def fill(self, _value):
        """None QMatrix3x3.fill(None self, float _value)"""
        return None
    def setToIdentity(self):
        """None QMatrix3x3.setToIdentity(None self)"""
        return None
    def isIdentity(self):
        """bool QMatrix3x3.isIdentity(None self)"""
        return bool()
    def __setitem__(self):
        """float QMatrix3x3.__setitem__(None self)"""
        return float()
    def __getitem__(self):
        """object QMatrix3x3.__getitem__(None self)"""
        return object()
    def copyDataTo(self):
        """list-of-float QMatrix3x3.copyDataTo(None self)"""
        return [float()]
    def data(self):
        """list-of-float QMatrix3x3.data(None self)"""
        return [float()]
    def __repr__(self):
        """str QMatrix3x3.__repr__(None self)"""
        return str()


class QMatrix3x2():
    """"""
    def __init__(self):
        """None QMatrix3x2.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QMatrix3x2.__init__(None self, QMatrix3x2 _other)"""
        return None
    def __init__(self, _values):
        """None QMatrix3x2.__init__(None self, sequence-of-float _values)"""
        return None
    def __ne__(self):
        """QMatrix3x2 QMatrix3x2.__ne__(None self)"""
        return QMatrix3x2()
    def __eq__(self):
        """QMatrix3x2 QMatrix3x2.__eq__(None self)"""
        return QMatrix3x2()
    def __idiv__(self):
        """float QMatrix3x2.__idiv__(None self)"""
        return float()
    def __imul__(self):
        """float QMatrix3x2.__imul__(None self)"""
        return float()
    def __isub__(self):
        """QMatrix3x2 QMatrix3x2.__isub__(None self)"""
        return QMatrix3x2()
    def __iadd__(self):
        """QMatrix3x2 QMatrix3x2.__iadd__(None self)"""
        return QMatrix3x2()
    def transposed(self):
        """QMatrix2x3 QMatrix3x2.transposed(None self)"""
        return QMatrix2x3()
    def fill(self, _value):
        """None QMatrix3x2.fill(None self, float _value)"""
        return None
    def setToIdentity(self):
        """None QMatrix3x2.setToIdentity(None self)"""
        return None
    def isIdentity(self):
        """bool QMatrix3x2.isIdentity(None self)"""
        return bool()
    def __setitem__(self):
        """float QMatrix3x2.__setitem__(None self)"""
        return float()
    def __getitem__(self):
        """object QMatrix3x2.__getitem__(None self)"""
        return object()
    def copyDataTo(self):
        """list-of-float QMatrix3x2.copyDataTo(None self)"""
        return [float()]
    def data(self):
        """list-of-float QMatrix3x2.data(None self)"""
        return [float()]
    def __repr__(self):
        """str QMatrix3x2.__repr__(None self)"""
        return str()


class QMatrix2x4():
    """"""
    def __init__(self):
        """None QMatrix2x4.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QMatrix2x4.__init__(None self, QMatrix2x4 _other)"""
        return None
    def __init__(self, _values):
        """None QMatrix2x4.__init__(None self, sequence-of-float _values)"""
        return None
    def __ne__(self):
        """QMatrix2x4 QMatrix2x4.__ne__(None self)"""
        return QMatrix2x4()
    def __eq__(self):
        """QMatrix2x4 QMatrix2x4.__eq__(None self)"""
        return QMatrix2x4()
    def __idiv__(self):
        """float QMatrix2x4.__idiv__(None self)"""
        return float()
    def __imul__(self):
        """float QMatrix2x4.__imul__(None self)"""
        return float()
    def __isub__(self):
        """QMatrix2x4 QMatrix2x4.__isub__(None self)"""
        return QMatrix2x4()
    def __iadd__(self):
        """QMatrix2x4 QMatrix2x4.__iadd__(None self)"""
        return QMatrix2x4()
    def transposed(self):
        """QMatrix4x2 QMatrix2x4.transposed(None self)"""
        return QMatrix4x2()
    def fill(self, _value):
        """None QMatrix2x4.fill(None self, float _value)"""
        return None
    def setToIdentity(self):
        """None QMatrix2x4.setToIdentity(None self)"""
        return None
    def isIdentity(self):
        """bool QMatrix2x4.isIdentity(None self)"""
        return bool()
    def __setitem__(self):
        """float QMatrix2x4.__setitem__(None self)"""
        return float()
    def __getitem__(self):
        """object QMatrix2x4.__getitem__(None self)"""
        return object()
    def copyDataTo(self):
        """list-of-float QMatrix2x4.copyDataTo(None self)"""
        return [float()]
    def data(self):
        """list-of-float QMatrix2x4.data(None self)"""
        return [float()]
    def __repr__(self):
        """str QMatrix2x4.__repr__(None self)"""
        return str()


class QMatrix2x3():
    """"""
    def __init__(self):
        """None QMatrix2x3.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QMatrix2x3.__init__(None self, QMatrix2x3 _other)"""
        return None
    def __init__(self, _values):
        """None QMatrix2x3.__init__(None self, sequence-of-float _values)"""
        return None
    def __ne__(self):
        """QMatrix2x3 QMatrix2x3.__ne__(None self)"""
        return QMatrix2x3()
    def __eq__(self):
        """QMatrix2x3 QMatrix2x3.__eq__(None self)"""
        return QMatrix2x3()
    def __idiv__(self):
        """float QMatrix2x3.__idiv__(None self)"""
        return float()
    def __imul__(self):
        """float QMatrix2x3.__imul__(None self)"""
        return float()
    def __isub__(self):
        """QMatrix2x3 QMatrix2x3.__isub__(None self)"""
        return QMatrix2x3()
    def __iadd__(self):
        """QMatrix2x3 QMatrix2x3.__iadd__(None self)"""
        return QMatrix2x3()
    def transposed(self):
        """QMatrix3x2 QMatrix2x3.transposed(None self)"""
        return QMatrix3x2()
    def fill(self, _value):
        """None QMatrix2x3.fill(None self, float _value)"""
        return None
    def setToIdentity(self):
        """None QMatrix2x3.setToIdentity(None self)"""
        return None
    def isIdentity(self):
        """bool QMatrix2x3.isIdentity(None self)"""
        return bool()
    def __setitem__(self):
        """float QMatrix2x3.__setitem__(None self)"""
        return float()
    def __getitem__(self):
        """object QMatrix2x3.__getitem__(None self)"""
        return object()
    def copyDataTo(self):
        """list-of-float QMatrix2x3.copyDataTo(None self)"""
        return [float()]
    def data(self):
        """list-of-float QMatrix2x3.data(None self)"""
        return [float()]
    def __repr__(self):
        """str QMatrix2x3.__repr__(None self)"""
        return str()


class QMatrix2x2():
    """"""
    def __init__(self):
        """None QMatrix2x2.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QMatrix2x2.__init__(None self, QMatrix2x2 _other)"""
        return None
    def __init__(self, _values):
        """None QMatrix2x2.__init__(None self, sequence-of-float _values)"""
        return None
    def __ne__(self):
        """QMatrix2x2 QMatrix2x2.__ne__(None self)"""
        return QMatrix2x2()
    def __eq__(self):
        """QMatrix2x2 QMatrix2x2.__eq__(None self)"""
        return QMatrix2x2()
    def __idiv__(self):
        """float QMatrix2x2.__idiv__(None self)"""
        return float()
    def __imul__(self):
        """float QMatrix2x2.__imul__(None self)"""
        return float()
    def __isub__(self):
        """QMatrix2x2 QMatrix2x2.__isub__(None self)"""
        return QMatrix2x2()
    def __iadd__(self):
        """QMatrix2x2 QMatrix2x2.__iadd__(None self)"""
        return QMatrix2x2()
    def transposed(self):
        """QMatrix2x2 QMatrix2x2.transposed(None self)"""
        return QMatrix2x2()
    def fill(self, _value):
        """None QMatrix2x2.fill(None self, float _value)"""
        return None
    def setToIdentity(self):
        """None QMatrix2x2.setToIdentity(None self)"""
        return None
    def isIdentity(self):
        """bool QMatrix2x2.isIdentity(None self)"""
        return bool()
    def __setitem__(self):
        """float QMatrix2x2.__setitem__(None self)"""
        return float()
    def __getitem__(self):
        """object QMatrix2x2.__getitem__(None self)"""
        return object()
    def copyDataTo(self):
        """list-of-float QMatrix2x2.copyDataTo(None self)"""
        return [float()]
    def data(self):
        """list-of-float QMatrix2x2.data(None self)"""
        return [float()]
    def __repr__(self):
        """str QMatrix2x2.__repr__(None self)"""
        return str()


class QGesture(QObject):
    """"""
    CancelNone = int() # QGesture.GestureCancelPolicy enum
    CancelAllInContext = int() # QGesture.GestureCancelPolicy enum

    def __init__(self, _parent):
        """None QGesture.__init__(None self, QObject _parent)"""
        return None
    def gestureCancelPolicy(self):
        """QGesture.GestureCancelPolicy QGesture.gestureCancelPolicy(None self)"""
        return QGesture.GestureCancelPolicy()
    def setGestureCancelPolicy(self, _policy):
        """None QGesture.setGestureCancelPolicy(None self, QGesture.GestureCancelPolicy _policy)"""
        return None
    def unsetHotSpot(self):
        """None QGesture.unsetHotSpot(None self)"""
        return None
    def hasHotSpot(self):
        """bool QGesture.hasHotSpot(None self)"""
        return bool()
    def setHotSpot(self, _value):
        """None QGesture.setHotSpot(None self, QPointF _value)"""
        return None
    def hotSpot(self):
        """QPointF QGesture.hotSpot(None self)"""
        return QPointF()
    def state(self):
        """Qt.GestureState QGesture.state(None self)"""
        return Qt.GestureState()
    def gestureType(self):
        """Qt.GestureType QGesture.gestureType(None self)"""
        return Qt.GestureType()


class QPanGesture(QGesture):
    """"""
    def __init__(self, _parent):
        """None QPanGesture.__init__(None self, QObject _parent)"""
        return None
    def setAcceleration(self, _value):
        """None QPanGesture.setAcceleration(None self, float _value)"""
        return None
    def setOffset(self, _value):
        """None QPanGesture.setOffset(None self, QPointF _value)"""
        return None
    def setLastOffset(self, _value):
        """None QPanGesture.setLastOffset(None self, QPointF _value)"""
        return None
    def acceleration(self):
        """float QPanGesture.acceleration(None self)"""
        return float()
    def delta(self):
        """QPointF QPanGesture.delta(None self)"""
        return QPointF()
    def offset(self):
        """QPointF QPanGesture.offset(None self)"""
        return QPointF()
    def lastOffset(self):
        """QPointF QPanGesture.lastOffset(None self)"""
        return QPointF()


class QPinchGesture(QGesture):
    """"""
    ScaleFactorChanged = int() # QPinchGesture.ChangeFlag enum
    RotationAngleChanged = int() # QPinchGesture.ChangeFlag enum
    CenterPointChanged = int() # QPinchGesture.ChangeFlag enum

    def __init__(self, _parent):
        """None QPinchGesture.__init__(None self, QObject _parent)"""
        return None
    def setRotationAngle(self, _value):
        """None QPinchGesture.setRotationAngle(None self, float _value)"""
        return None
    def setLastRotationAngle(self, _value):
        """None QPinchGesture.setLastRotationAngle(None self, float _value)"""
        return None
    def setTotalRotationAngle(self, _value):
        """None QPinchGesture.setTotalRotationAngle(None self, float _value)"""
        return None
    def rotationAngle(self):
        """float QPinchGesture.rotationAngle(None self)"""
        return float()
    def lastRotationAngle(self):
        """float QPinchGesture.lastRotationAngle(None self)"""
        return float()
    def totalRotationAngle(self):
        """float QPinchGesture.totalRotationAngle(None self)"""
        return float()
    def setScaleFactor(self, _value):
        """None QPinchGesture.setScaleFactor(None self, float _value)"""
        return None
    def setLastScaleFactor(self, _value):
        """None QPinchGesture.setLastScaleFactor(None self, float _value)"""
        return None
    def setTotalScaleFactor(self, _value):
        """None QPinchGesture.setTotalScaleFactor(None self, float _value)"""
        return None
    def scaleFactor(self):
        """float QPinchGesture.scaleFactor(None self)"""
        return float()
    def lastScaleFactor(self):
        """float QPinchGesture.lastScaleFactor(None self)"""
        return float()
    def totalScaleFactor(self):
        """float QPinchGesture.totalScaleFactor(None self)"""
        return float()
    def setCenterPoint(self, _value):
        """None QPinchGesture.setCenterPoint(None self, QPointF _value)"""
        return None
    def setLastCenterPoint(self, _value):
        """None QPinchGesture.setLastCenterPoint(None self, QPointF _value)"""
        return None
    def setStartCenterPoint(self, _value):
        """None QPinchGesture.setStartCenterPoint(None self, QPointF _value)"""
        return None
    def centerPoint(self):
        """QPointF QPinchGesture.centerPoint(None self)"""
        return QPointF()
    def lastCenterPoint(self):
        """QPointF QPinchGesture.lastCenterPoint(None self)"""
        return QPointF()
    def startCenterPoint(self):
        """QPointF QPinchGesture.startCenterPoint(None self)"""
        return QPointF()
    def setChangeFlags(self, _value):
        """None QPinchGesture.setChangeFlags(None self, QPinchGesture.ChangeFlags _value)"""
        return None
    def changeFlags(self):
        """QPinchGesture.ChangeFlags QPinchGesture.changeFlags(None self)"""
        return QPinchGesture.ChangeFlags()
    def setTotalChangeFlags(self, _value):
        """None QPinchGesture.setTotalChangeFlags(None self, QPinchGesture.ChangeFlags _value)"""
        return None
    def totalChangeFlags(self):
        """QPinchGesture.ChangeFlags QPinchGesture.totalChangeFlags(None self)"""
        return QPinchGesture.ChangeFlags()


class QSwipeGesture(QGesture):
    """"""
    NoDirection = int() # QSwipeGesture.SwipeDirection enum
    Left = int() # QSwipeGesture.SwipeDirection enum
    Right = int() # QSwipeGesture.SwipeDirection enum
    Up = int() # QSwipeGesture.SwipeDirection enum
    Down = int() # QSwipeGesture.SwipeDirection enum

    def __init__(self, _parent):
        """None QSwipeGesture.__init__(None self, QObject _parent)"""
        return None
    def setSwipeAngle(self, _value):
        """None QSwipeGesture.setSwipeAngle(None self, float _value)"""
        return None
    def swipeAngle(self):
        """float QSwipeGesture.swipeAngle(None self)"""
        return float()
    def verticalDirection(self):
        """QSwipeGesture.SwipeDirection QSwipeGesture.verticalDirection(None self)"""
        return QSwipeGesture.SwipeDirection()
    def horizontalDirection(self):
        """QSwipeGesture.SwipeDirection QSwipeGesture.horizontalDirection(None self)"""
        return QSwipeGesture.SwipeDirection()


class QTapGesture(QGesture):
    """"""
    def __init__(self, _parent):
        """None QTapGesture.__init__(None self, QObject _parent)"""
        return None
    def setPosition(self, _pos):
        """None QTapGesture.setPosition(None self, QPointF _pos)"""
        return None
    def position(self):
        """QPointF QTapGesture.position(None self)"""
        return QPointF()


class QTapAndHoldGesture(QGesture):
    """"""
    def __init__(self, _parent):
        """None QTapAndHoldGesture.__init__(None self, QObject _parent)"""
        return None
    def timeout(self):
        """int QTapAndHoldGesture.timeout(None self)"""
        return int()
    def setTimeout(self, _msecs):
        """None QTapAndHoldGesture.setTimeout(None self, int _msecs)"""
        return None
    def setPosition(self, _pos):
        """None QTapAndHoldGesture.setPosition(None self, QPointF _pos)"""
        return None
    def position(self):
        """QPointF QTapAndHoldGesture.position(None self)"""
        return QPointF()


class QGestureRecognizer():
    """"""
    Ignore = int() # QGestureRecognizer.ResultFlag enum
    MayBeGesture = int() # QGestureRecognizer.ResultFlag enum
    TriggerGesture = int() # QGestureRecognizer.ResultFlag enum
    FinishGesture = int() # QGestureRecognizer.ResultFlag enum
    CancelGesture = int() # QGestureRecognizer.ResultFlag enum
    ConsumeEventHint = int() # QGestureRecognizer.ResultFlag enum

    def __init__(self):
        """None QGestureRecognizer.__init__(None self)"""
        return None
    def __init__(self):
        """QGestureRecognizer QGestureRecognizer.__init__(None self)"""
        return QGestureRecognizer()
    def unregisterRecognizer(self, _type):
        """None QGestureRecognizer.unregisterRecognizer(None self, Qt.GestureType _type)"""
        return None
    def registerRecognizer(self, _recognizer):
        """Qt.GestureType QGestureRecognizer.registerRecognizer(None self, QGestureRecognizer _recognizer)"""
        return Qt.GestureType()
    def reset(self, _state):
        """None QGestureRecognizer.reset(None self, QGesture _state)"""
        return None
    def recognize(self, _state, _watched, _event):
        """abstract QGestureRecognizer.Result QGestureRecognizer.recognize(None self, QGesture _state, QObject _watched, QEvent _event)"""
        return QGestureRecognizer.Result()
    def create(self, _target):
        """QGesture QGestureRecognizer.create(None self, QObject _target)"""
        return QGesture()


class QGraphicsAnchor(QObject):
    """"""
    def sizePolicy(self):
        """QSizePolicy.Policy QGraphicsAnchor.sizePolicy(None self)"""
        return QSizePolicy.Policy()
    def setSizePolicy(self, _policy):
        """None QGraphicsAnchor.setSizePolicy(None self, QSizePolicy.Policy _policy)"""
        return None
    def spacing(self):
        """float QGraphicsAnchor.spacing(None self)"""
        return float()
    def unsetSpacing(self):
        """None QGraphicsAnchor.unsetSpacing(None self)"""
        return None
    def setSpacing(self, _spacing):
        """None QGraphicsAnchor.setSpacing(None self, float _spacing)"""
        return None


class QGraphicsLayoutItem():
    """"""
    def __init__(self, _parent, _isLayout):
        """None QGraphicsLayoutItem.__init__(None self, QGraphicsLayoutItem _parent, bool _isLayout)"""
        return None
    def setOwnedByLayout(self, _ownedByLayout):
        """None QGraphicsLayoutItem.setOwnedByLayout(None self, bool _ownedByLayout)"""
        return None
    def setGraphicsItem(self, _item):
        """None QGraphicsLayoutItem.setGraphicsItem(None self, QGraphicsItem _item)"""
        return None
    def sizeHint(self, _which, _constraint):
        """abstract QSizeF QGraphicsLayoutItem.sizeHint(None self, Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def ownedByLayout(self):
        """bool QGraphicsLayoutItem.ownedByLayout(None self)"""
        return bool()
    def graphicsItem(self):
        """QGraphicsItem QGraphicsLayoutItem.graphicsItem(None self)"""
        return QGraphicsItem()
    def maximumHeight(self):
        """float QGraphicsLayoutItem.maximumHeight(None self)"""
        return float()
    def maximumWidth(self):
        """float QGraphicsLayoutItem.maximumWidth(None self)"""
        return float()
    def preferredHeight(self):
        """float QGraphicsLayoutItem.preferredHeight(None self)"""
        return float()
    def preferredWidth(self):
        """float QGraphicsLayoutItem.preferredWidth(None self)"""
        return float()
    def minimumHeight(self):
        """float QGraphicsLayoutItem.minimumHeight(None self)"""
        return float()
    def minimumWidth(self):
        """float QGraphicsLayoutItem.minimumWidth(None self)"""
        return float()
    def isLayout(self):
        """bool QGraphicsLayoutItem.isLayout(None self)"""
        return bool()
    def setParentLayoutItem(self, _parent):
        """None QGraphicsLayoutItem.setParentLayoutItem(None self, QGraphicsLayoutItem _parent)"""
        return None
    def parentLayoutItem(self):
        """QGraphicsLayoutItem QGraphicsLayoutItem.parentLayoutItem(None self)"""
        return QGraphicsLayoutItem()
    def updateGeometry(self):
        """None QGraphicsLayoutItem.updateGeometry(None self)"""
        return None
    def effectiveSizeHint(self, _which, _constraint):
        """QSizeF QGraphicsLayoutItem.effectiveSizeHint(None self, Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def contentsRect(self):
        """QRectF QGraphicsLayoutItem.contentsRect(None self)"""
        return QRectF()
    def getContentsMargins(self, _left, _top, _right, _bottom):
        """None QGraphicsLayoutItem.getContentsMargins(None self, float _left, float _top, float _right, float _bottom)"""
        return None
    def geometry(self):
        """QRectF QGraphicsLayoutItem.geometry(None self)"""
        return QRectF()
    def setGeometry(self, _rect):
        """None QGraphicsLayoutItem.setGeometry(None self, QRectF _rect)"""
        return None
    def setMaximumHeight(self, _height):
        """None QGraphicsLayoutItem.setMaximumHeight(None self, float _height)"""
        return None
    def setMaximumWidth(self, _width):
        """None QGraphicsLayoutItem.setMaximumWidth(None self, float _width)"""
        return None
    def maximumSize(self):
        """QSizeF QGraphicsLayoutItem.maximumSize(None self)"""
        return QSizeF()
    def setMaximumSize(self, _size):
        """None QGraphicsLayoutItem.setMaximumSize(None self, QSizeF _size)"""
        return None
    def setMaximumSize(self, _aw, _ah):
        """None QGraphicsLayoutItem.setMaximumSize(None self, float _aw, float _ah)"""
        return None
    def setPreferredHeight(self, _height):
        """None QGraphicsLayoutItem.setPreferredHeight(None self, float _height)"""
        return None
    def setPreferredWidth(self, _width):
        """None QGraphicsLayoutItem.setPreferredWidth(None self, float _width)"""
        return None
    def preferredSize(self):
        """QSizeF QGraphicsLayoutItem.preferredSize(None self)"""
        return QSizeF()
    def setPreferredSize(self, _size):
        """None QGraphicsLayoutItem.setPreferredSize(None self, QSizeF _size)"""
        return None
    def setPreferredSize(self, _aw, _ah):
        """None QGraphicsLayoutItem.setPreferredSize(None self, float _aw, float _ah)"""
        return None
    def setMinimumHeight(self, _height):
        """None QGraphicsLayoutItem.setMinimumHeight(None self, float _height)"""
        return None
    def setMinimumWidth(self, _width):
        """None QGraphicsLayoutItem.setMinimumWidth(None self, float _width)"""
        return None
    def minimumSize(self):
        """QSizeF QGraphicsLayoutItem.minimumSize(None self)"""
        return QSizeF()
    def setMinimumSize(self, _size):
        """None QGraphicsLayoutItem.setMinimumSize(None self, QSizeF _size)"""
        return None
    def setMinimumSize(self, _aw, _ah):
        """None QGraphicsLayoutItem.setMinimumSize(None self, float _aw, float _ah)"""
        return None
    def sizePolicy(self):
        """QSizePolicy QGraphicsLayoutItem.sizePolicy(None self)"""
        return QSizePolicy()
    def setSizePolicy(self, _policy):
        """None QGraphicsLayoutItem.setSizePolicy(None self, QSizePolicy _policy)"""
        return None
    def setSizePolicy(self, _hPolicy, _vPolicy, _controlType):
        """None QGraphicsLayoutItem.setSizePolicy(None self, QSizePolicy.Policy _hPolicy, QSizePolicy.Policy _vPolicy, QSizePolicy.ControlType _controlType)"""
        return None


class QGraphicsLayout(QGraphicsLayoutItem):
    """"""
    def __init__(self, _parent):
        """None QGraphicsLayout.__init__(None self, QGraphicsLayoutItem _parent)"""
        return None
    def addChildLayoutItem(self, _layoutItem):
        """None QGraphicsLayout.addChildLayoutItem(None self, QGraphicsLayoutItem _layoutItem)"""
        return None
    def updateGeometry(self):
        """None QGraphicsLayout.updateGeometry(None self)"""
        return None
    def removeAt(self, _index):
        """abstract None QGraphicsLayout.removeAt(None self, int _index)"""
        return None
    def itemAt(self, _i):
        """abstract QGraphicsLayoutItem QGraphicsLayout.itemAt(None self, int _i)"""
        return QGraphicsLayoutItem()
    def __len__(self):
        """ QGraphicsLayout.__len__(None self)"""
        return ()
    def count(self):
        """abstract int QGraphicsLayout.count(None self)"""
        return int()
    def widgetEvent(self, _e):
        """None QGraphicsLayout.widgetEvent(None self, QEvent _e)"""
        return None
    def invalidate(self):
        """None QGraphicsLayout.invalidate(None self)"""
        return None
    def isActivated(self):
        """bool QGraphicsLayout.isActivated(None self)"""
        return bool()
    def activate(self):
        """None QGraphicsLayout.activate(None self)"""
        return None
    def getContentsMargins(self, _left, _top, _right, _bottom):
        """None QGraphicsLayout.getContentsMargins(None self, float _left, float _top, float _right, float _bottom)"""
        return None
    def setContentsMargins(self, _left, _top, _right, _bottom):
        """None QGraphicsLayout.setContentsMargins(None self, float _left, float _top, float _right, float _bottom)"""
        return None


class QGraphicsAnchorLayout(QGraphicsLayout):
    """"""
    def __init__(self, _parent):
        """None QGraphicsAnchorLayout.__init__(None self, QGraphicsLayoutItem _parent)"""
        return None
    def sizeHint(self, _which, _constraint):
        """QSizeF QGraphicsAnchorLayout.sizeHint(None self, Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def invalidate(self):
        """None QGraphicsAnchorLayout.invalidate(None self)"""
        return None
    def itemAt(self, _index):
        """QGraphicsLayoutItem QGraphicsAnchorLayout.itemAt(None self, int _index)"""
        return QGraphicsLayoutItem()
    def count(self):
        """int QGraphicsAnchorLayout.count(None self)"""
        return int()
    def setGeometry(self, _rect):
        """None QGraphicsAnchorLayout.setGeometry(None self, QRectF _rect)"""
        return None
    def removeAt(self, _index):
        """None QGraphicsAnchorLayout.removeAt(None self, int _index)"""
        return None
    def verticalSpacing(self):
        """float QGraphicsAnchorLayout.verticalSpacing(None self)"""
        return float()
    def horizontalSpacing(self):
        """float QGraphicsAnchorLayout.horizontalSpacing(None self)"""
        return float()
    def setSpacing(self, _spacing):
        """None QGraphicsAnchorLayout.setSpacing(None self, float _spacing)"""
        return None
    def setVerticalSpacing(self, _spacing):
        """None QGraphicsAnchorLayout.setVerticalSpacing(None self, float _spacing)"""
        return None
    def setHorizontalSpacing(self, _spacing):
        """None QGraphicsAnchorLayout.setHorizontalSpacing(None self, float _spacing)"""
        return None
    def addAnchors(self, _firstItem, _secondItem, _orientations):
        """None QGraphicsAnchorLayout.addAnchors(None self, QGraphicsLayoutItem _firstItem, QGraphicsLayoutItem _secondItem, Qt.Orientations _orientations)"""
        return None
    def addCornerAnchors(self, _firstItem, _firstCorner, _secondItem, _secondCorner):
        """None QGraphicsAnchorLayout.addCornerAnchors(None self, QGraphicsLayoutItem _firstItem, Qt.Corner _firstCorner, QGraphicsLayoutItem _secondItem, Qt.Corner _secondCorner)"""
        return None
    def anchor(self, _firstItem, _firstEdge, _secondItem, _secondEdge):
        """QGraphicsAnchor QGraphicsAnchorLayout.anchor(None self, QGraphicsLayoutItem _firstItem, Qt.AnchorPoint _firstEdge, QGraphicsLayoutItem _secondItem, Qt.AnchorPoint _secondEdge)"""
        return QGraphicsAnchor()
    def addAnchor(self, _firstItem, _firstEdge, _secondItem, _secondEdge):
        """QGraphicsAnchor QGraphicsAnchorLayout.addAnchor(None self, QGraphicsLayoutItem _firstItem, Qt.AnchorPoint _firstEdge, QGraphicsLayoutItem _secondItem, Qt.AnchorPoint _secondEdge)"""
        return QGraphicsAnchor()


class QGraphicsEffect(QObject):
    """"""
    NoPad = int() # QGraphicsEffect.PixmapPadMode enum
    PadToTransparentBorder = int() # QGraphicsEffect.PixmapPadMode enum
    PadToEffectiveBoundingRect = int() # QGraphicsEffect.PixmapPadMode enum

    SourceAttached = int() # QGraphicsEffect.ChangeFlag enum
    SourceDetached = int() # QGraphicsEffect.ChangeFlag enum
    SourceBoundingRectChanged = int() # QGraphicsEffect.ChangeFlag enum
    SourceInvalidated = int() # QGraphicsEffect.ChangeFlag enum

    def __init__(self, _parent):
        """None QGraphicsEffect.__init__(None self, QObject _parent)"""
        return None
    def sourcePixmap(self, _system, _offset, _mode):
        """QPixmap QGraphicsEffect.sourcePixmap(None self, Qt.CoordinateSystem _system, QPoint _offset, QGraphicsEffect.PixmapPadMode _mode)"""
        return QPixmap()
    def drawSource(self, _painter):
        """None QGraphicsEffect.drawSource(None self, QPainter _painter)"""
        return None
    def sourceBoundingRect(self, _system):
        """QRectF QGraphicsEffect.sourceBoundingRect(None self, Qt.CoordinateSystem _system)"""
        return QRectF()
    def sourceIsPixmap(self):
        """bool QGraphicsEffect.sourceIsPixmap(None self)"""
        return bool()
    def updateBoundingRect(self):
        """None QGraphicsEffect.updateBoundingRect(None self)"""
        return None
    def sourceChanged(self, _flags):
        """None QGraphicsEffect.sourceChanged(None self, QGraphicsEffect.ChangeFlags _flags)"""
        return None
    def draw(self, _painter):
        """abstract None QGraphicsEffect.draw(None self, QPainter _painter)"""
        return None
    def update(self):
        """None QGraphicsEffect.update(None self)"""
        return None
    def setEnabled(self, _enable):
        """None QGraphicsEffect.setEnabled(None self, bool _enable)"""
        return None
    def isEnabled(self):
        """bool QGraphicsEffect.isEnabled(None self)"""
        return bool()
    def boundingRect(self):
        """QRectF QGraphicsEffect.boundingRect(None self)"""
        return QRectF()
    def boundingRectFor(self, _sourceRect):
        """QRectF QGraphicsEffect.boundingRectFor(None self, QRectF _sourceRect)"""
        return QRectF()


class QGraphicsColorizeEffect(QGraphicsEffect):
    """"""
    def __init__(self, _parent):
        """None QGraphicsColorizeEffect.__init__(None self, QObject _parent)"""
        return None
    def draw(self, _painter):
        """None QGraphicsColorizeEffect.draw(None self, QPainter _painter)"""
        return None
    def setStrength(self, _strength):
        """None QGraphicsColorizeEffect.setStrength(None self, float _strength)"""
        return None
    def setColor(self, _c):
        """None QGraphicsColorizeEffect.setColor(None self, QColor _c)"""
        return None
    def strength(self):
        """float QGraphicsColorizeEffect.strength(None self)"""
        return float()
    def color(self):
        """QColor QGraphicsColorizeEffect.color(None self)"""
        return QColor()


class QGraphicsBlurEffect(QGraphicsEffect):
    """"""
    PerformanceHint = int() # QGraphicsBlurEffect.BlurHint enum
    QualityHint = int() # QGraphicsBlurEffect.BlurHint enum
    AnimationHint = int() # QGraphicsBlurEffect.BlurHint enum

    def __init__(self, _parent):
        """None QGraphicsBlurEffect.__init__(None self, QObject _parent)"""
        return None
    def draw(self, _painter):
        """None QGraphicsBlurEffect.draw(None self, QPainter _painter)"""
        return None
    def setBlurHints(self, _hints):
        """None QGraphicsBlurEffect.setBlurHints(None self, QGraphicsBlurEffect.BlurHints _hints)"""
        return None
    def setBlurRadius(self, _blurRadius):
        """None QGraphicsBlurEffect.setBlurRadius(None self, float _blurRadius)"""
        return None
    def blurHints(self):
        """QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.blurHints(None self)"""
        return QGraphicsBlurEffect.BlurHints()
    def blurRadius(self):
        """float QGraphicsBlurEffect.blurRadius(None self)"""
        return float()
    def boundingRectFor(self, _rect):
        """QRectF QGraphicsBlurEffect.boundingRectFor(None self, QRectF _rect)"""
        return QRectF()


class QGraphicsDropShadowEffect(QGraphicsEffect):
    """"""
    def __init__(self, _parent):
        """None QGraphicsDropShadowEffect.__init__(None self, QObject _parent)"""
        return None
    def draw(self, _painter):
        """None QGraphicsDropShadowEffect.draw(None self, QPainter _painter)"""
        return None
    def setColor(self, _color):
        """None QGraphicsDropShadowEffect.setColor(None self, QColor _color)"""
        return None
    def setBlurRadius(self, _blurRadius):
        """None QGraphicsDropShadowEffect.setBlurRadius(None self, float _blurRadius)"""
        return None
    def setYOffset(self, _dy):
        """None QGraphicsDropShadowEffect.setYOffset(None self, float _dy)"""
        return None
    def setXOffset(self, _dx):
        """None QGraphicsDropShadowEffect.setXOffset(None self, float _dx)"""
        return None
    def setOffset(self, _ofs):
        """None QGraphicsDropShadowEffect.setOffset(None self, QPointF _ofs)"""
        return None
    def setOffset(self, _dx, _dy):
        """None QGraphicsDropShadowEffect.setOffset(None self, float _dx, float _dy)"""
        return None
    def setOffset(self, _d):
        """None QGraphicsDropShadowEffect.setOffset(None self, float _d)"""
        return None
    def color(self):
        """QColor QGraphicsDropShadowEffect.color(None self)"""
        return QColor()
    def blurRadius(self):
        """float QGraphicsDropShadowEffect.blurRadius(None self)"""
        return float()
    def yOffset(self):
        """float QGraphicsDropShadowEffect.yOffset(None self)"""
        return float()
    def xOffset(self):
        """float QGraphicsDropShadowEffect.xOffset(None self)"""
        return float()
    def offset(self):
        """QPointF QGraphicsDropShadowEffect.offset(None self)"""
        return QPointF()
    def boundingRectFor(self, _rect):
        """QRectF QGraphicsDropShadowEffect.boundingRectFor(None self, QRectF _rect)"""
        return QRectF()


class QGraphicsOpacityEffect(QGraphicsEffect):
    """"""
    def __init__(self, _parent):
        """None QGraphicsOpacityEffect.__init__(None self, QObject _parent)"""
        return None
    def draw(self, _painter):
        """None QGraphicsOpacityEffect.draw(None self, QPainter _painter)"""
        return None
    def setOpacityMask(self, _mask):
        """None QGraphicsOpacityEffect.setOpacityMask(None self, QBrush _mask)"""
        return None
    def setOpacity(self, _opacity):
        """None QGraphicsOpacityEffect.setOpacity(None self, float _opacity)"""
        return None
    def opacityMask(self):
        """QBrush QGraphicsOpacityEffect.opacityMask(None self)"""
        return QBrush()
    def opacity(self):
        """float QGraphicsOpacityEffect.opacity(None self)"""
        return float()


class QGraphicsGridLayout(QGraphicsLayout):
    """"""
    def __init__(self, _parent):
        """None QGraphicsGridLayout.__init__(None self, QGraphicsLayoutItem _parent)"""
        return None
    def sizeHint(self, _which, _constraint):
        """QSizeF QGraphicsGridLayout.sizeHint(None self, Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def setGeometry(self, _rect):
        """None QGraphicsGridLayout.setGeometry(None self, QRectF _rect)"""
        return None
    def invalidate(self):
        """None QGraphicsGridLayout.invalidate(None self)"""
        return None
    def removeAt(self, _index):
        """None QGraphicsGridLayout.removeAt(None self, int _index)"""
        return None
    def count(self):
        """int QGraphicsGridLayout.count(None self)"""
        return int()
    def itemAt(self, _row, _column):
        """QGraphicsLayoutItem QGraphicsGridLayout.itemAt(None self, int _row, int _column)"""
        return QGraphicsLayoutItem()
    def itemAt(self, _index):
        """QGraphicsLayoutItem QGraphicsGridLayout.itemAt(None self, int _index)"""
        return QGraphicsLayoutItem()
    def columnCount(self):
        """int QGraphicsGridLayout.columnCount(None self)"""
        return int()
    def rowCount(self):
        """int QGraphicsGridLayout.rowCount(None self)"""
        return int()
    def alignment(self, _item):
        """Qt.Alignment QGraphicsGridLayout.alignment(None self, QGraphicsLayoutItem _item)"""
        return Qt.Alignment()
    def setAlignment(self, _item, _alignment):
        """None QGraphicsGridLayout.setAlignment(None self, QGraphicsLayoutItem _item, Qt.Alignment _alignment)"""
        return None
    def columnAlignment(self, _column):
        """Qt.Alignment QGraphicsGridLayout.columnAlignment(None self, int _column)"""
        return Qt.Alignment()
    def setColumnAlignment(self, _column, _alignment):
        """None QGraphicsGridLayout.setColumnAlignment(None self, int _column, Qt.Alignment _alignment)"""
        return None
    def rowAlignment(self, _row):
        """Qt.Alignment QGraphicsGridLayout.rowAlignment(None self, int _row)"""
        return Qt.Alignment()
    def setRowAlignment(self, _row, _alignment):
        """None QGraphicsGridLayout.setRowAlignment(None self, int _row, Qt.Alignment _alignment)"""
        return None
    def setColumnFixedWidth(self, _column, _width):
        """None QGraphicsGridLayout.setColumnFixedWidth(None self, int _column, float _width)"""
        return None
    def columnMaximumWidth(self, _column):
        """float QGraphicsGridLayout.columnMaximumWidth(None self, int _column)"""
        return float()
    def setColumnMaximumWidth(self, _column, _width):
        """None QGraphicsGridLayout.setColumnMaximumWidth(None self, int _column, float _width)"""
        return None
    def columnPreferredWidth(self, _column):
        """float QGraphicsGridLayout.columnPreferredWidth(None self, int _column)"""
        return float()
    def setColumnPreferredWidth(self, _column, _width):
        """None QGraphicsGridLayout.setColumnPreferredWidth(None self, int _column, float _width)"""
        return None
    def columnMinimumWidth(self, _column):
        """float QGraphicsGridLayout.columnMinimumWidth(None self, int _column)"""
        return float()
    def setColumnMinimumWidth(self, _column, _width):
        """None QGraphicsGridLayout.setColumnMinimumWidth(None self, int _column, float _width)"""
        return None
    def setRowFixedHeight(self, _row, _height):
        """None QGraphicsGridLayout.setRowFixedHeight(None self, int _row, float _height)"""
        return None
    def rowMaximumHeight(self, _row):
        """float QGraphicsGridLayout.rowMaximumHeight(None self, int _row)"""
        return float()
    def setRowMaximumHeight(self, _row, _height):
        """None QGraphicsGridLayout.setRowMaximumHeight(None self, int _row, float _height)"""
        return None
    def rowPreferredHeight(self, _row):
        """float QGraphicsGridLayout.rowPreferredHeight(None self, int _row)"""
        return float()
    def setRowPreferredHeight(self, _row, _height):
        """None QGraphicsGridLayout.setRowPreferredHeight(None self, int _row, float _height)"""
        return None
    def rowMinimumHeight(self, _row):
        """float QGraphicsGridLayout.rowMinimumHeight(None self, int _row)"""
        return float()
    def setRowMinimumHeight(self, _row, _height):
        """None QGraphicsGridLayout.setRowMinimumHeight(None self, int _row, float _height)"""
        return None
    def columnStretchFactor(self, _column):
        """int QGraphicsGridLayout.columnStretchFactor(None self, int _column)"""
        return int()
    def setColumnStretchFactor(self, _column, _stretch):
        """None QGraphicsGridLayout.setColumnStretchFactor(None self, int _column, int _stretch)"""
        return None
    def rowStretchFactor(self, _row):
        """int QGraphicsGridLayout.rowStretchFactor(None self, int _row)"""
        return int()
    def setRowStretchFactor(self, _row, _stretch):
        """None QGraphicsGridLayout.setRowStretchFactor(None self, int _row, int _stretch)"""
        return None
    def columnSpacing(self, _column):
        """float QGraphicsGridLayout.columnSpacing(None self, int _column)"""
        return float()
    def setColumnSpacing(self, _column, _spacing):
        """None QGraphicsGridLayout.setColumnSpacing(None self, int _column, float _spacing)"""
        return None
    def rowSpacing(self, _row):
        """float QGraphicsGridLayout.rowSpacing(None self, int _row)"""
        return float()
    def setRowSpacing(self, _row, _spacing):
        """None QGraphicsGridLayout.setRowSpacing(None self, int _row, float _spacing)"""
        return None
    def setSpacing(self, _spacing):
        """None QGraphicsGridLayout.setSpacing(None self, float _spacing)"""
        return None
    def verticalSpacing(self):
        """float QGraphicsGridLayout.verticalSpacing(None self)"""
        return float()
    def setVerticalSpacing(self, _spacing):
        """None QGraphicsGridLayout.setVerticalSpacing(None self, float _spacing)"""
        return None
    def horizontalSpacing(self):
        """float QGraphicsGridLayout.horizontalSpacing(None self)"""
        return float()
    def setHorizontalSpacing(self, _spacing):
        """None QGraphicsGridLayout.setHorizontalSpacing(None self, float _spacing)"""
        return None
    def addItem(self, _item, _row, _column, _rowSpan, _columnSpan, _alignment):
        """None QGraphicsGridLayout.addItem(None self, QGraphicsLayoutItem _item, int _row, int _column, int _rowSpan, int _columnSpan, Qt.Alignment _alignment)"""
        return None
    def addItem(self, _aitem, _arow, _acolumn, _alignment):
        """None QGraphicsGridLayout.addItem(None self, QGraphicsLayoutItem _aitem, int _arow, int _acolumn, Qt.Alignment _alignment)"""
        return None


class QGraphicsItem():
    """"""
    NonModal = int() # QGraphicsItem.PanelModality enum
    PanelModal = int() # QGraphicsItem.PanelModality enum
    SceneModal = int() # QGraphicsItem.PanelModality enum

    UserType = None # int member
    ItemIsMovable = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemIsSelectable = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemIsFocusable = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemClipsToShape = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemClipsChildrenToShape = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemIgnoresTransformations = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemIgnoresParentOpacity = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemDoesntPropagateOpacityToChildren = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemStacksBehindParent = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemUsesExtendedStyleOption = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemHasNoContents = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemSendsGeometryChanges = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemAcceptsInputMethod = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemNegativeZStacksBehindParent = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemIsPanel = int() # QGraphicsItem.GraphicsItemFlag enum
    ItemSendsScenePositionChanges = int() # QGraphicsItem.GraphicsItemFlag enum

    ItemPositionChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemMatrixChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemVisibleChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemEnabledChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemSelectedChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemParentChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemChildAddedChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemChildRemovedChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemTransformChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemPositionHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemTransformHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemSceneChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemVisibleHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemEnabledHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemSelectedHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemParentHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemSceneHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemCursorChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemCursorHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemToolTipChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemToolTipHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemFlagsChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemFlagsHaveChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemZValueChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemZValueHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemOpacityChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemOpacityHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemScenePositionHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemRotationChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemRotationHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemScaleChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemScaleHasChanged = int() # QGraphicsItem.GraphicsItemChange enum
    ItemTransformOriginPointChange = int() # QGraphicsItem.GraphicsItemChange enum
    ItemTransformOriginPointHasChanged = int() # QGraphicsItem.GraphicsItemChange enum

    NoCache = int() # QGraphicsItem.CacheMode enum
    ItemCoordinateCache = int() # QGraphicsItem.CacheMode enum
    DeviceCoordinateCache = int() # QGraphicsItem.CacheMode enum

    def __init__(self, _parent, _scene):
        """None QGraphicsItem.__init__(None self, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def updateMicroFocus(self):
        """None QGraphicsItem.updateMicroFocus(None self)"""
        return None
    def setInputMethodHints(self, _hints):
        """None QGraphicsItem.setInputMethodHints(None self, Qt.InputMethodHints _hints)"""
        return None
    def inputMethodHints(self):
        """Qt.InputMethodHints QGraphicsItem.inputMethodHints(None self)"""
        return Qt.InputMethodHints()
    def stackBefore(self, _sibling):
        """None QGraphicsItem.stackBefore(None self, QGraphicsItem _sibling)"""
        return None
    def setTransformOriginPoint(self, _origin):
        """None QGraphicsItem.setTransformOriginPoint(None self, QPointF _origin)"""
        return None
    def setTransformOriginPoint(self, _ax, _ay):
        """None QGraphicsItem.setTransformOriginPoint(None self, float _ax, float _ay)"""
        return None
    def transformOriginPoint(self):
        """QPointF QGraphicsItem.transformOriginPoint(None self)"""
        return QPointF()
    def setTransformations(self, _transformations):
        """None QGraphicsItem.setTransformations(None self, list-of-QGraphicsTransform _transformations)"""
        return None
    def transformations(self):
        """list-of-QGraphicsTransform QGraphicsItem.transformations(None self)"""
        return [QGraphicsTransform()]
    def setScale(self, _scale):
        """None QGraphicsItem.setScale(None self, float _scale)"""
        return None
    def rotation(self):
        """float QGraphicsItem.rotation(None self)"""
        return float()
    def setRotation(self, _angle):
        """None QGraphicsItem.setRotation(None self, float _angle)"""
        return None
    def setY(self, _y):
        """None QGraphicsItem.setY(None self, float _y)"""
        return None
    def setX(self, _x):
        """None QGraphicsItem.setX(None self, float _x)"""
        return None
    def focusItem(self):
        """QGraphicsItem QGraphicsItem.focusItem(None self)"""
        return QGraphicsItem()
    def setFocusProxy(self, _item):
        """None QGraphicsItem.setFocusProxy(None self, QGraphicsItem _item)"""
        return None
    def focusProxy(self):
        """QGraphicsItem QGraphicsItem.focusProxy(None self)"""
        return QGraphicsItem()
    def setActive(self, _active):
        """None QGraphicsItem.setActive(None self, bool _active)"""
        return None
    def isActive(self):
        """bool QGraphicsItem.isActive(None self)"""
        return bool()
    def setFiltersChildEvents(self, _enabled):
        """None QGraphicsItem.setFiltersChildEvents(None self, bool _enabled)"""
        return None
    def filtersChildEvents(self):
        """bool QGraphicsItem.filtersChildEvents(None self)"""
        return bool()
    def setAcceptTouchEvents(self, _enabled):
        """None QGraphicsItem.setAcceptTouchEvents(None self, bool _enabled)"""
        return None
    def acceptTouchEvents(self):
        """bool QGraphicsItem.acceptTouchEvents(None self)"""
        return bool()
    def setGraphicsEffect(self, _effect):
        """None QGraphicsItem.setGraphicsEffect(None self, QGraphicsEffect _effect)"""
        return None
    def graphicsEffect(self):
        """QGraphicsEffect QGraphicsItem.graphicsEffect(None self)"""
        return QGraphicsEffect()
    def isBlockedByModalPanel(self, _blockingPanel):
        """bool QGraphicsItem.isBlockedByModalPanel(None self, QGraphicsItem _blockingPanel)"""
        return bool()
    def setPanelModality(self, _panelModality):
        """None QGraphicsItem.setPanelModality(None self, QGraphicsItem.PanelModality _panelModality)"""
        return None
    def panelModality(self):
        """QGraphicsItem.PanelModality QGraphicsItem.panelModality(None self)"""
        return QGraphicsItem.PanelModality()
    def toGraphicsObject(self):
        """QGraphicsObject QGraphicsItem.toGraphicsObject(None self)"""
        return QGraphicsObject()
    def isPanel(self):
        """bool QGraphicsItem.isPanel(None self)"""
        return bool()
    def panel(self):
        """QGraphicsItem QGraphicsItem.panel(None self)"""
        return QGraphicsItem()
    def parentObject(self):
        """QGraphicsObject QGraphicsItem.parentObject(None self)"""
        return QGraphicsObject()
    def mapRectFromScene(self, _rect):
        """QRectF QGraphicsItem.mapRectFromScene(None self, QRectF _rect)"""
        return QRectF()
    def mapRectFromScene(self, _ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectFromScene(None self, float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def mapRectFromParent(self, _rect):
        """QRectF QGraphicsItem.mapRectFromParent(None self, QRectF _rect)"""
        return QRectF()
    def mapRectFromParent(self, _ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectFromParent(None self, float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def mapRectFromItem(self, _item, _rect):
        """QRectF QGraphicsItem.mapRectFromItem(None self, QGraphicsItem _item, QRectF _rect)"""
        return QRectF()
    def mapRectFromItem(self, _item, _ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectFromItem(None self, QGraphicsItem _item, float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def mapRectToScene(self, _rect):
        """QRectF QGraphicsItem.mapRectToScene(None self, QRectF _rect)"""
        return QRectF()
    def mapRectToScene(self, _ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectToScene(None self, float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def mapRectToParent(self, _rect):
        """QRectF QGraphicsItem.mapRectToParent(None self, QRectF _rect)"""
        return QRectF()
    def mapRectToParent(self, _ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectToParent(None self, float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def mapRectToItem(self, _item, _rect):
        """QRectF QGraphicsItem.mapRectToItem(None self, QGraphicsItem _item, QRectF _rect)"""
        return QRectF()
    def mapRectToItem(self, _item, _ax, _ay, _w, _h):
        """QRectF QGraphicsItem.mapRectToItem(None self, QGraphicsItem _item, float _ax, float _ay, float _w, float _h)"""
        return QRectF()
    def clipPath(self):
        """QPainterPath QGraphicsItem.clipPath(None self)"""
        return QPainterPath()
    def isClipped(self):
        """bool QGraphicsItem.isClipped(None self)"""
        return bool()
    def itemTransform(self, _other, _ok):
        """QTransform QGraphicsItem.itemTransform(None self, QGraphicsItem _other, bool _ok)"""
        return QTransform()
    def setOpacity(self, _opacity):
        """None QGraphicsItem.setOpacity(None self, float _opacity)"""
        return None
    def effectiveOpacity(self):
        """float QGraphicsItem.effectiveOpacity(None self)"""
        return float()
    def opacity(self):
        """float QGraphicsItem.opacity(None self)"""
        return float()
    def isUnderMouse(self):
        """bool QGraphicsItem.isUnderMouse(None self)"""
        return bool()
    def commonAncestorItem(self, _other):
        """QGraphicsItem QGraphicsItem.commonAncestorItem(None self, QGraphicsItem _other)"""
        return QGraphicsItem()
    def scroll(self, _dx, _dy, _rect):
        """None QGraphicsItem.scroll(None self, float _dx, float _dy, QRectF _rect)"""
        return None
    def setBoundingRegionGranularity(self, _granularity):
        """None QGraphicsItem.setBoundingRegionGranularity(None self, float _granularity)"""
        return None
    def boundingRegionGranularity(self):
        """float QGraphicsItem.boundingRegionGranularity(None self)"""
        return float()
    def boundingRegion(self, _itemToDeviceTransform):
        """QRegion QGraphicsItem.boundingRegion(None self, QTransform _itemToDeviceTransform)"""
        return QRegion()
    def ungrabKeyboard(self):
        """None QGraphicsItem.ungrabKeyboard(None self)"""
        return None
    def grabKeyboard(self):
        """None QGraphicsItem.grabKeyboard(None self)"""
        return None
    def ungrabMouse(self):
        """None QGraphicsItem.ungrabMouse(None self)"""
        return None
    def grabMouse(self):
        """None QGraphicsItem.grabMouse(None self)"""
        return None
    def setAcceptHoverEvents(self, _enabled):
        """None QGraphicsItem.setAcceptHoverEvents(None self, bool _enabled)"""
        return None
    def acceptHoverEvents(self):
        """bool QGraphicsItem.acceptHoverEvents(None self)"""
        return bool()
    def isVisibleTo(self, _parent):
        """bool QGraphicsItem.isVisibleTo(None self, QGraphicsItem _parent)"""
        return bool()
    def setCacheMode(self, _mode, _logicalCacheSize):
        """None QGraphicsItem.setCacheMode(None self, QGraphicsItem.CacheMode _mode, QSize _logicalCacheSize)"""
        return None
    def cacheMode(self):
        """QGraphicsItem.CacheMode QGraphicsItem.cacheMode(None self)"""
        return QGraphicsItem.CacheMode()
    def isWindow(self):
        """bool QGraphicsItem.isWindow(None self)"""
        return bool()
    def isWidget(self):
        """bool QGraphicsItem.isWidget(None self)"""
        return bool()
    def childItems(self):
        """list-of-QGraphicsItem QGraphicsItem.childItems(None self)"""
        return [QGraphicsItem()]
    def window(self):
        """QGraphicsWidget QGraphicsItem.window(None self)"""
        return QGraphicsWidget()
    def topLevelWidget(self):
        """QGraphicsWidget QGraphicsItem.topLevelWidget(None self)"""
        return QGraphicsWidget()
    def parentWidget(self):
        """QGraphicsWidget QGraphicsItem.parentWidget(None self)"""
        return QGraphicsWidget()
    def resetTransform(self):
        """None QGraphicsItem.resetTransform(None self)"""
        return None
    def setTransform(self, _matrix, _combine):
        """None QGraphicsItem.setTransform(None self, QTransform _matrix, bool _combine)"""
        return None
    def deviceTransform(self, _viewportTransform):
        """QTransform QGraphicsItem.deviceTransform(None self, QTransform _viewportTransform)"""
        return QTransform()
    def sceneTransform(self):
        """QTransform QGraphicsItem.sceneTransform(None self)"""
        return QTransform()
    def transform(self):
        """QTransform QGraphicsItem.transform(None self)"""
        return QTransform()
    def wheelEvent(self, _event):
        """None QGraphicsItem.wheelEvent(None self, QGraphicsSceneWheelEvent _event)"""
        return None
    def sceneEventFilter(self, _watched, _event):
        """bool QGraphicsItem.sceneEventFilter(None self, QGraphicsItem _watched, QEvent _event)"""
        return bool()
    def sceneEvent(self, _event):
        """bool QGraphicsItem.sceneEvent(None self, QEvent _event)"""
        return bool()
    def prepareGeometryChange(self):
        """None QGraphicsItem.prepareGeometryChange(None self)"""
        return None
    def mouseReleaseEvent(self, _event):
        """None QGraphicsItem.mouseReleaseEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mousePressEvent(self, _event):
        """None QGraphicsItem.mousePressEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseMoveEvent(self, _event):
        """None QGraphicsItem.mouseMoveEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseDoubleClickEvent(self, _event):
        """None QGraphicsItem.mouseDoubleClickEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def keyReleaseEvent(self, _event):
        """None QGraphicsItem.keyReleaseEvent(None self, QKeyEvent _event)"""
        return None
    def keyPressEvent(self, _event):
        """None QGraphicsItem.keyPressEvent(None self, QKeyEvent _event)"""
        return None
    def itemChange(self, _change, _value):
        """QVariant QGraphicsItem.itemChange(None self, QGraphicsItem.GraphicsItemChange _change, QVariant _value)"""
        return QVariant()
    def inputMethodQuery(self, _query):
        """QVariant QGraphicsItem.inputMethodQuery(None self, Qt.InputMethodQuery _query)"""
        return QVariant()
    def inputMethodEvent(self, _event):
        """None QGraphicsItem.inputMethodEvent(None self, QInputMethodEvent _event)"""
        return None
    def hoverMoveEvent(self, _event):
        """None QGraphicsItem.hoverMoveEvent(None self, QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverLeaveEvent(self, _event):
        """None QGraphicsItem.hoverLeaveEvent(None self, QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverEnterEvent(self, _event):
        """None QGraphicsItem.hoverEnterEvent(None self, QGraphicsSceneHoverEvent _event)"""
        return None
    def focusOutEvent(self, _event):
        """None QGraphicsItem.focusOutEvent(None self, QFocusEvent _event)"""
        return None
    def focusInEvent(self, _event):
        """None QGraphicsItem.focusInEvent(None self, QFocusEvent _event)"""
        return None
    def dropEvent(self, _event):
        """None QGraphicsItem.dropEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragMoveEvent(self, _event):
        """None QGraphicsItem.dragMoveEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragLeaveEvent(self, _event):
        """None QGraphicsItem.dragLeaveEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragEnterEvent(self, _event):
        """None QGraphicsItem.dragEnterEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def contextMenuEvent(self, _event):
        """None QGraphicsItem.contextMenuEvent(None self, QGraphicsSceneContextMenuEvent _event)"""
        return None
    def removeSceneEventFilter(self, _filterItem):
        """None QGraphicsItem.removeSceneEventFilter(None self, QGraphicsItem _filterItem)"""
        return None
    def installSceneEventFilter(self, _filterItem):
        """None QGraphicsItem.installSceneEventFilter(None self, QGraphicsItem _filterItem)"""
        return None
    def type(self):
        """int QGraphicsItem.type(None self)"""
        return int()
    def setData(self, _key, _value):
        """None QGraphicsItem.setData(None self, int _key, QVariant _value)"""
        return None
    def data(self, _key):
        """QVariant QGraphicsItem.data(None self, int _key)"""
        return QVariant()
    def isAncestorOf(self, _child):
        """bool QGraphicsItem.isAncestorOf(None self, QGraphicsItem _child)"""
        return bool()
    def mapFromScene(self, _point):
        """QPointF QGraphicsItem.mapFromScene(None self, QPointF _point)"""
        return QPointF()
    def mapFromScene(self, _rect):
        """QPolygonF QGraphicsItem.mapFromScene(None self, QRectF _rect)"""
        return QPolygonF()
    def mapFromScene(self, _polygon):
        """QPolygonF QGraphicsItem.mapFromScene(None self, QPolygonF _polygon)"""
        return QPolygonF()
    def mapFromScene(self, _path):
        """QPainterPath QGraphicsItem.mapFromScene(None self, QPainterPath _path)"""
        return QPainterPath()
    def mapFromScene(self, _ax, _ay):
        """QPointF QGraphicsItem.mapFromScene(None self, float _ax, float _ay)"""
        return QPointF()
    def mapFromScene(self, _ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapFromScene(None self, float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def mapFromParent(self, _point):
        """QPointF QGraphicsItem.mapFromParent(None self, QPointF _point)"""
        return QPointF()
    def mapFromParent(self, _rect):
        """QPolygonF QGraphicsItem.mapFromParent(None self, QRectF _rect)"""
        return QPolygonF()
    def mapFromParent(self, _polygon):
        """QPolygonF QGraphicsItem.mapFromParent(None self, QPolygonF _polygon)"""
        return QPolygonF()
    def mapFromParent(self, _path):
        """QPainterPath QGraphicsItem.mapFromParent(None self, QPainterPath _path)"""
        return QPainterPath()
    def mapFromParent(self, _ax, _ay):
        """QPointF QGraphicsItem.mapFromParent(None self, float _ax, float _ay)"""
        return QPointF()
    def mapFromParent(self, _ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapFromParent(None self, float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def mapFromItem(self, _item, _point):
        """QPointF QGraphicsItem.mapFromItem(None self, QGraphicsItem _item, QPointF _point)"""
        return QPointF()
    def mapFromItem(self, _item, _rect):
        """QPolygonF QGraphicsItem.mapFromItem(None self, QGraphicsItem _item, QRectF _rect)"""
        return QPolygonF()
    def mapFromItem(self, _item, _polygon):
        """QPolygonF QGraphicsItem.mapFromItem(None self, QGraphicsItem _item, QPolygonF _polygon)"""
        return QPolygonF()
    def mapFromItem(self, _item, _path):
        """QPainterPath QGraphicsItem.mapFromItem(None self, QGraphicsItem _item, QPainterPath _path)"""
        return QPainterPath()
    def mapFromItem(self, _item, _ax, _ay):
        """QPointF QGraphicsItem.mapFromItem(None self, QGraphicsItem _item, float _ax, float _ay)"""
        return QPointF()
    def mapFromItem(self, _item, _ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapFromItem(None self, QGraphicsItem _item, float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def mapToScene(self, _point):
        """QPointF QGraphicsItem.mapToScene(None self, QPointF _point)"""
        return QPointF()
    def mapToScene(self, _rect):
        """QPolygonF QGraphicsItem.mapToScene(None self, QRectF _rect)"""
        return QPolygonF()
    def mapToScene(self, _polygon):
        """QPolygonF QGraphicsItem.mapToScene(None self, QPolygonF _polygon)"""
        return QPolygonF()
    def mapToScene(self, _path):
        """QPainterPath QGraphicsItem.mapToScene(None self, QPainterPath _path)"""
        return QPainterPath()
    def mapToScene(self, _ax, _ay):
        """QPointF QGraphicsItem.mapToScene(None self, float _ax, float _ay)"""
        return QPointF()
    def mapToScene(self, _ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapToScene(None self, float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def mapToParent(self, _point):
        """QPointF QGraphicsItem.mapToParent(None self, QPointF _point)"""
        return QPointF()
    def mapToParent(self, _rect):
        """QPolygonF QGraphicsItem.mapToParent(None self, QRectF _rect)"""
        return QPolygonF()
    def mapToParent(self, _polygon):
        """QPolygonF QGraphicsItem.mapToParent(None self, QPolygonF _polygon)"""
        return QPolygonF()
    def mapToParent(self, _path):
        """QPainterPath QGraphicsItem.mapToParent(None self, QPainterPath _path)"""
        return QPainterPath()
    def mapToParent(self, _ax, _ay):
        """QPointF QGraphicsItem.mapToParent(None self, float _ax, float _ay)"""
        return QPointF()
    def mapToParent(self, _ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapToParent(None self, float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def mapToItem(self, _item, _point):
        """QPointF QGraphicsItem.mapToItem(None self, QGraphicsItem _item, QPointF _point)"""
        return QPointF()
    def mapToItem(self, _item, _rect):
        """QPolygonF QGraphicsItem.mapToItem(None self, QGraphicsItem _item, QRectF _rect)"""
        return QPolygonF()
    def mapToItem(self, _item, _polygon):
        """QPolygonF QGraphicsItem.mapToItem(None self, QGraphicsItem _item, QPolygonF _polygon)"""
        return QPolygonF()
    def mapToItem(self, _item, _path):
        """QPainterPath QGraphicsItem.mapToItem(None self, QGraphicsItem _item, QPainterPath _path)"""
        return QPainterPath()
    def mapToItem(self, _item, _ax, _ay):
        """QPointF QGraphicsItem.mapToItem(None self, QGraphicsItem _item, float _ax, float _ay)"""
        return QPointF()
    def mapToItem(self, _item, _ax, _ay, _w, _h):
        """QPolygonF QGraphicsItem.mapToItem(None self, QGraphicsItem _item, float _ax, float _ay, float _w, float _h)"""
        return QPolygonF()
    def update(self, _rect):
        """None QGraphicsItem.update(None self, QRectF _rect)"""
        return None
    def update(self, _ax, _ay, _width, _height):
        """None QGraphicsItem.update(None self, float _ax, float _ay, float _width, float _height)"""
        return None
    def paint(self, _painter, _option, _widget):
        """abstract None QGraphicsItem.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def opaqueArea(self):
        """QPainterPath QGraphicsItem.opaqueArea(None self)"""
        return QPainterPath()
    def isObscuredBy(self, _item):
        """bool QGraphicsItem.isObscuredBy(None self, QGraphicsItem _item)"""
        return bool()
    def isObscured(self):
        """bool QGraphicsItem.isObscured(None self)"""
        return bool()
    def isObscured(self, _rect):
        """bool QGraphicsItem.isObscured(None self, QRectF _rect)"""
        return bool()
    def isObscured(self, _ax, _ay, _w, _h):
        """bool QGraphicsItem.isObscured(None self, float _ax, float _ay, float _w, float _h)"""
        return bool()
    def collidingItems(self, _mode):
        """list-of-QGraphicsItem QGraphicsItem.collidingItems(None self, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def collidesWithPath(self, _path, _mode):
        """bool QGraphicsItem.collidesWithPath(None self, QPainterPath _path, Qt.ItemSelectionMode _mode)"""
        return bool()
    def collidesWithItem(self, _other, _mode):
        """bool QGraphicsItem.collidesWithItem(None self, QGraphicsItem _other, Qt.ItemSelectionMode _mode)"""
        return bool()
    def contains(self, _point):
        """bool QGraphicsItem.contains(None self, QPointF _point)"""
        return bool()
    def shape(self):
        """QPainterPath QGraphicsItem.shape(None self)"""
        return QPainterPath()
    def sceneBoundingRect(self):
        """QRectF QGraphicsItem.sceneBoundingRect(None self)"""
        return QRectF()
    def childrenBoundingRect(self):
        """QRectF QGraphicsItem.childrenBoundingRect(None self)"""
        return QRectF()
    def boundingRect(self):
        """abstract QRectF QGraphicsItem.boundingRect(None self)"""
        return QRectF()
    def setZValue(self, _z):
        """None QGraphicsItem.setZValue(None self, float _z)"""
        return None
    def zValue(self):
        """float QGraphicsItem.zValue(None self)"""
        return float()
    def advance(self, _phase):
        """None QGraphicsItem.advance(None self, int _phase)"""
        return None
    def translate(self, _dx, _dy):
        """None QGraphicsItem.translate(None self, float _dx, float _dy)"""
        return None
    def shear(self, _sh, _sv):
        """None QGraphicsItem.shear(None self, float _sh, float _sv)"""
        return None
    def scale(self, _sx, _sy):
        """None QGraphicsItem.scale(None self, float _sx, float _sy)"""
        return None
    def scale(self):
        """float QGraphicsItem.scale(None self)"""
        return float()
    def rotate(self, _angle):
        """None QGraphicsItem.rotate(None self, float _angle)"""
        return None
    def resetMatrix(self):
        """None QGraphicsItem.resetMatrix(None self)"""
        return None
    def setMatrix(self, _matrix, _combine):
        """None QGraphicsItem.setMatrix(None self, QMatrix _matrix, bool _combine)"""
        return None
    def sceneMatrix(self):
        """QMatrix QGraphicsItem.sceneMatrix(None self)"""
        return QMatrix()
    def matrix(self):
        """QMatrix QGraphicsItem.matrix(None self)"""
        return QMatrix()
    def ensureVisible(self, _rect, _xMargin, _yMargin):
        """None QGraphicsItem.ensureVisible(None self, QRectF _rect, int _xMargin, int _yMargin)"""
        return None
    def ensureVisible(self, _x, _y, _w, _h, _xMargin, _yMargin):
        """None QGraphicsItem.ensureVisible(None self, float _x, float _y, float _w, float _h, int _xMargin, int _yMargin)"""
        return None
    def moveBy(self, _dx, _dy):
        """None QGraphicsItem.moveBy(None self, float _dx, float _dy)"""
        return None
    def setPos(self, _pos):
        """None QGraphicsItem.setPos(None self, QPointF _pos)"""
        return None
    def setPos(self, _ax, _ay):
        """None QGraphicsItem.setPos(None self, float _ax, float _ay)"""
        return None
    def scenePos(self):
        """QPointF QGraphicsItem.scenePos(None self)"""
        return QPointF()
    def y(self):
        """float QGraphicsItem.y(None self)"""
        return float()
    def x(self):
        """float QGraphicsItem.x(None self)"""
        return float()
    def pos(self):
        """QPointF QGraphicsItem.pos(None self)"""
        return QPointF()
    def clearFocus(self):
        """None QGraphicsItem.clearFocus(None self)"""
        return None
    def setFocus(self, _focusReason):
        """None QGraphicsItem.setFocus(None self, Qt.FocusReason _focusReason)"""
        return None
    def hasFocus(self):
        """bool QGraphicsItem.hasFocus(None self)"""
        return bool()
    def setHandlesChildEvents(self, _enabled):
        """None QGraphicsItem.setHandlesChildEvents(None self, bool _enabled)"""
        return None
    def handlesChildEvents(self):
        """bool QGraphicsItem.handlesChildEvents(None self)"""
        return bool()
    def setAcceptsHoverEvents(self, _enabled):
        """None QGraphicsItem.setAcceptsHoverEvents(None self, bool _enabled)"""
        return None
    def acceptsHoverEvents(self):
        """bool QGraphicsItem.acceptsHoverEvents(None self)"""
        return bool()
    def setAcceptedMouseButtons(self, _buttons):
        """None QGraphicsItem.setAcceptedMouseButtons(None self, Qt.MouseButtons _buttons)"""
        return None
    def acceptedMouseButtons(self):
        """Qt.MouseButtons QGraphicsItem.acceptedMouseButtons(None self)"""
        return Qt.MouseButtons()
    def setAcceptDrops(self, _on):
        """None QGraphicsItem.setAcceptDrops(None self, bool _on)"""
        return None
    def acceptDrops(self):
        """bool QGraphicsItem.acceptDrops(None self)"""
        return bool()
    def setSelected(self, _selected):
        """None QGraphicsItem.setSelected(None self, bool _selected)"""
        return None
    def isSelected(self):
        """bool QGraphicsItem.isSelected(None self)"""
        return bool()
    def setEnabled(self, _enabled):
        """None QGraphicsItem.setEnabled(None self, bool _enabled)"""
        return None
    def isEnabled(self):
        """bool QGraphicsItem.isEnabled(None self)"""
        return bool()
    def show(self):
        """None QGraphicsItem.show(None self)"""
        return None
    def hide(self):
        """None QGraphicsItem.hide(None self)"""
        return None
    def setVisible(self, _visible):
        """None QGraphicsItem.setVisible(None self, bool _visible)"""
        return None
    def isVisible(self):
        """bool QGraphicsItem.isVisible(None self)"""
        return bool()
    def unsetCursor(self):
        """None QGraphicsItem.unsetCursor(None self)"""
        return None
    def hasCursor(self):
        """bool QGraphicsItem.hasCursor(None self)"""
        return bool()
    def setCursor(self, _cursor):
        """None QGraphicsItem.setCursor(None self, QCursor _cursor)"""
        return None
    def cursor(self):
        """QCursor QGraphicsItem.cursor(None self)"""
        return QCursor()
    def setToolTip(self, _toolTip):
        """None QGraphicsItem.setToolTip(None self, QString _toolTip)"""
        return None
    def toolTip(self):
        """QString QGraphicsItem.toolTip(None self)"""
        return QString()
    def setFlags(self, _flags):
        """None QGraphicsItem.setFlags(None self, QGraphicsItem.GraphicsItemFlags _flags)"""
        return None
    def setFlag(self, _flag, _enabled):
        """None QGraphicsItem.setFlag(None self, QGraphicsItem.GraphicsItemFlag _flag, bool _enabled)"""
        return None
    def flags(self):
        """QGraphicsItem.GraphicsItemFlags QGraphicsItem.flags(None self)"""
        return QGraphicsItem.GraphicsItemFlags()
    def setGroup(self, _group):
        """None QGraphicsItem.setGroup(None self, QGraphicsItemGroup _group)"""
        return None
    def group(self):
        """QGraphicsItemGroup QGraphicsItem.group(None self)"""
        return QGraphicsItemGroup()
    def setParentItem(self, _parent):
        """None QGraphicsItem.setParentItem(None self, QGraphicsItem _parent)"""
        return None
    def topLevelItem(self):
        """QGraphicsItem QGraphicsItem.topLevelItem(None self)"""
        return QGraphicsItem()
    def parentItem(self):
        """QGraphicsItem QGraphicsItem.parentItem(None self)"""
        return QGraphicsItem()
    def scene(self):
        """QGraphicsScene QGraphicsItem.scene(None self)"""
        return QGraphicsScene()


class QAbstractGraphicsShapeItem(QGraphicsItem):
    """"""
    def __init__(self, _parent, _scene):
        """None QAbstractGraphicsShapeItem.__init__(None self, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def opaqueArea(self):
        """QPainterPath QAbstractGraphicsShapeItem.opaqueArea(None self)"""
        return QPainterPath()
    def isObscuredBy(self, _item):
        """bool QAbstractGraphicsShapeItem.isObscuredBy(None self, QGraphicsItem _item)"""
        return bool()
    def setBrush(self, _brush):
        """None QAbstractGraphicsShapeItem.setBrush(None self, QBrush _brush)"""
        return None
    def brush(self):
        """QBrush QAbstractGraphicsShapeItem.brush(None self)"""
        return QBrush()
    def setPen(self, _pen):
        """None QAbstractGraphicsShapeItem.setPen(None self, QPen _pen)"""
        return None
    def pen(self):
        """QPen QAbstractGraphicsShapeItem.pen(None self)"""
        return QPen()


class QGraphicsPathItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(self, _parent, _scene):
        """None QGraphicsPathItem.__init__(None self, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(self, _path, _parent, _scene):
        """None QGraphicsPathItem.__init__(None self, QPainterPath _path, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type(self):
        """int QGraphicsPathItem.type(None self)"""
        return int()
    def opaqueArea(self):
        """QPainterPath QGraphicsPathItem.opaqueArea(None self)"""
        return QPainterPath()
    def isObscuredBy(self, _item):
        """bool QGraphicsPathItem.isObscuredBy(None self, QGraphicsItem _item)"""
        return bool()
    def paint(self, _painter, _option, _widget):
        """None QGraphicsPathItem.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(self, _point):
        """bool QGraphicsPathItem.contains(None self, QPointF _point)"""
        return bool()
    def shape(self):
        """QPainterPath QGraphicsPathItem.shape(None self)"""
        return QPainterPath()
    def boundingRect(self):
        """QRectF QGraphicsPathItem.boundingRect(None self)"""
        return QRectF()
    def setPath(self, _path):
        """None QGraphicsPathItem.setPath(None self, QPainterPath _path)"""
        return None
    def path(self):
        """QPainterPath QGraphicsPathItem.path(None self)"""
        return QPainterPath()


class QGraphicsRectItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(self, _parent, _scene):
        """None QGraphicsRectItem.__init__(None self, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(self, _rect, _parent, _scene):
        """None QGraphicsRectItem.__init__(None self, QRectF _rect, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(self, _x, _y, _w, _h, _parent, _scene):
        """None QGraphicsRectItem.__init__(None self, float _x, float _y, float _w, float _h, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type(self):
        """int QGraphicsRectItem.type(None self)"""
        return int()
    def opaqueArea(self):
        """QPainterPath QGraphicsRectItem.opaqueArea(None self)"""
        return QPainterPath()
    def isObscuredBy(self, _item):
        """bool QGraphicsRectItem.isObscuredBy(None self, QGraphicsItem _item)"""
        return bool()
    def paint(self, _painter, _option, _widget):
        """None QGraphicsRectItem.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(self, _point):
        """bool QGraphicsRectItem.contains(None self, QPointF _point)"""
        return bool()
    def shape(self):
        """QPainterPath QGraphicsRectItem.shape(None self)"""
        return QPainterPath()
    def boundingRect(self):
        """QRectF QGraphicsRectItem.boundingRect(None self)"""
        return QRectF()
    def setRect(self, _rect):
        """None QGraphicsRectItem.setRect(None self, QRectF _rect)"""
        return None
    def setRect(self, _ax, _ay, _w, _h):
        """None QGraphicsRectItem.setRect(None self, float _ax, float _ay, float _w, float _h)"""
        return None
    def rect(self):
        """QRectF QGraphicsRectItem.rect(None self)"""
        return QRectF()


class QGraphicsEllipseItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(self, _parent, _scene):
        """None QGraphicsEllipseItem.__init__(None self, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(self, _rect, _parent, _scene):
        """None QGraphicsEllipseItem.__init__(None self, QRectF _rect, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(self, _x, _y, _w, _h, _parent, _scene):
        """None QGraphicsEllipseItem.__init__(None self, float _x, float _y, float _w, float _h, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type(self):
        """int QGraphicsEllipseItem.type(None self)"""
        return int()
    def opaqueArea(self):
        """QPainterPath QGraphicsEllipseItem.opaqueArea(None self)"""
        return QPainterPath()
    def isObscuredBy(self, _item):
        """bool QGraphicsEllipseItem.isObscuredBy(None self, QGraphicsItem _item)"""
        return bool()
    def paint(self, _painter, _option, _widget):
        """None QGraphicsEllipseItem.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(self, _point):
        """bool QGraphicsEllipseItem.contains(None self, QPointF _point)"""
        return bool()
    def shape(self):
        """QPainterPath QGraphicsEllipseItem.shape(None self)"""
        return QPainterPath()
    def boundingRect(self):
        """QRectF QGraphicsEllipseItem.boundingRect(None self)"""
        return QRectF()
    def setSpanAngle(self, _angle):
        """None QGraphicsEllipseItem.setSpanAngle(None self, int _angle)"""
        return None
    def spanAngle(self):
        """int QGraphicsEllipseItem.spanAngle(None self)"""
        return int()
    def setStartAngle(self, _angle):
        """None QGraphicsEllipseItem.setStartAngle(None self, int _angle)"""
        return None
    def startAngle(self):
        """int QGraphicsEllipseItem.startAngle(None self)"""
        return int()
    def setRect(self, _rect):
        """None QGraphicsEllipseItem.setRect(None self, QRectF _rect)"""
        return None
    def setRect(self, _ax, _ay, _w, _h):
        """None QGraphicsEllipseItem.setRect(None self, float _ax, float _ay, float _w, float _h)"""
        return None
    def rect(self):
        """QRectF QGraphicsEllipseItem.rect(None self)"""
        return QRectF()


class QGraphicsPolygonItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(self, _parent, _scene):
        """None QGraphicsPolygonItem.__init__(None self, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(self, _polygon, _parent, _scene):
        """None QGraphicsPolygonItem.__init__(None self, QPolygonF _polygon, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type(self):
        """int QGraphicsPolygonItem.type(None self)"""
        return int()
    def opaqueArea(self):
        """QPainterPath QGraphicsPolygonItem.opaqueArea(None self)"""
        return QPainterPath()
    def isObscuredBy(self, _item):
        """bool QGraphicsPolygonItem.isObscuredBy(None self, QGraphicsItem _item)"""
        return bool()
    def paint(self, _painter, _option, _widget):
        """None QGraphicsPolygonItem.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(self, _point):
        """bool QGraphicsPolygonItem.contains(None self, QPointF _point)"""
        return bool()
    def shape(self):
        """QPainterPath QGraphicsPolygonItem.shape(None self)"""
        return QPainterPath()
    def boundingRect(self):
        """QRectF QGraphicsPolygonItem.boundingRect(None self)"""
        return QRectF()
    def setFillRule(self, _rule):
        """None QGraphicsPolygonItem.setFillRule(None self, Qt.FillRule _rule)"""
        return None
    def fillRule(self):
        """Qt.FillRule QGraphicsPolygonItem.fillRule(None self)"""
        return Qt.FillRule()
    def setPolygon(self, _polygon):
        """None QGraphicsPolygonItem.setPolygon(None self, QPolygonF _polygon)"""
        return None
    def polygon(self):
        """QPolygonF QGraphicsPolygonItem.polygon(None self)"""
        return QPolygonF()


class QGraphicsLineItem(QGraphicsItem):
    """"""
    def __init__(self, _parent, _scene):
        """None QGraphicsLineItem.__init__(None self, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(self, _line, _parent, _scene):
        """None QGraphicsLineItem.__init__(None self, QLineF _line, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(self, _x1, _y1, _x2, _y2, _parent, _scene):
        """None QGraphicsLineItem.__init__(None self, float _x1, float _y1, float _x2, float _y2, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type(self):
        """int QGraphicsLineItem.type(None self)"""
        return int()
    def opaqueArea(self):
        """QPainterPath QGraphicsLineItem.opaqueArea(None self)"""
        return QPainterPath()
    def isObscuredBy(self, _item):
        """bool QGraphicsLineItem.isObscuredBy(None self, QGraphicsItem _item)"""
        return bool()
    def paint(self, _painter, _option, _widget):
        """None QGraphicsLineItem.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(self, _point):
        """bool QGraphicsLineItem.contains(None self, QPointF _point)"""
        return bool()
    def shape(self):
        """QPainterPath QGraphicsLineItem.shape(None self)"""
        return QPainterPath()
    def boundingRect(self):
        """QRectF QGraphicsLineItem.boundingRect(None self)"""
        return QRectF()
    def setLine(self, _line):
        """None QGraphicsLineItem.setLine(None self, QLineF _line)"""
        return None
    def setLine(self, _x1, _y1, _x2, _y2):
        """None QGraphicsLineItem.setLine(None self, float _x1, float _y1, float _x2, float _y2)"""
        return None
    def line(self):
        """QLineF QGraphicsLineItem.line(None self)"""
        return QLineF()
    def setPen(self, _pen):
        """None QGraphicsLineItem.setPen(None self, QPen _pen)"""
        return None
    def pen(self):
        """QPen QGraphicsLineItem.pen(None self)"""
        return QPen()


class QGraphicsPixmapItem(QGraphicsItem):
    """"""
    MaskShape = int() # QGraphicsPixmapItem.ShapeMode enum
    BoundingRectShape = int() # QGraphicsPixmapItem.ShapeMode enum
    HeuristicMaskShape = int() # QGraphicsPixmapItem.ShapeMode enum

    def __init__(self, _parent, _scene):
        """None QGraphicsPixmapItem.__init__(None self, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(self, _pixmap, _parent, _scene):
        """None QGraphicsPixmapItem.__init__(None self, QPixmap _pixmap, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def setShapeMode(self, _mode):
        """None QGraphicsPixmapItem.setShapeMode(None self, QGraphicsPixmapItem.ShapeMode _mode)"""
        return None
    def shapeMode(self):
        """QGraphicsPixmapItem.ShapeMode QGraphicsPixmapItem.shapeMode(None self)"""
        return QGraphicsPixmapItem.ShapeMode()
    def type(self):
        """int QGraphicsPixmapItem.type(None self)"""
        return int()
    def opaqueArea(self):
        """QPainterPath QGraphicsPixmapItem.opaqueArea(None self)"""
        return QPainterPath()
    def isObscuredBy(self, _item):
        """bool QGraphicsPixmapItem.isObscuredBy(None self, QGraphicsItem _item)"""
        return bool()
    def paint(self, _painter, _option, _widget):
        """None QGraphicsPixmapItem.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(self, _point):
        """bool QGraphicsPixmapItem.contains(None self, QPointF _point)"""
        return bool()
    def shape(self):
        """QPainterPath QGraphicsPixmapItem.shape(None self)"""
        return QPainterPath()
    def boundingRect(self):
        """QRectF QGraphicsPixmapItem.boundingRect(None self)"""
        return QRectF()
    def setOffset(self, _offset):
        """None QGraphicsPixmapItem.setOffset(None self, QPointF _offset)"""
        return None
    def setOffset(self, _ax, _ay):
        """None QGraphicsPixmapItem.setOffset(None self, float _ax, float _ay)"""
        return None
    def offset(self):
        """QPointF QGraphicsPixmapItem.offset(None self)"""
        return QPointF()
    def setTransformationMode(self, _mode):
        """None QGraphicsPixmapItem.setTransformationMode(None self, Qt.TransformationMode _mode)"""
        return None
    def transformationMode(self):
        """Qt.TransformationMode QGraphicsPixmapItem.transformationMode(None self)"""
        return Qt.TransformationMode()
    def setPixmap(self, _pixmap):
        """None QGraphicsPixmapItem.setPixmap(None self, QPixmap _pixmap)"""
        return None
    def pixmap(self):
        """QPixmap QGraphicsPixmapItem.pixmap(None self)"""
        return QPixmap()


class QGraphicsSimpleTextItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(self, _parent, _scene):
        """None QGraphicsSimpleTextItem.__init__(None self, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(self, _text, _parent, _scene):
        """None QGraphicsSimpleTextItem.__init__(None self, QString _text, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type(self):
        """int QGraphicsSimpleTextItem.type(None self)"""
        return int()
    def opaqueArea(self):
        """QPainterPath QGraphicsSimpleTextItem.opaqueArea(None self)"""
        return QPainterPath()
    def isObscuredBy(self, _item):
        """bool QGraphicsSimpleTextItem.isObscuredBy(None self, QGraphicsItem _item)"""
        return bool()
    def paint(self, _painter, _option, _widget):
        """None QGraphicsSimpleTextItem.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(self, _point):
        """bool QGraphicsSimpleTextItem.contains(None self, QPointF _point)"""
        return bool()
    def shape(self):
        """QPainterPath QGraphicsSimpleTextItem.shape(None self)"""
        return QPainterPath()
    def boundingRect(self):
        """QRectF QGraphicsSimpleTextItem.boundingRect(None self)"""
        return QRectF()
    def font(self):
        """QFont QGraphicsSimpleTextItem.font(None self)"""
        return QFont()
    def setFont(self, _font):
        """None QGraphicsSimpleTextItem.setFont(None self, QFont _font)"""
        return None
    def text(self):
        """QString QGraphicsSimpleTextItem.text(None self)"""
        return QString()
    def setText(self, _text):
        """None QGraphicsSimpleTextItem.setText(None self, QString _text)"""
        return None


class QGraphicsItemGroup(QGraphicsItem):
    """"""
    def __init__(self, _parent, _scene):
        """None QGraphicsItemGroup.__init__(None self, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def type(self):
        """int QGraphicsItemGroup.type(None self)"""
        return int()
    def opaqueArea(self):
        """QPainterPath QGraphicsItemGroup.opaqueArea(None self)"""
        return QPainterPath()
    def isObscuredBy(self, _item):
        """bool QGraphicsItemGroup.isObscuredBy(None self, QGraphicsItem _item)"""
        return bool()
    def paint(self, _painter, _option, _widget):
        """None QGraphicsItemGroup.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def boundingRect(self):
        """QRectF QGraphicsItemGroup.boundingRect(None self)"""
        return QRectF()
    def removeFromGroup(self, _item):
        """None QGraphicsItemGroup.removeFromGroup(None self, QGraphicsItem _item)"""
        return None
    def addToGroup(self, _item):
        """None QGraphicsItemGroup.addToGroup(None self, QGraphicsItem _item)"""
        return None


class QGraphicsObject(QObject, QGraphicsItem):
    """"""
    def __init__(self, _parent):
        """None QGraphicsObject.__init__(None self, QGraphicsItem _parent)"""
        return None
    def updateMicroFocus(self):
        """None QGraphicsObject.updateMicroFocus(None self)"""
        return None
    def ungrabGesture(self, _type):
        """None QGraphicsObject.ungrabGesture(None self, Qt.GestureType _type)"""
        return None
    def grabGesture(self, _type, _flags):
        """None QGraphicsObject.grabGesture(None self, Qt.GestureType _type, Qt.GestureFlags _flags)"""
        return None


class QGraphicsTextItem(QGraphicsObject):
    """"""
    def __init__(self, _parent, _scene):
        """None QGraphicsTextItem.__init__(None self, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def __init__(self, _text, _parent, _scene):
        """None QGraphicsTextItem.__init__(None self, QString _text, QGraphicsItem _parent, QGraphicsScene _scene)"""
        return None
    def inputMethodQuery(self, _query):
        """QVariant QGraphicsTextItem.inputMethodQuery(None self, Qt.InputMethodQuery _query)"""
        return QVariant()
    def hoverLeaveEvent(self, _event):
        """None QGraphicsTextItem.hoverLeaveEvent(None self, QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverMoveEvent(self, _event):
        """None QGraphicsTextItem.hoverMoveEvent(None self, QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverEnterEvent(self, _event):
        """None QGraphicsTextItem.hoverEnterEvent(None self, QGraphicsSceneHoverEvent _event)"""
        return None
    def inputMethodEvent(self, _event):
        """None QGraphicsTextItem.inputMethodEvent(None self, QInputMethodEvent _event)"""
        return None
    def dropEvent(self, _event):
        """None QGraphicsTextItem.dropEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragMoveEvent(self, _event):
        """None QGraphicsTextItem.dragMoveEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragLeaveEvent(self, _event):
        """None QGraphicsTextItem.dragLeaveEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragEnterEvent(self, _event):
        """None QGraphicsTextItem.dragEnterEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def focusOutEvent(self, _event):
        """None QGraphicsTextItem.focusOutEvent(None self, QFocusEvent _event)"""
        return None
    def focusInEvent(self, _event):
        """None QGraphicsTextItem.focusInEvent(None self, QFocusEvent _event)"""
        return None
    def keyReleaseEvent(self, _event):
        """None QGraphicsTextItem.keyReleaseEvent(None self, QKeyEvent _event)"""
        return None
    def keyPressEvent(self, _event):
        """None QGraphicsTextItem.keyPressEvent(None self, QKeyEvent _event)"""
        return None
    def contextMenuEvent(self, _event):
        """None QGraphicsTextItem.contextMenuEvent(None self, QGraphicsSceneContextMenuEvent _event)"""
        return None
    def mouseDoubleClickEvent(self, _event):
        """None QGraphicsTextItem.mouseDoubleClickEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseReleaseEvent(self, _event):
        """None QGraphicsTextItem.mouseReleaseEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseMoveEvent(self, _event):
        """None QGraphicsTextItem.mouseMoveEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mousePressEvent(self, _event):
        """None QGraphicsTextItem.mousePressEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def sceneEvent(self, _event):
        """bool QGraphicsTextItem.sceneEvent(None self, QEvent _event)"""
        return bool()
    def textCursor(self):
        """QTextCursor QGraphicsTextItem.textCursor(None self)"""
        return QTextCursor()
    def setTextCursor(self, _cursor):
        """None QGraphicsTextItem.setTextCursor(None self, QTextCursor _cursor)"""
        return None
    def openExternalLinks(self):
        """bool QGraphicsTextItem.openExternalLinks(None self)"""
        return bool()
    def setOpenExternalLinks(self, _open):
        """None QGraphicsTextItem.setOpenExternalLinks(None self, bool _open)"""
        return None
    def tabChangesFocus(self):
        """bool QGraphicsTextItem.tabChangesFocus(None self)"""
        return bool()
    def setTabChangesFocus(self, _b):
        """None QGraphicsTextItem.setTabChangesFocus(None self, bool _b)"""
        return None
    def textInteractionFlags(self):
        """Qt.TextInteractionFlags QGraphicsTextItem.textInteractionFlags(None self)"""
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(self, _flags):
        """None QGraphicsTextItem.setTextInteractionFlags(None self, Qt.TextInteractionFlags _flags)"""
        return None
    def document(self):
        """QTextDocument QGraphicsTextItem.document(None self)"""
        return QTextDocument()
    def setDocument(self, _document):
        """None QGraphicsTextItem.setDocument(None self, QTextDocument _document)"""
        return None
    def adjustSize(self):
        """None QGraphicsTextItem.adjustSize(None self)"""
        return None
    def textWidth(self):
        """float QGraphicsTextItem.textWidth(None self)"""
        return float()
    def setTextWidth(self, _width):
        """None QGraphicsTextItem.setTextWidth(None self, float _width)"""
        return None
    def type(self):
        """int QGraphicsTextItem.type(None self)"""
        return int()
    def opaqueArea(self):
        """QPainterPath QGraphicsTextItem.opaqueArea(None self)"""
        return QPainterPath()
    def isObscuredBy(self, _item):
        """bool QGraphicsTextItem.isObscuredBy(None self, QGraphicsItem _item)"""
        return bool()
    def paint(self, _painter, _option, _widget):
        """None QGraphicsTextItem.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def contains(self, _point):
        """bool QGraphicsTextItem.contains(None self, QPointF _point)"""
        return bool()
    def shape(self):
        """QPainterPath QGraphicsTextItem.shape(None self)"""
        return QPainterPath()
    def boundingRect(self):
        """QRectF QGraphicsTextItem.boundingRect(None self)"""
        return QRectF()
    def defaultTextColor(self):
        """QColor QGraphicsTextItem.defaultTextColor(None self)"""
        return QColor()
    def setDefaultTextColor(self, _c):
        """None QGraphicsTextItem.setDefaultTextColor(None self, QColor _c)"""
        return None
    def setFont(self, _font):
        """None QGraphicsTextItem.setFont(None self, QFont _font)"""
        return None
    def font(self):
        """QFont QGraphicsTextItem.font(None self)"""
        return QFont()
    def setPlainText(self, _text):
        """None QGraphicsTextItem.setPlainText(None self, QString _text)"""
        return None
    def toPlainText(self):
        """QString QGraphicsTextItem.toPlainText(None self)"""
        return QString()
    def setHtml(self, _html):
        """None QGraphicsTextItem.setHtml(None self, QString _html)"""
        return None
    def toHtml(self):
        """QString QGraphicsTextItem.toHtml(None self)"""
        return QString()


class QGraphicsItemAnimation(QObject):
    """"""
    def __init__(self, _parent):
        """None QGraphicsItemAnimation.__init__(None self, QObject _parent)"""
        return None
    def shearList(self):
        """list-of-tuple-of-float-QPointF QGraphicsItemAnimation.shearList(None self)"""
        return [tuple-of-float-QPointF()]
    def scaleList(self):
        """list-of-tuple-of-float-QPointF QGraphicsItemAnimation.scaleList(None self)"""
        return [tuple-of-float-QPointF()]
    def translationList(self):
        """list-of-tuple-of-float-QPointF QGraphicsItemAnimation.translationList(None self)"""
        return [tuple-of-float-QPointF()]
    def rotationList(self):
        """list-of-tuple-of-float-float QGraphicsItemAnimation.rotationList(None self)"""
        return [tuple-of-float-float()]
    def posList(self):
        """list-of-tuple-of-float-QPointF QGraphicsItemAnimation.posList(None self)"""
        return [tuple-of-float-QPointF()]
    def beforeAnimationStep(self, _step):
        """None QGraphicsItemAnimation.beforeAnimationStep(None self, float _step)"""
        return None
    def afterAnimationStep(self, _step):
        """None QGraphicsItemAnimation.afterAnimationStep(None self, float _step)"""
        return None
    def setStep(self, _x):
        """None QGraphicsItemAnimation.setStep(None self, float _x)"""
        return None
    def reset(self):
        """None QGraphicsItemAnimation.reset(None self)"""
        return None
    def clear(self):
        """None QGraphicsItemAnimation.clear(None self)"""
        return None
    def setShearAt(self, _step, _sh, _sv):
        """None QGraphicsItemAnimation.setShearAt(None self, float _step, float _sh, float _sv)"""
        return None
    def horizontalShearAt(self, _step):
        """float QGraphicsItemAnimation.horizontalShearAt(None self, float _step)"""
        return float()
    def verticalShearAt(self, _step):
        """float QGraphicsItemAnimation.verticalShearAt(None self, float _step)"""
        return float()
    def setScaleAt(self, _step, _sx, _sy):
        """None QGraphicsItemAnimation.setScaleAt(None self, float _step, float _sx, float _sy)"""
        return None
    def horizontalScaleAt(self, _step):
        """float QGraphicsItemAnimation.horizontalScaleAt(None self, float _step)"""
        return float()
    def verticalScaleAt(self, _step):
        """float QGraphicsItemAnimation.verticalScaleAt(None self, float _step)"""
        return float()
    def setTranslationAt(self, _step, _dx, _dy):
        """None QGraphicsItemAnimation.setTranslationAt(None self, float _step, float _dx, float _dy)"""
        return None
    def yTranslationAt(self, _step):
        """float QGraphicsItemAnimation.yTranslationAt(None self, float _step)"""
        return float()
    def xTranslationAt(self, _step):
        """float QGraphicsItemAnimation.xTranslationAt(None self, float _step)"""
        return float()
    def setRotationAt(self, _step, _angle):
        """None QGraphicsItemAnimation.setRotationAt(None self, float _step, float _angle)"""
        return None
    def rotationAt(self, _step):
        """float QGraphicsItemAnimation.rotationAt(None self, float _step)"""
        return float()
    def matrixAt(self, _step):
        """QMatrix QGraphicsItemAnimation.matrixAt(None self, float _step)"""
        return QMatrix()
    def setPosAt(self, _step, _pos):
        """None QGraphicsItemAnimation.setPosAt(None self, float _step, QPointF _pos)"""
        return None
    def posAt(self, _step):
        """QPointF QGraphicsItemAnimation.posAt(None self, float _step)"""
        return QPointF()
    def setTimeLine(self, _timeLine):
        """None QGraphicsItemAnimation.setTimeLine(None self, QTimeLine _timeLine)"""
        return None
    def timeLine(self):
        """QTimeLine QGraphicsItemAnimation.timeLine(None self)"""
        return QTimeLine()
    def setItem(self, _item):
        """None QGraphicsItemAnimation.setItem(None self, QGraphicsItem _item)"""
        return None
    def item(self):
        """QGraphicsItem QGraphicsItemAnimation.item(None self)"""
        return QGraphicsItem()


class QGraphicsLinearLayout(QGraphicsLayout):
    """"""
    def __init__(self, _parent):
        """None QGraphicsLinearLayout.__init__(None self, QGraphicsLayoutItem _parent)"""
        return None
    def __init__(self, _orientation, _parent):
        """None QGraphicsLinearLayout.__init__(None self, Qt.Orientation _orientation, QGraphicsLayoutItem _parent)"""
        return None
    def sizeHint(self, _which, _constraint):
        """QSizeF QGraphicsLinearLayout.sizeHint(None self, Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def invalidate(self):
        """None QGraphicsLinearLayout.invalidate(None self)"""
        return None
    def itemAt(self, _index):
        """QGraphicsLayoutItem QGraphicsLinearLayout.itemAt(None self, int _index)"""
        return QGraphicsLayoutItem()
    def count(self):
        """int QGraphicsLinearLayout.count(None self)"""
        return int()
    def setGeometry(self, _rect):
        """None QGraphicsLinearLayout.setGeometry(None self, QRectF _rect)"""
        return None
    def alignment(self, _item):
        """Qt.Alignment QGraphicsLinearLayout.alignment(None self, QGraphicsLayoutItem _item)"""
        return Qt.Alignment()
    def setAlignment(self, _item, _alignment):
        """None QGraphicsLinearLayout.setAlignment(None self, QGraphicsLayoutItem _item, Qt.Alignment _alignment)"""
        return None
    def stretchFactor(self, _item):
        """int QGraphicsLinearLayout.stretchFactor(None self, QGraphicsLayoutItem _item)"""
        return int()
    def setStretchFactor(self, _item, _stretch):
        """None QGraphicsLinearLayout.setStretchFactor(None self, QGraphicsLayoutItem _item, int _stretch)"""
        return None
    def itemSpacing(self, _index):
        """float QGraphicsLinearLayout.itemSpacing(None self, int _index)"""
        return float()
    def setItemSpacing(self, _index, _spacing):
        """None QGraphicsLinearLayout.setItemSpacing(None self, int _index, float _spacing)"""
        return None
    def spacing(self):
        """float QGraphicsLinearLayout.spacing(None self)"""
        return float()
    def setSpacing(self, _spacing):
        """None QGraphicsLinearLayout.setSpacing(None self, float _spacing)"""
        return None
    def removeAt(self, _index):
        """None QGraphicsLinearLayout.removeAt(None self, int _index)"""
        return None
    def removeItem(self, _item):
        """None QGraphicsLinearLayout.removeItem(None self, QGraphicsLayoutItem _item)"""
        return None
    def insertStretch(self, _index, _stretch):
        """None QGraphicsLinearLayout.insertStretch(None self, int _index, int _stretch)"""
        return None
    def insertItem(self, _index, _item):
        """None QGraphicsLinearLayout.insertItem(None self, int _index, QGraphicsLayoutItem _item)"""
        return None
    def addStretch(self, _stretch):
        """None QGraphicsLinearLayout.addStretch(None self, int _stretch)"""
        return None
    def addItem(self, _item):
        """None QGraphicsLinearLayout.addItem(None self, QGraphicsLayoutItem _item)"""
        return None
    def orientation(self):
        """Qt.Orientation QGraphicsLinearLayout.orientation(None self)"""
        return Qt.Orientation()
    def setOrientation(self, _orientation):
        """None QGraphicsLinearLayout.setOrientation(None self, Qt.Orientation _orientation)"""
        return None


class QGraphicsWidget(QGraphicsObject, QGraphicsLayoutItem):
    """"""
    def __init__(self, _parent, _flags):
        """None QGraphicsWidget.__init__(None self, QGraphicsItem _parent, Qt.WindowFlags _flags)"""
        return None
    def setAutoFillBackground(self, _enabled):
        """None QGraphicsWidget.setAutoFillBackground(None self, bool _enabled)"""
        return None
    def autoFillBackground(self):
        """bool QGraphicsWidget.autoFillBackground(None self)"""
        return bool()
    def ungrabKeyboardEvent(self, _event):
        """None QGraphicsWidget.ungrabKeyboardEvent(None self, QEvent _event)"""
        return None
    def grabKeyboardEvent(self, _event):
        """None QGraphicsWidget.grabKeyboardEvent(None self, QEvent _event)"""
        return None
    def ungrabMouseEvent(self, _event):
        """None QGraphicsWidget.ungrabMouseEvent(None self, QEvent _event)"""
        return None
    def grabMouseEvent(self, _event):
        """None QGraphicsWidget.grabMouseEvent(None self, QEvent _event)"""
        return None
    def hoverLeaveEvent(self, _event):
        """None QGraphicsWidget.hoverLeaveEvent(None self, QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverMoveEvent(self, _event):
        """None QGraphicsWidget.hoverMoveEvent(None self, QGraphicsSceneHoverEvent _event)"""
        return None
    def showEvent(self, _event):
        """None QGraphicsWidget.showEvent(None self, QShowEvent _event)"""
        return None
    def resizeEvent(self, _event):
        """None QGraphicsWidget.resizeEvent(None self, QGraphicsSceneResizeEvent _event)"""
        return None
    def polishEvent(self):
        """None QGraphicsWidget.polishEvent(None self)"""
        return None
    def moveEvent(self, _event):
        """None QGraphicsWidget.moveEvent(None self, QGraphicsSceneMoveEvent _event)"""
        return None
    def hideEvent(self, _event):
        """None QGraphicsWidget.hideEvent(None self, QHideEvent _event)"""
        return None
    def focusOutEvent(self, _event):
        """None QGraphicsWidget.focusOutEvent(None self, QFocusEvent _event)"""
        return None
    def focusNextPrevChild(self, _next):
        """bool QGraphicsWidget.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def focusInEvent(self, _event):
        """None QGraphicsWidget.focusInEvent(None self, QFocusEvent _event)"""
        return None
    def closeEvent(self, _event):
        """None QGraphicsWidget.closeEvent(None self, QCloseEvent _event)"""
        return None
    def changeEvent(self, _event):
        """None QGraphicsWidget.changeEvent(None self, QEvent _event)"""
        return None
    def event(self, _event):
        """bool QGraphicsWidget.event(None self, QEvent _event)"""
        return bool()
    def windowFrameSectionAt(self, _pos):
        """Qt.WindowFrameSection QGraphicsWidget.windowFrameSectionAt(None self, QPointF _pos)"""
        return Qt.WindowFrameSection()
    def windowFrameEvent(self, _e):
        """bool QGraphicsWidget.windowFrameEvent(None self, QEvent _e)"""
        return bool()
    def sceneEvent(self, _event):
        """bool QGraphicsWidget.sceneEvent(None self, QEvent _event)"""
        return bool()
    def itemChange(self, _change, _value):
        """QVariant QGraphicsWidget.itemChange(None self, QGraphicsItem.GraphicsItemChange _change, QVariant _value)"""
        return QVariant()
    def updateGeometry(self):
        """None QGraphicsWidget.updateGeometry(None self)"""
        return None
    def sizeHint(self, _which, _constraint):
        """QSizeF QGraphicsWidget.sizeHint(None self, Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def initStyleOption(self, _option):
        """None QGraphicsWidget.initStyleOption(None self, QStyleOption _option)"""
        return None
    def close(self):
        """bool QGraphicsWidget.close(None self)"""
        return bool()
    def shape(self):
        """QPainterPath QGraphicsWidget.shape(None self)"""
        return QPainterPath()
    def boundingRect(self):
        """QRectF QGraphicsWidget.boundingRect(None self)"""
        return QRectF()
    def paintWindowFrame(self, _painter, _option, _widget):
        """None QGraphicsWidget.paintWindowFrame(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def paint(self, _painter, _option, _widget):
        """None QGraphicsWidget.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def type(self):
        """int QGraphicsWidget.type(None self)"""
        return int()
    def testAttribute(self, _attribute):
        """bool QGraphicsWidget.testAttribute(None self, Qt.WidgetAttribute _attribute)"""
        return bool()
    def setAttribute(self, _attribute, _on):
        """None QGraphicsWidget.setAttribute(None self, Qt.WidgetAttribute _attribute, bool _on)"""
        return None
    def actions(self):
        """list-of-QAction QGraphicsWidget.actions(None self)"""
        return [QAction()]
    def removeAction(self, _action):
        """None QGraphicsWidget.removeAction(None self, QAction _action)"""
        return None
    def insertActions(self, _before, _actions):
        """None QGraphicsWidget.insertActions(None self, QAction _before, list-of-QAction _actions)"""
        return None
    def insertAction(self, _before, _action):
        """None QGraphicsWidget.insertAction(None self, QAction _before, QAction _action)"""
        return None
    def addActions(self, _actions):
        """None QGraphicsWidget.addActions(None self, list-of-QAction _actions)"""
        return None
    def addAction(self, _action):
        """None QGraphicsWidget.addAction(None self, QAction _action)"""
        return None
    def setShortcutAutoRepeat(self, _id, _enabled):
        """None QGraphicsWidget.setShortcutAutoRepeat(None self, int _id, bool _enabled)"""
        return None
    def setShortcutEnabled(self, _id, _enabled):
        """None QGraphicsWidget.setShortcutEnabled(None self, int _id, bool _enabled)"""
        return None
    def releaseShortcut(self, _id):
        """None QGraphicsWidget.releaseShortcut(None self, int _id)"""
        return None
    def grabShortcut(self, _sequence, _context):
        """int QGraphicsWidget.grabShortcut(None self, QKeySequence _sequence, Qt.ShortcutContext _context)"""
        return int()
    def focusWidget(self):
        """QGraphicsWidget QGraphicsWidget.focusWidget(None self)"""
        return QGraphicsWidget()
    def setTabOrder(self, _first, _second):
        """None QGraphicsWidget.setTabOrder(None self, QGraphicsWidget _first, QGraphicsWidget _second)"""
        return None
    def setFocusPolicy(self, _policy):
        """None QGraphicsWidget.setFocusPolicy(None self, Qt.FocusPolicy _policy)"""
        return None
    def focusPolicy(self):
        """Qt.FocusPolicy QGraphicsWidget.focusPolicy(None self)"""
        return Qt.FocusPolicy()
    def windowTitle(self):
        """QString QGraphicsWidget.windowTitle(None self)"""
        return QString()
    def setWindowTitle(self, _title):
        """None QGraphicsWidget.setWindowTitle(None self, QString _title)"""
        return None
    def isActiveWindow(self):
        """bool QGraphicsWidget.isActiveWindow(None self)"""
        return bool()
    def setWindowFlags(self, _wFlags):
        """None QGraphicsWidget.setWindowFlags(None self, Qt.WindowFlags _wFlags)"""
        return None
    def windowType(self):
        """Qt.WindowType QGraphicsWidget.windowType(None self)"""
        return Qt.WindowType()
    def windowFlags(self):
        """Qt.WindowFlags QGraphicsWidget.windowFlags(None self)"""
        return Qt.WindowFlags()
    def windowFrameRect(self):
        """QRectF QGraphicsWidget.windowFrameRect(None self)"""
        return QRectF()
    def windowFrameGeometry(self):
        """QRectF QGraphicsWidget.windowFrameGeometry(None self)"""
        return QRectF()
    def unsetWindowFrameMargins(self):
        """None QGraphicsWidget.unsetWindowFrameMargins(None self)"""
        return None
    def getWindowFrameMargins(self, _left, _top, _right, _bottom):
        """None QGraphicsWidget.getWindowFrameMargins(None self, float _left, float _top, float _right, float _bottom)"""
        return None
    def setWindowFrameMargins(self, _left, _top, _right, _bottom):
        """None QGraphicsWidget.setWindowFrameMargins(None self, float _left, float _top, float _right, float _bottom)"""
        return None
    def getContentsMargins(self, _left, _top, _right, _bottom):
        """None QGraphicsWidget.getContentsMargins(None self, float _left, float _top, float _right, float _bottom)"""
        return None
    def setContentsMargins(self, _left, _top, _right, _bottom):
        """None QGraphicsWidget.setContentsMargins(None self, float _left, float _top, float _right, float _bottom)"""
        return None
    def rect(self):
        """QRectF QGraphicsWidget.rect(None self)"""
        return QRectF()
    def setGeometry(self, _rect):
        """None QGraphicsWidget.setGeometry(None self, QRectF _rect)"""
        return None
    def setGeometry(self, _ax, _ay, _aw, _ah):
        """None QGraphicsWidget.setGeometry(None self, float _ax, float _ay, float _aw, float _ah)"""
        return None
    def size(self):
        """QSizeF QGraphicsWidget.size(None self)"""
        return QSizeF()
    def resize(self, _size):
        """None QGraphicsWidget.resize(None self, QSizeF _size)"""
        return None
    def resize(self, _w, _h):
        """None QGraphicsWidget.resize(None self, float _w, float _h)"""
        return None
    def setPalette(self, _palette):
        """None QGraphicsWidget.setPalette(None self, QPalette _palette)"""
        return None
    def palette(self):
        """QPalette QGraphicsWidget.palette(None self)"""
        return QPalette()
    def setFont(self, _font):
        """None QGraphicsWidget.setFont(None self, QFont _font)"""
        return None
    def font(self):
        """QFont QGraphicsWidget.font(None self)"""
        return QFont()
    def setStyle(self, _style):
        """None QGraphicsWidget.setStyle(None self, QStyle _style)"""
        return None
    def style(self):
        """QStyle QGraphicsWidget.style(None self)"""
        return QStyle()
    def unsetLayoutDirection(self):
        """None QGraphicsWidget.unsetLayoutDirection(None self)"""
        return None
    def setLayoutDirection(self, _direction):
        """None QGraphicsWidget.setLayoutDirection(None self, Qt.LayoutDirection _direction)"""
        return None
    def layoutDirection(self):
        """Qt.LayoutDirection QGraphicsWidget.layoutDirection(None self)"""
        return Qt.LayoutDirection()
    def adjustSize(self):
        """None QGraphicsWidget.adjustSize(None self)"""
        return None
    def setLayout(self, _layout):
        """None QGraphicsWidget.setLayout(None self, QGraphicsLayout _layout)"""
        return None
    def layout(self):
        """QGraphicsLayout QGraphicsWidget.layout(None self)"""
        return QGraphicsLayout()


class QGraphicsProxyWidget(QGraphicsWidget):
    """"""
    def __init__(self, _parent, _flags):
        """None QGraphicsProxyWidget.__init__(None self, QGraphicsItem _parent, Qt.WindowFlags _flags)"""
        return None
    def newProxyWidget(self):
        """QWidget QGraphicsProxyWidget.newProxyWidget(None self)"""
        return QWidget()
    def dropEvent(self, _event):
        """None QGraphicsProxyWidget.dropEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragMoveEvent(self, _event):
        """None QGraphicsProxyWidget.dragMoveEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragLeaveEvent(self, _event):
        """None QGraphicsProxyWidget.dragLeaveEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragEnterEvent(self, _event):
        """None QGraphicsProxyWidget.dragEnterEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def resizeEvent(self, _event):
        """None QGraphicsProxyWidget.resizeEvent(None self, QGraphicsSceneResizeEvent _event)"""
        return None
    def sizeHint(self, _which, _constraint):
        """QSizeF QGraphicsProxyWidget.sizeHint(None self, Qt.SizeHint _which, QSizeF _constraint)"""
        return QSizeF()
    def focusNextPrevChild(self, _next):
        """bool QGraphicsProxyWidget.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def focusOutEvent(self, _event):
        """None QGraphicsProxyWidget.focusOutEvent(None self, QFocusEvent _event)"""
        return None
    def focusInEvent(self, _event):
        """None QGraphicsProxyWidget.focusInEvent(None self, QFocusEvent _event)"""
        return None
    def keyReleaseEvent(self, _event):
        """None QGraphicsProxyWidget.keyReleaseEvent(None self, QKeyEvent _event)"""
        return None
    def keyPressEvent(self, _event):
        """None QGraphicsProxyWidget.keyPressEvent(None self, QKeyEvent _event)"""
        return None
    def wheelEvent(self, _event):
        """None QGraphicsProxyWidget.wheelEvent(None self, QGraphicsSceneWheelEvent _event)"""
        return None
    def mouseDoubleClickEvent(self, _event):
        """None QGraphicsProxyWidget.mouseDoubleClickEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseReleaseEvent(self, _event):
        """None QGraphicsProxyWidget.mouseReleaseEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mousePressEvent(self, _event):
        """None QGraphicsProxyWidget.mousePressEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseMoveEvent(self, _event):
        """None QGraphicsProxyWidget.mouseMoveEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def ungrabMouseEvent(self, _event):
        """None QGraphicsProxyWidget.ungrabMouseEvent(None self, QEvent _event)"""
        return None
    def grabMouseEvent(self, _event):
        """None QGraphicsProxyWidget.grabMouseEvent(None self, QEvent _event)"""
        return None
    def hoverMoveEvent(self, _event):
        """None QGraphicsProxyWidget.hoverMoveEvent(None self, QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverLeaveEvent(self, _event):
        """None QGraphicsProxyWidget.hoverLeaveEvent(None self, QGraphicsSceneHoverEvent _event)"""
        return None
    def hoverEnterEvent(self, _event):
        """None QGraphicsProxyWidget.hoverEnterEvent(None self, QGraphicsSceneHoverEvent _event)"""
        return None
    def contextMenuEvent(self, _event):
        """None QGraphicsProxyWidget.contextMenuEvent(None self, QGraphicsSceneContextMenuEvent _event)"""
        return None
    def hideEvent(self, _event):
        """None QGraphicsProxyWidget.hideEvent(None self, QHideEvent _event)"""
        return None
    def showEvent(self, _event):
        """None QGraphicsProxyWidget.showEvent(None self, QShowEvent _event)"""
        return None
    def eventFilter(self, _object, _event):
        """bool QGraphicsProxyWidget.eventFilter(None self, QObject _object, QEvent _event)"""
        return bool()
    def event(self, _event):
        """bool QGraphicsProxyWidget.event(None self, QEvent _event)"""
        return bool()
    def itemChange(self, _change, _value):
        """QVariant QGraphicsProxyWidget.itemChange(None self, QGraphicsItem.GraphicsItemChange _change, QVariant _value)"""
        return QVariant()
    def createProxyForChildWidget(self, _child):
        """QGraphicsProxyWidget QGraphicsProxyWidget.createProxyForChildWidget(None self, QWidget _child)"""
        return QGraphicsProxyWidget()
    def type(self):
        """int QGraphicsProxyWidget.type(None self)"""
        return int()
    def paint(self, _painter, _option, _widget):
        """None QGraphicsProxyWidget.paint(None self, QPainter _painter, QStyleOptionGraphicsItem _option, QWidget _widget)"""
        return None
    def setGeometry(self, _rect):
        """None QGraphicsProxyWidget.setGeometry(None self, QRectF _rect)"""
        return None
    def subWidgetRect(self, _widget):
        """QRectF QGraphicsProxyWidget.subWidgetRect(None self, QWidget _widget)"""
        return QRectF()
    def widget(self):
        """QWidget QGraphicsProxyWidget.widget(None self)"""
        return QWidget()
    def setWidget(self, _widget):
        """None QGraphicsProxyWidget.setWidget(None self, QWidget _widget)"""
        return None


class QGraphicsScene(QObject):
    """"""
    ItemLayer = int() # QGraphicsScene.SceneLayer enum
    BackgroundLayer = int() # QGraphicsScene.SceneLayer enum
    ForegroundLayer = int() # QGraphicsScene.SceneLayer enum
    AllLayers = int() # QGraphicsScene.SceneLayer enum

    BspTreeIndex = int() # QGraphicsScene.ItemIndexMethod enum
    NoIndex = int() # QGraphicsScene.ItemIndexMethod enum

    def __init__(self, _parent):
        """None QGraphicsScene.__init__(None self, QObject _parent)"""
        return None
    def __init__(self, _sceneRect, _parent):
        """None QGraphicsScene.__init__(None self, QRectF _sceneRect, QObject _parent)"""
        return None
    def __init__(self, _x, _y, _width, _height, _parent):
        """None QGraphicsScene.__init__(None self, float _x, float _y, float _width, float _height, QObject _parent)"""
        return None
    def sendEvent(self, _item, _event):
        """bool QGraphicsScene.sendEvent(None self, QGraphicsItem _item, QEvent _event)"""
        return bool()
    def setActivePanel(self, _item):
        """None QGraphicsScene.setActivePanel(None self, QGraphicsItem _item)"""
        return None
    def activePanel(self):
        """QGraphicsItem QGraphicsScene.activePanel(None self)"""
        return QGraphicsItem()
    def isActive(self):
        """bool QGraphicsScene.isActive(None self)"""
        return bool()
    def stickyFocus(self):
        """bool QGraphicsScene.stickyFocus(None self)"""
        return bool()
    def setStickyFocus(self, _enabled):
        """None QGraphicsScene.setStickyFocus(None self, bool _enabled)"""
        return None
    def setSortCacheEnabled(self, _enabled):
        """None QGraphicsScene.setSortCacheEnabled(None self, bool _enabled)"""
        return None
    def isSortCacheEnabled(self):
        """bool QGraphicsScene.isSortCacheEnabled(None self)"""
        return bool()
    def focusNextPrevChild(self, _next):
        """bool QGraphicsScene.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def eventFilter(self, _watched, _event):
        """bool QGraphicsScene.eventFilter(None self, QObject _watched, QEvent _event)"""
        return bool()
    def setActiveWindow(self, _widget):
        """None QGraphicsScene.setActiveWindow(None self, QGraphicsWidget _widget)"""
        return None
    def activeWindow(self):
        """QGraphicsWidget QGraphicsScene.activeWindow(None self)"""
        return QGraphicsWidget()
    def setPalette(self, _palette):
        """None QGraphicsScene.setPalette(None self, QPalette _palette)"""
        return None
    def palette(self):
        """QPalette QGraphicsScene.palette(None self)"""
        return QPalette()
    def setFont(self, _font):
        """None QGraphicsScene.setFont(None self, QFont _font)"""
        return None
    def font(self):
        """QFont QGraphicsScene.font(None self)"""
        return QFont()
    def setStyle(self, _style):
        """None QGraphicsScene.setStyle(None self, QStyle _style)"""
        return None
    def style(self):
        """QStyle QGraphicsScene.style(None self)"""
        return QStyle()
    def addWidget(self, _widget, _flags):
        """QGraphicsProxyWidget QGraphicsScene.addWidget(None self, QWidget _widget, Qt.WindowFlags _flags)"""
        return QGraphicsProxyWidget()
    def selectionArea(self):
        """QPainterPath QGraphicsScene.selectionArea(None self)"""
        return QPainterPath()
    def setBspTreeDepth(self, _depth):
        """None QGraphicsScene.setBspTreeDepth(None self, int _depth)"""
        return None
    def bspTreeDepth(self):
        """int QGraphicsScene.bspTreeDepth(None self)"""
        return int()
    def drawItems(self, _painter, _items, _options, _widget):
        """None QGraphicsScene.drawItems(None self, QPainter _painter, list-of-QGraphicsItem _items, list-of-QStyleOptionGraphicsItem _options, QWidget _widget)"""
        return None
    def drawForeground(self, _painter, _rect):
        """None QGraphicsScene.drawForeground(None self, QPainter _painter, QRectF _rect)"""
        return None
    def drawBackground(self, _painter, _rect):
        """None QGraphicsScene.drawBackground(None self, QPainter _painter, QRectF _rect)"""
        return None
    def inputMethodEvent(self, _event):
        """None QGraphicsScene.inputMethodEvent(None self, QInputMethodEvent _event)"""
        return None
    def wheelEvent(self, _event):
        """None QGraphicsScene.wheelEvent(None self, QGraphicsSceneWheelEvent _event)"""
        return None
    def mouseDoubleClickEvent(self, _event):
        """None QGraphicsScene.mouseDoubleClickEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseReleaseEvent(self, _event):
        """None QGraphicsScene.mouseReleaseEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mouseMoveEvent(self, _event):
        """None QGraphicsScene.mouseMoveEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def mousePressEvent(self, _event):
        """None QGraphicsScene.mousePressEvent(None self, QGraphicsSceneMouseEvent _event)"""
        return None
    def keyReleaseEvent(self, _event):
        """None QGraphicsScene.keyReleaseEvent(None self, QKeyEvent _event)"""
        return None
    def keyPressEvent(self, _event):
        """None QGraphicsScene.keyPressEvent(None self, QKeyEvent _event)"""
        return None
    def helpEvent(self, _event):
        """None QGraphicsScene.helpEvent(None self, QGraphicsSceneHelpEvent _event)"""
        return None
    def focusOutEvent(self, _event):
        """None QGraphicsScene.focusOutEvent(None self, QFocusEvent _event)"""
        return None
    def focusInEvent(self, _event):
        """None QGraphicsScene.focusInEvent(None self, QFocusEvent _event)"""
        return None
    def dropEvent(self, _event):
        """None QGraphicsScene.dropEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragLeaveEvent(self, _event):
        """None QGraphicsScene.dragLeaveEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragMoveEvent(self, _event):
        """None QGraphicsScene.dragMoveEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def dragEnterEvent(self, _event):
        """None QGraphicsScene.dragEnterEvent(None self, QGraphicsSceneDragDropEvent _event)"""
        return None
    def contextMenuEvent(self, _event):
        """None QGraphicsScene.contextMenuEvent(None self, QGraphicsSceneContextMenuEvent _event)"""
        return None
    def event(self, _event):
        """bool QGraphicsScene.event(None self, QEvent _event)"""
        return bool()
    def clear(self):
        """None QGraphicsScene.clear(None self)"""
        return None
    def invalidate(self, _rect, _layers):
        """None QGraphicsScene.invalidate(None self, QRectF _rect, QGraphicsScene.SceneLayers _layers)"""
        return None
    def invalidate(self, _x, _y, _w, _h, _layers):
        """None QGraphicsScene.invalidate(None self, float _x, float _y, float _w, float _h, QGraphicsScene.SceneLayers _layers)"""
        return None
    def update(self, _rect):
        """None QGraphicsScene.update(None self, QRectF _rect)"""
        return None
    def update(self, _x, _y, _w, _h):
        """None QGraphicsScene.update(None self, float _x, float _y, float _w, float _h)"""
        return None
    def advance(self):
        """None QGraphicsScene.advance(None self)"""
        return None
    def views(self):
        """list-of-QGraphicsView QGraphicsScene.views(None self)"""
        return [QGraphicsView()]
    def inputMethodQuery(self, _query):
        """QVariant QGraphicsScene.inputMethodQuery(None self, Qt.InputMethodQuery _query)"""
        return QVariant()
    def setForegroundBrush(self, _brush):
        """None QGraphicsScene.setForegroundBrush(None self, QBrush _brush)"""
        return None
    def foregroundBrush(self):
        """QBrush QGraphicsScene.foregroundBrush(None self)"""
        return QBrush()
    def setBackgroundBrush(self, _brush):
        """None QGraphicsScene.setBackgroundBrush(None self, QBrush _brush)"""
        return None
    def backgroundBrush(self):
        """QBrush QGraphicsScene.backgroundBrush(None self)"""
        return QBrush()
    def mouseGrabberItem(self):
        """QGraphicsItem QGraphicsScene.mouseGrabberItem(None self)"""
        return QGraphicsItem()
    def clearFocus(self):
        """None QGraphicsScene.clearFocus(None self)"""
        return None
    def setFocus(self, _focusReason):
        """None QGraphicsScene.setFocus(None self, Qt.FocusReason _focusReason)"""
        return None
    def hasFocus(self):
        """bool QGraphicsScene.hasFocus(None self)"""
        return bool()
    def setFocusItem(self, _item, _focusReason):
        """None QGraphicsScene.setFocusItem(None self, QGraphicsItem _item, Qt.FocusReason _focusReason)"""
        return None
    def focusItem(self):
        """QGraphicsItem QGraphicsScene.focusItem(None self)"""
        return QGraphicsItem()
    def removeItem(self, _item):
        """None QGraphicsScene.removeItem(None self, QGraphicsItem _item)"""
        return None
    def addText(self, _text, _font):
        """QGraphicsTextItem QGraphicsScene.addText(None self, QString _text, QFont _font)"""
        return QGraphicsTextItem()
    def addSimpleText(self, _text, _font):
        """QGraphicsSimpleTextItem QGraphicsScene.addSimpleText(None self, QString _text, QFont _font)"""
        return QGraphicsSimpleTextItem()
    def addRect(self, _rect, _pen, _brush):
        """QGraphicsRectItem QGraphicsScene.addRect(None self, QRectF _rect, QPen _pen, QBrush _brush)"""
        return QGraphicsRectItem()
    def addRect(self, _x, _y, _w, _h, _pen, _brush):
        """QGraphicsRectItem QGraphicsScene.addRect(None self, float _x, float _y, float _w, float _h, QPen _pen, QBrush _brush)"""
        return QGraphicsRectItem()
    def addPolygon(self, _polygon, _pen, _brush):
        """QGraphicsPolygonItem QGraphicsScene.addPolygon(None self, QPolygonF _polygon, QPen _pen, QBrush _brush)"""
        return QGraphicsPolygonItem()
    def addPixmap(self, _pixmap):
        """QGraphicsPixmapItem QGraphicsScene.addPixmap(None self, QPixmap _pixmap)"""
        return QGraphicsPixmapItem()
    def addPath(self, _path, _pen, _brush):
        """QGraphicsPathItem QGraphicsScene.addPath(None self, QPainterPath _path, QPen _pen, QBrush _brush)"""
        return QGraphicsPathItem()
    def addLine(self, _line, _pen):
        """QGraphicsLineItem QGraphicsScene.addLine(None self, QLineF _line, QPen _pen)"""
        return QGraphicsLineItem()
    def addLine(self, _x1, _y1, _x2, _y2, _pen):
        """QGraphicsLineItem QGraphicsScene.addLine(None self, float _x1, float _y1, float _x2, float _y2, QPen _pen)"""
        return QGraphicsLineItem()
    def addEllipse(self, _rect, _pen, _brush):
        """QGraphicsEllipseItem QGraphicsScene.addEllipse(None self, QRectF _rect, QPen _pen, QBrush _brush)"""
        return QGraphicsEllipseItem()
    def addEllipse(self, _x, _y, _w, _h, _pen, _brush):
        """QGraphicsEllipseItem QGraphicsScene.addEllipse(None self, float _x, float _y, float _w, float _h, QPen _pen, QBrush _brush)"""
        return QGraphicsEllipseItem()
    def addItem(self, _item):
        """None QGraphicsScene.addItem(None self, QGraphicsItem _item)"""
        return None
    def destroyItemGroup(self, _group):
        """None QGraphicsScene.destroyItemGroup(None self, QGraphicsItemGroup _group)"""
        return None
    def createItemGroup(self, _items):
        """QGraphicsItemGroup QGraphicsScene.createItemGroup(None self, list-of-QGraphicsItem _items)"""
        return QGraphicsItemGroup()
    def clearSelection(self):
        """None QGraphicsScene.clearSelection(None self)"""
        return None
    def setSelectionArea(self, _path):
        """None QGraphicsScene.setSelectionArea(None self, QPainterPath _path)"""
        return None
    def setSelectionArea(self, _path):
        """Qt.ItemSelectionMode QGraphicsScene.setSelectionArea(None self, QPainterPath _path)"""
        return Qt.ItemSelectionMode()
    def setSelectionArea(self, _path, _deviceTransform):
        """None QGraphicsScene.setSelectionArea(None self, QPainterPath _path, QTransform _deviceTransform)"""
        return None
    def setSelectionArea(self, _path, _mode, _deviceTransform):
        """None QGraphicsScene.setSelectionArea(None self, QPainterPath _path, Qt.ItemSelectionMode _mode, QTransform _deviceTransform)"""
        return None
    def selectedItems(self):
        """list-of-QGraphicsItem QGraphicsScene.selectedItems(None self)"""
        return [QGraphicsItem()]
    def itemAt(self, _pos):
        """QGraphicsItem QGraphicsScene.itemAt(None self, QPointF _pos)"""
        return QGraphicsItem()
    def itemAt(self, _x, _y):
        """QGraphicsItem QGraphicsScene.itemAt(None self, float _x, float _y)"""
        return QGraphicsItem()
    def itemAt(self, _pos, _deviceTransform):
        """QGraphicsItem QGraphicsScene.itemAt(None self, QPointF _pos, QTransform _deviceTransform)"""
        return QGraphicsItem()
    def itemAt(self, _x, _y, _deviceTransform):
        """QGraphicsItem QGraphicsScene.itemAt(None self, float _x, float _y, QTransform _deviceTransform)"""
        return QGraphicsItem()
    def collidingItems(self, _item, _mode):
        """list-of-QGraphicsItem QGraphicsScene.collidingItems(None self, QGraphicsItem _item, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(self):
        """list-of-QGraphicsItem QGraphicsScene.items(None self)"""
        return [QGraphicsItem()]
    def items(self, _pos):
        """list-of-QGraphicsItem QGraphicsScene.items(None self, QPointF _pos)"""
        return [QGraphicsItem()]
    def items(self, _rectangle, _mode):
        """list-of-QGraphicsItem QGraphicsScene.items(None self, QRectF _rectangle, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(self, _polygon, _mode):
        """list-of-QGraphicsItem QGraphicsScene.items(None self, QPolygonF _polygon, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(self, _path, _mode):
        """list-of-QGraphicsItem QGraphicsScene.items(None self, QPainterPath _path, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(self, _x, _y, _w, _h, _mode):
        """list-of-QGraphicsItem QGraphicsScene.items(None self, float _x, float _y, float _w, float _h, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(self, _order):
        """list-of-QGraphicsItem QGraphicsScene.items(None self, Qt.SortOrder _order)"""
        return [QGraphicsItem()]
    def items(self, _pos, _mode, _order, _deviceTransform):
        """list-of-QGraphicsItem QGraphicsScene.items(None self, QPointF _pos, Qt.ItemSelectionMode _mode, Qt.SortOrder _order, QTransform _deviceTransform)"""
        return [QGraphicsItem()]
    def items(self, _rect, _mode, _order, _deviceTransform):
        """list-of-QGraphicsItem QGraphicsScene.items(None self, QRectF _rect, Qt.ItemSelectionMode _mode, Qt.SortOrder _order, QTransform _deviceTransform)"""
        return [QGraphicsItem()]
    def items(self, _polygon, _mode, _order, _deviceTransform):
        """list-of-QGraphicsItem QGraphicsScene.items(None self, QPolygonF _polygon, Qt.ItemSelectionMode _mode, Qt.SortOrder _order, QTransform _deviceTransform)"""
        return [QGraphicsItem()]
    def items(self, _path, _mode, _order, _deviceTransform):
        """list-of-QGraphicsItem QGraphicsScene.items(None self, QPainterPath _path, Qt.ItemSelectionMode _mode, Qt.SortOrder _order, QTransform _deviceTransform)"""
        return [QGraphicsItem()]
    def items(self, _x, _y, _w, _h, _mode, _order, _deviceTransform):
        """list-of-QGraphicsItem QGraphicsScene.items(None self, float _x, float _y, float _w, float _h, Qt.ItemSelectionMode _mode, Qt.SortOrder _order, QTransform _deviceTransform)"""
        return [QGraphicsItem()]
    def itemsBoundingRect(self):
        """QRectF QGraphicsScene.itemsBoundingRect(None self)"""
        return QRectF()
    def setItemIndexMethod(self, _method):
        """None QGraphicsScene.setItemIndexMethod(None self, QGraphicsScene.ItemIndexMethod _method)"""
        return None
    def itemIndexMethod(self):
        """QGraphicsScene.ItemIndexMethod QGraphicsScene.itemIndexMethod(None self)"""
        return QGraphicsScene.ItemIndexMethod()
    def render(self, _painter, _target, _source, _mode):
        """None QGraphicsScene.render(None self, QPainter _painter, QRectF _target, QRectF _source, Qt.AspectRatioMode _mode)"""
        return None
    def setSceneRect(self, _rect):
        """None QGraphicsScene.setSceneRect(None self, QRectF _rect)"""
        return None
    def setSceneRect(self, _x, _y, _w, _h):
        """None QGraphicsScene.setSceneRect(None self, float _x, float _y, float _w, float _h)"""
        return None
    def height(self):
        """float QGraphicsScene.height(None self)"""
        return float()
    def width(self):
        """float QGraphicsScene.width(None self)"""
        return float()
    def sceneRect(self):
        """QRectF QGraphicsScene.sceneRect(None self)"""
        return QRectF()


class QGraphicsSceneEvent(QEvent):
    """"""
    def setWidget(self, _widget):
        """None QGraphicsSceneEvent.setWidget(None self, QWidget _widget)"""
        return None
    def widget(self):
        """QWidget QGraphicsSceneEvent.widget(None self)"""
        return QWidget()


class QGraphicsSceneMouseEvent(QGraphicsSceneEvent):
    """"""
    def modifiers(self):
        """Qt.KeyboardModifiers QGraphicsSceneMouseEvent.modifiers(None self)"""
        return Qt.KeyboardModifiers()
    def button(self):
        """Qt.MouseButton QGraphicsSceneMouseEvent.button(None self)"""
        return Qt.MouseButton()
    def buttons(self):
        """Qt.MouseButtons QGraphicsSceneMouseEvent.buttons(None self)"""
        return Qt.MouseButtons()
    def lastScreenPos(self):
        """QPoint QGraphicsSceneMouseEvent.lastScreenPos(None self)"""
        return QPoint()
    def lastScenePos(self):
        """QPointF QGraphicsSceneMouseEvent.lastScenePos(None self)"""
        return QPointF()
    def lastPos(self):
        """QPointF QGraphicsSceneMouseEvent.lastPos(None self)"""
        return QPointF()
    def buttonDownScreenPos(self, _button):
        """QPoint QGraphicsSceneMouseEvent.buttonDownScreenPos(None self, Qt.MouseButton _button)"""
        return QPoint()
    def buttonDownScenePos(self, _button):
        """QPointF QGraphicsSceneMouseEvent.buttonDownScenePos(None self, Qt.MouseButton _button)"""
        return QPointF()
    def buttonDownPos(self, _button):
        """QPointF QGraphicsSceneMouseEvent.buttonDownPos(None self, Qt.MouseButton _button)"""
        return QPointF()
    def screenPos(self):
        """QPoint QGraphicsSceneMouseEvent.screenPos(None self)"""
        return QPoint()
    def scenePos(self):
        """QPointF QGraphicsSceneMouseEvent.scenePos(None self)"""
        return QPointF()
    def pos(self):
        """QPointF QGraphicsSceneMouseEvent.pos(None self)"""
        return QPointF()


class QGraphicsSceneWheelEvent(QGraphicsSceneEvent):
    """"""
    def orientation(self):
        """Qt.Orientation QGraphicsSceneWheelEvent.orientation(None self)"""
        return Qt.Orientation()
    def delta(self):
        """int QGraphicsSceneWheelEvent.delta(None self)"""
        return int()
    def modifiers(self):
        """Qt.KeyboardModifiers QGraphicsSceneWheelEvent.modifiers(None self)"""
        return Qt.KeyboardModifiers()
    def buttons(self):
        """Qt.MouseButtons QGraphicsSceneWheelEvent.buttons(None self)"""
        return Qt.MouseButtons()
    def screenPos(self):
        """QPoint QGraphicsSceneWheelEvent.screenPos(None self)"""
        return QPoint()
    def scenePos(self):
        """QPointF QGraphicsSceneWheelEvent.scenePos(None self)"""
        return QPointF()
    def pos(self):
        """QPointF QGraphicsSceneWheelEvent.pos(None self)"""
        return QPointF()


class QGraphicsSceneContextMenuEvent(QGraphicsSceneEvent):
    """"""
    Mouse = int() # QGraphicsSceneContextMenuEvent.Reason enum
    Keyboard = int() # QGraphicsSceneContextMenuEvent.Reason enum
    Other = int() # QGraphicsSceneContextMenuEvent.Reason enum

    def reason(self):
        """QGraphicsSceneContextMenuEvent.Reason QGraphicsSceneContextMenuEvent.reason(None self)"""
        return QGraphicsSceneContextMenuEvent.Reason()
    def modifiers(self):
        """Qt.KeyboardModifiers QGraphicsSceneContextMenuEvent.modifiers(None self)"""
        return Qt.KeyboardModifiers()
    def screenPos(self):
        """QPoint QGraphicsSceneContextMenuEvent.screenPos(None self)"""
        return QPoint()
    def scenePos(self):
        """QPointF QGraphicsSceneContextMenuEvent.scenePos(None self)"""
        return QPointF()
    def pos(self):
        """QPointF QGraphicsSceneContextMenuEvent.pos(None self)"""
        return QPointF()


class QGraphicsSceneHoverEvent(QGraphicsSceneEvent):
    """"""
    def modifiers(self):
        """Qt.KeyboardModifiers QGraphicsSceneHoverEvent.modifiers(None self)"""
        return Qt.KeyboardModifiers()
    def lastScreenPos(self):
        """QPoint QGraphicsSceneHoverEvent.lastScreenPos(None self)"""
        return QPoint()
    def lastScenePos(self):
        """QPointF QGraphicsSceneHoverEvent.lastScenePos(None self)"""
        return QPointF()
    def lastPos(self):
        """QPointF QGraphicsSceneHoverEvent.lastPos(None self)"""
        return QPointF()
    def screenPos(self):
        """QPoint QGraphicsSceneHoverEvent.screenPos(None self)"""
        return QPoint()
    def scenePos(self):
        """QPointF QGraphicsSceneHoverEvent.scenePos(None self)"""
        return QPointF()
    def pos(self):
        """QPointF QGraphicsSceneHoverEvent.pos(None self)"""
        return QPointF()


class QGraphicsSceneHelpEvent(QGraphicsSceneEvent):
    """"""
    def screenPos(self):
        """QPoint QGraphicsSceneHelpEvent.screenPos(None self)"""
        return QPoint()
    def scenePos(self):
        """QPointF QGraphicsSceneHelpEvent.scenePos(None self)"""
        return QPointF()


class QGraphicsSceneDragDropEvent(QGraphicsSceneEvent):
    """"""
    def mimeData(self):
        """QMimeData QGraphicsSceneDragDropEvent.mimeData(None self)"""
        return QMimeData()
    def source(self):
        """QWidget QGraphicsSceneDragDropEvent.source(None self)"""
        return QWidget()
    def setDropAction(self, _action):
        """None QGraphicsSceneDragDropEvent.setDropAction(None self, Qt.DropAction _action)"""
        return None
    def dropAction(self):
        """Qt.DropAction QGraphicsSceneDragDropEvent.dropAction(None self)"""
        return Qt.DropAction()
    def acceptProposedAction(self):
        """None QGraphicsSceneDragDropEvent.acceptProposedAction(None self)"""
        return None
    def proposedAction(self):
        """Qt.DropAction QGraphicsSceneDragDropEvent.proposedAction(None self)"""
        return Qt.DropAction()
    def possibleActions(self):
        """Qt.DropActions QGraphicsSceneDragDropEvent.possibleActions(None self)"""
        return Qt.DropActions()
    def modifiers(self):
        """Qt.KeyboardModifiers QGraphicsSceneDragDropEvent.modifiers(None self)"""
        return Qt.KeyboardModifiers()
    def buttons(self):
        """Qt.MouseButtons QGraphicsSceneDragDropEvent.buttons(None self)"""
        return Qt.MouseButtons()
    def screenPos(self):
        """QPoint QGraphicsSceneDragDropEvent.screenPos(None self)"""
        return QPoint()
    def scenePos(self):
        """QPointF QGraphicsSceneDragDropEvent.scenePos(None self)"""
        return QPointF()
    def pos(self):
        """QPointF QGraphicsSceneDragDropEvent.pos(None self)"""
        return QPointF()


class QGraphicsSceneResizeEvent(QGraphicsSceneEvent):
    """"""
    def __init__(self):
        """None QGraphicsSceneResizeEvent.__init__(None self)"""
        return None
    def newSize(self):
        """QSizeF QGraphicsSceneResizeEvent.newSize(None self)"""
        return QSizeF()
    def oldSize(self):
        """QSizeF QGraphicsSceneResizeEvent.oldSize(None self)"""
        return QSizeF()


class QGraphicsSceneMoveEvent(QGraphicsSceneEvent):
    """"""
    def __init__(self):
        """None QGraphicsSceneMoveEvent.__init__(None self)"""
        return None
    def newPos(self):
        """QPointF QGraphicsSceneMoveEvent.newPos(None self)"""
        return QPointF()
    def oldPos(self):
        """QPointF QGraphicsSceneMoveEvent.oldPos(None self)"""
        return QPointF()


class QGraphicsTransform(QObject):
    """"""
    def __init__(self, _parent):
        """None QGraphicsTransform.__init__(None self, QObject _parent)"""
        return None
    def update(self):
        """None QGraphicsTransform.update(None self)"""
        return None
    def applyTo(self, _matrix):
        """abstract None QGraphicsTransform.applyTo(None self, QMatrix4x4 _matrix)"""
        return None


class QGraphicsScale(QGraphicsTransform):
    """"""
    def __init__(self, _parent):
        """None QGraphicsScale.__init__(None self, QObject _parent)"""
        return None
    def applyTo(self, _matrix):
        """None QGraphicsScale.applyTo(None self, QMatrix4x4 _matrix)"""
        return None
    def setZScale(self):
        """float QGraphicsScale.setZScale(None self)"""
        return float()
    def zScale(self):
        """float QGraphicsScale.zScale(None self)"""
        return float()
    def setYScale(self):
        """float QGraphicsScale.setYScale(None self)"""
        return float()
    def yScale(self):
        """float QGraphicsScale.yScale(None self)"""
        return float()
    def setXScale(self):
        """float QGraphicsScale.setXScale(None self)"""
        return float()
    def xScale(self):
        """float QGraphicsScale.xScale(None self)"""
        return float()
    def setOrigin(self, _point):
        """None QGraphicsScale.setOrigin(None self, QVector3D _point)"""
        return None
    def origin(self):
        """QVector3D QGraphicsScale.origin(None self)"""
        return QVector3D()


class QGraphicsRotation(QGraphicsTransform):
    """"""
    def __init__(self, _parent):
        """None QGraphicsRotation.__init__(None self, QObject _parent)"""
        return None
    def applyTo(self, _matrix):
        """None QGraphicsRotation.applyTo(None self, QMatrix4x4 _matrix)"""
        return None
    def setAxis(self, _axis):
        """None QGraphicsRotation.setAxis(None self, QVector3D _axis)"""
        return None
    def setAxis(self, _axis):
        """None QGraphicsRotation.setAxis(None self, Qt.Axis _axis)"""
        return None
    def axis(self):
        """QVector3D QGraphicsRotation.axis(None self)"""
        return QVector3D()
    def setAngle(self):
        """float QGraphicsRotation.setAngle(None self)"""
        return float()
    def angle(self):
        """float QGraphicsRotation.angle(None self)"""
        return float()
    def setOrigin(self, _point):
        """None QGraphicsRotation.setOrigin(None self, QVector3D _point)"""
        return None
    def origin(self):
        """QVector3D QGraphicsRotation.origin(None self)"""
        return QVector3D()


class QGraphicsView(QAbstractScrollArea):
    """"""
    DontClipPainter = int() # QGraphicsView.OptimizationFlag enum
    DontSavePainterState = int() # QGraphicsView.OptimizationFlag enum
    DontAdjustForAntialiasing = int() # QGraphicsView.OptimizationFlag enum

    FullViewportUpdate = int() # QGraphicsView.ViewportUpdateMode enum
    MinimalViewportUpdate = int() # QGraphicsView.ViewportUpdateMode enum
    SmartViewportUpdate = int() # QGraphicsView.ViewportUpdateMode enum
    BoundingRectViewportUpdate = int() # QGraphicsView.ViewportUpdateMode enum
    NoViewportUpdate = int() # QGraphicsView.ViewportUpdateMode enum

    NoAnchor = int() # QGraphicsView.ViewportAnchor enum
    AnchorViewCenter = int() # QGraphicsView.ViewportAnchor enum
    AnchorUnderMouse = int() # QGraphicsView.ViewportAnchor enum

    NoDrag = int() # QGraphicsView.DragMode enum
    ScrollHandDrag = int() # QGraphicsView.DragMode enum
    RubberBandDrag = int() # QGraphicsView.DragMode enum

    CacheNone = int() # QGraphicsView.CacheModeFlag enum
    CacheBackground = int() # QGraphicsView.CacheModeFlag enum

    def __init__(self, _parent):
        """None QGraphicsView.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _scene, _parent):
        """None QGraphicsView.__init__(None self, QGraphicsScene _scene, QWidget _parent)"""
        return None
    def isTransformed(self):
        """bool QGraphicsView.isTransformed(None self)"""
        return bool()
    def resetTransform(self):
        """None QGraphicsView.resetTransform(None self)"""
        return None
    def setTransform(self, _matrix, _combine):
        """None QGraphicsView.setTransform(None self, QTransform _matrix, bool _combine)"""
        return None
    def viewportTransform(self):
        """QTransform QGraphicsView.viewportTransform(None self)"""
        return QTransform()
    def transform(self):
        """QTransform QGraphicsView.transform(None self)"""
        return QTransform()
    def setRubberBandSelectionMode(self, _mode):
        """None QGraphicsView.setRubberBandSelectionMode(None self, Qt.ItemSelectionMode _mode)"""
        return None
    def rubberBandSelectionMode(self):
        """Qt.ItemSelectionMode QGraphicsView.rubberBandSelectionMode(None self)"""
        return Qt.ItemSelectionMode()
    def setOptimizationFlags(self, _flags):
        """None QGraphicsView.setOptimizationFlags(None self, QGraphicsView.OptimizationFlags _flags)"""
        return None
    def setOptimizationFlag(self, _flag, _enabled):
        """None QGraphicsView.setOptimizationFlag(None self, QGraphicsView.OptimizationFlag _flag, bool _enabled)"""
        return None
    def optimizationFlags(self):
        """QGraphicsView.OptimizationFlags QGraphicsView.optimizationFlags(None self)"""
        return QGraphicsView.OptimizationFlags()
    def setViewportUpdateMode(self, _mode):
        """None QGraphicsView.setViewportUpdateMode(None self, QGraphicsView.ViewportUpdateMode _mode)"""
        return None
    def viewportUpdateMode(self):
        """QGraphicsView.ViewportUpdateMode QGraphicsView.viewportUpdateMode(None self)"""
        return QGraphicsView.ViewportUpdateMode()
    def drawItems(self, _painter, _items, _options):
        """None QGraphicsView.drawItems(None self, QPainter _painter, list-of-QGraphicsItem _items, list-of-QStyleOptionGraphicsItem _options)"""
        return None
    def drawForeground(self, _painter, _rect):
        """None QGraphicsView.drawForeground(None self, QPainter _painter, QRectF _rect)"""
        return None
    def drawBackground(self, _painter, _rect):
        """None QGraphicsView.drawBackground(None self, QPainter _painter, QRectF _rect)"""
        return None
    def inputMethodEvent(self, _event):
        """None QGraphicsView.inputMethodEvent(None self, QInputMethodEvent _event)"""
        return None
    def showEvent(self, _event):
        """None QGraphicsView.showEvent(None self, QShowEvent _event)"""
        return None
    def scrollContentsBy(self, _dx, _dy):
        """None QGraphicsView.scrollContentsBy(None self, int _dx, int _dy)"""
        return None
    def resizeEvent(self, _event):
        """None QGraphicsView.resizeEvent(None self, QResizeEvent _event)"""
        return None
    def paintEvent(self, _event):
        """None QGraphicsView.paintEvent(None self, QPaintEvent _event)"""
        return None
    def wheelEvent(self, _event):
        """None QGraphicsView.wheelEvent(None self, QWheelEvent _event)"""
        return None
    def mouseReleaseEvent(self, _event):
        """None QGraphicsView.mouseReleaseEvent(None self, QMouseEvent _event)"""
        return None
    def mouseMoveEvent(self, _event):
        """None QGraphicsView.mouseMoveEvent(None self, QMouseEvent _event)"""
        return None
    def mousePressEvent(self, _event):
        """None QGraphicsView.mousePressEvent(None self, QMouseEvent _event)"""
        return None
    def mouseDoubleClickEvent(self, _event):
        """None QGraphicsView.mouseDoubleClickEvent(None self, QMouseEvent _event)"""
        return None
    def keyReleaseEvent(self, _event):
        """None QGraphicsView.keyReleaseEvent(None self, QKeyEvent _event)"""
        return None
    def keyPressEvent(self, _event):
        """None QGraphicsView.keyPressEvent(None self, QKeyEvent _event)"""
        return None
    def focusNextPrevChild(self, _next):
        """bool QGraphicsView.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def focusOutEvent(self, _event):
        """None QGraphicsView.focusOutEvent(None self, QFocusEvent _event)"""
        return None
    def focusInEvent(self, _event):
        """None QGraphicsView.focusInEvent(None self, QFocusEvent _event)"""
        return None
    def dropEvent(self, _event):
        """None QGraphicsView.dropEvent(None self, QDropEvent _event)"""
        return None
    def dragMoveEvent(self, _event):
        """None QGraphicsView.dragMoveEvent(None self, QDragMoveEvent _event)"""
        return None
    def dragLeaveEvent(self, _event):
        """None QGraphicsView.dragLeaveEvent(None self, QDragLeaveEvent _event)"""
        return None
    def dragEnterEvent(self, _event):
        """None QGraphicsView.dragEnterEvent(None self, QDragEnterEvent _event)"""
        return None
    def contextMenuEvent(self, _event):
        """None QGraphicsView.contextMenuEvent(None self, QContextMenuEvent _event)"""
        return None
    def viewportEvent(self, _event):
        """bool QGraphicsView.viewportEvent(None self, QEvent _event)"""
        return bool()
    def event(self, _event):
        """bool QGraphicsView.event(None self, QEvent _event)"""
        return bool()
    def setupViewport(self, _widget):
        """None QGraphicsView.setupViewport(None self, QWidget _widget)"""
        return None
    def updateSceneRect(self, _rect):
        """None QGraphicsView.updateSceneRect(None self, QRectF _rect)"""
        return None
    def updateScene(self, _rects):
        """None QGraphicsView.updateScene(None self, list-of-QRectF _rects)"""
        return None
    def invalidateScene(self, _rect, _layers):
        """None QGraphicsView.invalidateScene(None self, QRectF _rect, QGraphicsScene.SceneLayers _layers)"""
        return None
    def setForegroundBrush(self, _brush):
        """None QGraphicsView.setForegroundBrush(None self, QBrush _brush)"""
        return None
    def foregroundBrush(self):
        """QBrush QGraphicsView.foregroundBrush(None self)"""
        return QBrush()
    def setBackgroundBrush(self, _brush):
        """None QGraphicsView.setBackgroundBrush(None self, QBrush _brush)"""
        return None
    def backgroundBrush(self):
        """QBrush QGraphicsView.backgroundBrush(None self)"""
        return QBrush()
    def inputMethodQuery(self, _query):
        """QVariant QGraphicsView.inputMethodQuery(None self, Qt.InputMethodQuery _query)"""
        return QVariant()
    def mapFromScene(self, _point):
        """QPoint QGraphicsView.mapFromScene(None self, QPointF _point)"""
        return QPoint()
    def mapFromScene(self, _rect):
        """QPolygon QGraphicsView.mapFromScene(None self, QRectF _rect)"""
        return QPolygon()
    def mapFromScene(self, _polygon):
        """QPolygon QGraphicsView.mapFromScene(None self, QPolygonF _polygon)"""
        return QPolygon()
    def mapFromScene(self, _path):
        """QPainterPath QGraphicsView.mapFromScene(None self, QPainterPath _path)"""
        return QPainterPath()
    def mapFromScene(self, _ax, _ay):
        """QPoint QGraphicsView.mapFromScene(None self, float _ax, float _ay)"""
        return QPoint()
    def mapFromScene(self, _ax, _ay, _w, _h):
        """QPolygon QGraphicsView.mapFromScene(None self, float _ax, float _ay, float _w, float _h)"""
        return QPolygon()
    def mapToScene(self, _point):
        """QPointF QGraphicsView.mapToScene(None self, QPoint _point)"""
        return QPointF()
    def mapToScene(self, _rect):
        """QPolygonF QGraphicsView.mapToScene(None self, QRect _rect)"""
        return QPolygonF()
    def mapToScene(self, _polygon):
        """QPolygonF QGraphicsView.mapToScene(None self, QPolygon _polygon)"""
        return QPolygonF()
    def mapToScene(self, _path):
        """QPainterPath QGraphicsView.mapToScene(None self, QPainterPath _path)"""
        return QPainterPath()
    def mapToScene(self, _ax, _ay):
        """QPointF QGraphicsView.mapToScene(None self, int _ax, int _ay)"""
        return QPointF()
    def mapToScene(self, _ax, _ay, _w, _h):
        """QPolygonF QGraphicsView.mapToScene(None self, int _ax, int _ay, int _w, int _h)"""
        return QPolygonF()
    def itemAt(self, _pos):
        """QGraphicsItem QGraphicsView.itemAt(None self, QPoint _pos)"""
        return QGraphicsItem()
    def itemAt(self, _ax, _ay):
        """QGraphicsItem QGraphicsView.itemAt(None self, int _ax, int _ay)"""
        return QGraphicsItem()
    def items(self):
        """list-of-QGraphicsItem QGraphicsView.items(None self)"""
        return [QGraphicsItem()]
    def items(self, _pos):
        """list-of-QGraphicsItem QGraphicsView.items(None self, QPoint _pos)"""
        return [QGraphicsItem()]
    def items(self, _ax, _ay):
        """list-of-QGraphicsItem QGraphicsView.items(None self, int _ax, int _ay)"""
        return [QGraphicsItem()]
    def items(self, _x, _y, _w, _h, _mode):
        """list-of-QGraphicsItem QGraphicsView.items(None self, int _x, int _y, int _w, int _h, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(self, _rect, _mode):
        """list-of-QGraphicsItem QGraphicsView.items(None self, QRect _rect, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(self, _polygon, _mode):
        """list-of-QGraphicsItem QGraphicsView.items(None self, QPolygon _polygon, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def items(self, _path, _mode):
        """list-of-QGraphicsItem QGraphicsView.items(None self, QPainterPath _path, Qt.ItemSelectionMode _mode)"""
        return [QGraphicsItem()]
    def render(self, _painter, _target, _source, _mode):
        """None QGraphicsView.render(None self, QPainter _painter, QRectF _target, QRect _source, Qt.AspectRatioMode _mode)"""
        return None
    def fitInView(self, _rect, _mode):
        """None QGraphicsView.fitInView(None self, QRectF _rect, Qt.AspectRatioMode _mode)"""
        return None
    def fitInView(self, _item, _mode):
        """None QGraphicsView.fitInView(None self, QGraphicsItem _item, Qt.AspectRatioMode _mode)"""
        return None
    def fitInView(self, _x, _y, _w, _h, _mode):
        """None QGraphicsView.fitInView(None self, float _x, float _y, float _w, float _h, Qt.AspectRatioMode _mode)"""
        return None
    def ensureVisible(self, _rect, _xMargin, _yMargin):
        """None QGraphicsView.ensureVisible(None self, QRectF _rect, int _xMargin, int _yMargin)"""
        return None
    def ensureVisible(self, _item, _xMargin, _yMargin):
        """None QGraphicsView.ensureVisible(None self, QGraphicsItem _item, int _xMargin, int _yMargin)"""
        return None
    def ensureVisible(self, _x, _y, _w, _h, _xMargin, _yMargin):
        """None QGraphicsView.ensureVisible(None self, float _x, float _y, float _w, float _h, int _xMargin, int _yMargin)"""
        return None
    def centerOn(self, _pos):
        """None QGraphicsView.centerOn(None self, QPointF _pos)"""
        return None
    def centerOn(self, _item):
        """None QGraphicsView.centerOn(None self, QGraphicsItem _item)"""
        return None
    def centerOn(self, _ax, _ay):
        """None QGraphicsView.centerOn(None self, float _ax, float _ay)"""
        return None
    def translate(self, _dx, _dy):
        """None QGraphicsView.translate(None self, float _dx, float _dy)"""
        return None
    def shear(self, _sh, _sv):
        """None QGraphicsView.shear(None self, float _sh, float _sv)"""
        return None
    def scale(self, _sx, _sy):
        """None QGraphicsView.scale(None self, float _sx, float _sy)"""
        return None
    def rotate(self, _angle):
        """None QGraphicsView.rotate(None self, float _angle)"""
        return None
    def resetMatrix(self):
        """None QGraphicsView.resetMatrix(None self)"""
        return None
    def setMatrix(self, _matrix, _combine):
        """None QGraphicsView.setMatrix(None self, QMatrix _matrix, bool _combine)"""
        return None
    def matrix(self):
        """QMatrix QGraphicsView.matrix(None self)"""
        return QMatrix()
    def setSceneRect(self, _rect):
        """None QGraphicsView.setSceneRect(None self, QRectF _rect)"""
        return None
    def setSceneRect(self, _ax, _ay, _aw, _ah):
        """None QGraphicsView.setSceneRect(None self, float _ax, float _ay, float _aw, float _ah)"""
        return None
    def sceneRect(self):
        """QRectF QGraphicsView.sceneRect(None self)"""
        return QRectF()
    def setScene(self, _scene):
        """None QGraphicsView.setScene(None self, QGraphicsScene _scene)"""
        return None
    def scene(self):
        """QGraphicsScene QGraphicsView.scene(None self)"""
        return QGraphicsScene()
    def setInteractive(self, _allowed):
        """None QGraphicsView.setInteractive(None self, bool _allowed)"""
        return None
    def isInteractive(self):
        """bool QGraphicsView.isInteractive(None self)"""
        return bool()
    def resetCachedContent(self):
        """None QGraphicsView.resetCachedContent(None self)"""
        return None
    def setCacheMode(self, _mode):
        """None QGraphicsView.setCacheMode(None self, QGraphicsView.CacheMode _mode)"""
        return None
    def cacheMode(self):
        """QGraphicsView.CacheMode QGraphicsView.cacheMode(None self)"""
        return QGraphicsView.CacheMode()
    def setDragMode(self, _mode):
        """None QGraphicsView.setDragMode(None self, QGraphicsView.DragMode _mode)"""
        return None
    def dragMode(self):
        """QGraphicsView.DragMode QGraphicsView.dragMode(None self)"""
        return QGraphicsView.DragMode()
    def setResizeAnchor(self, _anchor):
        """None QGraphicsView.setResizeAnchor(None self, QGraphicsView.ViewportAnchor _anchor)"""
        return None
    def resizeAnchor(self):
        """QGraphicsView.ViewportAnchor QGraphicsView.resizeAnchor(None self)"""
        return QGraphicsView.ViewportAnchor()
    def setTransformationAnchor(self, _anchor):
        """None QGraphicsView.setTransformationAnchor(None self, QGraphicsView.ViewportAnchor _anchor)"""
        return None
    def transformationAnchor(self):
        """QGraphicsView.ViewportAnchor QGraphicsView.transformationAnchor(None self)"""
        return QGraphicsView.ViewportAnchor()
    def setAlignment(self, _alignment):
        """None QGraphicsView.setAlignment(None self, Qt.Alignment _alignment)"""
        return None
    def alignment(self):
        """Qt.Alignment QGraphicsView.alignment(None self)"""
        return Qt.Alignment()
    def setRenderHints(self, _hints):
        """None QGraphicsView.setRenderHints(None self, QPainter.RenderHints _hints)"""
        return None
    def setRenderHint(self, _hint, _on):
        """None QGraphicsView.setRenderHint(None self, QPainter.RenderHint _hint, bool _on)"""
        return None
    def renderHints(self):
        """QPainter.RenderHints QGraphicsView.renderHints(None self)"""
        return QPainter.RenderHints()
    def sizeHint(self):
        """QSize QGraphicsView.sizeHint(None self)"""
        return QSize()


class QGridLayout(QLayout):
    """"""
    def __init__(self, _parent):
        """None QGridLayout.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self):
        """None QGridLayout.__init__(None self)"""
        return None
    def itemAtPosition(self, _row, _column):
        """QLayoutItem QGridLayout.itemAtPosition(None self, int _row, int _column)"""
        return QLayoutItem()
    def spacing(self):
        """int QGridLayout.spacing(None self)"""
        return int()
    def setSpacing(self, _spacing):
        """None QGridLayout.setSpacing(None self, int _spacing)"""
        return None
    def verticalSpacing(self):
        """int QGridLayout.verticalSpacing(None self)"""
        return int()
    def setVerticalSpacing(self, _spacing):
        """None QGridLayout.setVerticalSpacing(None self, int _spacing)"""
        return None
    def horizontalSpacing(self):
        """int QGridLayout.horizontalSpacing(None self)"""
        return int()
    def setHorizontalSpacing(self, _spacing):
        """None QGridLayout.setHorizontalSpacing(None self, int _spacing)"""
        return None
    def getItemPosition(self, _idx, _row, _column, _rowSpan, _columnSpan):
        """None QGridLayout.getItemPosition(None self, int _idx, int _row, int _column, int _rowSpan, int _columnSpan)"""
        return None
    def setDefaultPositioning(self, _n, _orient):
        """None QGridLayout.setDefaultPositioning(None self, int _n, Qt.Orientation _orient)"""
        return None
    def addItem(self, _item, _row, _column, _rowSpan, _columnSpan, _alignment):
        """None QGridLayout.addItem(None self, QLayoutItem _item, int _row, int _column, int _rowSpan, int _columnSpan, Qt.Alignment _alignment)"""
        return None
    def addItem(self):
        """QLayoutItem QGridLayout.addItem(None self)"""
        return QLayoutItem()
    def setGeometry(self):
        """QRect QGridLayout.setGeometry(None self)"""
        return QRect()
    def count(self):
        """int QGridLayout.count(None self)"""
        return int()
    def takeAt(self):
        """int QGridLayout.takeAt(None self)"""
        return int()
    def itemAt(self):
        """int QGridLayout.itemAt(None self)"""
        return int()
    def originCorner(self):
        """Qt.Corner QGridLayout.originCorner(None self)"""
        return Qt.Corner()
    def setOriginCorner(self):
        """Qt.Corner QGridLayout.setOriginCorner(None self)"""
        return Qt.Corner()
    def addLayout(self, _row, _column, _alignment):
        """QLayout QGridLayout.addLayout(None self, int _row, int _column, Qt.Alignment _alignment)"""
        return QLayout()
    def addLayout(self, _row, _column, _rowSpan, _columnSpan, _alignment):
        """QLayout QGridLayout.addLayout(None self, int _row, int _column, int _rowSpan, int _columnSpan, Qt.Alignment _alignment)"""
        return QLayout()
    def addWidget(self, _w):
        """None QGridLayout.addWidget(None self, QWidget _w)"""
        return None
    def addWidget(self, _row, _column, _alignment):
        """QWidget QGridLayout.addWidget(None self, int _row, int _column, Qt.Alignment _alignment)"""
        return QWidget()
    def addWidget(self, _row, _column, _rowSpan, _columnSpan, _alignment):
        """QWidget QGridLayout.addWidget(None self, int _row, int _column, int _rowSpan, int _columnSpan, Qt.Alignment _alignment)"""
        return QWidget()
    def invalidate(self):
        """None QGridLayout.invalidate(None self)"""
        return None
    def expandingDirections(self):
        """Qt.Orientations QGridLayout.expandingDirections(None self)"""
        return Qt.Orientations()
    def minimumHeightForWidth(self):
        """int QGridLayout.minimumHeightForWidth(None self)"""
        return int()
    def heightForWidth(self):
        """int QGridLayout.heightForWidth(None self)"""
        return int()
    def hasHeightForWidth(self):
        """bool QGridLayout.hasHeightForWidth(None self)"""
        return bool()
    def cellRect(self, _row, _column):
        """QRect QGridLayout.cellRect(None self, int _row, int _column)"""
        return QRect()
    def rowCount(self):
        """int QGridLayout.rowCount(None self)"""
        return int()
    def columnCount(self):
        """int QGridLayout.columnCount(None self)"""
        return int()
    def columnMinimumWidth(self, _column):
        """int QGridLayout.columnMinimumWidth(None self, int _column)"""
        return int()
    def rowMinimumHeight(self, _row):
        """int QGridLayout.rowMinimumHeight(None self, int _row)"""
        return int()
    def setColumnMinimumWidth(self, _column, _minSize):
        """None QGridLayout.setColumnMinimumWidth(None self, int _column, int _minSize)"""
        return None
    def setRowMinimumHeight(self, _row, _minSize):
        """None QGridLayout.setRowMinimumHeight(None self, int _row, int _minSize)"""
        return None
    def columnStretch(self, _column):
        """int QGridLayout.columnStretch(None self, int _column)"""
        return int()
    def rowStretch(self, _row):
        """int QGridLayout.rowStretch(None self, int _row)"""
        return int()
    def setColumnStretch(self, _column, _stretch):
        """None QGridLayout.setColumnStretch(None self, int _column, int _stretch)"""
        return None
    def setRowStretch(self, _row, _stretch):
        """None QGridLayout.setRowStretch(None self, int _row, int _stretch)"""
        return None
    def maximumSize(self):
        """QSize QGridLayout.maximumSize(None self)"""
        return QSize()
    def minimumSize(self):
        """QSize QGridLayout.minimumSize(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QGridLayout.sizeHint(None self)"""
        return QSize()


class QGroupBox(QWidget):
    """"""
    def __init__(self, _parent):
        """None QGroupBox.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _title, _parent):
        """None QGroupBox.__init__(None self, QString _title, QWidget _parent)"""
        return None
    def mouseReleaseEvent(self, _event):
        """None QGroupBox.mouseReleaseEvent(None self, QMouseEvent _event)"""
        return None
    def mouseMoveEvent(self, _event):
        """None QGroupBox.mouseMoveEvent(None self, QMouseEvent _event)"""
        return None
    def mousePressEvent(self, _event):
        """None QGroupBox.mousePressEvent(None self, QMouseEvent _event)"""
        return None
    def changeEvent(self):
        """QEvent QGroupBox.changeEvent(None self)"""
        return QEvent()
    def focusInEvent(self):
        """QFocusEvent QGroupBox.focusInEvent(None self)"""
        return QFocusEvent()
    def paintEvent(self):
        """QPaintEvent QGroupBox.paintEvent(None self)"""
        return QPaintEvent()
    def resizeEvent(self):
        """QResizeEvent QGroupBox.resizeEvent(None self)"""
        return QResizeEvent()
    def childEvent(self):
        """QChildEvent QGroupBox.childEvent(None self)"""
        return QChildEvent()
    def event(self):
        """QEvent QGroupBox.event(None self)"""
        return QEvent()
    def initStyleOption(self, _option):
        """None QGroupBox.initStyleOption(None self, QStyleOptionGroupBox _option)"""
        return None
    def setChecked(self, _b):
        """None QGroupBox.setChecked(None self, bool _b)"""
        return None
    def isChecked(self):
        """bool QGroupBox.isChecked(None self)"""
        return bool()
    def setCheckable(self, _b):
        """None QGroupBox.setCheckable(None self, bool _b)"""
        return None
    def isCheckable(self):
        """bool QGroupBox.isCheckable(None self)"""
        return bool()
    def setFlat(self, _b):
        """None QGroupBox.setFlat(None self, bool _b)"""
        return None
    def isFlat(self):
        """bool QGroupBox.isFlat(None self)"""
        return bool()
    def minimumSizeHint(self):
        """QSize QGroupBox.minimumSizeHint(None self)"""
        return QSize()
    def setAlignment(self):
        """int QGroupBox.setAlignment(None self)"""
        return int()
    def alignment(self):
        """Qt.Alignment QGroupBox.alignment(None self)"""
        return Qt.Alignment()
    def setTitle(self):
        """QString QGroupBox.setTitle(None self)"""
        return QString()
    def title(self):
        """QString QGroupBox.title(None self)"""
        return QString()


class QHeaderView(QAbstractItemView):
    """"""
    Interactive = int() # QHeaderView.ResizeMode enum
    Fixed = int() # QHeaderView.ResizeMode enum
    Stretch = int() # QHeaderView.ResizeMode enum
    ResizeToContents = int() # QHeaderView.ResizeMode enum
    Custom = int() # QHeaderView.ResizeMode enum

    def __init__(self, _orientation, _parent):
        """None QHeaderView.__init__(None self, Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def initStyleOption(self, _option):
        """None QHeaderView.initStyleOption(None self, QStyleOptionHeader _option)"""
        return None
    def setOffsetToLastSection(self):
        """None QHeaderView.setOffsetToLastSection(None self)"""
        return None
    def reset(self):
        """None QHeaderView.reset(None self)"""
        return None
    def restoreState(self, _state):
        """bool QHeaderView.restoreState(None self, QByteArray _state)"""
        return bool()
    def saveState(self):
        """QByteArray QHeaderView.saveState(None self)"""
        return QByteArray()
    def setMinimumSectionSize(self, _size):
        """None QHeaderView.setMinimumSectionSize(None self, int _size)"""
        return None
    def minimumSectionSize(self):
        """int QHeaderView.minimumSectionSize(None self)"""
        return int()
    def setCascadingSectionResizes(self, _enable):
        """None QHeaderView.setCascadingSectionResizes(None self, bool _enable)"""
        return None
    def cascadingSectionResizes(self):
        """bool QHeaderView.cascadingSectionResizes(None self)"""
        return bool()
    def swapSections(self, _first, _second):
        """None QHeaderView.swapSections(None self, int _first, int _second)"""
        return None
    def sectionsHidden(self):
        """bool QHeaderView.sectionsHidden(None self)"""
        return bool()
    def setDefaultAlignment(self, _alignment):
        """None QHeaderView.setDefaultAlignment(None self, Qt.Alignment _alignment)"""
        return None
    def defaultAlignment(self):
        """Qt.Alignment QHeaderView.defaultAlignment(None self)"""
        return Qt.Alignment()
    def setDefaultSectionSize(self, _size):
        """None QHeaderView.setDefaultSectionSize(None self, int _size)"""
        return None
    def defaultSectionSize(self):
        """int QHeaderView.defaultSectionSize(None self)"""
        return int()
    def hiddenSectionCount(self):
        """int QHeaderView.hiddenSectionCount(None self)"""
        return int()
    def showSection(self, _alogicalIndex):
        """None QHeaderView.showSection(None self, int _alogicalIndex)"""
        return None
    def hideSection(self, _alogicalIndex):
        """None QHeaderView.hideSection(None self, int _alogicalIndex)"""
        return None
    def visualRegionForSelection(self, _selection):
        """QRegion QHeaderView.visualRegionForSelection(None self, QItemSelection _selection)"""
        return QRegion()
    def setSelection(self):
        """QItemSelectionModel.SelectionFlags QHeaderView.setSelection(None self)"""
        return QItemSelectionModel.SelectionFlags()
    def moveCursor(self):
        """Qt.KeyboardModifiers QHeaderView.moveCursor(None self)"""
        return Qt.KeyboardModifiers()
    def isIndexHidden(self, _index):
        """bool QHeaderView.isIndexHidden(None self, QModelIndex _index)"""
        return bool()
    def indexAt(self, _p):
        """QModelIndex QHeaderView.indexAt(None self, QPoint _p)"""
        return QModelIndex()
    def scrollTo(self, _index, _hint):
        """None QHeaderView.scrollTo(None self, QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def visualRect(self, _index):
        """QRect QHeaderView.visualRect(None self, QModelIndex _index)"""
        return QRect()
    def rowsInserted(self, _parent, _start, _end):
        """None QHeaderView.rowsInserted(None self, QModelIndex _parent, int _start, int _end)"""
        return None
    def dataChanged(self, _topLeft, _bottomRight):
        """None QHeaderView.dataChanged(None self, QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None
    def scrollContentsBy(self, _dx, _dy):
        """None QHeaderView.scrollContentsBy(None self, int _dx, int _dy)"""
        return None
    def updateGeometries(self):
        """None QHeaderView.updateGeometries(None self)"""
        return None
    def verticalOffset(self):
        """int QHeaderView.verticalOffset(None self)"""
        return int()
    def horizontalOffset(self):
        """int QHeaderView.horizontalOffset(None self)"""
        return int()
    def sectionSizeFromContents(self, _logicalIndex):
        """QSize QHeaderView.sectionSizeFromContents(None self, int _logicalIndex)"""
        return QSize()
    def paintSection(self, _painter, _rect, _logicalIndex):
        """None QHeaderView.paintSection(None self, QPainter _painter, QRect _rect, int _logicalIndex)"""
        return None
    def mouseDoubleClickEvent(self, _e):
        """None QHeaderView.mouseDoubleClickEvent(None self, QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(self, _e):
        """None QHeaderView.mouseReleaseEvent(None self, QMouseEvent _e)"""
        return None
    def mouseMoveEvent(self, _e):
        """None QHeaderView.mouseMoveEvent(None self, QMouseEvent _e)"""
        return None
    def mousePressEvent(self, _e):
        """None QHeaderView.mousePressEvent(None self, QMouseEvent _e)"""
        return None
    def paintEvent(self, _e):
        """None QHeaderView.paintEvent(None self, QPaintEvent _e)"""
        return None
    def viewportEvent(self, _e):
        """bool QHeaderView.viewportEvent(None self, QEvent _e)"""
        return bool()
    def event(self, _e):
        """bool QHeaderView.event(None self, QEvent _e)"""
        return bool()
    def currentChanged(self, _current, _old):
        """None QHeaderView.currentChanged(None self, QModelIndex _current, QModelIndex _old)"""
        return None
    def initializeSections(self):
        """None QHeaderView.initializeSections(None self)"""
        return None
    def initializeSections(self, _start, _end):
        """None QHeaderView.initializeSections(None self, int _start, int _end)"""
        return None
    def initialize(self):
        """None QHeaderView.initialize(None self)"""
        return None
    def sectionsAboutToBeRemoved(self, _parent, _logicalFirst, _logicalLast):
        """None QHeaderView.sectionsAboutToBeRemoved(None self, QModelIndex _parent, int _logicalFirst, int _logicalLast)"""
        return None
    def sectionsInserted(self, _parent, _logicalFirst, _logicalLast):
        """None QHeaderView.sectionsInserted(None self, QModelIndex _parent, int _logicalFirst, int _logicalLast)"""
        return None
    def resizeSections(self):
        """None QHeaderView.resizeSections(None self)"""
        return None
    def resizeSections(self, _mode):
        """None QHeaderView.resizeSections(None self, QHeaderView.ResizeMode _mode)"""
        return None
    def updateSection(self, _logicalIndex):
        """None QHeaderView.updateSection(None self, int _logicalIndex)"""
        return None
    def setOffsetToSectionPosition(self, _visualIndex):
        """None QHeaderView.setOffsetToSectionPosition(None self, int _visualIndex)"""
        return None
    def headerDataChanged(self, _orientation, _logicalFirst, _logicalLast):
        """None QHeaderView.headerDataChanged(None self, Qt.Orientation _orientation, int _logicalFirst, int _logicalLast)"""
        return None
    def setOffset(self, _offset):
        """None QHeaderView.setOffset(None self, int _offset)"""
        return None
    def sectionsMoved(self):
        """bool QHeaderView.sectionsMoved(None self)"""
        return bool()
    def doItemsLayout(self):
        """None QHeaderView.doItemsLayout(None self)"""
        return None
    def setStretchLastSection(self, _stretch):
        """None QHeaderView.setStretchLastSection(None self, bool _stretch)"""
        return None
    def stretchLastSection(self):
        """bool QHeaderView.stretchLastSection(None self)"""
        return bool()
    def sortIndicatorOrder(self):
        """Qt.SortOrder QHeaderView.sortIndicatorOrder(None self)"""
        return Qt.SortOrder()
    def sortIndicatorSection(self):
        """int QHeaderView.sortIndicatorSection(None self)"""
        return int()
    def setSortIndicator(self, _logicalIndex, _order):
        """None QHeaderView.setSortIndicator(None self, int _logicalIndex, Qt.SortOrder _order)"""
        return None
    def isSortIndicatorShown(self):
        """bool QHeaderView.isSortIndicatorShown(None self)"""
        return bool()
    def setSortIndicatorShown(self, _show):
        """None QHeaderView.setSortIndicatorShown(None self, bool _show)"""
        return None
    def stretchSectionCount(self):
        """int QHeaderView.stretchSectionCount(None self)"""
        return int()
    def resizeMode(self, _logicalIndex):
        """QHeaderView.ResizeMode QHeaderView.resizeMode(None self, int _logicalIndex)"""
        return QHeaderView.ResizeMode()
    def setResizeMode(self, _mode):
        """None QHeaderView.setResizeMode(None self, QHeaderView.ResizeMode _mode)"""
        return None
    def setResizeMode(self, _logicalIndex, _mode):
        """None QHeaderView.setResizeMode(None self, int _logicalIndex, QHeaderView.ResizeMode _mode)"""
        return None
    def highlightSections(self):
        """bool QHeaderView.highlightSections(None self)"""
        return bool()
    def setHighlightSections(self, _highlight):
        """None QHeaderView.setHighlightSections(None self, bool _highlight)"""
        return None
    def isClickable(self):
        """bool QHeaderView.isClickable(None self)"""
        return bool()
    def setClickable(self, _clickable):
        """None QHeaderView.setClickable(None self, bool _clickable)"""
        return None
    def isMovable(self):
        """bool QHeaderView.isMovable(None self)"""
        return bool()
    def setMovable(self, _movable):
        """None QHeaderView.setMovable(None self, bool _movable)"""
        return None
    def logicalIndex(self, _visualIndex):
        """int QHeaderView.logicalIndex(None self, int _visualIndex)"""
        return int()
    def visualIndex(self, _logicalIndex):
        """int QHeaderView.visualIndex(None self, int _logicalIndex)"""
        return int()
    def __len__(self):
        """ QHeaderView.__len__(None self)"""
        return ()
    def count(self):
        """int QHeaderView.count(None self)"""
        return int()
    def setSectionHidden(self, _logicalIndex, _hide):
        """None QHeaderView.setSectionHidden(None self, int _logicalIndex, bool _hide)"""
        return None
    def isSectionHidden(self, _logicalIndex):
        """bool QHeaderView.isSectionHidden(None self, int _logicalIndex)"""
        return bool()
    def resizeSection(self, _logicalIndex, _size):
        """None QHeaderView.resizeSection(None self, int _logicalIndex, int _size)"""
        return None
    def moveSection(self, _from, _to):
        """None QHeaderView.moveSection(None self, int _from, int _to)"""
        return None
    def sectionViewportPosition(self, _logicalIndex):
        """int QHeaderView.sectionViewportPosition(None self, int _logicalIndex)"""
        return int()
    def sectionPosition(self, _logicalIndex):
        """int QHeaderView.sectionPosition(None self, int _logicalIndex)"""
        return int()
    def sectionSize(self, _logicalIndex):
        """int QHeaderView.sectionSize(None self, int _logicalIndex)"""
        return int()
    def logicalIndexAt(self, _position):
        """int QHeaderView.logicalIndexAt(None self, int _position)"""
        return int()
    def logicalIndexAt(self, _ax, _ay):
        """int QHeaderView.logicalIndexAt(None self, int _ax, int _ay)"""
        return int()
    def logicalIndexAt(self, _apos):
        """int QHeaderView.logicalIndexAt(None self, QPoint _apos)"""
        return int()
    def visualIndexAt(self, _position):
        """int QHeaderView.visualIndexAt(None self, int _position)"""
        return int()
    def sectionSizeHint(self, _logicalIndex):
        """int QHeaderView.sectionSizeHint(None self, int _logicalIndex)"""
        return int()
    def sizeHint(self):
        """QSize QHeaderView.sizeHint(None self)"""
        return QSize()
    def length(self):
        """int QHeaderView.length(None self)"""
        return int()
    def offset(self):
        """int QHeaderView.offset(None self)"""
        return int()
    def orientation(self):
        """Qt.Orientation QHeaderView.orientation(None self)"""
        return Qt.Orientation()
    def setModel(self, _model):
        """None QHeaderView.setModel(None self, QAbstractItemModel _model)"""
        return None


class QIcon():
    """"""
    On = int() # QIcon.State enum
    Off = int() # QIcon.State enum

    Normal = int() # QIcon.Mode enum
    Disabled = int() # QIcon.Mode enum
    Active = int() # QIcon.Mode enum
    Selected = int() # QIcon.Mode enum

    def __init__(self):
        """None QIcon.__init__(None self)"""
        return None
    def __init__(self, _pixmap):
        """None QIcon.__init__(None self, QPixmap _pixmap)"""
        return None
    def __init__(self, _other):
        """None QIcon.__init__(None self, QIcon _other)"""
        return None
    def __init__(self, _fileName):
        """None QIcon.__init__(None self, QString _fileName)"""
        return None
    def __init__(self, _engine):
        """None QIcon.__init__(None self, QIconEngine _engine)"""
        return None
    def __init__(self, _engine):
        """None QIcon.__init__(None self, QIconEngineV2 _engine)"""
        return None
    def __init__(self, _variant):
        """None QIcon.__init__(None self, QVariant _variant)"""
        return None
    def name(self):
        """QString QIcon.name(None self)"""
        return QString()
    def setThemeName(self, _path):
        """None QIcon.setThemeName(None self, QString _path)"""
        return None
    def themeName(self):
        """QString QIcon.themeName(None self)"""
        return QString()
    def setThemeSearchPaths(self, _searchpath):
        """None QIcon.setThemeSearchPaths(None self, QStringList _searchpath)"""
        return None
    def themeSearchPaths(self):
        """QStringList QIcon.themeSearchPaths(None self)"""
        return QStringList()
    def hasThemeIcon(self, _name):
        """bool QIcon.hasThemeIcon(None self, QString _name)"""
        return bool()
    def fromTheme(self, _name, _fallback):
        """QIcon QIcon.fromTheme(None self, QString _name, QIcon _fallback)"""
        return QIcon()
    def cacheKey(self):
        """int QIcon.cacheKey(None self)"""
        return int()
    def addFile(self, _fileName, _size, _mode, _state):
        """None QIcon.addFile(None self, QString _fileName, QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def addPixmap(self, _pixmap, _mode, _state):
        """None QIcon.addPixmap(None self, QPixmap _pixmap, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def serialNumber(self):
        """int QIcon.serialNumber(None self)"""
        return int()
    def isDetached(self):
        """bool QIcon.isDetached(None self)"""
        return bool()
    def isNull(self):
        """bool QIcon.isNull(None self)"""
        return bool()
    def paint(self, _painter, _rect, _alignment, _mode, _state):
        """None QIcon.paint(None self, QPainter _painter, QRect _rect, Qt.Alignment _alignment, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def paint(self, _painter, _x, _y, _w, _h, _alignment, _mode, _state):
        """None QIcon.paint(None self, QPainter _painter, int _x, int _y, int _w, int _h, Qt.Alignment _alignment, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def availableSizes(self, _mode, _state):
        """list-of-QSize QIcon.availableSizes(None self, QIcon.Mode _mode, QIcon.State _state)"""
        return [QSize()]
    def actualSize(self, _size, _mode, _state):
        """QSize QIcon.actualSize(None self, QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return QSize()
    def pixmap(self, _size, _mode, _state):
        """QPixmap QIcon.pixmap(None self, QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return QPixmap()
    def pixmap(self, _w, _h, _mode, _state):
        """QPixmap QIcon.pixmap(None self, int _w, int _h, QIcon.Mode _mode, QIcon.State _state)"""
        return QPixmap()
    def pixmap(self, _extent, _mode, _state):
        """QPixmap QIcon.pixmap(None self, int _extent, QIcon.Mode _mode, QIcon.State _state)"""
        return QPixmap()


class QIconEngine():
    """"""
    def __init__(self):
        """None QIconEngine.__init__(None self)"""
        return None
    def __init__(self):
        """QIconEngine QIconEngine.__init__(None self)"""
        return QIconEngine()
    def addFile(self, _fileName, _size, _mode, _state):
        """None QIconEngine.addFile(None self, QString _fileName, QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def addPixmap(self, _pixmap, _mode, _state):
        """None QIconEngine.addPixmap(None self, QPixmap _pixmap, QIcon.Mode _mode, QIcon.State _state)"""
        return None
    def pixmap(self, _size, _mode, _state):
        """QPixmap QIconEngine.pixmap(None self, QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return QPixmap()
    def actualSize(self, _size, _mode, _state):
        """QSize QIconEngine.actualSize(None self, QSize _size, QIcon.Mode _mode, QIcon.State _state)"""
        return QSize()
    def paint(self, _painter, _rect, _mode, _state):
        """abstract None QIconEngine.paint(None self, QPainter _painter, QRect _rect, QIcon.Mode _mode, QIcon.State _state)"""
        return None


class QIconEngineV2(QIconEngine):
    """"""
    AvailableSizesHook = int() # QIconEngineV2.IconEngineHook enum
    IconNameHook = int() # QIconEngineV2.IconEngineHook enum

    def __init__(self):
        """None QIconEngineV2.__init__(None self)"""
        return None
    def __init__(self):
        """QIconEngineV2 QIconEngineV2.__init__(None self)"""
        return QIconEngineV2()
    def iconName(self):
        """QString QIconEngineV2.iconName(None self)"""
        return QString()
    def availableSizes(self, _mode, _state):
        """list-of-QSize QIconEngineV2.availableSizes(None self, QIcon.Mode _mode, QIcon.State _state)"""
        return [QSize()]
    def write(self, _out):
        """bool QIconEngineV2.write(None self, QDataStream _out)"""
        return bool()
    def read(self, _in):
        """bool QIconEngineV2.read(None self, QDataStream _in)"""
        return bool()
    def clone(self):
        """QIconEngineV2 QIconEngineV2.clone(None self)"""
        return QIconEngineV2()
    def key(self):
        """QString QIconEngineV2.key(None self)"""
        return QString()


class QImage(QPaintDevice):
    """"""
    Format_Invalid = int() # QImage.Format enum
    Format_Mono = int() # QImage.Format enum
    Format_MonoLSB = int() # QImage.Format enum
    Format_Indexed8 = int() # QImage.Format enum
    Format_RGB32 = int() # QImage.Format enum
    Format_ARGB32 = int() # QImage.Format enum
    Format_ARGB32_Premultiplied = int() # QImage.Format enum
    Format_RGB16 = int() # QImage.Format enum
    Format_ARGB8565_Premultiplied = int() # QImage.Format enum
    Format_RGB666 = int() # QImage.Format enum
    Format_ARGB6666_Premultiplied = int() # QImage.Format enum
    Format_RGB555 = int() # QImage.Format enum
    Format_ARGB8555_Premultiplied = int() # QImage.Format enum
    Format_RGB888 = int() # QImage.Format enum
    Format_RGB444 = int() # QImage.Format enum
    Format_ARGB4444_Premultiplied = int() # QImage.Format enum

    InvertRgb = int() # QImage.InvertMode enum
    InvertRgba = int() # QImage.InvertMode enum

    def __init__(self):
        """None QImage.__init__(None self)"""
        return None
    def __init__(self, _size, _format):
        """None QImage.__init__(None self, QSize _size, QImage.Format _format)"""
        return None
    def __init__(self, _width, _height, _format):
        """None QImage.__init__(None self, int _width, int _height, QImage.Format _format)"""
        return None
    def __init__(self, _data, _width, _height, _format):
        """None QImage.__init__(None self, str _data, int _width, int _height, QImage.Format _format)"""
        return None
    def __init__(self, _data, _width, _height, _format):
        """None QImage.__init__(None self, sip.voidptr _data, int _width, int _height, QImage.Format _format)"""
        return None
    def __init__(self, _data, _width, _height, _bytesPerLine, _format):
        """None QImage.__init__(None self, str _data, int _width, int _height, int _bytesPerLine, QImage.Format _format)"""
        return None
    def __init__(self, _data, _width, _height, _bytesPerLine, _format):
        """None QImage.__init__(None self, sip.voidptr _data, int _width, int _height, int _bytesPerLine, QImage.Format _format)"""
        return None
    def __init__(self, _xpm):
        """None QImage.__init__(None self, list-of-str _xpm)"""
        return None
    def __init__(self, _fileName, _format):
        """None QImage.__init__(None self, QString _fileName, str _format)"""
        return None
    def __init__(self):
        """QImage QImage.__init__(None self)"""
        return QImage()
    def __init__(self, _variant):
        """None QImage.__init__(None self, QVariant _variant)"""
        return None
    def bitPlaneCount(self):
        """int QImage.bitPlaneCount(None self)"""
        return int()
    def byteCount(self):
        """int QImage.byteCount(None self)"""
        return int()
    def setColorCount(self):
        """int QImage.setColorCount(None self)"""
        return int()
    def colorCount(self):
        """int QImage.colorCount(None self)"""
        return int()
    def cacheKey(self):
        """int QImage.cacheKey(None self)"""
        return int()
    def createMaskFromColor(self, _color, _mode):
        """QImage QImage.createMaskFromColor(None self, int _color, Qt.MaskMode _mode)"""
        return QImage()
    def metric(self, _metric):
        """int QImage.metric(None self, QPaintDevice.PaintDeviceMetric _metric)"""
        return int()
    def setText(self, _key, _value):
        """None QImage.setText(None self, QString _key, QString _value)"""
        return None
    def text(self, _key):
        """QString QImage.text(None self, QString _key)"""
        return QString()
    def textKeys(self):
        """QStringList QImage.textKeys(None self)"""
        return QStringList()
    def setOffset(self):
        """QPoint QImage.setOffset(None self)"""
        return QPoint()
    def offset(self):
        """QPoint QImage.offset(None self)"""
        return QPoint()
    def setDotsPerMeterY(self):
        """int QImage.setDotsPerMeterY(None self)"""
        return int()
    def setDotsPerMeterX(self):
        """int QImage.setDotsPerMeterX(None self)"""
        return int()
    def dotsPerMeterY(self):
        """int QImage.dotsPerMeterY(None self)"""
        return int()
    def dotsPerMeterX(self):
        """int QImage.dotsPerMeterX(None self)"""
        return int()
    def paintEngine(self):
        """QPaintEngine QImage.paintEngine(None self)"""
        return QPaintEngine()
    def serialNumber(self):
        """int QImage.serialNumber(None self)"""
        return int()
    def fromData(self, _data, _format):
        """QImage QImage.fromData(None self, str _data, str _format)"""
        return QImage()
    def fromData(self, _data, _format):
        """QImage QImage.fromData(None self, QByteArray _data, str _format)"""
        return QImage()
    def save(self, _fileName, _format, _quality):
        """bool QImage.save(None self, QString _fileName, str _format, int _quality)"""
        return bool()
    def save(self, _device, _format, _quality):
        """bool QImage.save(None self, QIODevice _device, str _format, int _quality)"""
        return bool()
    def loadFromData(self, _data, _format):
        """bool QImage.loadFromData(None self, str _data, str _format)"""
        return bool()
    def loadFromData(self, _data, _format):
        """bool QImage.loadFromData(None self, QByteArray _data, str _format)"""
        return bool()
    def load(self, _device, _format):
        """bool QImage.load(None self, QIODevice _device, str _format)"""
        return bool()
    def load(self, _fileName, _format):
        """bool QImage.load(None self, QString _fileName, str _format)"""
        return bool()
    def invertPixels(self, _mode):
        """None QImage.invertPixels(None self, QImage.InvertMode _mode)"""
        return None
    def rgbSwapped(self):
        """QImage QImage.rgbSwapped(None self)"""
        return QImage()
    def mirrored(self, _horizontal, _vertical):
        """QImage QImage.mirrored(None self, bool _horizontal, bool _vertical)"""
        return QImage()
    def trueMatrix(self, _w, _h):
        """QMatrix QImage.trueMatrix(None self, int _w, int _h)"""
        return QMatrix()
    def trueMatrix(self, _w, _h):
        """QTransform QImage.trueMatrix(None self, int _w, int _h)"""
        return QTransform()
    def transformed(self, _matrix, _mode):
        """QImage QImage.transformed(None self, QMatrix _matrix, Qt.TransformationMode _mode)"""
        return QImage()
    def transformed(self, _matrix, _mode):
        """QImage QImage.transformed(None self, QTransform _matrix, Qt.TransformationMode _mode)"""
        return QImage()
    def scaledToHeight(self, _height, _mode):
        """QImage QImage.scaledToHeight(None self, int _height, Qt.TransformationMode _mode)"""
        return QImage()
    def scaledToWidth(self, _width, _mode):
        """QImage QImage.scaledToWidth(None self, int _width, Qt.TransformationMode _mode)"""
        return QImage()
    def scaled(self, _width, _height, _aspectRatioMode, _transformMode):
        """QImage QImage.scaled(None self, int _width, int _height, Qt.AspectRatioMode _aspectRatioMode, Qt.TransformationMode _transformMode)"""
        return QImage()
    def scaled(self, _size, _aspectRatioMode, _transformMode):
        """QImage QImage.scaled(None self, QSize _size, Qt.AspectRatioMode _aspectRatioMode, Qt.TransformationMode _transformMode)"""
        return QImage()
    def createHeuristicMask(self, _clipTight):
        """QImage QImage.createHeuristicMask(None self, bool _clipTight)"""
        return QImage()
    def createAlphaMask(self, _flags):
        """QImage QImage.createAlphaMask(None self, Qt.ImageConversionFlags _flags)"""
        return QImage()
    def alphaChannel(self):
        """QImage QImage.alphaChannel(None self)"""
        return QImage()
    def setAlphaChannel(self, _alphaChannel):
        """None QImage.setAlphaChannel(None self, QImage _alphaChannel)"""
        return None
    def hasAlphaChannel(self):
        """bool QImage.hasAlphaChannel(None self)"""
        return bool()
    def fill(self, _pixel):
        """None QImage.fill(None self, int _pixel)"""
        return None
    def setColorTable(self, _colors):
        """None QImage.setColorTable(None self, list-of-int _colors)"""
        return None
    def colorTable(self):
        """list-of-int QImage.colorTable(None self)"""
        return [int()]
    def setPixel(self, _pt, _index_or_rgb):
        """None QImage.setPixel(None self, QPoint _pt, int _index_or_rgb)"""
        return None
    def setPixel(self, _x, _y, _index_or_rgb):
        """None QImage.setPixel(None self, int _x, int _y, int _index_or_rgb)"""
        return None
    def pixel(self, _pt):
        """int QImage.pixel(None self, QPoint _pt)"""
        return int()
    def pixel(self, _x, _y):
        """int QImage.pixel(None self, int _x, int _y)"""
        return int()
    def pixelIndex(self, _pt):
        """int QImage.pixelIndex(None self, QPoint _pt)"""
        return int()
    def pixelIndex(self, _x, _y):
        """int QImage.pixelIndex(None self, int _x, int _y)"""
        return int()
    def valid(self, _pt):
        """bool QImage.valid(None self, QPoint _pt)"""
        return bool()
    def valid(self, _x, _y):
        """bool QImage.valid(None self, int _x, int _y)"""
        return bool()
    def bytesPerLine(self):
        """int QImage.bytesPerLine(None self)"""
        return int()
    def scanLine(self):
        """int QImage.scanLine(None self)"""
        return int()
    def numBytes(self):
        """int QImage.numBytes(None self)"""
        return int()
    def bits(self):
        """sip.voidptr QImage.bits(None self)"""
        return sip.voidptr()
    def isGrayscale(self):
        """bool QImage.isGrayscale(None self)"""
        return bool()
    def allGray(self):
        """bool QImage.allGray(None self)"""
        return bool()
    def setNumColors(self):
        """int QImage.setNumColors(None self)"""
        return int()
    def setColor(self, _i, _c):
        """None QImage.setColor(None self, int _i, int _c)"""
        return None
    def color(self, _i):
        """int QImage.color(None self, int _i)"""
        return int()
    def numColors(self):
        """int QImage.numColors(None self)"""
        return int()
    def depth(self):
        """int QImage.depth(None self)"""
        return int()
    def rect(self):
        """QRect QImage.rect(None self)"""
        return QRect()
    def size(self):
        """QSize QImage.size(None self)"""
        return QSize()
    def height(self):
        """int QImage.height(None self)"""
        return int()
    def width(self):
        """int QImage.width(None self)"""
        return int()
    def convertToFormat(self, _format, _flags):
        """QImage QImage.convertToFormat(None self, QImage.Format _format, Qt.ImageConversionFlags _flags)"""
        return QImage()
    def convertToFormat(self, _format, _colorTable, _flags):
        """QImage QImage.convertToFormat(None self, QImage.Format _format, list-of-int _colorTable, Qt.ImageConversionFlags _flags)"""
        return QImage()
    def format(self):
        """QImage.Format QImage.format(None self)"""
        return QImage.Format()
    def copy(self, _rect):
        """QImage QImage.copy(None self, QRect _rect)"""
        return QImage()
    def copy(self, _x, _y, _w, _h):
        """QImage QImage.copy(None self, int _x, int _y, int _w, int _h)"""
        return QImage()
    def isDetached(self):
        """bool QImage.isDetached(None self)"""
        return bool()
    def detach(self):
        """None QImage.detach(None self)"""
        return None
    def __ne__(self):
        """QImage QImage.__ne__(None self)"""
        return QImage()
    def __eq__(self):
        """QImage QImage.__eq__(None self)"""
        return QImage()
    def devType(self):
        """int QImage.devType(None self)"""
        return int()
    def isNull(self):
        """bool QImage.isNull(None self)"""
        return bool()


class QImageIOHandler():
    """"""
    Size = int() # QImageIOHandler.ImageOption enum
    ClipRect = int() # QImageIOHandler.ImageOption enum
    Description = int() # QImageIOHandler.ImageOption enum
    ScaledClipRect = int() # QImageIOHandler.ImageOption enum
    ScaledSize = int() # QImageIOHandler.ImageOption enum
    CompressionRatio = int() # QImageIOHandler.ImageOption enum
    Gamma = int() # QImageIOHandler.ImageOption enum
    Quality = int() # QImageIOHandler.ImageOption enum
    Name = int() # QImageIOHandler.ImageOption enum
    SubType = int() # QImageIOHandler.ImageOption enum
    IncrementalReading = int() # QImageIOHandler.ImageOption enum
    Endianness = int() # QImageIOHandler.ImageOption enum
    Animation = int() # QImageIOHandler.ImageOption enum
    BackgroundColor = int() # QImageIOHandler.ImageOption enum

    def __init__(self):
        """None QImageIOHandler.__init__(None self)"""
        return None
    def currentImageRect(self):
        """QRect QImageIOHandler.currentImageRect(None self)"""
        return QRect()
    def currentImageNumber(self):
        """int QImageIOHandler.currentImageNumber(None self)"""
        return int()
    def nextImageDelay(self):
        """int QImageIOHandler.nextImageDelay(None self)"""
        return int()
    def imageCount(self):
        """int QImageIOHandler.imageCount(None self)"""
        return int()
    def loopCount(self):
        """int QImageIOHandler.loopCount(None self)"""
        return int()
    def jumpToImage(self, _imageNumber):
        """bool QImageIOHandler.jumpToImage(None self, int _imageNumber)"""
        return bool()
    def jumpToNextImage(self):
        """bool QImageIOHandler.jumpToNextImage(None self)"""
        return bool()
    def supportsOption(self, _option):
        """bool QImageIOHandler.supportsOption(None self, QImageIOHandler.ImageOption _option)"""
        return bool()
    def setOption(self, _option, _value):
        """None QImageIOHandler.setOption(None self, QImageIOHandler.ImageOption _option, QVariant _value)"""
        return None
    def option(self, _option):
        """QVariant QImageIOHandler.option(None self, QImageIOHandler.ImageOption _option)"""
        return QVariant()
    def write(self, _image):
        """bool QImageIOHandler.write(None self, QImage _image)"""
        return bool()
    def read(self, _image):
        """abstract bool QImageIOHandler.read(None self, QImage _image)"""
        return bool()
    def canRead(self):
        """abstract bool QImageIOHandler.canRead(None self)"""
        return bool()
    def name(self):
        """QByteArray QImageIOHandler.name(None self)"""
        return QByteArray()
    def format(self):
        """QByteArray QImageIOHandler.format(None self)"""
        return QByteArray()
    def setFormat(self, _format):
        """None QImageIOHandler.setFormat(None self, QByteArray _format)"""
        return None
    def device(self):
        """QIODevice QImageIOHandler.device(None self)"""
        return QIODevice()
    def setDevice(self, _device):
        """None QImageIOHandler.setDevice(None self, QIODevice _device)"""
        return None


class QImageReader():
    """"""
    UnknownError = int() # QImageReader.ImageReaderError enum
    FileNotFoundError = int() # QImageReader.ImageReaderError enum
    DeviceError = int() # QImageReader.ImageReaderError enum
    UnsupportedFormatError = int() # QImageReader.ImageReaderError enum
    InvalidDataError = int() # QImageReader.ImageReaderError enum

    def __init__(self):
        """None QImageReader.__init__(None self)"""
        return None
    def __init__(self, _device, _format):
        """None QImageReader.__init__(None self, QIODevice _device, QByteArray _format)"""
        return None
    def __init__(self, _fileName, _format):
        """None QImageReader.__init__(None self, QString _fileName, QByteArray _format)"""
        return None
    def decideFormatFromContent(self):
        """bool QImageReader.decideFormatFromContent(None self)"""
        return bool()
    def setDecideFormatFromContent(self, _ignored):
        """None QImageReader.setDecideFormatFromContent(None self, bool _ignored)"""
        return None
    def autoDetectImageFormat(self):
        """bool QImageReader.autoDetectImageFormat(None self)"""
        return bool()
    def setAutoDetectImageFormat(self, _enabled):
        """None QImageReader.setAutoDetectImageFormat(None self, bool _enabled)"""
        return None
    def supportsOption(self, _option):
        """bool QImageReader.supportsOption(None self, QImageIOHandler.ImageOption _option)"""
        return bool()
    def quality(self):
        """int QImageReader.quality(None self)"""
        return int()
    def setQuality(self, _quality):
        """None QImageReader.setQuality(None self, int _quality)"""
        return None
    def supportsAnimation(self):
        """bool QImageReader.supportsAnimation(None self)"""
        return bool()
    def backgroundColor(self):
        """QColor QImageReader.backgroundColor(None self)"""
        return QColor()
    def setBackgroundColor(self, _color):
        """None QImageReader.setBackgroundColor(None self, QColor _color)"""
        return None
    def text(self, _key):
        """QString QImageReader.text(None self, QString _key)"""
        return QString()
    def textKeys(self):
        """QStringList QImageReader.textKeys(None self)"""
        return QStringList()
    def supportedImageFormats(self):
        """list-of-QByteArray QImageReader.supportedImageFormats(None self)"""
        return [QByteArray()]
    def imageFormat(self, _fileName):
        """QByteArray QImageReader.imageFormat(None self, QString _fileName)"""
        return QByteArray()
    def imageFormat(self, _device):
        """QByteArray QImageReader.imageFormat(None self, QIODevice _device)"""
        return QByteArray()
    def imageFormat(self):
        """QImage.Format QImageReader.imageFormat(None self)"""
        return QImage.Format()
    def errorString(self):
        """QString QImageReader.errorString(None self)"""
        return QString()
    def error(self):
        """QImageReader.ImageReaderError QImageReader.error(None self)"""
        return QImageReader.ImageReaderError()
    def currentImageRect(self):
        """QRect QImageReader.currentImageRect(None self)"""
        return QRect()
    def currentImageNumber(self):
        """int QImageReader.currentImageNumber(None self)"""
        return int()
    def nextImageDelay(self):
        """int QImageReader.nextImageDelay(None self)"""
        return int()
    def imageCount(self):
        """int QImageReader.imageCount(None self)"""
        return int()
    def loopCount(self):
        """int QImageReader.loopCount(None self)"""
        return int()
    def jumpToImage(self, _imageNumber):
        """bool QImageReader.jumpToImage(None self, int _imageNumber)"""
        return bool()
    def jumpToNextImage(self):
        """bool QImageReader.jumpToNextImage(None self)"""
        return bool()
    def read(self):
        """QImage QImageReader.read(None self)"""
        return QImage()
    def read(self, _image):
        """bool QImageReader.read(None self, QImage _image)"""
        return bool()
    def canRead(self):
        """bool QImageReader.canRead(None self)"""
        return bool()
    def scaledClipRect(self):
        """QRect QImageReader.scaledClipRect(None self)"""
        return QRect()
    def setScaledClipRect(self, _rect):
        """None QImageReader.setScaledClipRect(None self, QRect _rect)"""
        return None
    def scaledSize(self):
        """QSize QImageReader.scaledSize(None self)"""
        return QSize()
    def setScaledSize(self, _size):
        """None QImageReader.setScaledSize(None self, QSize _size)"""
        return None
    def clipRect(self):
        """QRect QImageReader.clipRect(None self)"""
        return QRect()
    def setClipRect(self, _rect):
        """None QImageReader.setClipRect(None self, QRect _rect)"""
        return None
    def size(self):
        """QSize QImageReader.size(None self)"""
        return QSize()
    def fileName(self):
        """QString QImageReader.fileName(None self)"""
        return QString()
    def setFileName(self, _fileName):
        """None QImageReader.setFileName(None self, QString _fileName)"""
        return None
    def device(self):
        """QIODevice QImageReader.device(None self)"""
        return QIODevice()
    def setDevice(self, _device):
        """None QImageReader.setDevice(None self, QIODevice _device)"""
        return None
    def format(self):
        """QByteArray QImageReader.format(None self)"""
        return QByteArray()
    def setFormat(self, _format):
        """None QImageReader.setFormat(None self, QByteArray _format)"""
        return None


class QImageWriter():
    """"""
    UnknownError = int() # QImageWriter.ImageWriterError enum
    DeviceError = int() # QImageWriter.ImageWriterError enum
    UnsupportedFormatError = int() # QImageWriter.ImageWriterError enum

    def __init__(self):
        """None QImageWriter.__init__(None self)"""
        return None
    def __init__(self, _device, _format):
        """None QImageWriter.__init__(None self, QIODevice _device, QByteArray _format)"""
        return None
    def __init__(self, _fileName, _format):
        """None QImageWriter.__init__(None self, QString _fileName, QByteArray _format)"""
        return None
    def compression(self):
        """int QImageWriter.compression(None self)"""
        return int()
    def setCompression(self, _compression):
        """None QImageWriter.setCompression(None self, int _compression)"""
        return None
    def supportsOption(self, _option):
        """bool QImageWriter.supportsOption(None self, QImageIOHandler.ImageOption _option)"""
        return bool()
    def setText(self, _key, _text):
        """None QImageWriter.setText(None self, QString _key, QString _text)"""
        return None
    def supportedImageFormats(self):
        """list-of-QByteArray QImageWriter.supportedImageFormats(None self)"""
        return [QByteArray()]
    def errorString(self):
        """QString QImageWriter.errorString(None self)"""
        return QString()
    def error(self):
        """QImageWriter.ImageWriterError QImageWriter.error(None self)"""
        return QImageWriter.ImageWriterError()
    def write(self, _image):
        """bool QImageWriter.write(None self, QImage _image)"""
        return bool()
    def canWrite(self):
        """bool QImageWriter.canWrite(None self)"""
        return bool()
    def description(self):
        """QString QImageWriter.description(None self)"""
        return QString()
    def setDescription(self, _description):
        """None QImageWriter.setDescription(None self, QString _description)"""
        return None
    def gamma(self):
        """float QImageWriter.gamma(None self)"""
        return float()
    def setGamma(self, _gamma):
        """None QImageWriter.setGamma(None self, float _gamma)"""
        return None
    def quality(self):
        """int QImageWriter.quality(None self)"""
        return int()
    def setQuality(self, _quality):
        """None QImageWriter.setQuality(None self, int _quality)"""
        return None
    def fileName(self):
        """QString QImageWriter.fileName(None self)"""
        return QString()
    def setFileName(self, _fileName):
        """None QImageWriter.setFileName(None self, QString _fileName)"""
        return None
    def device(self):
        """QIODevice QImageWriter.device(None self)"""
        return QIODevice()
    def setDevice(self, _device):
        """None QImageWriter.setDevice(None self, QIODevice _device)"""
        return None
    def format(self):
        """QByteArray QImageWriter.format(None self)"""
        return QByteArray()
    def setFormat(self, _format):
        """None QImageWriter.setFormat(None self, QByteArray _format)"""
        return None


class QInputContext(QObject):
    """"""
    PreeditFormat = int() # QInputContext.StandardFormat enum
    SelectionFormat = int() # QInputContext.StandardFormat enum

    def __init__(self, _parent):
        """None QInputContext.__init__(None self, QObject _parent)"""
        return None
    def standardFormat(self, _s):
        """QTextFormat QInputContext.standardFormat(None self, QInputContext.StandardFormat _s)"""
        return QTextFormat()
    def sendEvent(self, _event):
        """None QInputContext.sendEvent(None self, QInputMethodEvent _event)"""
        return None
    def filterEvent(self, _event):
        """bool QInputContext.filterEvent(None self, QEvent _event)"""
        return bool()
    def actions(self):
        """list-of-QAction QInputContext.actions(None self)"""
        return [QAction()]
    def widgetDestroyed(self, _w):
        """None QInputContext.widgetDestroyed(None self, QWidget _w)"""
        return None
    def setFocusWidget(self, _w):
        """None QInputContext.setFocusWidget(None self, QWidget _w)"""
        return None
    def focusWidget(self):
        """QWidget QInputContext.focusWidget(None self)"""
        return QWidget()
    def isComposing(self):
        """abstract bool QInputContext.isComposing(None self)"""
        return bool()
    def font(self):
        """QFont QInputContext.font(None self)"""
        return QFont()
    def mouseHandler(self, _x, _event):
        """None QInputContext.mouseHandler(None self, int _x, QMouseEvent _event)"""
        return None
    def update(self):
        """None QInputContext.update(None self)"""
        return None
    def reset(self):
        """abstract None QInputContext.reset(None self)"""
        return None
    def language(self):
        """abstract QString QInputContext.language(None self)"""
        return QString()
    def identifierName(self):
        """abstract QString QInputContext.identifierName(None self)"""
        return QString()


class QInputContextFactory():
    """"""
    def __init__(self):
        """None QInputContextFactory.__init__(None self)"""
        return None
    def __init__(self):
        """QInputContextFactory QInputContextFactory.__init__(None self)"""
        return QInputContextFactory()
    def description(self, _key):
        """QString QInputContextFactory.description(None self, QString _key)"""
        return QString()
    def displayName(self, _key):
        """QString QInputContextFactory.displayName(None self, QString _key)"""
        return QString()
    def languages(self, _key):
        """QStringList QInputContextFactory.languages(None self, QString _key)"""
        return QStringList()
    def create(self, _key, _parent):
        """QInputContext QInputContextFactory.create(None self, QString _key, QObject _parent)"""
        return QInputContext()
    def keys(self):
        """QStringList QInputContextFactory.keys(None self)"""
        return QStringList()


class QInputDialog(QDialog):
    """"""
    TextInput = int() # QInputDialog.InputMode enum
    IntInput = int() # QInputDialog.InputMode enum
    DoubleInput = int() # QInputDialog.InputMode enum

    NoButtons = int() # QInputDialog.InputDialogOption enum
    UseListViewForComboBoxItems = int() # QInputDialog.InputDialogOption enum

    def __init__(self, _parent, _flags):
        """None QInputDialog.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def done(self, _result):
        """None QInputDialog.done(None self, int _result)"""
        return None
    def setVisible(self, _visible):
        """None QInputDialog.setVisible(None self, bool _visible)"""
        return None
    def sizeHint(self):
        """QSize QInputDialog.sizeHint(None self)"""
        return QSize()
    def minimumSizeHint(self):
        """QSize QInputDialog.minimumSizeHint(None self)"""
        return QSize()
    def open(self):
        """None QInputDialog.open(None self)"""
        return None
    def open(self, _receiver, _member):
        """None QInputDialog.open(None self, QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(self, _receiver):
        """None QInputDialog.open(None self, callable _receiver)"""
        return None
    def cancelButtonText(self):
        """QString QInputDialog.cancelButtonText(None self)"""
        return QString()
    def setCancelButtonText(self, _text):
        """None QInputDialog.setCancelButtonText(None self, QString _text)"""
        return None
    def okButtonText(self):
        """QString QInputDialog.okButtonText(None self)"""
        return QString()
    def setOkButtonText(self, _text):
        """None QInputDialog.setOkButtonText(None self, QString _text)"""
        return None
    def doubleDecimals(self):
        """int QInputDialog.doubleDecimals(None self)"""
        return int()
    def setDoubleDecimals(self, _decimals):
        """None QInputDialog.setDoubleDecimals(None self, int _decimals)"""
        return None
    def setDoubleRange(self, _min, _max):
        """None QInputDialog.setDoubleRange(None self, float _min, float _max)"""
        return None
    def doubleMaximum(self):
        """float QInputDialog.doubleMaximum(None self)"""
        return float()
    def setDoubleMaximum(self, _max):
        """None QInputDialog.setDoubleMaximum(None self, float _max)"""
        return None
    def doubleMinimum(self):
        """float QInputDialog.doubleMinimum(None self)"""
        return float()
    def setDoubleMinimum(self, _min):
        """None QInputDialog.setDoubleMinimum(None self, float _min)"""
        return None
    def doubleValue(self):
        """float QInputDialog.doubleValue(None self)"""
        return float()
    def setDoubleValue(self, _value):
        """None QInputDialog.setDoubleValue(None self, float _value)"""
        return None
    def intStep(self):
        """int QInputDialog.intStep(None self)"""
        return int()
    def setIntStep(self, _step):
        """None QInputDialog.setIntStep(None self, int _step)"""
        return None
    def setIntRange(self, _min, _max):
        """None QInputDialog.setIntRange(None self, int _min, int _max)"""
        return None
    def intMaximum(self):
        """int QInputDialog.intMaximum(None self)"""
        return int()
    def setIntMaximum(self, _max):
        """None QInputDialog.setIntMaximum(None self, int _max)"""
        return None
    def intMinimum(self):
        """int QInputDialog.intMinimum(None self)"""
        return int()
    def setIntMinimum(self, _min):
        """None QInputDialog.setIntMinimum(None self, int _min)"""
        return None
    def intValue(self):
        """int QInputDialog.intValue(None self)"""
        return int()
    def setIntValue(self, _value):
        """None QInputDialog.setIntValue(None self, int _value)"""
        return None
    def comboBoxItems(self):
        """QStringList QInputDialog.comboBoxItems(None self)"""
        return QStringList()
    def setComboBoxItems(self, _items):
        """None QInputDialog.setComboBoxItems(None self, QStringList _items)"""
        return None
    def isComboBoxEditable(self):
        """bool QInputDialog.isComboBoxEditable(None self)"""
        return bool()
    def setComboBoxEditable(self, _editable):
        """None QInputDialog.setComboBoxEditable(None self, bool _editable)"""
        return None
    def textEchoMode(self):
        """QLineEdit.EchoMode QInputDialog.textEchoMode(None self)"""
        return QLineEdit.EchoMode()
    def setTextEchoMode(self, _mode):
        """None QInputDialog.setTextEchoMode(None self, QLineEdit.EchoMode _mode)"""
        return None
    def textValue(self):
        """QString QInputDialog.textValue(None self)"""
        return QString()
    def setTextValue(self, _text):
        """None QInputDialog.setTextValue(None self, QString _text)"""
        return None
    def options(self):
        """QInputDialog.InputDialogOptions QInputDialog.options(None self)"""
        return QInputDialog.InputDialogOptions()
    def setOptions(self, _options):
        """None QInputDialog.setOptions(None self, QInputDialog.InputDialogOptions _options)"""
        return None
    def testOption(self, _option):
        """bool QInputDialog.testOption(None self, QInputDialog.InputDialogOption _option)"""
        return bool()
    def setOption(self, _option, _on):
        """None QInputDialog.setOption(None self, QInputDialog.InputDialogOption _option, bool _on)"""
        return None
    def labelText(self):
        """QString QInputDialog.labelText(None self)"""
        return QString()
    def setLabelText(self, _text):
        """None QInputDialog.setLabelText(None self, QString _text)"""
        return None
    def inputMode(self):
        """QInputDialog.InputMode QInputDialog.inputMode(None self)"""
        return QInputDialog.InputMode()
    def setInputMode(self, _mode):
        """None QInputDialog.setInputMode(None self, QInputDialog.InputMode _mode)"""
        return None
    def getItem(self, _parent, _title, _label, _list, _current, _editable, _ok, _flags):
        """QString QInputDialog.getItem(None self, QWidget _parent, QString _title, QString _label, QStringList _list, int _current, bool _editable, bool _ok, Qt.WindowFlags _flags)"""
        return QString()
    def getDouble(self, _parent, _title, _label, _value, _min, _max, _decimals, _ok, _flags):
        """float QInputDialog.getDouble(None self, QWidget _parent, QString _title, QString _label, float _value, float _min, float _max, int _decimals, bool _ok, Qt.WindowFlags _flags)"""
        return float()
    def getInteger(self, _parent, _title, _label, _value, _min, _max, _step, _ok, _flags):
        """int QInputDialog.getInteger(None self, QWidget _parent, QString _title, QString _label, int _value, int _min, int _max, int _step, bool _ok, Qt.WindowFlags _flags)"""
        return int()
    def getInt(self, _parent, _title, _label, _value, _min, _max, _step, _ok, _flags):
        """int QInputDialog.getInt(None self, QWidget _parent, QString _title, QString _label, int _value, int _min, int _max, int _step, bool _ok, Qt.WindowFlags _flags)"""
        return int()
    def getText(self, _parent, _title, _label, _mode, _text, _ok, _flags):
        """QString QInputDialog.getText(None self, QWidget _parent, QString _title, QString _label, QLineEdit.EchoMode _mode, QString _text, bool _ok, Qt.WindowFlags _flags)"""
        return QString()


class QItemDelegate(QAbstractItemDelegate):
    """"""
    def __init__(self, _parent):
        """None QItemDelegate.__init__(None self, QObject _parent)"""
        return None
    def editorEvent(self, _event, _model, _option, _index):
        """bool QItemDelegate.editorEvent(None self, QEvent _event, QAbstractItemModel _model, QStyleOptionViewItem _option, QModelIndex _index)"""
        return bool()
    def eventFilter(self, _object, _event):
        """bool QItemDelegate.eventFilter(None self, QObject _object, QEvent _event)"""
        return bool()
    def drawFocus(self, _painter, _option, _rect):
        """None QItemDelegate.drawFocus(None self, QPainter _painter, QStyleOptionViewItem _option, QRect _rect)"""
        return None
    def drawDisplay(self, _painter, _option, _rect, _text):
        """None QItemDelegate.drawDisplay(None self, QPainter _painter, QStyleOptionViewItem _option, QRect _rect, QString _text)"""
        return None
    def drawDecoration(self, _painter, _option, _rect, _pixmap):
        """None QItemDelegate.drawDecoration(None self, QPainter _painter, QStyleOptionViewItem _option, QRect _rect, QPixmap _pixmap)"""
        return None
    def drawCheck(self, _painter, _option, _rect, _state):
        """None QItemDelegate.drawCheck(None self, QPainter _painter, QStyleOptionViewItem _option, QRect _rect, Qt.CheckState _state)"""
        return None
    def drawBackground(self, _painter, _option, _index):
        """None QItemDelegate.drawBackground(None self, QPainter _painter, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None
    def setClipping(self, _clip):
        """None QItemDelegate.setClipping(None self, bool _clip)"""
        return None
    def hasClipping(self):
        """bool QItemDelegate.hasClipping(None self)"""
        return bool()
    def setItemEditorFactory(self, _factory):
        """None QItemDelegate.setItemEditorFactory(None self, QItemEditorFactory _factory)"""
        return None
    def itemEditorFactory(self):
        """QItemEditorFactory QItemDelegate.itemEditorFactory(None self)"""
        return QItemEditorFactory()
    def updateEditorGeometry(self, _editor, _option, _index):
        """None QItemDelegate.updateEditorGeometry(None self, QWidget _editor, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None
    def setModelData(self, _editor, _model, _index):
        """None QItemDelegate.setModelData(None self, QWidget _editor, QAbstractItemModel _model, QModelIndex _index)"""
        return None
    def setEditorData(self, _editor, _index):
        """None QItemDelegate.setEditorData(None self, QWidget _editor, QModelIndex _index)"""
        return None
    def createEditor(self, _parent, _option, _index):
        """QWidget QItemDelegate.createEditor(None self, QWidget _parent, QStyleOptionViewItem _option, QModelIndex _index)"""
        return QWidget()
    def sizeHint(self, _option, _index):
        """QSize QItemDelegate.sizeHint(None self, QStyleOptionViewItem _option, QModelIndex _index)"""
        return QSize()
    def paint(self, _painter, _option, _index):
        """None QItemDelegate.paint(None self, QPainter _painter, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None


class QItemEditorCreatorBase():
    """"""
    def __init__(self):
        """None QItemEditorCreatorBase.__init__(None self)"""
        return None
    def __init__(self):
        """QItemEditorCreatorBase QItemEditorCreatorBase.__init__(None self)"""
        return QItemEditorCreatorBase()
    def valuePropertyName(self):
        """abstract QByteArray QItemEditorCreatorBase.valuePropertyName(None self)"""
        return QByteArray()
    def createWidget(self, _parent):
        """abstract QWidget QItemEditorCreatorBase.createWidget(None self, QWidget _parent)"""
        return QWidget()


class QItemEditorFactory():
    """"""
    def __init__(self):
        """None QItemEditorFactory.__init__(None self)"""
        return None
    def __init__(self):
        """QItemEditorFactory QItemEditorFactory.__init__(None self)"""
        return QItemEditorFactory()
    def setDefaultFactory(self, _factory):
        """None QItemEditorFactory.setDefaultFactory(None self, QItemEditorFactory _factory)"""
        return None
    def defaultFactory(self):
        """QItemEditorFactory QItemEditorFactory.defaultFactory(None self)"""
        return QItemEditorFactory()
    def registerEditor(self, _type, _creator):
        """None QItemEditorFactory.registerEditor(None self, Type _type, QItemEditorCreatorBase _creator)"""
        return None
    def valuePropertyName(self, _type):
        """QByteArray QItemEditorFactory.valuePropertyName(None self, Type _type)"""
        return QByteArray()
    def createEditor(self, _type, _parent):
        """QWidget QItemEditorFactory.createEditor(None self, Type _type, QWidget _parent)"""
        return QWidget()


class QItemSelectionRange():
    """"""
    def __init__(self):
        """None QItemSelectionRange.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QItemSelectionRange.__init__(None self, QItemSelectionRange _other)"""
        return None
    def __init__(self, _atopLeft, _abottomRight):
        """None QItemSelectionRange.__init__(None self, QModelIndex _atopLeft, QModelIndex _abottomRight)"""
        return None
    def __init__(self, _index):
        """None QItemSelectionRange.__init__(None self, QModelIndex _index)"""
        return None
    def isEmpty(self):
        """bool QItemSelectionRange.isEmpty(None self)"""
        return bool()
    def __hash__(self):
        """int QItemSelectionRange.__hash__(None self)"""
        return int()
    def intersected(self, _other):
        """QItemSelectionRange QItemSelectionRange.intersected(None self, QItemSelectionRange _other)"""
        return QItemSelectionRange()
    def indexes(self):
        """list-of-QModelIndex QItemSelectionRange.indexes(None self)"""
        return [QModelIndex()]
    def isValid(self):
        """bool QItemSelectionRange.isValid(None self)"""
        return bool()
    def __ne__(self, _other):
        """bool QItemSelectionRange.__ne__(None self, QItemSelectionRange _other)"""
        return bool()
    def __eq__(self, _other):
        """bool QItemSelectionRange.__eq__(None self, QItemSelectionRange _other)"""
        return bool()
    def intersect(self, _other):
        """QItemSelectionRange QItemSelectionRange.intersect(None self, QItemSelectionRange _other)"""
        return QItemSelectionRange()
    def intersects(self, _other):
        """bool QItemSelectionRange.intersects(None self, QItemSelectionRange _other)"""
        return bool()
    def contains(self, _index):
        """bool QItemSelectionRange.contains(None self, QModelIndex _index)"""
        return bool()
    def contains(self, _row, _column, _parentIndex):
        """bool QItemSelectionRange.contains(None self, int _row, int _column, QModelIndex _parentIndex)"""
        return bool()
    def model(self):
        """QAbstractItemModel QItemSelectionRange.model(None self)"""
        return QAbstractItemModel()
    def parent(self):
        """QModelIndex QItemSelectionRange.parent(None self)"""
        return QModelIndex()
    def bottomRight(self):
        """QModelIndex QItemSelectionRange.bottomRight(None self)"""
        return QModelIndex()
    def topLeft(self):
        """QModelIndex QItemSelectionRange.topLeft(None self)"""
        return QModelIndex()
    def height(self):
        """int QItemSelectionRange.height(None self)"""
        return int()
    def width(self):
        """int QItemSelectionRange.width(None self)"""
        return int()
    def right(self):
        """int QItemSelectionRange.right(None self)"""
        return int()
    def bottom(self):
        """int QItemSelectionRange.bottom(None self)"""
        return int()
    def left(self):
        """int QItemSelectionRange.left(None self)"""
        return int()
    def top(self):
        """int QItemSelectionRange.top(None self)"""
        return int()


class QItemSelectionModel(QObject):
    """"""
    NoUpdate = int() # QItemSelectionModel.SelectionFlag enum
    Clear = int() # QItemSelectionModel.SelectionFlag enum
    Select = int() # QItemSelectionModel.SelectionFlag enum
    Deselect = int() # QItemSelectionModel.SelectionFlag enum
    Toggle = int() # QItemSelectionModel.SelectionFlag enum
    Current = int() # QItemSelectionModel.SelectionFlag enum
    Rows = int() # QItemSelectionModel.SelectionFlag enum
    Columns = int() # QItemSelectionModel.SelectionFlag enum
    SelectCurrent = int() # QItemSelectionModel.SelectionFlag enum
    ToggleCurrent = int() # QItemSelectionModel.SelectionFlag enum
    ClearAndSelect = int() # QItemSelectionModel.SelectionFlag enum

    def __init__(self, _model):
        """None QItemSelectionModel.__init__(None self, QAbstractItemModel _model)"""
        return None
    def __init__(self, _model, _parent):
        """None QItemSelectionModel.__init__(None self, QAbstractItemModel _model, QObject _parent)"""
        return None
    def selectedColumns(self, _row):
        """list-of-QModelIndex QItemSelectionModel.selectedColumns(None self, int _row)"""
        return [QModelIndex()]
    def selectedRows(self, _column):
        """list-of-QModelIndex QItemSelectionModel.selectedRows(None self, int _column)"""
        return [QModelIndex()]
    def hasSelection(self):
        """bool QItemSelectionModel.hasSelection(None self)"""
        return bool()
    def emitSelectionChanged(self, _newSelection, _oldSelection):
        """None QItemSelectionModel.emitSelectionChanged(None self, QItemSelection _newSelection, QItemSelection _oldSelection)"""
        return None
    def setCurrentIndex(self, _index, _command):
        """None QItemSelectionModel.setCurrentIndex(None self, QModelIndex _index, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def select(self, _index, _command):
        """None QItemSelectionModel.select(None self, QModelIndex _index, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def select(self, _selection, _command):
        """None QItemSelectionModel.select(None self, QItemSelection _selection, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def reset(self):
        """None QItemSelectionModel.reset(None self)"""
        return None
    def clearSelection(self):
        """None QItemSelectionModel.clearSelection(None self)"""
        return None
    def clear(self):
        """None QItemSelectionModel.clear(None self)"""
        return None
    def model(self):
        """QAbstractItemModel QItemSelectionModel.model(None self)"""
        return QAbstractItemModel()
    def selection(self):
        """QItemSelection QItemSelectionModel.selection(None self)"""
        return QItemSelection()
    def selectedIndexes(self):
        """list-of-QModelIndex QItemSelectionModel.selectedIndexes(None self)"""
        return [QModelIndex()]
    def columnIntersectsSelection(self, _column, _parent):
        """bool QItemSelectionModel.columnIntersectsSelection(None self, int _column, QModelIndex _parent)"""
        return bool()
    def rowIntersectsSelection(self, _row, _parent):
        """bool QItemSelectionModel.rowIntersectsSelection(None self, int _row, QModelIndex _parent)"""
        return bool()
    def isColumnSelected(self, _column, _parent):
        """bool QItemSelectionModel.isColumnSelected(None self, int _column, QModelIndex _parent)"""
        return bool()
    def isRowSelected(self, _row, _parent):
        """bool QItemSelectionModel.isRowSelected(None self, int _row, QModelIndex _parent)"""
        return bool()
    def isSelected(self, _index):
        """bool QItemSelectionModel.isSelected(None self, QModelIndex _index)"""
        return bool()
    def currentIndex(self):
        """QModelIndex QItemSelectionModel.currentIndex(None self)"""
        return QModelIndex()


class QItemSelection():
    """"""
    def __init__(self):
        """None QItemSelection.__init__(None self)"""
        return None
    def __init__(self, _topLeft, _bottomRight):
        """None QItemSelection.__init__(None self, QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None
    def __init__(self):
        """QItemSelection QItemSelection.__init__(None self)"""
        return QItemSelection()
    def __iadd__(self, _other):
        """QItemSelection QItemSelection.__iadd__(None self, QItemSelection _other)"""
        return QItemSelection()
    def __iadd__(self, _value):
        """QItemSelection QItemSelection.__iadd__(None self, QItemSelectionRange _value)"""
        return QItemSelection()
    def lastIndexOf(self, _value, _from):
        """int QItemSelection.lastIndexOf(None self, QItemSelectionRange _value, int _from)"""
        return int()
    def indexOf(self, _value, _from):
        """int QItemSelection.indexOf(None self, QItemSelectionRange _value, int _from)"""
        return int()
    def last(self):
        """QItemSelectionRange QItemSelection.last(None self)"""
        return QItemSelectionRange()
    def first(self):
        """QItemSelectionRange QItemSelection.first(None self)"""
        return QItemSelectionRange()
    def __len__(self):
        """ QItemSelection.__len__(None self)"""
        return ()
    def count(self, _range):
        """int QItemSelection.count(None self, QItemSelectionRange _range)"""
        return int()
    def count(self):
        """int QItemSelection.count(None self)"""
        return int()
    def swap(self, _i, _j):
        """None QItemSelection.swap(None self, int _i, int _j)"""
        return None
    def move(self, _from, _to):
        """None QItemSelection.move(None self, int _from, int _to)"""
        return None
    def takeLast(self):
        """QItemSelectionRange QItemSelection.takeLast(None self)"""
        return QItemSelectionRange()
    def takeFirst(self):
        """QItemSelectionRange QItemSelection.takeFirst(None self)"""
        return QItemSelectionRange()
    def takeAt(self, _i):
        """QItemSelectionRange QItemSelection.takeAt(None self, int _i)"""
        return QItemSelectionRange()
    def removeAll(self, _range):
        """int QItemSelection.removeAll(None self, QItemSelectionRange _range)"""
        return int()
    def removeAt(self, _i):
        """None QItemSelection.removeAt(None self, int _i)"""
        return None
    def replace(self, _i, _range):
        """None QItemSelection.replace(None self, int _i, QItemSelectionRange _range)"""
        return None
    def insert(self, _i, _range):
        """None QItemSelection.insert(None self, int _i, QItemSelectionRange _range)"""
        return None
    def prepend(self, _range):
        """None QItemSelection.prepend(None self, QItemSelectionRange _range)"""
        return None
    def append(self, _range):
        """None QItemSelection.append(None self, QItemSelectionRange _range)"""
        return None
    def isEmpty(self):
        """bool QItemSelection.isEmpty(None self)"""
        return bool()
    def clear(self):
        """None QItemSelection.clear(None self)"""
        return None
    def __eq__(self, _other):
        """bool QItemSelection.__eq__(None self, QItemSelection _other)"""
        return bool()
    def __ne__(self, _other):
        """bool QItemSelection.__ne__(None self, QItemSelection _other)"""
        return bool()
    def __getitem__(self, _i):
        """QItemSelectionRange QItemSelection.__getitem__(None self, int _i)"""
        return QItemSelectionRange()
    def __getitem__(self, _slice):
        """QItemSelection QItemSelection.__getitem__(None self, slice _slice)"""
        return QItemSelection()
    def __delitem__(self, _i):
        """None QItemSelection.__delitem__(None self, int _i)"""
        return None
    def __delitem__(self, _slice):
        """None QItemSelection.__delitem__(None self, slice _slice)"""
        return None
    def __setitem__(self, _i, _range):
        """None QItemSelection.__setitem__(None self, int _i, QItemSelectionRange _range)"""
        return None
    def __setitem__(self, _slice, _list):
        """None QItemSelection.__setitem__(None self, slice _slice, QItemSelection _list)"""
        return None
    def split(self, _range, _other, _result):
        """None QItemSelection.split(None self, QItemSelectionRange _range, QItemSelectionRange _other, QItemSelection _result)"""
        return None
    def merge(self, _other, _command):
        """None QItemSelection.merge(None self, QItemSelection _other, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def indexes(self):
        """list-of-QModelIndex QItemSelection.indexes(None self)"""
        return [QModelIndex()]
    def __contains__(self, _index):
        """int QItemSelection.__contains__(None self, QModelIndex _index)"""
        return int()
    def contains(self, _index):
        """bool QItemSelection.contains(None self, QModelIndex _index)"""
        return bool()
    def select(self, _topLeft, _bottomRight):
        """None QItemSelection.select(None self, QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None


class QKeyEventTransition(QEventTransition):
    """"""
    def __init__(self, _sourceState):
        """None QKeyEventTransition.__init__(None self, QState _sourceState)"""
        return None
    def __init__(self, _object, _type, _key, _sourceState):
        """None QKeyEventTransition.__init__(None self, QObject _object, QEvent.Type _type, int _key, QState _sourceState)"""
        return None
    def eventTest(self, _event):
        """bool QKeyEventTransition.eventTest(None self, QEvent _event)"""
        return bool()
    def onTransition(self, _event):
        """None QKeyEventTransition.onTransition(None self, QEvent _event)"""
        return None
    def setModifierMask(self, _modifiers):
        """None QKeyEventTransition.setModifierMask(None self, Qt.KeyboardModifiers _modifiers)"""
        return None
    def modifierMask(self):
        """Qt.KeyboardModifiers QKeyEventTransition.modifierMask(None self)"""
        return Qt.KeyboardModifiers()
    def setKey(self, _key):
        """None QKeyEventTransition.setKey(None self, int _key)"""
        return None
    def key(self):
        """int QKeyEventTransition.key(None self)"""
        return int()


class QKeySequence():
    """"""
    UnknownKey = int() # QKeySequence.StandardKey enum
    HelpContents = int() # QKeySequence.StandardKey enum
    WhatsThis = int() # QKeySequence.StandardKey enum
    Open = int() # QKeySequence.StandardKey enum
    Close = int() # QKeySequence.StandardKey enum
    Save = int() # QKeySequence.StandardKey enum
    New = int() # QKeySequence.StandardKey enum
    Delete = int() # QKeySequence.StandardKey enum
    Cut = int() # QKeySequence.StandardKey enum
    Copy = int() # QKeySequence.StandardKey enum
    Paste = int() # QKeySequence.StandardKey enum
    Undo = int() # QKeySequence.StandardKey enum
    Redo = int() # QKeySequence.StandardKey enum
    Back = int() # QKeySequence.StandardKey enum
    Forward = int() # QKeySequence.StandardKey enum
    Refresh = int() # QKeySequence.StandardKey enum
    ZoomIn = int() # QKeySequence.StandardKey enum
    ZoomOut = int() # QKeySequence.StandardKey enum
    Print = int() # QKeySequence.StandardKey enum
    AddTab = int() # QKeySequence.StandardKey enum
    NextChild = int() # QKeySequence.StandardKey enum
    PreviousChild = int() # QKeySequence.StandardKey enum
    Find = int() # QKeySequence.StandardKey enum
    FindNext = int() # QKeySequence.StandardKey enum
    FindPrevious = int() # QKeySequence.StandardKey enum
    Replace = int() # QKeySequence.StandardKey enum
    SelectAll = int() # QKeySequence.StandardKey enum
    Bold = int() # QKeySequence.StandardKey enum
    Italic = int() # QKeySequence.StandardKey enum
    Underline = int() # QKeySequence.StandardKey enum
    MoveToNextChar = int() # QKeySequence.StandardKey enum
    MoveToPreviousChar = int() # QKeySequence.StandardKey enum
    MoveToNextWord = int() # QKeySequence.StandardKey enum
    MoveToPreviousWord = int() # QKeySequence.StandardKey enum
    MoveToNextLine = int() # QKeySequence.StandardKey enum
    MoveToPreviousLine = int() # QKeySequence.StandardKey enum
    MoveToNextPage = int() # QKeySequence.StandardKey enum
    MoveToPreviousPage = int() # QKeySequence.StandardKey enum
    MoveToStartOfLine = int() # QKeySequence.StandardKey enum
    MoveToEndOfLine = int() # QKeySequence.StandardKey enum
    MoveToStartOfBlock = int() # QKeySequence.StandardKey enum
    MoveToEndOfBlock = int() # QKeySequence.StandardKey enum
    MoveToStartOfDocument = int() # QKeySequence.StandardKey enum
    MoveToEndOfDocument = int() # QKeySequence.StandardKey enum
    SelectNextChar = int() # QKeySequence.StandardKey enum
    SelectPreviousChar = int() # QKeySequence.StandardKey enum
    SelectNextWord = int() # QKeySequence.StandardKey enum
    SelectPreviousWord = int() # QKeySequence.StandardKey enum
    SelectNextLine = int() # QKeySequence.StandardKey enum
    SelectPreviousLine = int() # QKeySequence.StandardKey enum
    SelectNextPage = int() # QKeySequence.StandardKey enum
    SelectPreviousPage = int() # QKeySequence.StandardKey enum
    SelectStartOfLine = int() # QKeySequence.StandardKey enum
    SelectEndOfLine = int() # QKeySequence.StandardKey enum
    SelectStartOfBlock = int() # QKeySequence.StandardKey enum
    SelectEndOfBlock = int() # QKeySequence.StandardKey enum
    SelectStartOfDocument = int() # QKeySequence.StandardKey enum
    SelectEndOfDocument = int() # QKeySequence.StandardKey enum
    DeleteStartOfWord = int() # QKeySequence.StandardKey enum
    DeleteEndOfWord = int() # QKeySequence.StandardKey enum
    DeleteEndOfLine = int() # QKeySequence.StandardKey enum
    InsertParagraphSeparator = int() # QKeySequence.StandardKey enum
    InsertLineSeparator = int() # QKeySequence.StandardKey enum
    SaveAs = int() # QKeySequence.StandardKey enum
    Preferences = int() # QKeySequence.StandardKey enum
    Quit = int() # QKeySequence.StandardKey enum

    NoMatch = int() # QKeySequence.SequenceMatch enum
    PartialMatch = int() # QKeySequence.SequenceMatch enum
    ExactMatch = int() # QKeySequence.SequenceMatch enum

    NativeText = int() # QKeySequence.SequenceFormat enum
    PortableText = int() # QKeySequence.SequenceFormat enum

    def __init__(self):
        """None QKeySequence.__init__(None self)"""
        return None
    def __init__(self, _ks):
        """None QKeySequence.__init__(None self, QKeySequence _ks)"""
        return None
    def __init__(self, _key, _format):
        """None QKeySequence.__init__(None self, QString _key, QKeySequence.SequenceFormat _format)"""
        return None
    def __init__(self, _k1, _key2, _key3, _key4):
        """None QKeySequence.__init__(None self, int _k1, int _key2, int _key3, int _key4)"""
        return None
    def __init__(self, _variant):
        """None QKeySequence.__init__(None self, QVariant _variant)"""
        return None
    def keyBindings(self, _key):
        """list-of-QKeySequence QKeySequence.keyBindings(None self, QKeySequence.StandardKey _key)"""
        return [QKeySequence()]
    def fromString(self, _str, _format):
        """QKeySequence QKeySequence.fromString(None self, QString _str, QKeySequence.SequenceFormat _format)"""
        return QKeySequence()
    def toString(self, _format):
        """QString QKeySequence.toString(None self, QKeySequence.SequenceFormat _format)"""
        return QString()
    def isDetached(self):
        """bool QKeySequence.isDetached(None self)"""
        return bool()
    def __ge__(self, _other):
        """bool QKeySequence.__ge__(None self, QKeySequence _other)"""
        return bool()
    def __le__(self, _other):
        """bool QKeySequence.__le__(None self, QKeySequence _other)"""
        return bool()
    def __gt__(self, _other):
        """bool QKeySequence.__gt__(None self, QKeySequence _other)"""
        return bool()
    def __lt__(self, _ks):
        """bool QKeySequence.__lt__(None self, QKeySequence _ks)"""
        return bool()
    def __ne__(self, _other):
        """bool QKeySequence.__ne__(None self, QKeySequence _other)"""
        return bool()
    def __eq__(self, _other):
        """bool QKeySequence.__eq__(None self, QKeySequence _other)"""
        return bool()
    def __getitem__(self, _i):
        """int QKeySequence.__getitem__(None self, int _i)"""
        return int()
    def __int__(self):
        """int QKeySequence.__int__(None self)"""
        return int()
    def mnemonic(self, _text):
        """QKeySequence QKeySequence.mnemonic(None self, QString _text)"""
        return QKeySequence()
    def matches(self, _seq):
        """QKeySequence.SequenceMatch QKeySequence.matches(None self, QKeySequence _seq)"""
        return QKeySequence.SequenceMatch()
    def isEmpty(self):
        """bool QKeySequence.isEmpty(None self)"""
        return bool()
    def __len__(self):
        """ QKeySequence.__len__(None self)"""
        return ()
    def count(self):
        """int QKeySequence.count(None self)"""
        return int()


class QLabel(QFrame):
    """"""
    def __init__(self, _parent, _flags):
        """None QLabel.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(self, _text, _parent, _flags):
        """None QLabel.__init__(None self, QString _text, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def selectionStart(self):
        """int QLabel.selectionStart(None self)"""
        return int()
    def selectedText(self):
        """QString QLabel.selectedText(None self)"""
        return QString()
    def hasSelectedText(self):
        """bool QLabel.hasSelectedText(None self)"""
        return bool()
    def setSelection(self):
        """int QLabel.setSelection(None self)"""
        return int()
    def focusNextPrevChild(self, _next):
        """bool QLabel.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def focusOutEvent(self, _ev):
        """None QLabel.focusOutEvent(None self, QFocusEvent _ev)"""
        return None
    def focusInEvent(self, _ev):
        """None QLabel.focusInEvent(None self, QFocusEvent _ev)"""
        return None
    def contextMenuEvent(self, _ev):
        """None QLabel.contextMenuEvent(None self, QContextMenuEvent _ev)"""
        return None
    def mouseReleaseEvent(self, _ev):
        """None QLabel.mouseReleaseEvent(None self, QMouseEvent _ev)"""
        return None
    def mouseMoveEvent(self, _ev):
        """None QLabel.mouseMoveEvent(None self, QMouseEvent _ev)"""
        return None
    def mousePressEvent(self, _ev):
        """None QLabel.mousePressEvent(None self, QMouseEvent _ev)"""
        return None
    def keyPressEvent(self, _ev):
        """None QLabel.keyPressEvent(None self, QKeyEvent _ev)"""
        return None
    def changeEvent(self):
        """QEvent QLabel.changeEvent(None self)"""
        return QEvent()
    def paintEvent(self):
        """QPaintEvent QLabel.paintEvent(None self)"""
        return QPaintEvent()
    def event(self, _e):
        """bool QLabel.event(None self, QEvent _e)"""
        return bool()
    def setText(self):
        """QString QLabel.setText(None self)"""
        return QString()
    def setPixmap(self):
        """QPixmap QLabel.setPixmap(None self)"""
        return QPixmap()
    def setPicture(self):
        """QPicture QLabel.setPicture(None self)"""
        return QPicture()
    def setNum(self):
        """float QLabel.setNum(None self)"""
        return float()
    def setNum(self):
        """int QLabel.setNum(None self)"""
        return int()
    def setMovie(self, _movie):
        """None QLabel.setMovie(None self, QMovie _movie)"""
        return None
    def clear(self):
        """None QLabel.clear(None self)"""
        return None
    def setOpenExternalLinks(self, _open):
        """None QLabel.setOpenExternalLinks(None self, bool _open)"""
        return None
    def textInteractionFlags(self):
        """Qt.TextInteractionFlags QLabel.textInteractionFlags(None self)"""
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(self, _flags):
        """None QLabel.setTextInteractionFlags(None self, Qt.TextInteractionFlags _flags)"""
        return None
    def openExternalLinks(self):
        """bool QLabel.openExternalLinks(None self)"""
        return bool()
    def heightForWidth(self):
        """int QLabel.heightForWidth(None self)"""
        return int()
    def buddy(self):
        """QWidget QLabel.buddy(None self)"""
        return QWidget()
    def setBuddy(self):
        """QWidget QLabel.setBuddy(None self)"""
        return QWidget()
    def minimumSizeHint(self):
        """QSize QLabel.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QLabel.sizeHint(None self)"""
        return QSize()
    def setScaledContents(self):
        """bool QLabel.setScaledContents(None self)"""
        return bool()
    def hasScaledContents(self):
        """bool QLabel.hasScaledContents(None self)"""
        return bool()
    def setMargin(self):
        """int QLabel.setMargin(None self)"""
        return int()
    def margin(self):
        """int QLabel.margin(None self)"""
        return int()
    def setIndent(self):
        """int QLabel.setIndent(None self)"""
        return int()
    def indent(self):
        """int QLabel.indent(None self)"""
        return int()
    def wordWrap(self):
        """bool QLabel.wordWrap(None self)"""
        return bool()
    def setWordWrap(self, _on):
        """None QLabel.setWordWrap(None self, bool _on)"""
        return None
    def setAlignment(self):
        """Qt.Alignment QLabel.setAlignment(None self)"""
        return Qt.Alignment()
    def alignment(self):
        """Qt.Alignment QLabel.alignment(None self)"""
        return Qt.Alignment()
    def setTextFormat(self):
        """Qt.TextFormat QLabel.setTextFormat(None self)"""
        return Qt.TextFormat()
    def textFormat(self):
        """Qt.TextFormat QLabel.textFormat(None self)"""
        return Qt.TextFormat()
    def movie(self):
        """QMovie QLabel.movie(None self)"""
        return QMovie()
    def picture(self):
        """QPicture QLabel.picture(None self)"""
        return QPicture()
    def pixmap(self):
        """QPixmap QLabel.pixmap(None self)"""
        return QPixmap()
    def text(self):
        """QString QLabel.text(None self)"""
        return QString()


class QSpacerItem(QLayoutItem):
    """"""
    def __init__(self, _w, _h, _hPolicy, _vPolicy):
        """None QSpacerItem.__init__(None self, int _w, int _h, QSizePolicy.Policy _hPolicy, QSizePolicy.Policy _vPolicy)"""
        return None
    def __init__(self):
        """QSpacerItem QSpacerItem.__init__(None self)"""
        return QSpacerItem()
    def spacerItem(self):
        """QSpacerItem QSpacerItem.spacerItem(None self)"""
        return QSpacerItem()
    def geometry(self):
        """QRect QSpacerItem.geometry(None self)"""
        return QRect()
    def setGeometry(self):
        """QRect QSpacerItem.setGeometry(None self)"""
        return QRect()
    def isEmpty(self):
        """bool QSpacerItem.isEmpty(None self)"""
        return bool()
    def expandingDirections(self):
        """Qt.Orientations QSpacerItem.expandingDirections(None self)"""
        return Qt.Orientations()
    def maximumSize(self):
        """QSize QSpacerItem.maximumSize(None self)"""
        return QSize()
    def minimumSize(self):
        """QSize QSpacerItem.minimumSize(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QSpacerItem.sizeHint(None self)"""
        return QSize()
    def changeSize(self, _w, _h, _hPolicy, _vPolicy):
        """None QSpacerItem.changeSize(None self, int _w, int _h, QSizePolicy.Policy _hPolicy, QSizePolicy.Policy _vPolicy)"""
        return None


class QWidgetItem(QLayoutItem):
    """"""
    def __init__(self, _w):
        """None QWidgetItem.__init__(None self, QWidget _w)"""
        return None
    def heightForWidth(self):
        """int QWidgetItem.heightForWidth(None self)"""
        return int()
    def hasHeightForWidth(self):
        """bool QWidgetItem.hasHeightForWidth(None self)"""
        return bool()
    def widget(self):
        """QWidget QWidgetItem.widget(None self)"""
        return QWidget()
    def geometry(self):
        """QRect QWidgetItem.geometry(None self)"""
        return QRect()
    def setGeometry(self):
        """QRect QWidgetItem.setGeometry(None self)"""
        return QRect()
    def isEmpty(self):
        """bool QWidgetItem.isEmpty(None self)"""
        return bool()
    def expandingDirections(self):
        """Qt.Orientations QWidgetItem.expandingDirections(None self)"""
        return Qt.Orientations()
    def maximumSize(self):
        """QSize QWidgetItem.maximumSize(None self)"""
        return QSize()
    def minimumSize(self):
        """QSize QWidgetItem.minimumSize(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QWidgetItem.sizeHint(None self)"""
        return QSize()


class QLCDNumber(QFrame):
    """"""
    Outline = int() # QLCDNumber.SegmentStyle enum
    Filled = int() # QLCDNumber.SegmentStyle enum
    Flat = int() # QLCDNumber.SegmentStyle enum

    Hex = int() # QLCDNumber.Mode enum
    Dec = int() # QLCDNumber.Mode enum
    Oct = int() # QLCDNumber.Mode enum
    Bin = int() # QLCDNumber.Mode enum

    def __init__(self, _parent):
        """None QLCDNumber.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _numDigits, _parent):
        """None QLCDNumber.__init__(None self, int _numDigits, QWidget _parent)"""
        return None
    def setDigitCount(self, _nDigits):
        """None QLCDNumber.setDigitCount(None self, int _nDigits)"""
        return None
    def digitCount(self):
        """int QLCDNumber.digitCount(None self)"""
        return int()
    def paintEvent(self):
        """QPaintEvent QLCDNumber.paintEvent(None self)"""
        return QPaintEvent()
    def event(self, _e):
        """bool QLCDNumber.event(None self, QEvent _e)"""
        return bool()
    def setSmallDecimalPoint(self):
        """bool QLCDNumber.setSmallDecimalPoint(None self)"""
        return bool()
    def setBinMode(self):
        """None QLCDNumber.setBinMode(None self)"""
        return None
    def setOctMode(self):
        """None QLCDNumber.setOctMode(None self)"""
        return None
    def setDecMode(self):
        """None QLCDNumber.setDecMode(None self)"""
        return None
    def setHexMode(self):
        """None QLCDNumber.setHexMode(None self)"""
        return None
    def display(self, _str):
        """None QLCDNumber.display(None self, QString _str)"""
        return None
    def display(self, _num):
        """None QLCDNumber.display(None self, float _num)"""
        return None
    def display(self, _num):
        """None QLCDNumber.display(None self, int _num)"""
        return None
    def sizeHint(self):
        """QSize QLCDNumber.sizeHint(None self)"""
        return QSize()
    def intValue(self):
        """int QLCDNumber.intValue(None self)"""
        return int()
    def value(self):
        """float QLCDNumber.value(None self)"""
        return float()
    def setSegmentStyle(self):
        """QLCDNumber.SegmentStyle QLCDNumber.setSegmentStyle(None self)"""
        return QLCDNumber.SegmentStyle()
    def segmentStyle(self):
        """QLCDNumber.SegmentStyle QLCDNumber.segmentStyle(None self)"""
        return QLCDNumber.SegmentStyle()
    def setMode(self):
        """QLCDNumber.Mode QLCDNumber.setMode(None self)"""
        return QLCDNumber.Mode()
    def mode(self):
        """QLCDNumber.Mode QLCDNumber.mode(None self)"""
        return QLCDNumber.Mode()
    def checkOverflow(self, _num):
        """bool QLCDNumber.checkOverflow(None self, float _num)"""
        return bool()
    def checkOverflow(self, _num):
        """bool QLCDNumber.checkOverflow(None self, int _num)"""
        return bool()
    def setNumDigits(self, _nDigits):
        """None QLCDNumber.setNumDigits(None self, int _nDigits)"""
        return None
    def numDigits(self):
        """int QLCDNumber.numDigits(None self)"""
        return int()
    def smallDecimalPoint(self):
        """bool QLCDNumber.smallDecimalPoint(None self)"""
        return bool()


class QLineEdit(QWidget):
    """"""
    Normal = int() # QLineEdit.EchoMode enum
    NoEcho = int() # QLineEdit.EchoMode enum
    Password = int() # QLineEdit.EchoMode enum
    PasswordEchoOnEdit = int() # QLineEdit.EchoMode enum

    def __init__(self, _parent):
        """None QLineEdit.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _contents, _parent):
        """None QLineEdit.__init__(None self, QString _contents, QWidget _parent)"""
        return None
    def setPlaceholderText(self):
        """QString QLineEdit.setPlaceholderText(None self)"""
        return QString()
    def placeholderText(self):
        """QString QLineEdit.placeholderText(None self)"""
        return QString()
    def textMargins(self):
        """QMargins QLineEdit.textMargins(None self)"""
        return QMargins()
    def getTextMargins(self, _left, _top, _right, _bottom):
        """None QLineEdit.getTextMargins(None self, int _left, int _top, int _right, int _bottom)"""
        return None
    def setTextMargins(self, _left, _top, _right, _bottom):
        """None QLineEdit.setTextMargins(None self, int _left, int _top, int _right, int _bottom)"""
        return None
    def setTextMargins(self, _margins):
        """None QLineEdit.setTextMargins(None self, QMargins _margins)"""
        return None
    def completer(self):
        """QCompleter QLineEdit.completer(None self)"""
        return QCompleter()
    def setCompleter(self, _completer):
        """None QLineEdit.setCompleter(None self, QCompleter _completer)"""
        return None
    def event(self):
        """QEvent QLineEdit.event(None self)"""
        return QEvent()
    def inputMethodQuery(self):
        """Qt.InputMethodQuery QLineEdit.inputMethodQuery(None self)"""
        return Qt.InputMethodQuery()
    def cursorRect(self):
        """QRect QLineEdit.cursorRect(None self)"""
        return QRect()
    def inputMethodEvent(self):
        """QInputMethodEvent QLineEdit.inputMethodEvent(None self)"""
        return QInputMethodEvent()
    def contextMenuEvent(self):
        """QContextMenuEvent QLineEdit.contextMenuEvent(None self)"""
        return QContextMenuEvent()
    def changeEvent(self):
        """QEvent QLineEdit.changeEvent(None self)"""
        return QEvent()
    def dropEvent(self):
        """QDropEvent QLineEdit.dropEvent(None self)"""
        return QDropEvent()
    def dragLeaveEvent(self, _e):
        """None QLineEdit.dragLeaveEvent(None self, QDragLeaveEvent _e)"""
        return None
    def dragMoveEvent(self, _e):
        """None QLineEdit.dragMoveEvent(None self, QDragMoveEvent _e)"""
        return None
    def dragEnterEvent(self):
        """QDragEnterEvent QLineEdit.dragEnterEvent(None self)"""
        return QDragEnterEvent()
    def paintEvent(self):
        """QPaintEvent QLineEdit.paintEvent(None self)"""
        return QPaintEvent()
    def focusOutEvent(self):
        """QFocusEvent QLineEdit.focusOutEvent(None self)"""
        return QFocusEvent()
    def focusInEvent(self):
        """QFocusEvent QLineEdit.focusInEvent(None self)"""
        return QFocusEvent()
    def keyPressEvent(self):
        """QKeyEvent QLineEdit.keyPressEvent(None self)"""
        return QKeyEvent()
    def mouseDoubleClickEvent(self):
        """QMouseEvent QLineEdit.mouseDoubleClickEvent(None self)"""
        return QMouseEvent()
    def mouseReleaseEvent(self):
        """QMouseEvent QLineEdit.mouseReleaseEvent(None self)"""
        return QMouseEvent()
    def mouseMoveEvent(self):
        """QMouseEvent QLineEdit.mouseMoveEvent(None self)"""
        return QMouseEvent()
    def mousePressEvent(self):
        """QMouseEvent QLineEdit.mousePressEvent(None self)"""
        return QMouseEvent()
    def initStyleOption(self, _option):
        """None QLineEdit.initStyleOption(None self, QStyleOptionFrame _option)"""
        return None
    def createStandardContextMenu(self):
        """QMenu QLineEdit.createStandardContextMenu(None self)"""
        return QMenu()
    def insert(self):
        """QString QLineEdit.insert(None self)"""
        return QString()
    def deselect(self):
        """None QLineEdit.deselect(None self)"""
        return None
    def paste(self):
        """None QLineEdit.paste(None self)"""
        return None
    def copy(self):
        """None QLineEdit.copy(None self)"""
        return None
    def cut(self):
        """None QLineEdit.cut(None self)"""
        return None
    def redo(self):
        """None QLineEdit.redo(None self)"""
        return None
    def undo(self):
        """None QLineEdit.undo(None self)"""
        return None
    def selectAll(self):
        """None QLineEdit.selectAll(None self)"""
        return None
    def clear(self):
        """None QLineEdit.clear(None self)"""
        return None
    def setText(self):
        """QString QLineEdit.setText(None self)"""
        return QString()
    def hasAcceptableInput(self):
        """bool QLineEdit.hasAcceptableInput(None self)"""
        return bool()
    def setInputMask(self, _inputMask):
        """None QLineEdit.setInputMask(None self, QString _inputMask)"""
        return None
    def inputMask(self):
        """QString QLineEdit.inputMask(None self)"""
        return QString()
    def dragEnabled(self):
        """bool QLineEdit.dragEnabled(None self)"""
        return bool()
    def setDragEnabled(self, _b):
        """None QLineEdit.setDragEnabled(None self, bool _b)"""
        return None
    def isRedoAvailable(self):
        """bool QLineEdit.isRedoAvailable(None self)"""
        return bool()
    def isUndoAvailable(self):
        """bool QLineEdit.isUndoAvailable(None self)"""
        return bool()
    def selectionStart(self):
        """int QLineEdit.selectionStart(None self)"""
        return int()
    def selectedText(self):
        """QString QLineEdit.selectedText(None self)"""
        return QString()
    def hasSelectedText(self):
        """bool QLineEdit.hasSelectedText(None self)"""
        return bool()
    def setSelection(self):
        """int QLineEdit.setSelection(None self)"""
        return int()
    def setModified(self):
        """bool QLineEdit.setModified(None self)"""
        return bool()
    def isModified(self):
        """bool QLineEdit.isModified(None self)"""
        return bool()
    def end(self, _mark):
        """None QLineEdit.end(None self, bool _mark)"""
        return None
    def home(self, _mark):
        """None QLineEdit.home(None self, bool _mark)"""
        return None
    def del_(self):
        """None QLineEdit.del_(None self)"""
        return None
    def backspace(self):
        """None QLineEdit.backspace(None self)"""
        return None
    def cursorWordBackward(self, _mark):
        """None QLineEdit.cursorWordBackward(None self, bool _mark)"""
        return None
    def cursorWordForward(self, _mark):
        """None QLineEdit.cursorWordForward(None self, bool _mark)"""
        return None
    def cursorBackward(self, _mark, _steps):
        """None QLineEdit.cursorBackward(None self, bool _mark, int _steps)"""
        return None
    def cursorForward(self, _mark, _steps):
        """None QLineEdit.cursorForward(None self, bool _mark, int _steps)"""
        return None
    def alignment(self):
        """Qt.Alignment QLineEdit.alignment(None self)"""
        return Qt.Alignment()
    def setAlignment(self, _flag):
        """None QLineEdit.setAlignment(None self, Qt.Alignment _flag)"""
        return None
    def cursorPositionAt(self, _pos):
        """int QLineEdit.cursorPositionAt(None self, QPoint _pos)"""
        return int()
    def setCursorPosition(self):
        """int QLineEdit.setCursorPosition(None self)"""
        return int()
    def cursorPosition(self):
        """int QLineEdit.cursorPosition(None self)"""
        return int()
    def minimumSizeHint(self):
        """QSize QLineEdit.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QLineEdit.sizeHint(None self)"""
        return QSize()
    def validator(self):
        """QValidator QLineEdit.validator(None self)"""
        return QValidator()
    def setValidator(self):
        """QValidator QLineEdit.setValidator(None self)"""
        return QValidator()
    def setReadOnly(self):
        """bool QLineEdit.setReadOnly(None self)"""
        return bool()
    def isReadOnly(self):
        """bool QLineEdit.isReadOnly(None self)"""
        return bool()
    def setEchoMode(self):
        """QLineEdit.EchoMode QLineEdit.setEchoMode(None self)"""
        return QLineEdit.EchoMode()
    def echoMode(self):
        """QLineEdit.EchoMode QLineEdit.echoMode(None self)"""
        return QLineEdit.EchoMode()
    def hasFrame(self):
        """bool QLineEdit.hasFrame(None self)"""
        return bool()
    def setFrame(self):
        """bool QLineEdit.setFrame(None self)"""
        return bool()
    def setMaxLength(self):
        """int QLineEdit.setMaxLength(None self)"""
        return int()
    def maxLength(self):
        """int QLineEdit.maxLength(None self)"""
        return int()
    def displayText(self):
        """QString QLineEdit.displayText(None self)"""
        return QString()
    def text(self):
        """QString QLineEdit.text(None self)"""
        return QString()


class QListView(QAbstractItemView):
    """"""
    ListMode = int() # QListView.ViewMode enum
    IconMode = int() # QListView.ViewMode enum

    SinglePass = int() # QListView.LayoutMode enum
    Batched = int() # QListView.LayoutMode enum

    Fixed = int() # QListView.ResizeMode enum
    Adjust = int() # QListView.ResizeMode enum

    LeftToRight = int() # QListView.Flow enum
    TopToBottom = int() # QListView.Flow enum

    Static = int() # QListView.Movement enum
    Free = int() # QListView.Movement enum
    Snap = int() # QListView.Movement enum

    def __init__(self, _parent):
        """None QListView.__init__(None self, QWidget _parent)"""
        return None
    def currentChanged(self, _current, _previous):
        """None QListView.currentChanged(None self, QModelIndex _current, QModelIndex _previous)"""
        return None
    def selectionChanged(self, _selected, _deselected):
        """None QListView.selectionChanged(None self, QItemSelection _selected, QItemSelection _deselected)"""
        return None
    def isSelectionRectVisible(self):
        """bool QListView.isSelectionRectVisible(None self)"""
        return bool()
    def setSelectionRectVisible(self, _show):
        """None QListView.setSelectionRectVisible(None self, bool _show)"""
        return None
    def wordWrap(self):
        """bool QListView.wordWrap(None self)"""
        return bool()
    def setWordWrap(self, _on):
        """None QListView.setWordWrap(None self, bool _on)"""
        return None
    def batchSize(self):
        """int QListView.batchSize(None self)"""
        return int()
    def setBatchSize(self, _batchSize):
        """None QListView.setBatchSize(None self, int _batchSize)"""
        return None
    def isIndexHidden(self, _index):
        """bool QListView.isIndexHidden(None self, QModelIndex _index)"""
        return bool()
    def updateGeometries(self):
        """None QListView.updateGeometries(None self)"""
        return None
    def selectedIndexes(self):
        """list-of-QModelIndex QListView.selectedIndexes(None self)"""
        return [QModelIndex()]
    def visualRegionForSelection(self, _selection):
        """QRegion QListView.visualRegionForSelection(None self, QItemSelection _selection)"""
        return QRegion()
    def setSelection(self, _rect, _command):
        """None QListView.setSelection(None self, QRect _rect, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def setPositionForIndex(self, _position, _index):
        """None QListView.setPositionForIndex(None self, QPoint _position, QModelIndex _index)"""
        return None
    def rectForIndex(self, _index):
        """QRect QListView.rectForIndex(None self, QModelIndex _index)"""
        return QRect()
    def moveCursor(self, _cursorAction, _modifiers):
        """QModelIndex QListView.moveCursor(None self, QAbstractItemView.CursorAction _cursorAction, Qt.KeyboardModifiers _modifiers)"""
        return QModelIndex()
    def verticalOffset(self):
        """int QListView.verticalOffset(None self)"""
        return int()
    def horizontalOffset(self):
        """int QListView.horizontalOffset(None self)"""
        return int()
    def paintEvent(self, _e):
        """None QListView.paintEvent(None self, QPaintEvent _e)"""
        return None
    def viewOptions(self):
        """QStyleOptionViewItem QListView.viewOptions(None self)"""
        return QStyleOptionViewItem()
    def startDrag(self, _supportedActions):
        """None QListView.startDrag(None self, Qt.DropActions _supportedActions)"""
        return None
    def dropEvent(self, _e):
        """None QListView.dropEvent(None self, QDropEvent _e)"""
        return None
    def dragLeaveEvent(self, _e):
        """None QListView.dragLeaveEvent(None self, QDragLeaveEvent _e)"""
        return None
    def dragMoveEvent(self, _e):
        """None QListView.dragMoveEvent(None self, QDragMoveEvent _e)"""
        return None
    def resizeEvent(self, _e):
        """None QListView.resizeEvent(None self, QResizeEvent _e)"""
        return None
    def timerEvent(self, _e):
        """None QListView.timerEvent(None self, QTimerEvent _e)"""
        return None
    def mouseReleaseEvent(self, _e):
        """None QListView.mouseReleaseEvent(None self, QMouseEvent _e)"""
        return None
    def mouseMoveEvent(self, _e):
        """None QListView.mouseMoveEvent(None self, QMouseEvent _e)"""
        return None
    def event(self, _e):
        """bool QListView.event(None self, QEvent _e)"""
        return bool()
    def rowsAboutToBeRemoved(self, _parent, _start, _end):
        """None QListView.rowsAboutToBeRemoved(None self, QModelIndex _parent, int _start, int _end)"""
        return None
    def rowsInserted(self, _parent, _start, _end):
        """None QListView.rowsInserted(None self, QModelIndex _parent, int _start, int _end)"""
        return None
    def dataChanged(self, _topLeft, _bottomRight):
        """None QListView.dataChanged(None self, QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None
    def scrollContentsBy(self, _dx, _dy):
        """None QListView.scrollContentsBy(None self, int _dx, int _dy)"""
        return None
    def setRootIndex(self, _index):
        """None QListView.setRootIndex(None self, QModelIndex _index)"""
        return None
    def reset(self):
        """None QListView.reset(None self)"""
        return None
    def doItemsLayout(self):
        """None QListView.doItemsLayout(None self)"""
        return None
    def indexAt(self, _p):
        """QModelIndex QListView.indexAt(None self, QPoint _p)"""
        return QModelIndex()
    def scrollTo(self, _index, _hint):
        """None QListView.scrollTo(None self, QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def visualRect(self, _index):
        """QRect QListView.visualRect(None self, QModelIndex _index)"""
        return QRect()
    def uniformItemSizes(self):
        """bool QListView.uniformItemSizes(None self)"""
        return bool()
    def setUniformItemSizes(self, _enable):
        """None QListView.setUniformItemSizes(None self, bool _enable)"""
        return None
    def modelColumn(self):
        """int QListView.modelColumn(None self)"""
        return int()
    def setModelColumn(self, _column):
        """None QListView.setModelColumn(None self, int _column)"""
        return None
    def setRowHidden(self, _row, _hide):
        """None QListView.setRowHidden(None self, int _row, bool _hide)"""
        return None
    def isRowHidden(self, _row):
        """bool QListView.isRowHidden(None self, int _row)"""
        return bool()
    def clearPropertyFlags(self):
        """None QListView.clearPropertyFlags(None self)"""
        return None
    def viewMode(self):
        """QListView.ViewMode QListView.viewMode(None self)"""
        return QListView.ViewMode()
    def setViewMode(self, _mode):
        """None QListView.setViewMode(None self, QListView.ViewMode _mode)"""
        return None
    def gridSize(self):
        """QSize QListView.gridSize(None self)"""
        return QSize()
    def setGridSize(self, _size):
        """None QListView.setGridSize(None self, QSize _size)"""
        return None
    def spacing(self):
        """int QListView.spacing(None self)"""
        return int()
    def setSpacing(self, _space):
        """None QListView.setSpacing(None self, int _space)"""
        return None
    def layoutMode(self):
        """QListView.LayoutMode QListView.layoutMode(None self)"""
        return QListView.LayoutMode()
    def setLayoutMode(self, _mode):
        """None QListView.setLayoutMode(None self, QListView.LayoutMode _mode)"""
        return None
    def resizeMode(self):
        """QListView.ResizeMode QListView.resizeMode(None self)"""
        return QListView.ResizeMode()
    def setResizeMode(self, _mode):
        """None QListView.setResizeMode(None self, QListView.ResizeMode _mode)"""
        return None
    def isWrapping(self):
        """bool QListView.isWrapping(None self)"""
        return bool()
    def setWrapping(self, _enable):
        """None QListView.setWrapping(None self, bool _enable)"""
        return None
    def flow(self):
        """QListView.Flow QListView.flow(None self)"""
        return QListView.Flow()
    def setFlow(self, _flow):
        """None QListView.setFlow(None self, QListView.Flow _flow)"""
        return None
    def movement(self):
        """QListView.Movement QListView.movement(None self)"""
        return QListView.Movement()
    def setMovement(self, _movement):
        """None QListView.setMovement(None self, QListView.Movement _movement)"""
        return None


class QListWidgetItem():
    """"""
    Type = int() # QListWidgetItem.ItemType enum
    UserType = int() # QListWidgetItem.ItemType enum

    def __init__(self, _parent, _type):
        """None QListWidgetItem.__init__(None self, QListWidget _parent, int _type)"""
        return None
    def __init__(self, _text, _parent, _type):
        """None QListWidgetItem.__init__(None self, QString _text, QListWidget _parent, int _type)"""
        return None
    def __init__(self, _icon, _text, _parent, _type):
        """None QListWidgetItem.__init__(None self, QIcon _icon, QString _text, QListWidget _parent, int _type)"""
        return None
    def __init__(self, _other):
        """None QListWidgetItem.__init__(None self, QListWidgetItem _other)"""
        return None
    def __ge__(self, _other):
        """bool QListWidgetItem.__ge__(None self, QListWidgetItem _other)"""
        return bool()
    def isHidden(self):
        """bool QListWidgetItem.isHidden(None self)"""
        return bool()
    def setHidden(self, _ahide):
        """None QListWidgetItem.setHidden(None self, bool _ahide)"""
        return None
    def isSelected(self):
        """bool QListWidgetItem.isSelected(None self)"""
        return bool()
    def setSelected(self, _aselect):
        """None QListWidgetItem.setSelected(None self, bool _aselect)"""
        return None
    def setForeground(self, _brush):
        """None QListWidgetItem.setForeground(None self, QBrush _brush)"""
        return None
    def foreground(self):
        """QBrush QListWidgetItem.foreground(None self)"""
        return QBrush()
    def setBackground(self, _brush):
        """None QListWidgetItem.setBackground(None self, QBrush _brush)"""
        return None
    def background(self):
        """QBrush QListWidgetItem.background(None self)"""
        return QBrush()
    def setFont(self, _afont):
        """None QListWidgetItem.setFont(None self, QFont _afont)"""
        return None
    def setWhatsThis(self, _awhatsThis):
        """None QListWidgetItem.setWhatsThis(None self, QString _awhatsThis)"""
        return None
    def setToolTip(self, _atoolTip):
        """None QListWidgetItem.setToolTip(None self, QString _atoolTip)"""
        return None
    def setStatusTip(self, _astatusTip):
        """None QListWidgetItem.setStatusTip(None self, QString _astatusTip)"""
        return None
    def setIcon(self, _aicon):
        """None QListWidgetItem.setIcon(None self, QIcon _aicon)"""
        return None
    def setText(self, _atext):
        """None QListWidgetItem.setText(None self, QString _atext)"""
        return None
    def setFlags(self, _aflags):
        """None QListWidgetItem.setFlags(None self, Qt.ItemFlags _aflags)"""
        return None
    def type(self):
        """int QListWidgetItem.type(None self)"""
        return int()
    def write(self, _out):
        """None QListWidgetItem.write(None self, QDataStream _out)"""
        return None
    def read(self, _in):
        """None QListWidgetItem.read(None self, QDataStream _in)"""
        return None
    def __lt__(self, _other):
        """bool QListWidgetItem.__lt__(None self, QListWidgetItem _other)"""
        return bool()
    def setData(self, _role, _value):
        """None QListWidgetItem.setData(None self, int _role, QVariant _value)"""
        return None
    def data(self, _role):
        """QVariant QListWidgetItem.data(None self, int _role)"""
        return QVariant()
    def setSizeHint(self, _size):
        """None QListWidgetItem.setSizeHint(None self, QSize _size)"""
        return None
    def sizeHint(self):
        """QSize QListWidgetItem.sizeHint(None self)"""
        return QSize()
    def setCheckState(self, _state):
        """None QListWidgetItem.setCheckState(None self, Qt.CheckState _state)"""
        return None
    def checkState(self):
        """Qt.CheckState QListWidgetItem.checkState(None self)"""
        return Qt.CheckState()
    def setTextColor(self, _color):
        """None QListWidgetItem.setTextColor(None self, QColor _color)"""
        return None
    def textColor(self):
        """QColor QListWidgetItem.textColor(None self)"""
        return QColor()
    def setBackgroundColor(self, _color):
        """None QListWidgetItem.setBackgroundColor(None self, QColor _color)"""
        return None
    def backgroundColor(self):
        """QColor QListWidgetItem.backgroundColor(None self)"""
        return QColor()
    def setTextAlignment(self, _alignment):
        """None QListWidgetItem.setTextAlignment(None self, int _alignment)"""
        return None
    def textAlignment(self):
        """int QListWidgetItem.textAlignment(None self)"""
        return int()
    def font(self):
        """QFont QListWidgetItem.font(None self)"""
        return QFont()
    def whatsThis(self):
        """QString QListWidgetItem.whatsThis(None self)"""
        return QString()
    def toolTip(self):
        """QString QListWidgetItem.toolTip(None self)"""
        return QString()
    def statusTip(self):
        """QString QListWidgetItem.statusTip(None self)"""
        return QString()
    def icon(self):
        """QIcon QListWidgetItem.icon(None self)"""
        return QIcon()
    def text(self):
        """QString QListWidgetItem.text(None self)"""
        return QString()
    def flags(self):
        """Qt.ItemFlags QListWidgetItem.flags(None self)"""
        return Qt.ItemFlags()
    def listWidget(self):
        """QListWidget QListWidgetItem.listWidget(None self)"""
        return QListWidget()
    def clone(self):
        """QListWidgetItem QListWidgetItem.clone(None self)"""
        return QListWidgetItem()


class QListWidget(QListView):
    """"""
    def __init__(self, _parent):
        """None QListWidget.__init__(None self, QWidget _parent)"""
        return None
    def removeItemWidget(self, _aItem):
        """None QListWidget.removeItemWidget(None self, QListWidgetItem _aItem)"""
        return None
    def dropEvent(self, _event):
        """None QListWidget.dropEvent(None self, QDropEvent _event)"""
        return None
    def isSortingEnabled(self):
        """bool QListWidget.isSortingEnabled(None self)"""
        return bool()
    def setSortingEnabled(self, _enable):
        """None QListWidget.setSortingEnabled(None self, bool _enable)"""
        return None
    def event(self, _e):
        """bool QListWidget.event(None self, QEvent _e)"""
        return bool()
    def itemFromIndex(self, _index):
        """QListWidgetItem QListWidget.itemFromIndex(None self, QModelIndex _index)"""
        return QListWidgetItem()
    def indexFromItem(self, _item):
        """QModelIndex QListWidget.indexFromItem(None self, QListWidgetItem _item)"""
        return QModelIndex()
    def items(self, _data):
        """list-of-QListWidgetItem QListWidget.items(None self, QMimeData _data)"""
        return [QListWidgetItem()]
    def supportedDropActions(self):
        """Qt.DropActions QListWidget.supportedDropActions(None self)"""
        return Qt.DropActions()
    def dropMimeData(self, _index, _data, _action):
        """bool QListWidget.dropMimeData(None self, int _index, QMimeData _data, Qt.DropAction _action)"""
        return bool()
    def mimeData(self, _items):
        """QMimeData QListWidget.mimeData(None self, list-of-QListWidgetItem _items)"""
        return QMimeData()
    def mimeTypes(self):
        """QStringList QListWidget.mimeTypes(None self)"""
        return QStringList()
    def scrollToItem(self, _item, _hint):
        """None QListWidget.scrollToItem(None self, QListWidgetItem _item, QAbstractItemView.ScrollHint _hint)"""
        return None
    def clear(self):
        """None QListWidget.clear(None self)"""
        return None
    def setItemHidden(self, _item, _hide):
        """None QListWidget.setItemHidden(None self, QListWidgetItem _item, bool _hide)"""
        return None
    def isItemHidden(self, _item):
        """bool QListWidget.isItemHidden(None self, QListWidgetItem _item)"""
        return bool()
    def findItems(self, _text, _flags):
        """list-of-QListWidgetItem QListWidget.findItems(None self, QString _text, Qt.MatchFlags _flags)"""
        return [QListWidgetItem()]
    def selectedItems(self):
        """list-of-QListWidgetItem QListWidget.selectedItems(None self)"""
        return [QListWidgetItem()]
    def setItemSelected(self, _item, _select):
        """None QListWidget.setItemSelected(None self, QListWidgetItem _item, bool _select)"""
        return None
    def isItemSelected(self, _item):
        """bool QListWidget.isItemSelected(None self, QListWidgetItem _item)"""
        return bool()
    def closePersistentEditor(self, _item):
        """None QListWidget.closePersistentEditor(None self, QListWidgetItem _item)"""
        return None
    def openPersistentEditor(self, _item):
        """None QListWidget.openPersistentEditor(None self, QListWidgetItem _item)"""
        return None
    def editItem(self, _item):
        """None QListWidget.editItem(None self, QListWidgetItem _item)"""
        return None
    def sortItems(self, _order):
        """None QListWidget.sortItems(None self, Qt.SortOrder _order)"""
        return None
    def visualItemRect(self, _item):
        """QRect QListWidget.visualItemRect(None self, QListWidgetItem _item)"""
        return QRect()
    def setItemWidget(self, _item, _widget):
        """None QListWidget.setItemWidget(None self, QListWidgetItem _item, QWidget _widget)"""
        return None
    def itemWidget(self, _item):
        """QWidget QListWidget.itemWidget(None self, QListWidgetItem _item)"""
        return QWidget()
    def itemAt(self, _p):
        """QListWidgetItem QListWidget.itemAt(None self, QPoint _p)"""
        return QListWidgetItem()
    def itemAt(self, _ax, _ay):
        """QListWidgetItem QListWidget.itemAt(None self, int _ax, int _ay)"""
        return QListWidgetItem()
    def setCurrentRow(self, _row):
        """None QListWidget.setCurrentRow(None self, int _row)"""
        return None
    def setCurrentRow(self, _row, _command):
        """None QListWidget.setCurrentRow(None self, int _row, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def currentRow(self):
        """int QListWidget.currentRow(None self)"""
        return int()
    def setCurrentItem(self, _item):
        """None QListWidget.setCurrentItem(None self, QListWidgetItem _item)"""
        return None
    def setCurrentItem(self, _item, _command):
        """None QListWidget.setCurrentItem(None self, QListWidgetItem _item, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def currentItem(self):
        """QListWidgetItem QListWidget.currentItem(None self)"""
        return QListWidgetItem()
    def __len__(self):
        """ QListWidget.__len__(None self)"""
        return ()
    def count(self):
        """int QListWidget.count(None self)"""
        return int()
    def takeItem(self, _row):
        """QListWidgetItem QListWidget.takeItem(None self, int _row)"""
        return QListWidgetItem()
    def addItems(self, _labels):
        """None QListWidget.addItems(None self, QStringList _labels)"""
        return None
    def addItem(self, _aitem):
        """None QListWidget.addItem(None self, QListWidgetItem _aitem)"""
        return None
    def addItem(self, _label):
        """None QListWidget.addItem(None self, QString _label)"""
        return None
    def insertItems(self, _row, _labels):
        """None QListWidget.insertItems(None self, int _row, QStringList _labels)"""
        return None
    def insertItem(self, _row, _item):
        """None QListWidget.insertItem(None self, int _row, QListWidgetItem _item)"""
        return None
    def insertItem(self, _row, _label):
        """None QListWidget.insertItem(None self, int _row, QString _label)"""
        return None
    def row(self, _item):
        """int QListWidget.row(None self, QListWidgetItem _item)"""
        return int()
    def item(self, _row):
        """QListWidgetItem QListWidget.item(None self, int _row)"""
        return QListWidgetItem()


class QMainWindow(QWidget):
    """"""
    AnimatedDocks = int() # QMainWindow.DockOption enum
    AllowNestedDocks = int() # QMainWindow.DockOption enum
    AllowTabbedDocks = int() # QMainWindow.DockOption enum
    ForceTabbedDocks = int() # QMainWindow.DockOption enum
    VerticalTabs = int() # QMainWindow.DockOption enum

    def __init__(self, _parent, _flags):
        """None QMainWindow.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def tabifiedDockWidgets(self, _dockwidget):
        """list-of-QDockWidget QMainWindow.tabifiedDockWidgets(None self, QDockWidget _dockwidget)"""
        return [QDockWidget()]
    def setTabPosition(self, _areas, _tabPosition):
        """None QMainWindow.setTabPosition(None self, Qt.DockWidgetAreas _areas, QTabWidget.TabPosition _tabPosition)"""
        return None
    def tabPosition(self, _area):
        """QTabWidget.TabPosition QMainWindow.tabPosition(None self, Qt.DockWidgetArea _area)"""
        return QTabWidget.TabPosition()
    def setTabShape(self, _tabShape):
        """None QMainWindow.setTabShape(None self, QTabWidget.TabShape _tabShape)"""
        return None
    def tabShape(self):
        """QTabWidget.TabShape QMainWindow.tabShape(None self)"""
        return QTabWidget.TabShape()
    def setDocumentMode(self, _enabled):
        """None QMainWindow.setDocumentMode(None self, bool _enabled)"""
        return None
    def documentMode(self):
        """bool QMainWindow.documentMode(None self)"""
        return bool()
    def restoreDockWidget(self, _dockwidget):
        """bool QMainWindow.restoreDockWidget(None self, QDockWidget _dockwidget)"""
        return bool()
    def unifiedTitleAndToolBarOnMac(self):
        """bool QMainWindow.unifiedTitleAndToolBarOnMac(None self)"""
        return bool()
    def setUnifiedTitleAndToolBarOnMac(self, _set):
        """None QMainWindow.setUnifiedTitleAndToolBarOnMac(None self, bool _set)"""
        return None
    def toolBarBreak(self, _toolbar):
        """bool QMainWindow.toolBarBreak(None self, QToolBar _toolbar)"""
        return bool()
    def removeToolBarBreak(self, _before):
        """None QMainWindow.removeToolBarBreak(None self, QToolBar _before)"""
        return None
    def dockOptions(self):
        """QMainWindow.DockOptions QMainWindow.dockOptions(None self)"""
        return QMainWindow.DockOptions()
    def setDockOptions(self, _options):
        """None QMainWindow.setDockOptions(None self, QMainWindow.DockOptions _options)"""
        return None
    def tabifyDockWidget(self, _first, _second):
        """None QMainWindow.tabifyDockWidget(None self, QDockWidget _first, QDockWidget _second)"""
        return None
    def setMenuWidget(self, _menubar):
        """None QMainWindow.setMenuWidget(None self, QWidget _menubar)"""
        return None
    def menuWidget(self):
        """QWidget QMainWindow.menuWidget(None self)"""
        return QWidget()
    def isSeparator(self, _pos):
        """bool QMainWindow.isSeparator(None self, QPoint _pos)"""
        return bool()
    def isDockNestingEnabled(self):
        """bool QMainWindow.isDockNestingEnabled(None self)"""
        return bool()
    def isAnimated(self):
        """bool QMainWindow.isAnimated(None self)"""
        return bool()
    def event(self, _event):
        """bool QMainWindow.event(None self, QEvent _event)"""
        return bool()
    def contextMenuEvent(self, _event):
        """None QMainWindow.contextMenuEvent(None self, QContextMenuEvent _event)"""
        return None
    def setDockNestingEnabled(self, _enabled):
        """None QMainWindow.setDockNestingEnabled(None self, bool _enabled)"""
        return None
    def setAnimated(self, _enabled):
        """None QMainWindow.setAnimated(None self, bool _enabled)"""
        return None
    def createPopupMenu(self):
        """QMenu QMainWindow.createPopupMenu(None self)"""
        return QMenu()
    def restoreState(self, _state, _version):
        """bool QMainWindow.restoreState(None self, QByteArray _state, int _version)"""
        return bool()
    def saveState(self, _version):
        """QByteArray QMainWindow.saveState(None self, int _version)"""
        return QByteArray()
    def dockWidgetArea(self, _dockwidget):
        """Qt.DockWidgetArea QMainWindow.dockWidgetArea(None self, QDockWidget _dockwidget)"""
        return Qt.DockWidgetArea()
    def removeDockWidget(self, _dockwidget):
        """None QMainWindow.removeDockWidget(None self, QDockWidget _dockwidget)"""
        return None
    def splitDockWidget(self, _after, _dockwidget, _orientation):
        """None QMainWindow.splitDockWidget(None self, QDockWidget _after, QDockWidget _dockwidget, Qt.Orientation _orientation)"""
        return None
    def addDockWidget(self, _area, _dockwidget):
        """None QMainWindow.addDockWidget(None self, Qt.DockWidgetArea _area, QDockWidget _dockwidget)"""
        return None
    def addDockWidget(self, _area, _dockwidget, _orientation):
        """None QMainWindow.addDockWidget(None self, Qt.DockWidgetArea _area, QDockWidget _dockwidget, Qt.Orientation _orientation)"""
        return None
    def toolBarArea(self, _toolbar):
        """Qt.ToolBarArea QMainWindow.toolBarArea(None self, QToolBar _toolbar)"""
        return Qt.ToolBarArea()
    def removeToolBar(self, _toolbar):
        """None QMainWindow.removeToolBar(None self, QToolBar _toolbar)"""
        return None
    def insertToolBar(self, _before, _toolbar):
        """None QMainWindow.insertToolBar(None self, QToolBar _before, QToolBar _toolbar)"""
        return None
    def addToolBar(self, _area, _toolbar):
        """None QMainWindow.addToolBar(None self, Qt.ToolBarArea _area, QToolBar _toolbar)"""
        return None
    def addToolBar(self, _toolbar):
        """None QMainWindow.addToolBar(None self, QToolBar _toolbar)"""
        return None
    def addToolBar(self, _title):
        """QToolBar QMainWindow.addToolBar(None self, QString _title)"""
        return QToolBar()
    def insertToolBarBreak(self, _before):
        """None QMainWindow.insertToolBarBreak(None self, QToolBar _before)"""
        return None
    def addToolBarBreak(self, _area):
        """None QMainWindow.addToolBarBreak(None self, Qt.ToolBarArea _area)"""
        return None
    def corner(self, _corner):
        """Qt.DockWidgetArea QMainWindow.corner(None self, Qt.Corner _corner)"""
        return Qt.DockWidgetArea()
    def setCorner(self, _corner, _area):
        """None QMainWindow.setCorner(None self, Qt.Corner _corner, Qt.DockWidgetArea _area)"""
        return None
    def setCentralWidget(self, _widget):
        """None QMainWindow.setCentralWidget(None self, QWidget _widget)"""
        return None
    def centralWidget(self):
        """QWidget QMainWindow.centralWidget(None self)"""
        return QWidget()
    def setStatusBar(self, _statusbar):
        """None QMainWindow.setStatusBar(None self, QStatusBar _statusbar)"""
        return None
    def statusBar(self):
        """QStatusBar QMainWindow.statusBar(None self)"""
        return QStatusBar()
    def setMenuBar(self, _menubar):
        """None QMainWindow.setMenuBar(None self, QMenuBar _menubar)"""
        return None
    def menuBar(self):
        """QMenuBar QMainWindow.menuBar(None self)"""
        return QMenuBar()
    def setToolButtonStyle(self, _toolButtonStyle):
        """None QMainWindow.setToolButtonStyle(None self, Qt.ToolButtonStyle _toolButtonStyle)"""
        return None
    def toolButtonStyle(self):
        """Qt.ToolButtonStyle QMainWindow.toolButtonStyle(None self)"""
        return Qt.ToolButtonStyle()
    def setIconSize(self, _iconSize):
        """None QMainWindow.setIconSize(None self, QSize _iconSize)"""
        return None
    def iconSize(self):
        """QSize QMainWindow.iconSize(None self)"""
        return QSize()


class QMatrix():
    """"""
    def __init__(self):
        """None QMatrix.__init__(None self)"""
        return None
    def __init__(self, _m11, _m12, _m21, _m22, _dx, _dy):
        """None QMatrix.__init__(None self, float _m11, float _m12, float _m21, float _m22, float _dx, float _dy)"""
        return None
    def __init__(self, _matrix):
        """None QMatrix.__init__(None self, QMatrix _matrix)"""
        return None
    def determinant(self):
        """float QMatrix.determinant(None self)"""
        return float()
    def isIdentity(self):
        """bool QMatrix.isIdentity(None self)"""
        return bool()
    def __mul__(self, _o):
        """QMatrix QMatrix.__mul__(None self, QMatrix _o)"""
        return QMatrix()
    def __imul__(self):
        """QMatrix QMatrix.__imul__(None self)"""
        return QMatrix()
    def __ne__(self):
        """QMatrix QMatrix.__ne__(None self)"""
        return QMatrix()
    def __eq__(self):
        """QMatrix QMatrix.__eq__(None self)"""
        return QMatrix()
    def inverted(self, _invertible):
        """QMatrix QMatrix.inverted(None self, bool _invertible)"""
        return QMatrix()
    def det(self):
        """float QMatrix.det(None self)"""
        return float()
    def isInvertible(self):
        """bool QMatrix.isInvertible(None self)"""
        return bool()
    def rotate(self, _a):
        """QMatrix QMatrix.rotate(None self, float _a)"""
        return QMatrix()
    def shear(self, _sh, _sv):
        """QMatrix QMatrix.shear(None self, float _sh, float _sv)"""
        return QMatrix()
    def scale(self, _sx, _sy):
        """QMatrix QMatrix.scale(None self, float _sx, float _sy)"""
        return QMatrix()
    def translate(self, _dx, _dy):
        """QMatrix QMatrix.translate(None self, float _dx, float _dy)"""
        return QMatrix()
    def reset(self):
        """None QMatrix.reset(None self)"""
        return None
    def mapToPolygon(self, _r):
        """QPolygon QMatrix.mapToPolygon(None self, QRect _r)"""
        return QPolygon()
    def mapRect(self):
        """QRect QMatrix.mapRect(None self)"""
        return QRect()
    def mapRect(self):
        """QRectF QMatrix.mapRect(None self)"""
        return QRectF()
    def map(self, _x, _y, _tx, _ty):
        """None QMatrix.map(None self, int _x, int _y, int _tx, int _ty)"""
        return None
    def map(self, _x, _y, _tx, _ty):
        """None QMatrix.map(None self, float _x, float _y, float _tx, float _ty)"""
        return None
    def map(self, _p):
        """QPoint QMatrix.map(None self, QPoint _p)"""
        return QPoint()
    def map(self, _p):
        """QPointF QMatrix.map(None self, QPointF _p)"""
        return QPointF()
    def map(self, _l):
        """QLine QMatrix.map(None self, QLine _l)"""
        return QLine()
    def map(self, _l):
        """QLineF QMatrix.map(None self, QLineF _l)"""
        return QLineF()
    def map(self, _a):
        """QPolygonF QMatrix.map(None self, QPolygonF _a)"""
        return QPolygonF()
    def map(self, _a):
        """QPolygon QMatrix.map(None self, QPolygon _a)"""
        return QPolygon()
    def map(self, _r):
        """QRegion QMatrix.map(None self, QRegion _r)"""
        return QRegion()
    def map(self, _p):
        """QPainterPath QMatrix.map(None self, QPainterPath _p)"""
        return QPainterPath()
    def dy(self):
        """float QMatrix.dy(None self)"""
        return float()
    def dx(self):
        """float QMatrix.dx(None self)"""
        return float()
    def m22(self):
        """float QMatrix.m22(None self)"""
        return float()
    def m21(self):
        """float QMatrix.m21(None self)"""
        return float()
    def m12(self):
        """float QMatrix.m12(None self)"""
        return float()
    def m11(self):
        """float QMatrix.m11(None self)"""
        return float()
    def setMatrix(self, _m11, _m12, _m21, _m22, _dx, _dy):
        """None QMatrix.setMatrix(None self, float _m11, float _m12, float _m21, float _m22, float _dx, float _dy)"""
        return None


class QMatrix4x4():
    """"""
    def __init__(self):
        """None QMatrix4x4.__init__(None self)"""
        return None
    def __init__(self, _values):
        """None QMatrix4x4.__init__(None self, sequence-of-float _values)"""
        return None
    def __init__(self, _m11, _m12, _m13, _m14, _m21, _m22, _m23, _m24, _m31, _m32, _m33, _m34, _m41, _m42, _m43, _m44):
        """None QMatrix4x4.__init__(None self, float _m11, float _m12, float _m13, float _m14, float _m21, float _m22, float _m23, float _m24, float _m31, float _m32, float _m33, float _m34, float _m41, float _m42, float _m43, float _m44)"""
        return None
    def __init__(self, _transform):
        """None QMatrix4x4.__init__(None self, QTransform _transform)"""
        return None
    def __init__(self, _matrix):
        """None QMatrix4x4.__init__(None self, QMatrix _matrix)"""
        return None
    def __init__(self):
        """QMatrix4x4 QMatrix4x4.__init__(None self)"""
        return QMatrix4x4()
    def __mul__(self, _m2):
        """QMatrix4x4 QMatrix4x4.__mul__(None self, QMatrix4x4 _m2)"""
        return QMatrix4x4()
    def __mul__(self, _vector):
        """QVector3D QMatrix4x4.__mul__(None self, QVector3D _vector)"""
        return QVector3D()
    def __mul__(self, _vector):
        """QVector4D QMatrix4x4.__mul__(None self, QVector4D _vector)"""
        return QVector4D()
    def __mul__(self, _point):
        """QPoint QMatrix4x4.__mul__(None self, QPoint _point)"""
        return QPoint()
    def __mul__(self, _point):
        """QPointF QMatrix4x4.__mul__(None self, QPointF _point)"""
        return QPointF()
    def __mul__(self, _matrix):
        """QMatrix4x4 QMatrix4x4.__mul__(None self, QMatrix4x4 _matrix)"""
        return QMatrix4x4()
    def __mul__(self, _factor):
        """QMatrix4x4 QMatrix4x4.__mul__(None self, float _factor)"""
        return QMatrix4x4()
    def __div__(self, _divisor):
        """QMatrix4x4 QMatrix4x4.__div__(None self, float _divisor)"""
        return QMatrix4x4()
    def __add__(self, _m2):
        """QMatrix4x4 QMatrix4x4.__add__(None self, QMatrix4x4 _m2)"""
        return QMatrix4x4()
    def __sub__(self, _m2):
        """QMatrix4x4 QMatrix4x4.__sub__(None self, QMatrix4x4 _m2)"""
        return QMatrix4x4()
    def __neg__(self):
        """QMatrix4x4 QMatrix4x4.__neg__(None self)"""
        return QMatrix4x4()
    def mapVector(self, _vector):
        """QVector3D QMatrix4x4.mapVector(None self, QVector3D _vector)"""
        return QVector3D()
    def map(self, _point):
        """QPoint QMatrix4x4.map(None self, QPoint _point)"""
        return QPoint()
    def map(self, _point):
        """QPointF QMatrix4x4.map(None self, QPointF _point)"""
        return QPointF()
    def map(self, _point):
        """QVector3D QMatrix4x4.map(None self, QVector3D _point)"""
        return QVector3D()
    def map(self, _point):
        """QVector4D QMatrix4x4.map(None self, QVector4D _point)"""
        return QVector4D()
    def __ne__(self, _other):
        """bool QMatrix4x4.__ne__(None self, QMatrix4x4 _other)"""
        return bool()
    def __eq__(self, _other):
        """bool QMatrix4x4.__eq__(None self, QMatrix4x4 _other)"""
        return bool()
    def __idiv__(self, _divisor):
        """QMatrix4x4 QMatrix4x4.__idiv__(None self, float _divisor)"""
        return QMatrix4x4()
    def __imul__(self, _other):
        """QMatrix4x4 QMatrix4x4.__imul__(None self, QMatrix4x4 _other)"""
        return QMatrix4x4()
    def __imul__(self, _factor):
        """QMatrix4x4 QMatrix4x4.__imul__(None self, float _factor)"""
        return QMatrix4x4()
    def __isub__(self, _other):
        """QMatrix4x4 QMatrix4x4.__isub__(None self, QMatrix4x4 _other)"""
        return QMatrix4x4()
    def __iadd__(self, _other):
        """QMatrix4x4 QMatrix4x4.__iadd__(None self, QMatrix4x4 _other)"""
        return QMatrix4x4()
    def fill(self, _value):
        """None QMatrix4x4.fill(None self, float _value)"""
        return None
    def setToIdentity(self):
        """None QMatrix4x4.setToIdentity(None self)"""
        return None
    def isIdentity(self):
        """bool QMatrix4x4.isIdentity(None self)"""
        return bool()
    def setRow(self, _index, _value):
        """None QMatrix4x4.setRow(None self, int _index, QVector4D _value)"""
        return None
    def row(self, _index):
        """QVector4D QMatrix4x4.row(None self, int _index)"""
        return QVector4D()
    def setColumn(self, _index, _value):
        """None QMatrix4x4.setColumn(None self, int _index, QVector4D _value)"""
        return None
    def column(self, _index):
        """QVector4D QMatrix4x4.column(None self, int _index)"""
        return QVector4D()
    def __setitem__(self):
        """float QMatrix4x4.__setitem__(None self)"""
        return float()
    def __getitem__(self):
        """object QMatrix4x4.__getitem__(None self)"""
        return object()
    def optimize(self):
        """None QMatrix4x4.optimize(None self)"""
        return None
    def data(self):
        """list-of-float QMatrix4x4.data(None self)"""
        return [float()]
    def mapRect(self, _rect):
        """QRect QMatrix4x4.mapRect(None self, QRect _rect)"""
        return QRect()
    def mapRect(self, _rect):
        """QRectF QMatrix4x4.mapRect(None self, QRectF _rect)"""
        return QRectF()
    def toTransform(self):
        """QTransform QMatrix4x4.toTransform(None self)"""
        return QTransform()
    def toTransform(self, _distanceToPlane):
        """QTransform QMatrix4x4.toTransform(None self, float _distanceToPlane)"""
        return QTransform()
    def toAffine(self):
        """QMatrix QMatrix4x4.toAffine(None self)"""
        return QMatrix()
    def copyDataTo(self):
        """list-of-float QMatrix4x4.copyDataTo(None self)"""
        return [float()]
    def flipCoordinates(self):
        """None QMatrix4x4.flipCoordinates(None self)"""
        return None
    def lookAt(self, _eye, _center, _up):
        """None QMatrix4x4.lookAt(None self, QVector3D _eye, QVector3D _center, QVector3D _up)"""
        return None
    def perspective(self, _angle, _aspect, _nearPlane, _farPlane):
        """None QMatrix4x4.perspective(None self, float _angle, float _aspect, float _nearPlane, float _farPlane)"""
        return None
    def frustum(self, _left, _right, _bottom, _top, _nearPlane, _farPlane):
        """None QMatrix4x4.frustum(None self, float _left, float _right, float _bottom, float _top, float _nearPlane, float _farPlane)"""
        return None
    def ortho(self, _rect):
        """None QMatrix4x4.ortho(None self, QRect _rect)"""
        return None
    def ortho(self, _rect):
        """None QMatrix4x4.ortho(None self, QRectF _rect)"""
        return None
    def ortho(self, _left, _right, _bottom, _top, _nearPlane, _farPlane):
        """None QMatrix4x4.ortho(None self, float _left, float _right, float _bottom, float _top, float _nearPlane, float _farPlane)"""
        return None
    def rotate(self, _angle, _vector):
        """None QMatrix4x4.rotate(None self, float _angle, QVector3D _vector)"""
        return None
    def rotate(self, _angle, _x, _y, _z):
        """None QMatrix4x4.rotate(None self, float _angle, float _x, float _y, float _z)"""
        return None
    def rotate(self, _quaternion):
        """None QMatrix4x4.rotate(None self, QQuaternion _quaternion)"""
        return None
    def translate(self, _vector):
        """None QMatrix4x4.translate(None self, QVector3D _vector)"""
        return None
    def translate(self, _x, _y):
        """None QMatrix4x4.translate(None self, float _x, float _y)"""
        return None
    def translate(self, _x, _y, _z):
        """None QMatrix4x4.translate(None self, float _x, float _y, float _z)"""
        return None
    def scale(self, _vector):
        """None QMatrix4x4.scale(None self, QVector3D _vector)"""
        return None
    def scale(self, _x, _y):
        """None QMatrix4x4.scale(None self, float _x, float _y)"""
        return None
    def scale(self, _x, _y, _z):
        """None QMatrix4x4.scale(None self, float _x, float _y, float _z)"""
        return None
    def scale(self, _factor):
        """None QMatrix4x4.scale(None self, float _factor)"""
        return None
    def normalMatrix(self):
        """QMatrix3x3 QMatrix4x4.normalMatrix(None self)"""
        return QMatrix3x3()
    def transposed(self):
        """QMatrix4x4 QMatrix4x4.transposed(None self)"""
        return QMatrix4x4()
    def inverted(self, _invertible):
        """QMatrix4x4 QMatrix4x4.inverted(None self, bool _invertible)"""
        return QMatrix4x4()
    def determinant(self):
        """float QMatrix4x4.determinant(None self)"""
        return float()
    def __repr__(self):
        """str QMatrix4x4.__repr__(None self)"""
        return str()


class QMdiArea(QAbstractScrollArea):
    """"""
    CreationOrder = int() # QMdiArea.WindowOrder enum
    StackingOrder = int() # QMdiArea.WindowOrder enum
    ActivationHistoryOrder = int() # QMdiArea.WindowOrder enum

    SubWindowView = int() # QMdiArea.ViewMode enum
    TabbedView = int() # QMdiArea.ViewMode enum

    DontMaximizeSubWindowOnActivation = int() # QMdiArea.AreaOption enum

    def __init__(self, _parent):
        """None QMdiArea.__init__(None self, QWidget _parent)"""
        return None
    def setDocumentMode(self, _enabled):
        """None QMdiArea.setDocumentMode(None self, bool _enabled)"""
        return None
    def documentMode(self):
        """bool QMdiArea.documentMode(None self)"""
        return bool()
    def tabPosition(self):
        """QTabWidget.TabPosition QMdiArea.tabPosition(None self)"""
        return QTabWidget.TabPosition()
    def setTabPosition(self, _position):
        """None QMdiArea.setTabPosition(None self, QTabWidget.TabPosition _position)"""
        return None
    def tabShape(self):
        """QTabWidget.TabShape QMdiArea.tabShape(None self)"""
        return QTabWidget.TabShape()
    def setTabShape(self, _shape):
        """None QMdiArea.setTabShape(None self, QTabWidget.TabShape _shape)"""
        return None
    def viewMode(self):
        """QMdiArea.ViewMode QMdiArea.viewMode(None self)"""
        return QMdiArea.ViewMode()
    def setViewMode(self, _mode):
        """None QMdiArea.setViewMode(None self, QMdiArea.ViewMode _mode)"""
        return None
    def setActivationOrder(self, _order):
        """None QMdiArea.setActivationOrder(None self, QMdiArea.WindowOrder _order)"""
        return None
    def activationOrder(self):
        """QMdiArea.WindowOrder QMdiArea.activationOrder(None self)"""
        return QMdiArea.WindowOrder()
    def scrollContentsBy(self, _dx, _dy):
        """None QMdiArea.scrollContentsBy(None self, int _dx, int _dy)"""
        return None
    def viewportEvent(self, _event):
        """bool QMdiArea.viewportEvent(None self, QEvent _event)"""
        return bool()
    def showEvent(self, _showEvent):
        """None QMdiArea.showEvent(None self, QShowEvent _showEvent)"""
        return None
    def timerEvent(self, _timerEvent):
        """None QMdiArea.timerEvent(None self, QTimerEvent _timerEvent)"""
        return None
    def resizeEvent(self, _resizeEvent):
        """None QMdiArea.resizeEvent(None self, QResizeEvent _resizeEvent)"""
        return None
    def childEvent(self, _childEvent):
        """None QMdiArea.childEvent(None self, QChildEvent _childEvent)"""
        return None
    def paintEvent(self, _paintEvent):
        """None QMdiArea.paintEvent(None self, QPaintEvent _paintEvent)"""
        return None
    def eventFilter(self, _object, _event):
        """bool QMdiArea.eventFilter(None self, QObject _object, QEvent _event)"""
        return bool()
    def event(self, _event):
        """bool QMdiArea.event(None self, QEvent _event)"""
        return bool()
    def setupViewport(self, _viewport):
        """None QMdiArea.setupViewport(None self, QWidget _viewport)"""
        return None
    def activatePreviousSubWindow(self):
        """None QMdiArea.activatePreviousSubWindow(None self)"""
        return None
    def activateNextSubWindow(self):
        """None QMdiArea.activateNextSubWindow(None self)"""
        return None
    def closeAllSubWindows(self):
        """None QMdiArea.closeAllSubWindows(None self)"""
        return None
    def closeActiveSubWindow(self):
        """None QMdiArea.closeActiveSubWindow(None self)"""
        return None
    def cascadeSubWindows(self):
        """None QMdiArea.cascadeSubWindows(None self)"""
        return None
    def tileSubWindows(self):
        """None QMdiArea.tileSubWindows(None self)"""
        return None
    def setActiveSubWindow(self, _window):
        """None QMdiArea.setActiveSubWindow(None self, QMdiSubWindow _window)"""
        return None
    def testOption(self, _opton):
        """bool QMdiArea.testOption(None self, QMdiArea.AreaOption _opton)"""
        return bool()
    def setOption(self, _option, _on):
        """None QMdiArea.setOption(None self, QMdiArea.AreaOption _option, bool _on)"""
        return None
    def setBackground(self, _background):
        """None QMdiArea.setBackground(None self, QBrush _background)"""
        return None
    def background(self):
        """QBrush QMdiArea.background(None self)"""
        return QBrush()
    def removeSubWindow(self, _widget):
        """None QMdiArea.removeSubWindow(None self, QWidget _widget)"""
        return None
    def currentSubWindow(self):
        """QMdiSubWindow QMdiArea.currentSubWindow(None self)"""
        return QMdiSubWindow()
    def subWindowList(self, _order):
        """list-of-QMdiSubWindow QMdiArea.subWindowList(None self, QMdiArea.WindowOrder _order)"""
        return [QMdiSubWindow()]
    def addSubWindow(self, _widget, _flags):
        """QMdiSubWindow QMdiArea.addSubWindow(None self, QWidget _widget, Qt.WindowFlags _flags)"""
        return QMdiSubWindow()
    def activeSubWindow(self):
        """QMdiSubWindow QMdiArea.activeSubWindow(None self)"""
        return QMdiSubWindow()
    def minimumSizeHint(self):
        """QSize QMdiArea.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QMdiArea.sizeHint(None self)"""
        return QSize()


class QMdiSubWindow(QWidget):
    """"""
    RubberBandResize = int() # QMdiSubWindow.SubWindowOption enum
    RubberBandMove = int() # QMdiSubWindow.SubWindowOption enum

    def __init__(self, _parent, _flags):
        """None QMdiSubWindow.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def childEvent(self, _childEvent):
        """None QMdiSubWindow.childEvent(None self, QChildEvent _childEvent)"""
        return None
    def focusOutEvent(self, _focusOutEvent):
        """None QMdiSubWindow.focusOutEvent(None self, QFocusEvent _focusOutEvent)"""
        return None
    def focusInEvent(self, _focusInEvent):
        """None QMdiSubWindow.focusInEvent(None self, QFocusEvent _focusInEvent)"""
        return None
    def contextMenuEvent(self, _contextMenuEvent):
        """None QMdiSubWindow.contextMenuEvent(None self, QContextMenuEvent _contextMenuEvent)"""
        return None
    def keyPressEvent(self, _keyEvent):
        """None QMdiSubWindow.keyPressEvent(None self, QKeyEvent _keyEvent)"""
        return None
    def mouseMoveEvent(self, _mouseEvent):
        """None QMdiSubWindow.mouseMoveEvent(None self, QMouseEvent _mouseEvent)"""
        return None
    def mouseReleaseEvent(self, _mouseEvent):
        """None QMdiSubWindow.mouseReleaseEvent(None self, QMouseEvent _mouseEvent)"""
        return None
    def mouseDoubleClickEvent(self, _mouseEvent):
        """None QMdiSubWindow.mouseDoubleClickEvent(None self, QMouseEvent _mouseEvent)"""
        return None
    def mousePressEvent(self, _mouseEvent):
        """None QMdiSubWindow.mousePressEvent(None self, QMouseEvent _mouseEvent)"""
        return None
    def paintEvent(self, _paintEvent):
        """None QMdiSubWindow.paintEvent(None self, QPaintEvent _paintEvent)"""
        return None
    def moveEvent(self, _moveEvent):
        """None QMdiSubWindow.moveEvent(None self, QMoveEvent _moveEvent)"""
        return None
    def timerEvent(self, _timerEvent):
        """None QMdiSubWindow.timerEvent(None self, QTimerEvent _timerEvent)"""
        return None
    def resizeEvent(self, _resizeEvent):
        """None QMdiSubWindow.resizeEvent(None self, QResizeEvent _resizeEvent)"""
        return None
    def leaveEvent(self, _leaveEvent):
        """None QMdiSubWindow.leaveEvent(None self, QEvent _leaveEvent)"""
        return None
    def closeEvent(self, _closeEvent):
        """None QMdiSubWindow.closeEvent(None self, QCloseEvent _closeEvent)"""
        return None
    def changeEvent(self, _changeEvent):
        """None QMdiSubWindow.changeEvent(None self, QEvent _changeEvent)"""
        return None
    def hideEvent(self, _hideEvent):
        """None QMdiSubWindow.hideEvent(None self, QHideEvent _hideEvent)"""
        return None
    def showEvent(self, _showEvent):
        """None QMdiSubWindow.showEvent(None self, QShowEvent _showEvent)"""
        return None
    def event(self, _event):
        """bool QMdiSubWindow.event(None self, QEvent _event)"""
        return bool()
    def eventFilter(self, _object, _event):
        """bool QMdiSubWindow.eventFilter(None self, QObject _object, QEvent _event)"""
        return bool()
    def showShaded(self):
        """None QMdiSubWindow.showShaded(None self)"""
        return None
    def showSystemMenu(self):
        """None QMdiSubWindow.showSystemMenu(None self)"""
        return None
    def mdiArea(self):
        """QMdiArea QMdiSubWindow.mdiArea(None self)"""
        return QMdiArea()
    def systemMenu(self):
        """QMenu QMdiSubWindow.systemMenu(None self)"""
        return QMenu()
    def setSystemMenu(self, _systemMenu):
        """None QMdiSubWindow.setSystemMenu(None self, QMenu _systemMenu)"""
        return None
    def keyboardPageStep(self):
        """int QMdiSubWindow.keyboardPageStep(None self)"""
        return int()
    def setKeyboardPageStep(self, _step):
        """None QMdiSubWindow.setKeyboardPageStep(None self, int _step)"""
        return None
    def keyboardSingleStep(self):
        """int QMdiSubWindow.keyboardSingleStep(None self)"""
        return int()
    def setKeyboardSingleStep(self, _step):
        """None QMdiSubWindow.setKeyboardSingleStep(None self, int _step)"""
        return None
    def testOption(self):
        """QMdiSubWindow.SubWindowOption QMdiSubWindow.testOption(None self)"""
        return QMdiSubWindow.SubWindowOption()
    def setOption(self, _option, _on):
        """None QMdiSubWindow.setOption(None self, QMdiSubWindow.SubWindowOption _option, bool _on)"""
        return None
    def isShaded(self):
        """bool QMdiSubWindow.isShaded(None self)"""
        return bool()
    def widget(self):
        """QWidget QMdiSubWindow.widget(None self)"""
        return QWidget()
    def setWidget(self, _widget):
        """None QMdiSubWindow.setWidget(None self, QWidget _widget)"""
        return None
    def minimumSizeHint(self):
        """QSize QMdiSubWindow.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QMdiSubWindow.sizeHint(None self)"""
        return QSize()


class QMenu(QWidget):
    """"""
    def __init__(self, _parent):
        """None QMenu.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _title, _parent):
        """None QMenu.__init__(None self, QString _title, QWidget _parent)"""
        return None
    def setSeparatorsCollapsible(self, _collapse):
        """None QMenu.setSeparatorsCollapsible(None self, bool _collapse)"""
        return None
    def separatorsCollapsible(self):
        """bool QMenu.separatorsCollapsible(None self)"""
        return bool()
    def isEmpty(self):
        """bool QMenu.isEmpty(None self)"""
        return bool()
    def focusNextPrevChild(self, _next):
        """bool QMenu.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def event(self):
        """QEvent QMenu.event(None self)"""
        return QEvent()
    def timerEvent(self):
        """QTimerEvent QMenu.timerEvent(None self)"""
        return QTimerEvent()
    def actionEvent(self):
        """QActionEvent QMenu.actionEvent(None self)"""
        return QActionEvent()
    def paintEvent(self):
        """QPaintEvent QMenu.paintEvent(None self)"""
        return QPaintEvent()
    def hideEvent(self):
        """QHideEvent QMenu.hideEvent(None self)"""
        return QHideEvent()
    def leaveEvent(self):
        """QEvent QMenu.leaveEvent(None self)"""
        return QEvent()
    def enterEvent(self):
        """QEvent QMenu.enterEvent(None self)"""
        return QEvent()
    def wheelEvent(self):
        """QWheelEvent QMenu.wheelEvent(None self)"""
        return QWheelEvent()
    def mouseMoveEvent(self):
        """QMouseEvent QMenu.mouseMoveEvent(None self)"""
        return QMouseEvent()
    def mousePressEvent(self):
        """QMouseEvent QMenu.mousePressEvent(None self)"""
        return QMouseEvent()
    def mouseReleaseEvent(self):
        """QMouseEvent QMenu.mouseReleaseEvent(None self)"""
        return QMouseEvent()
    def keyPressEvent(self):
        """QKeyEvent QMenu.keyPressEvent(None self)"""
        return QKeyEvent()
    def changeEvent(self):
        """QEvent QMenu.changeEvent(None self)"""
        return QEvent()
    def initStyleOption(self, _option, _action):
        """None QMenu.initStyleOption(None self, QStyleOptionMenuItem _option, QAction _action)"""
        return None
    def columnCount(self):
        """int QMenu.columnCount(None self)"""
        return int()
    def setNoReplayFor(self, _widget):
        """None QMenu.setNoReplayFor(None self, QWidget _widget)"""
        return None
    def setIcon(self, _icon):
        """None QMenu.setIcon(None self, QIcon _icon)"""
        return None
    def icon(self):
        """QIcon QMenu.icon(None self)"""
        return QIcon()
    def setTitle(self, _title):
        """None QMenu.setTitle(None self, QString _title)"""
        return None
    def title(self):
        """QString QMenu.title(None self)"""
        return QString()
    def menuAction(self):
        """QAction QMenu.menuAction(None self)"""
        return QAction()
    def actionAt(self):
        """QPoint QMenu.actionAt(None self)"""
        return QPoint()
    def actionGeometry(self):
        """QAction QMenu.actionGeometry(None self)"""
        return QAction()
    def sizeHint(self):
        """QSize QMenu.sizeHint(None self)"""
        return QSize()
    def exec_(self):
        """QAction QMenu.exec_(None self)"""
        return QAction()
    def exec_(self, _p, _action):
        """QAction QMenu.exec_(None self, QPoint _p, QAction _action)"""
        return QAction()
    def exec_(self, _actions, _pos, _action):
        """QAction QMenu.exec_(None self, list-of-QAction _actions, QPoint _pos, QAction _action)"""
        return QAction()
    def exec_(self, _actions, _pos, _at, _parent):
        """QAction QMenu.exec_(None self, list-of-QAction _actions, QPoint _pos, QAction _at, QWidget _parent)"""
        return QAction()
    def popup(self, _p, _action):
        """None QMenu.popup(None self, QPoint _p, QAction _action)"""
        return None
    def activeAction(self):
        """QAction QMenu.activeAction(None self)"""
        return QAction()
    def setActiveAction(self, _act):
        """None QMenu.setActiveAction(None self, QAction _act)"""
        return None
    def defaultAction(self):
        """QAction QMenu.defaultAction(None self)"""
        return QAction()
    def setDefaultAction(self):
        """QAction QMenu.setDefaultAction(None self)"""
        return QAction()
    def hideTearOffMenu(self):
        """None QMenu.hideTearOffMenu(None self)"""
        return None
    def isTearOffMenuVisible(self):
        """bool QMenu.isTearOffMenuVisible(None self)"""
        return bool()
    def isTearOffEnabled(self):
        """bool QMenu.isTearOffEnabled(None self)"""
        return bool()
    def setTearOffEnabled(self):
        """bool QMenu.setTearOffEnabled(None self)"""
        return bool()
    def clear(self):
        """None QMenu.clear(None self)"""
        return None
    def insertSeparator(self, _before):
        """QAction QMenu.insertSeparator(None self, QAction _before)"""
        return QAction()
    def insertMenu(self, _before, _menu):
        """QAction QMenu.insertMenu(None self, QAction _before, QMenu _menu)"""
        return QAction()
    def addSeparator(self):
        """QAction QMenu.addSeparator(None self)"""
        return QAction()
    def addMenu(self, _menu):
        """QAction QMenu.addMenu(None self, QMenu _menu)"""
        return QAction()
    def addMenu(self, _title):
        """QMenu QMenu.addMenu(None self, QString _title)"""
        return QMenu()
    def addMenu(self, _icon, _title):
        """QMenu QMenu.addMenu(None self, QIcon _icon, QString _title)"""
        return QMenu()
    def addAction(self, _action):
        """None QMenu.addAction(None self, QAction _action)"""
        return None
    def addAction(self, _text):
        """QAction QMenu.addAction(None self, QString _text)"""
        return QAction()
    def addAction(self, _icon, _text):
        """QAction QMenu.addAction(None self, QIcon _icon, QString _text)"""
        return QAction()
    def addAction(self, _text, _receiver, _member, _shortcut):
        """QAction QMenu.addAction(None self, QString _text, QObject _receiver, SLOT()SLOT() _member, QKeySequence _shortcut)"""
        return QAction()
    def addAction(self, _text, _receiver, _shortcut):
        """QAction QMenu.addAction(None self, QString _text, callable _receiver, QKeySequence _shortcut)"""
        return QAction()
    def addAction(self, _icon, _text, _receiver, _member, _shortcut):
        """QAction QMenu.addAction(None self, QIcon _icon, QString _text, QObject _receiver, SLOT()SLOT() _member, QKeySequence _shortcut)"""
        return QAction()
    def addAction(self, _icon, _text, _receiver, _shortcut):
        """QAction QMenu.addAction(None self, QIcon _icon, QString _text, callable _receiver, QKeySequence _shortcut)"""
        return QAction()


class QMenuBar(QWidget):
    """"""
    def __init__(self, _parent):
        """None QMenuBar.__init__(None self, QWidget _parent)"""
        return None
    def setNativeMenuBar(self, _nativeMenuBar):
        """None QMenuBar.setNativeMenuBar(None self, bool _nativeMenuBar)"""
        return None
    def isNativeMenuBar(self):
        """bool QMenuBar.isNativeMenuBar(None self)"""
        return bool()
    def timerEvent(self):
        """QTimerEvent QMenuBar.timerEvent(None self)"""
        return QTimerEvent()
    def event(self):
        """QEvent QMenuBar.event(None self)"""
        return QEvent()
    def eventFilter(self):
        """QEvent QMenuBar.eventFilter(None self)"""
        return QEvent()
    def focusInEvent(self):
        """QFocusEvent QMenuBar.focusInEvent(None self)"""
        return QFocusEvent()
    def focusOutEvent(self):
        """QFocusEvent QMenuBar.focusOutEvent(None self)"""
        return QFocusEvent()
    def actionEvent(self):
        """QActionEvent QMenuBar.actionEvent(None self)"""
        return QActionEvent()
    def resizeEvent(self):
        """QResizeEvent QMenuBar.resizeEvent(None self)"""
        return QResizeEvent()
    def paintEvent(self):
        """QPaintEvent QMenuBar.paintEvent(None self)"""
        return QPaintEvent()
    def leaveEvent(self):
        """QEvent QMenuBar.leaveEvent(None self)"""
        return QEvent()
    def mouseMoveEvent(self):
        """QMouseEvent QMenuBar.mouseMoveEvent(None self)"""
        return QMouseEvent()
    def mousePressEvent(self):
        """QMouseEvent QMenuBar.mousePressEvent(None self)"""
        return QMouseEvent()
    def mouseReleaseEvent(self):
        """QMouseEvent QMenuBar.mouseReleaseEvent(None self)"""
        return QMouseEvent()
    def keyPressEvent(self):
        """QKeyEvent QMenuBar.keyPressEvent(None self)"""
        return QKeyEvent()
    def changeEvent(self):
        """QEvent QMenuBar.changeEvent(None self)"""
        return QEvent()
    def initStyleOption(self, _option, _action):
        """None QMenuBar.initStyleOption(None self, QStyleOptionMenuItem _option, QAction _action)"""
        return None
    def setVisible(self, _visible):
        """None QMenuBar.setVisible(None self, bool _visible)"""
        return None
    def actionAt(self):
        """QPoint QMenuBar.actionAt(None self)"""
        return QPoint()
    def actionGeometry(self):
        """QAction QMenuBar.actionGeometry(None self)"""
        return QAction()
    def heightForWidth(self):
        """int QMenuBar.heightForWidth(None self)"""
        return int()
    def minimumSizeHint(self):
        """QSize QMenuBar.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QMenuBar.sizeHint(None self)"""
        return QSize()
    def isDefaultUp(self):
        """bool QMenuBar.isDefaultUp(None self)"""
        return bool()
    def setDefaultUp(self):
        """bool QMenuBar.setDefaultUp(None self)"""
        return bool()
    def setActiveAction(self, _action):
        """None QMenuBar.setActiveAction(None self, QAction _action)"""
        return None
    def activeAction(self):
        """QAction QMenuBar.activeAction(None self)"""
        return QAction()
    def clear(self):
        """None QMenuBar.clear(None self)"""
        return None
    def insertSeparator(self, _before):
        """QAction QMenuBar.insertSeparator(None self, QAction _before)"""
        return QAction()
    def insertMenu(self, _before, _menu):
        """QAction QMenuBar.insertMenu(None self, QAction _before, QMenu _menu)"""
        return QAction()
    def addSeparator(self):
        """QAction QMenuBar.addSeparator(None self)"""
        return QAction()
    def addMenu(self, _menu):
        """QAction QMenuBar.addMenu(None self, QMenu _menu)"""
        return QAction()
    def addMenu(self, _title):
        """QMenu QMenuBar.addMenu(None self, QString _title)"""
        return QMenu()
    def addMenu(self, _icon, _title):
        """QMenu QMenuBar.addMenu(None self, QIcon _icon, QString _title)"""
        return QMenu()
    def addAction(self, _action):
        """None QMenuBar.addAction(None self, QAction _action)"""
        return None
    def addAction(self, _text):
        """QAction QMenuBar.addAction(None self, QString _text)"""
        return QAction()
    def addAction(self, _text, _receiver, _member):
        """QAction QMenuBar.addAction(None self, QString _text, QObject _receiver, SLOT()SLOT() _member)"""
        return QAction()
    def addAction(self, _text, _receiver):
        """QAction QMenuBar.addAction(None self, QString _text, callable _receiver)"""
        return QAction()


class QMessageBox(QDialog):
    """"""
    NoButton = int() # QMessageBox.StandardButton enum
    Ok = int() # QMessageBox.StandardButton enum
    Save = int() # QMessageBox.StandardButton enum
    SaveAll = int() # QMessageBox.StandardButton enum
    Open = int() # QMessageBox.StandardButton enum
    Yes = int() # QMessageBox.StandardButton enum
    YesToAll = int() # QMessageBox.StandardButton enum
    No = int() # QMessageBox.StandardButton enum
    NoToAll = int() # QMessageBox.StandardButton enum
    Abort = int() # QMessageBox.StandardButton enum
    Retry = int() # QMessageBox.StandardButton enum
    Ignore = int() # QMessageBox.StandardButton enum
    Close = int() # QMessageBox.StandardButton enum
    Cancel = int() # QMessageBox.StandardButton enum
    Discard = int() # QMessageBox.StandardButton enum
    Help = int() # QMessageBox.StandardButton enum
    Apply = int() # QMessageBox.StandardButton enum
    Reset = int() # QMessageBox.StandardButton enum
    RestoreDefaults = int() # QMessageBox.StandardButton enum
    FirstButton = int() # QMessageBox.StandardButton enum
    LastButton = int() # QMessageBox.StandardButton enum
    YesAll = int() # QMessageBox.StandardButton enum
    NoAll = int() # QMessageBox.StandardButton enum
    Default = int() # QMessageBox.StandardButton enum
    Escape = int() # QMessageBox.StandardButton enum
    FlagMask = int() # QMessageBox.StandardButton enum
    ButtonMask = int() # QMessageBox.StandardButton enum

    NoIcon = int() # QMessageBox.Icon enum
    Information = int() # QMessageBox.Icon enum
    Warning = int() # QMessageBox.Icon enum
    Critical = int() # QMessageBox.Icon enum
    Question = int() # QMessageBox.Icon enum

    InvalidRole = int() # QMessageBox.ButtonRole enum
    AcceptRole = int() # QMessageBox.ButtonRole enum
    RejectRole = int() # QMessageBox.ButtonRole enum
    DestructiveRole = int() # QMessageBox.ButtonRole enum
    ActionRole = int() # QMessageBox.ButtonRole enum
    HelpRole = int() # QMessageBox.ButtonRole enum
    YesRole = int() # QMessageBox.ButtonRole enum
    NoRole = int() # QMessageBox.ButtonRole enum
    ResetRole = int() # QMessageBox.ButtonRole enum
    ApplyRole = int() # QMessageBox.ButtonRole enum

    def __init__(self, _parent):
        """None QMessageBox.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _icon, _title, _text, _buttons, _parent, _flags):
        """None QMessageBox.__init__(None self, QMessageBox.Icon _icon, QString _title, QString _text, QMessageBox.StandardButtons _buttons, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(self, _title, _text, _icon, _button0, _button1, _button2, _parent, _flags):
        """None QMessageBox.__init__(None self, QString _title, QString _text, QMessageBox.Icon _icon, int _button0, int _button1, int _button2, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def buttonRole(self, _button):
        """QMessageBox.ButtonRole QMessageBox.buttonRole(None self, QAbstractButton _button)"""
        return QMessageBox.ButtonRole()
    def buttons(self):
        """list-of-QAbstractButton QMessageBox.buttons(None self)"""
        return [QAbstractButton()]
    def open(self):
        """None QMessageBox.open(None self)"""
        return None
    def open(self, _receiver, _member):
        """None QMessageBox.open(None self, QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(self, _receiver):
        """None QMessageBox.open(None self, callable _receiver)"""
        return None
    def setWindowModality(self, _windowModality):
        """None QMessageBox.setWindowModality(None self, Qt.WindowModality _windowModality)"""
        return None
    def setWindowTitle(self, _title):
        """None QMessageBox.setWindowTitle(None self, QString _title)"""
        return None
    def setDetailedText(self, _text):
        """None QMessageBox.setDetailedText(None self, QString _text)"""
        return None
    def detailedText(self):
        """QString QMessageBox.detailedText(None self)"""
        return QString()
    def setInformativeText(self, _text):
        """None QMessageBox.setInformativeText(None self, QString _text)"""
        return None
    def informativeText(self):
        """QString QMessageBox.informativeText(None self)"""
        return QString()
    def clickedButton(self):
        """QAbstractButton QMessageBox.clickedButton(None self)"""
        return QAbstractButton()
    def setEscapeButton(self, _button):
        """None QMessageBox.setEscapeButton(None self, QAbstractButton _button)"""
        return None
    def setEscapeButton(self, _button):
        """None QMessageBox.setEscapeButton(None self, QMessageBox.StandardButton _button)"""
        return None
    def escapeButton(self):
        """QAbstractButton QMessageBox.escapeButton(None self)"""
        return QAbstractButton()
    def setDefaultButton(self, _button):
        """None QMessageBox.setDefaultButton(None self, QPushButton _button)"""
        return None
    def setDefaultButton(self, _button):
        """None QMessageBox.setDefaultButton(None self, QMessageBox.StandardButton _button)"""
        return None
    def defaultButton(self):
        """QPushButton QMessageBox.defaultButton(None self)"""
        return QPushButton()
    def button(self, _which):
        """QAbstractButton QMessageBox.button(None self, QMessageBox.StandardButton _which)"""
        return QAbstractButton()
    def standardButton(self, _button):
        """QMessageBox.StandardButton QMessageBox.standardButton(None self, QAbstractButton _button)"""
        return QMessageBox.StandardButton()
    def standardButtons(self):
        """QMessageBox.StandardButtons QMessageBox.standardButtons(None self)"""
        return QMessageBox.StandardButtons()
    def setStandardButtons(self, _buttons):
        """None QMessageBox.setStandardButtons(None self, QMessageBox.StandardButtons _buttons)"""
        return None
    def removeButton(self, _button):
        """None QMessageBox.removeButton(None self, QAbstractButton _button)"""
        return None
    def addButton(self, _button, _role):
        """None QMessageBox.addButton(None self, QAbstractButton _button, QMessageBox.ButtonRole _role)"""
        return None
    def addButton(self, _text, _role):
        """QPushButton QMessageBox.addButton(None self, QString _text, QMessageBox.ButtonRole _role)"""
        return QPushButton()
    def addButton(self, _button):
        """QPushButton QMessageBox.addButton(None self, QMessageBox.StandardButton _button)"""
        return QPushButton()
    def changeEvent(self):
        """QEvent QMessageBox.changeEvent(None self)"""
        return QEvent()
    def keyPressEvent(self):
        """QKeyEvent QMessageBox.keyPressEvent(None self)"""
        return QKeyEvent()
    def closeEvent(self):
        """QCloseEvent QMessageBox.closeEvent(None self)"""
        return QCloseEvent()
    def showEvent(self):
        """QShowEvent QMessageBox.showEvent(None self)"""
        return QShowEvent()
    def resizeEvent(self):
        """QResizeEvent QMessageBox.resizeEvent(None self)"""
        return QResizeEvent()
    def event(self, _e):
        """bool QMessageBox.event(None self, QEvent _e)"""
        return bool()
    def standardIcon(self, _icon):
        """QPixmap QMessageBox.standardIcon(None self, QMessageBox.Icon _icon)"""
        return QPixmap()
    def sizeHint(self):
        """QSize QMessageBox.sizeHint(None self)"""
        return QSize()
    def aboutQt(self, _parent, _title):
        """None QMessageBox.aboutQt(None self, QWidget _parent, QString _title)"""
        return None
    def about(self, _parent, _caption, _text):
        """None QMessageBox.about(None self, QWidget _parent, QString _caption, QString _text)"""
        return None
    def critical(self, _parent, _title, _text, _buttons, _defaultButton):
        """QMessageBox.StandardButton QMessageBox.critical(None self, QWidget _parent, QString _title, QString _text, QMessageBox.StandardButtons _buttons, QMessageBox.StandardButton _defaultButton)"""
        return QMessageBox.StandardButton()
    def critical(self, _parent, _title, _text, _button0, _button1, _button2):
        """int QMessageBox.critical(None self, QWidget _parent, QString _title, QString _text, int _button0, int _button1, int _button2)"""
        return int()
    def critical(self, _parent, _title, _text, _button0Text, _button1Text, _button2Text, _defaultButtonNumber, _escapeButtonNumber):
        """int QMessageBox.critical(None self, QWidget _parent, QString _title, QString _text, QString _button0Text, QString _button1Text, QString _button2Text, int _defaultButtonNumber, int _escapeButtonNumber)"""
        return int()
    def warning(self, _parent, _title, _text, _buttons, _defaultButton):
        """QMessageBox.StandardButton QMessageBox.warning(None self, QWidget _parent, QString _title, QString _text, QMessageBox.StandardButtons _buttons, QMessageBox.StandardButton _defaultButton)"""
        return QMessageBox.StandardButton()
    def warning(self, _parent, _title, _text, _button0, _button1, _button2):
        """int QMessageBox.warning(None self, QWidget _parent, QString _title, QString _text, int _button0, int _button1, int _button2)"""
        return int()
    def warning(self, _parent, _title, _text, _button0Text, _button1Text, _button2Text, _defaultButtonNumber, _escapeButtonNumber):
        """int QMessageBox.warning(None self, QWidget _parent, QString _title, QString _text, QString _button0Text, QString _button1Text, QString _button2Text, int _defaultButtonNumber, int _escapeButtonNumber)"""
        return int()
    def question(self, _parent, _title, _text, _buttons, _defaultButton):
        """QMessageBox.StandardButton QMessageBox.question(None self, QWidget _parent, QString _title, QString _text, QMessageBox.StandardButtons _buttons, QMessageBox.StandardButton _defaultButton)"""
        return QMessageBox.StandardButton()
    def question(self, _parent, _title, _text, _button0, _button1, _button2):
        """int QMessageBox.question(None self, QWidget _parent, QString _title, QString _text, int _button0, int _button1, int _button2)"""
        return int()
    def question(self, _parent, _title, _text, _button0Text, _button1Text, _button2Text, _defaultButtonNumber, _escapeButtonNumber):
        """int QMessageBox.question(None self, QWidget _parent, QString _title, QString _text, QString _button0Text, QString _button1Text, QString _button2Text, int _defaultButtonNumber, int _escapeButtonNumber)"""
        return int()
    def information(self, _parent, _title, _text, _buttons, _defaultButton):
        """QMessageBox.StandardButton QMessageBox.information(None self, QWidget _parent, QString _title, QString _text, QMessageBox.StandardButtons _buttons, QMessageBox.StandardButton _defaultButton)"""
        return QMessageBox.StandardButton()
    def information(self, _parent, _title, _text, _button0, _button1, _button2):
        """int QMessageBox.information(None self, QWidget _parent, QString _title, QString _text, int _button0, int _button1, int _button2)"""
        return int()
    def information(self, _parent, _title, _text, _button0Text, _button1Text, _button2Text, _defaultButtonNumber, _escapeButtonNumber):
        """int QMessageBox.information(None self, QWidget _parent, QString _title, QString _text, QString _button0Text, QString _button1Text, QString _button2Text, int _defaultButtonNumber, int _escapeButtonNumber)"""
        return int()
    def setTextFormat(self):
        """Qt.TextFormat QMessageBox.setTextFormat(None self)"""
        return Qt.TextFormat()
    def textFormat(self):
        """Qt.TextFormat QMessageBox.textFormat(None self)"""
        return Qt.TextFormat()
    def setButtonText(self, _button):
        """QString QMessageBox.setButtonText(None self, int _button)"""
        return QString()
    def buttonText(self, _button):
        """QString QMessageBox.buttonText(None self, int _button)"""
        return QString()
    def setIconPixmap(self):
        """QPixmap QMessageBox.setIconPixmap(None self)"""
        return QPixmap()
    def iconPixmap(self):
        """QPixmap QMessageBox.iconPixmap(None self)"""
        return QPixmap()
    def setIcon(self):
        """QMessageBox.Icon QMessageBox.setIcon(None self)"""
        return QMessageBox.Icon()
    def icon(self):
        """QMessageBox.Icon QMessageBox.icon(None self)"""
        return QMessageBox.Icon()
    def setText(self):
        """QString QMessageBox.setText(None self)"""
        return QString()
    def text(self):
        """QString QMessageBox.text(None self)"""
        return QString()


class QMouseEventTransition(QEventTransition):
    """"""
    def __init__(self, _sourceState):
        """None QMouseEventTransition.__init__(None self, QState _sourceState)"""
        return None
    def __init__(self, _object, _type, _button, _sourceState):
        """None QMouseEventTransition.__init__(None self, QObject _object, QEvent.Type _type, Qt.MouseButton _button, QState _sourceState)"""
        return None
    def eventTest(self, _event):
        """bool QMouseEventTransition.eventTest(None self, QEvent _event)"""
        return bool()
    def onTransition(self, _event):
        """None QMouseEventTransition.onTransition(None self, QEvent _event)"""
        return None
    def setHitTestPath(self, _path):
        """None QMouseEventTransition.setHitTestPath(None self, QPainterPath _path)"""
        return None
    def hitTestPath(self):
        """QPainterPath QMouseEventTransition.hitTestPath(None self)"""
        return QPainterPath()
    def setModifierMask(self, _modifiers):
        """None QMouseEventTransition.setModifierMask(None self, Qt.KeyboardModifiers _modifiers)"""
        return None
    def modifierMask(self):
        """Qt.KeyboardModifiers QMouseEventTransition.modifierMask(None self)"""
        return Qt.KeyboardModifiers()
    def setButton(self, _button):
        """None QMouseEventTransition.setButton(None self, Qt.MouseButton _button)"""
        return None
    def button(self):
        """Qt.MouseButton QMouseEventTransition.button(None self)"""
        return Qt.MouseButton()


class QMovie(QObject):
    """"""
    CacheNone = int() # QMovie.CacheMode enum
    CacheAll = int() # QMovie.CacheMode enum

    NotRunning = int() # QMovie.MovieState enum
    Paused = int() # QMovie.MovieState enum
    Running = int() # QMovie.MovieState enum

    def __init__(self, _parent):
        """None QMovie.__init__(None self, QObject _parent)"""
        return None
    def __init__(self, _device, _format, _parent):
        """None QMovie.__init__(None self, QIODevice _device, QByteArray _format, QObject _parent)"""
        return None
    def __init__(self, _fileName, _format, _parent):
        """None QMovie.__init__(None self, QString _fileName, QByteArray _format, QObject _parent)"""
        return None
    def stop(self):
        """None QMovie.stop(None self)"""
        return None
    def setPaused(self, _paused):
        """None QMovie.setPaused(None self, bool _paused)"""
        return None
    def jumpToNextFrame(self):
        """bool QMovie.jumpToNextFrame(None self)"""
        return bool()
    def start(self):
        """None QMovie.start(None self)"""
        return None
    def setCacheMode(self, _mode):
        """None QMovie.setCacheMode(None self, QMovie.CacheMode _mode)"""
        return None
    def cacheMode(self):
        """QMovie.CacheMode QMovie.cacheMode(None self)"""
        return QMovie.CacheMode()
    def setScaledSize(self, _size):
        """None QMovie.setScaledSize(None self, QSize _size)"""
        return None
    def scaledSize(self):
        """QSize QMovie.scaledSize(None self)"""
        return QSize()
    def speed(self):
        """int QMovie.speed(None self)"""
        return int()
    def setSpeed(self, _percentSpeed):
        """None QMovie.setSpeed(None self, int _percentSpeed)"""
        return None
    def currentFrameNumber(self):
        """int QMovie.currentFrameNumber(None self)"""
        return int()
    def nextFrameDelay(self):
        """int QMovie.nextFrameDelay(None self)"""
        return int()
    def frameCount(self):
        """int QMovie.frameCount(None self)"""
        return int()
    def loopCount(self):
        """int QMovie.loopCount(None self)"""
        return int()
    def jumpToFrame(self, _frameNumber):
        """bool QMovie.jumpToFrame(None self, int _frameNumber)"""
        return bool()
    def isValid(self):
        """bool QMovie.isValid(None self)"""
        return bool()
    def currentPixmap(self):
        """QPixmap QMovie.currentPixmap(None self)"""
        return QPixmap()
    def currentImage(self):
        """QImage QMovie.currentImage(None self)"""
        return QImage()
    def frameRect(self):
        """QRect QMovie.frameRect(None self)"""
        return QRect()
    def state(self):
        """QMovie.MovieState QMovie.state(None self)"""
        return QMovie.MovieState()
    def backgroundColor(self):
        """QColor QMovie.backgroundColor(None self)"""
        return QColor()
    def setBackgroundColor(self, _color):
        """None QMovie.setBackgroundColor(None self, QColor _color)"""
        return None
    def format(self):
        """QByteArray QMovie.format(None self)"""
        return QByteArray()
    def setFormat(self, _format):
        """None QMovie.setFormat(None self, QByteArray _format)"""
        return None
    def fileName(self):
        """QString QMovie.fileName(None self)"""
        return QString()
    def setFileName(self, _fileName):
        """None QMovie.setFileName(None self, QString _fileName)"""
        return None
    def device(self):
        """QIODevice QMovie.device(None self)"""
        return QIODevice()
    def setDevice(self, _device):
        """None QMovie.setDevice(None self, QIODevice _device)"""
        return None
    def supportedFormats(self):
        """list-of-QByteArray QMovie.supportedFormats(None self)"""
        return [QByteArray()]


class QPageSetupDialog(QDialog):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QPageSetupDialog.PageSetupDialogOption enum
    DontUseSheet = int() # QPageSetupDialog.PageSetupDialogOption enum

    def __init__(self, _parent):
        """None QPageSetupDialog.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _printer, _parent):
        """None QPageSetupDialog.__init__(None self, QPrinter _printer, QWidget _parent)"""
        return None
    def open(self):
        """None QPageSetupDialog.open(None self)"""
        return None
    def open(self, _receiver, _member):
        """None QPageSetupDialog.open(None self, QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(self, _receiver):
        """None QPageSetupDialog.open(None self, callable _receiver)"""
        return None
    def options(self):
        """QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.options(None self)"""
        return QPageSetupDialog.PageSetupDialogOptions()
    def setOptions(self, _options):
        """None QPageSetupDialog.setOptions(None self, QPageSetupDialog.PageSetupDialogOptions _options)"""
        return None
    def testOption(self, _option):
        """bool QPageSetupDialog.testOption(None self, QPageSetupDialog.PageSetupDialogOption _option)"""
        return bool()
    def setOption(self, _option, _on):
        """None QPageSetupDialog.setOption(None self, QPageSetupDialog.PageSetupDialogOption _option, bool _on)"""
        return None
    def isOptionEnabled(self, _option):
        """bool QPageSetupDialog.isOptionEnabled(None self, QPageSetupDialog.PageSetupDialogOption _option)"""
        return bool()
    def enabledOptions(self):
        """QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.enabledOptions(None self)"""
        return QPageSetupDialog.PageSetupDialogOptions()
    def setEnabledOptions(self, _options):
        """None QPageSetupDialog.setEnabledOptions(None self, QPageSetupDialog.PageSetupDialogOptions _options)"""
        return None
    def addEnabledOption(self, _option):
        """None QPageSetupDialog.addEnabledOption(None self, QPageSetupDialog.PageSetupDialogOption _option)"""
        return None
    def printer(self):
        """QPrinter QPageSetupDialog.printer(None self)"""
        return QPrinter()
    def exec_(self):
        """int QPageSetupDialog.exec_(None self)"""
        return int()


class QPainter():
    """"""
    OpaqueHint = int() # QPainter.PixmapFragmentHint enum

    CompositionMode_SourceOver = int() # QPainter.CompositionMode enum
    CompositionMode_DestinationOver = int() # QPainter.CompositionMode enum
    CompositionMode_Clear = int() # QPainter.CompositionMode enum
    CompositionMode_Source = int() # QPainter.CompositionMode enum
    CompositionMode_Destination = int() # QPainter.CompositionMode enum
    CompositionMode_SourceIn = int() # QPainter.CompositionMode enum
    CompositionMode_DestinationIn = int() # QPainter.CompositionMode enum
    CompositionMode_SourceOut = int() # QPainter.CompositionMode enum
    CompositionMode_DestinationOut = int() # QPainter.CompositionMode enum
    CompositionMode_SourceAtop = int() # QPainter.CompositionMode enum
    CompositionMode_DestinationAtop = int() # QPainter.CompositionMode enum
    CompositionMode_Xor = int() # QPainter.CompositionMode enum
    CompositionMode_Plus = int() # QPainter.CompositionMode enum
    CompositionMode_Multiply = int() # QPainter.CompositionMode enum
    CompositionMode_Screen = int() # QPainter.CompositionMode enum
    CompositionMode_Overlay = int() # QPainter.CompositionMode enum
    CompositionMode_Darken = int() # QPainter.CompositionMode enum
    CompositionMode_Lighten = int() # QPainter.CompositionMode enum
    CompositionMode_ColorDodge = int() # QPainter.CompositionMode enum
    CompositionMode_ColorBurn = int() # QPainter.CompositionMode enum
    CompositionMode_HardLight = int() # QPainter.CompositionMode enum
    CompositionMode_SoftLight = int() # QPainter.CompositionMode enum
    CompositionMode_Difference = int() # QPainter.CompositionMode enum
    CompositionMode_Exclusion = int() # QPainter.CompositionMode enum
    RasterOp_SourceOrDestination = int() # QPainter.CompositionMode enum
    RasterOp_SourceAndDestination = int() # QPainter.CompositionMode enum
    RasterOp_SourceXorDestination = int() # QPainter.CompositionMode enum
    RasterOp_NotSourceAndNotDestination = int() # QPainter.CompositionMode enum
    RasterOp_NotSourceOrNotDestination = int() # QPainter.CompositionMode enum
    RasterOp_NotSourceXorDestination = int() # QPainter.CompositionMode enum
    RasterOp_NotSource = int() # QPainter.CompositionMode enum
    RasterOp_NotSourceAndDestination = int() # QPainter.CompositionMode enum
    RasterOp_SourceAndNotDestination = int() # QPainter.CompositionMode enum

    Antialiasing = int() # QPainter.RenderHint enum
    TextAntialiasing = int() # QPainter.RenderHint enum
    SmoothPixmapTransform = int() # QPainter.RenderHint enum
    HighQualityAntialiasing = int() # QPainter.RenderHint enum
    NonCosmeticDefaultPen = int() # QPainter.RenderHint enum

    def __init__(self):
        """None QPainter.__init__(None self)"""
        return None
    def __init__(self):
        """QPaintDevice QPainter.__init__(None self)"""
        return QPaintDevice()
    def drawStaticText(self, _topLeftPosition, _staticText):
        """None QPainter.drawStaticText(None self, QPointF _topLeftPosition, QStaticText _staticText)"""
        return None
    def drawStaticText(self, _p, _staticText):
        """None QPainter.drawStaticText(None self, QPoint _p, QStaticText _staticText)"""
        return None
    def drawStaticText(self, _x, _y, _staticText):
        """None QPainter.drawStaticText(None self, int _x, int _y, QStaticText _staticText)"""
        return None
    def drawPixmapFragments(self, _fragments, _pixmap, _hints):
        """None QPainter.drawPixmapFragments(None self, list _fragments, QPixmap _pixmap, QPainter.PixmapFragmentHints _hints)"""
        return None
    def endNativePainting(self):
        """None QPainter.endNativePainting(None self)"""
        return None
    def beginNativePainting(self):
        """None QPainter.beginNativePainting(None self)"""
        return None
    def drawRoundedRect(self, _rect, _xRadius, _yRadius, _mode):
        """None QPainter.drawRoundedRect(None self, QRectF _rect, float _xRadius, float _yRadius, Qt.SizeMode _mode)"""
        return None
    def drawRoundedRect(self, _x, _y, _w, _h, _xRadius, _yRadius, _mode):
        """None QPainter.drawRoundedRect(None self, int _x, int _y, int _w, int _h, float _xRadius, float _yRadius, Qt.SizeMode _mode)"""
        return None
    def drawRoundedRect(self, _rect, _xRadius, _yRadius, _mode):
        """None QPainter.drawRoundedRect(None self, QRect _rect, float _xRadius, float _yRadius, Qt.SizeMode _mode)"""
        return None
    def testRenderHint(self, _hint):
        """bool QPainter.testRenderHint(None self, QPainter.RenderHint _hint)"""
        return bool()
    def combinedTransform(self):
        """QTransform QPainter.combinedTransform(None self)"""
        return QTransform()
    def worldTransform(self):
        """QTransform QPainter.worldTransform(None self)"""
        return QTransform()
    def setWorldTransform(self, _matrix, _combine):
        """None QPainter.setWorldTransform(None self, QTransform _matrix, bool _combine)"""
        return None
    def resetTransform(self):
        """None QPainter.resetTransform(None self)"""
        return None
    def deviceTransform(self):
        """QTransform QPainter.deviceTransform(None self)"""
        return QTransform()
    def transform(self):
        """QTransform QPainter.transform(None self)"""
        return QTransform()
    def setTransform(self, _transform, _combine):
        """None QPainter.setTransform(None self, QTransform _transform, bool _combine)"""
        return None
    def setWorldMatrixEnabled(self, _enabled):
        """None QPainter.setWorldMatrixEnabled(None self, bool _enabled)"""
        return None
    def worldMatrixEnabled(self):
        """bool QPainter.worldMatrixEnabled(None self)"""
        return bool()
    def setWorldMatrix(self, _matrix, _combine):
        """None QPainter.setWorldMatrix(None self, QMatrix _matrix, bool _combine)"""
        return None
    def worldMatrix(self):
        """QMatrix QPainter.worldMatrix(None self)"""
        return QMatrix()
    def setOpacity(self, _opacity):
        """None QPainter.setOpacity(None self, float _opacity)"""
        return None
    def opacity(self):
        """float QPainter.opacity(None self)"""
        return float()
    def combinedMatrix(self):
        """QMatrix QPainter.combinedMatrix(None self)"""
        return QMatrix()
    def drawImage(self, _targetRect, _image, _sourceRect, _flags):
        """None QPainter.drawImage(None self, QRectF _targetRect, QImage _image, QRectF _sourceRect, Qt.ImageConversionFlags _flags)"""
        return None
    def drawImage(self, _targetRect, _image, _sourceRect, _flags):
        """None QPainter.drawImage(None self, QRect _targetRect, QImage _image, QRect _sourceRect, Qt.ImageConversionFlags _flags)"""
        return None
    def drawImage(self, _p, _image, _sr, _flags):
        """None QPainter.drawImage(None self, QPointF _p, QImage _image, QRectF _sr, Qt.ImageConversionFlags _flags)"""
        return None
    def drawImage(self, _p, _image, _sr, _flags):
        """None QPainter.drawImage(None self, QPoint _p, QImage _image, QRect _sr, Qt.ImageConversionFlags _flags)"""
        return None
    def drawImage(self, _r, _image):
        """None QPainter.drawImage(None self, QRectF _r, QImage _image)"""
        return None
    def drawImage(self, _r, _image):
        """None QPainter.drawImage(None self, QRect _r, QImage _image)"""
        return None
    def drawImage(self, _p, _image):
        """None QPainter.drawImage(None self, QPointF _p, QImage _image)"""
        return None
    def drawImage(self, _p, _image):
        """None QPainter.drawImage(None self, QPoint _p, QImage _image)"""
        return None
    def drawImage(self, _x, _y, _image, _sx, _sy, _sw, _sh, _flags):
        """None QPainter.drawImage(None self, int _x, int _y, QImage _image, int _sx, int _sy, int _sw, int _sh, Qt.ImageConversionFlags _flags)"""
        return None
    def drawPoint(self, _p):
        """None QPainter.drawPoint(None self, QPointF _p)"""
        return None
    def drawPoint(self, _x, _y):
        """None QPainter.drawPoint(None self, int _x, int _y)"""
        return None
    def drawPoint(self, _p):
        """None QPainter.drawPoint(None self, QPoint _p)"""
        return None
    def drawRect(self, _rect):
        """None QPainter.drawRect(None self, QRectF _rect)"""
        return None
    def drawRect(self, _x, _y, _w, _h):
        """None QPainter.drawRect(None self, int _x, int _y, int _w, int _h)"""
        return None
    def drawRect(self, _r):
        """None QPainter.drawRect(None self, QRect _r)"""
        return None
    def drawLine(self, _l):
        """None QPainter.drawLine(None self, QLineF _l)"""
        return None
    def drawLine(self, _line):
        """None QPainter.drawLine(None self, QLine _line)"""
        return None
    def drawLine(self, _x1, _y1, _x2, _y2):
        """None QPainter.drawLine(None self, int _x1, int _y1, int _x2, int _y2)"""
        return None
    def drawLine(self, _p1, _p2):
        """None QPainter.drawLine(None self, QPoint _p1, QPoint _p2)"""
        return None
    def drawLine(self, _p1, _p2):
        """None QPainter.drawLine(None self, QPointF _p1, QPointF _p2)"""
        return None
    def restoreRedirected(self, _device):
        """None QPainter.restoreRedirected(None self, QPaintDevice _device)"""
        return None
    def redirected(self, _device, _offset):
        """QPaintDevice QPainter.redirected(None self, QPaintDevice _device, QPoint _offset)"""
        return QPaintDevice()
    def setRedirected(self, _device, _replacement, _offset):
        """None QPainter.setRedirected(None self, QPaintDevice _device, QPaintDevice _replacement, QPoint _offset)"""
        return None
    def paintEngine(self):
        """QPaintEngine QPainter.paintEngine(None self)"""
        return QPaintEngine()
    def setRenderHints(self, _hints, _on):
        """None QPainter.setRenderHints(None self, QPainter.RenderHints _hints, bool _on)"""
        return None
    def renderHints(self):
        """QPainter.RenderHints QPainter.renderHints(None self)"""
        return QPainter.RenderHints()
    def setRenderHint(self, _hint, _on):
        """None QPainter.setRenderHint(None self, QPainter.RenderHint _hint, bool _on)"""
        return None
    def eraseRect(self):
        """QRectF QPainter.eraseRect(None self)"""
        return QRectF()
    def eraseRect(self, _rect):
        """None QPainter.eraseRect(None self, QRect _rect)"""
        return None
    def eraseRect(self, _x, _y, _w, _h):
        """None QPainter.eraseRect(None self, int _x, int _y, int _w, int _h)"""
        return None
    def fillRect(self):
        """QBrush QPainter.fillRect(None self)"""
        return QBrush()
    def fillRect(self):
        """QBrush QPainter.fillRect(None self)"""
        return QBrush()
    def fillRect(self, _x, _y, _w, _h, _b):
        """None QPainter.fillRect(None self, int _x, int _y, int _w, int _h, QBrush _b)"""
        return None
    def fillRect(self, _color):
        """QRectF QPainter.fillRect(None self, QColor _color)"""
        return QRectF()
    def fillRect(self, _color):
        """QRect QPainter.fillRect(None self, QColor _color)"""
        return QRect()
    def fillRect(self, _x, _y, _w, _h, _b):
        """None QPainter.fillRect(None self, int _x, int _y, int _w, int _h, QColor _b)"""
        return None
    def fillRect(self, _x, _y, _w, _h, _c):
        """None QPainter.fillRect(None self, int _x, int _y, int _w, int _h, Qt.GlobalColor _c)"""
        return None
    def fillRect(self, _r, _c):
        """None QPainter.fillRect(None self, QRect _r, Qt.GlobalColor _c)"""
        return None
    def fillRect(self, _r, _c):
        """None QPainter.fillRect(None self, QRectF _r, Qt.GlobalColor _c)"""
        return None
    def fillRect(self, _x, _y, _w, _h, _style):
        """None QPainter.fillRect(None self, int _x, int _y, int _w, int _h, Qt.BrushStyle _style)"""
        return None
    def fillRect(self, _r, _style):
        """None QPainter.fillRect(None self, QRect _r, Qt.BrushStyle _style)"""
        return None
    def fillRect(self, _r, _style):
        """None QPainter.fillRect(None self, QRectF _r, Qt.BrushStyle _style)"""
        return None
    def boundingRect(self, _rect, _flags, _text):
        """QRectF QPainter.boundingRect(None self, QRectF _rect, int _flags, QString _text)"""
        return QRectF()
    def boundingRect(self, _rect, _flags, _text):
        """QRect QPainter.boundingRect(None self, QRect _rect, int _flags, QString _text)"""
        return QRect()
    def boundingRect(self, _rectangle, _text, _option):
        """QRectF QPainter.boundingRect(None self, QRectF _rectangle, QString _text, QTextOption _option)"""
        return QRectF()
    def boundingRect(self, _x, _y, _w, _h, _flags, _text):
        """QRect QPainter.boundingRect(None self, int _x, int _y, int _w, int _h, int _flags, QString _text)"""
        return QRect()
    def drawText(self, _p, _s):
        """None QPainter.drawText(None self, QPointF _p, QString _s)"""
        return None
    def drawText(self, _rectangle, _flags, _text, _boundingRect):
        """None QPainter.drawText(None self, QRectF _rectangle, int _flags, QString _text, QRectF _boundingRect)"""
        return None
    def drawText(self, _rectangle, _flags, _text, _boundingRect):
        """None QPainter.drawText(None self, QRect _rectangle, int _flags, QString _text, QRect _boundingRect)"""
        return None
    def drawText(self, _rectangle, _text, _option):
        """None QPainter.drawText(None self, QRectF _rectangle, QString _text, QTextOption _option)"""
        return None
    def drawText(self, _p, _s):
        """None QPainter.drawText(None self, QPoint _p, QString _s)"""
        return None
    def drawText(self, _x, _y, _width, _height, _flags, _text, _boundingRect):
        """None QPainter.drawText(None self, int _x, int _y, int _width, int _height, int _flags, QString _text, QRect _boundingRect)"""
        return None
    def drawText(self, _x, _y, _s):
        """None QPainter.drawText(None self, int _x, int _y, QString _s)"""
        return None
    def layoutDirection(self):
        """Qt.LayoutDirection QPainter.layoutDirection(None self)"""
        return Qt.LayoutDirection()
    def setLayoutDirection(self, _direction):
        """None QPainter.setLayoutDirection(None self, Qt.LayoutDirection _direction)"""
        return None
    def drawPixmap(self, _targetRect, _pixmap, _sourceRect):
        """None QPainter.drawPixmap(None self, QRectF _targetRect, QPixmap _pixmap, QRectF _sourceRect)"""
        return None
    def drawPixmap(self, _targetRect, _pixmap, _sourceRect):
        """None QPainter.drawPixmap(None self, QRect _targetRect, QPixmap _pixmap, QRect _sourceRect)"""
        return None
    def drawPixmap(self, _p, _pm):
        """None QPainter.drawPixmap(None self, QPointF _p, QPixmap _pm)"""
        return None
    def drawPixmap(self, _p, _pm):
        """None QPainter.drawPixmap(None self, QPoint _p, QPixmap _pm)"""
        return None
    def drawPixmap(self, _r, _pm):
        """None QPainter.drawPixmap(None self, QRect _r, QPixmap _pm)"""
        return None
    def drawPixmap(self, _x, _y, _pm):
        """None QPainter.drawPixmap(None self, int _x, int _y, QPixmap _pm)"""
        return None
    def drawPixmap(self, _x, _y, _w, _h, _pm):
        """None QPainter.drawPixmap(None self, int _x, int _y, int _w, int _h, QPixmap _pm)"""
        return None
    def drawPixmap(self, _x, _y, _w, _h, _pm, _sx, _sy, _sw, _sh):
        """None QPainter.drawPixmap(None self, int _x, int _y, int _w, int _h, QPixmap _pm, int _sx, int _sy, int _sw, int _sh)"""
        return None
    def drawPixmap(self, _x, _y, _pm, _sx, _sy, _sw, _sh):
        """None QPainter.drawPixmap(None self, int _x, int _y, QPixmap _pm, int _sx, int _sy, int _sw, int _sh)"""
        return None
    def drawPixmap(self, _p, _pm, _sr):
        """None QPainter.drawPixmap(None self, QPointF _p, QPixmap _pm, QRectF _sr)"""
        return None
    def drawPixmap(self, _p, _pm, _sr):
        """None QPainter.drawPixmap(None self, QPoint _p, QPixmap _pm, QRect _sr)"""
        return None
    def drawPicture(self, _p, _picture):
        """None QPainter.drawPicture(None self, QPointF _p, QPicture _picture)"""
        return None
    def drawPicture(self, _x, _y, _p):
        """None QPainter.drawPicture(None self, int _x, int _y, QPicture _p)"""
        return None
    def drawPicture(self, _pt, _p):
        """None QPainter.drawPicture(None self, QPoint _pt, QPicture _p)"""
        return None
    def drawTiledPixmap(self, _rectangle, _pixmap, _pos):
        """None QPainter.drawTiledPixmap(None self, QRectF _rectangle, QPixmap _pixmap, QPointF _pos)"""
        return None
    def drawTiledPixmap(self, _rectangle, _pixmap, _pos):
        """None QPainter.drawTiledPixmap(None self, QRect _rectangle, QPixmap _pixmap, QPoint _pos)"""
        return None
    def drawTiledPixmap(self, _x, _y, _width, _height, _pixmap, _sx, _sy):
        """None QPainter.drawTiledPixmap(None self, int _x, int _y, int _width, int _height, QPixmap _pixmap, int _sx, int _sy)"""
        return None
    def drawRoundRect(self, _r, _xRound, _yRound):
        """None QPainter.drawRoundRect(None self, QRectF _r, int _xRound, int _yRound)"""
        return None
    def drawRoundRect(self, _x, _y, _w, _h, _xRound, _yRound):
        """None QPainter.drawRoundRect(None self, int _x, int _y, int _w, int _h, int _xRound, int _yRound)"""
        return None
    def drawRoundRect(self, _r, _xRound, _yRound):
        """None QPainter.drawRoundRect(None self, QRect _r, int _xRound, int _yRound)"""
        return None
    def drawChord(self, _rect, _a, _alen):
        """None QPainter.drawChord(None self, QRectF _rect, int _a, int _alen)"""
        return None
    def drawChord(self, _rect, _a, _alen):
        """None QPainter.drawChord(None self, QRect _rect, int _a, int _alen)"""
        return None
    def drawChord(self, _x, _y, _w, _h, _a, _alen):
        """None QPainter.drawChord(None self, int _x, int _y, int _w, int _h, int _a, int _alen)"""
        return None
    def drawPie(self, _rect, _a, _alen):
        """None QPainter.drawPie(None self, QRectF _rect, int _a, int _alen)"""
        return None
    def drawPie(self, _rect, _a, _alen):
        """None QPainter.drawPie(None self, QRect _rect, int _a, int _alen)"""
        return None
    def drawPie(self, _x, _y, _w, _h, _a, _alen):
        """None QPainter.drawPie(None self, int _x, int _y, int _w, int _h, int _a, int _alen)"""
        return None
    def drawArc(self, _rect, _a, _alen):
        """None QPainter.drawArc(None self, QRectF _rect, int _a, int _alen)"""
        return None
    def drawArc(self, _r, _a, _alen):
        """None QPainter.drawArc(None self, QRect _r, int _a, int _alen)"""
        return None
    def drawArc(self, _x, _y, _w, _h, _a, _alen):
        """None QPainter.drawArc(None self, int _x, int _y, int _w, int _h, int _a, int _alen)"""
        return None
    def drawConvexPolygon(self, _point, *args):
        """None QPainter.drawConvexPolygon(None self, QPointF _point, ... *args)"""
        return None
    def drawConvexPolygon(self, _poly):
        """None QPainter.drawConvexPolygon(None self, QPolygonF _poly)"""
        return None
    def drawConvexPolygon(self, _point, *args):
        """None QPainter.drawConvexPolygon(None self, QPoint _point, ... *args)"""
        return None
    def drawConvexPolygon(self, _poly):
        """None QPainter.drawConvexPolygon(None self, QPolygon _poly)"""
        return None
    def drawPolygon(self, _point, *args):
        """None QPainter.drawPolygon(None self, QPointF _point, ... *args)"""
        return None
    def drawPolygon(self, _points, _fillRule):
        """None QPainter.drawPolygon(None self, QPolygonF _points, Qt.FillRule _fillRule)"""
        return None
    def drawPolygon(self, _point, *args):
        """None QPainter.drawPolygon(None self, QPoint _point, ... *args)"""
        return None
    def drawPolygon(self, _points, _fillRule):
        """None QPainter.drawPolygon(None self, QPolygon _points, Qt.FillRule _fillRule)"""
        return None
    def drawPolyline(self, _point, *args):
        """None QPainter.drawPolyline(None self, QPointF _point, ... *args)"""
        return None
    def drawPolyline(self, _polyline):
        """None QPainter.drawPolyline(None self, QPolygonF _polyline)"""
        return None
    def drawPolyline(self, _point, *args):
        """None QPainter.drawPolyline(None self, QPoint _point, ... *args)"""
        return None
    def drawPolyline(self, _polyline):
        """None QPainter.drawPolyline(None self, QPolygon _polyline)"""
        return None
    def drawEllipse(self, _r):
        """None QPainter.drawEllipse(None self, QRectF _r)"""
        return None
    def drawEllipse(self, _r):
        """None QPainter.drawEllipse(None self, QRect _r)"""
        return None
    def drawEllipse(self, _x, _y, _w, _h):
        """None QPainter.drawEllipse(None self, int _x, int _y, int _w, int _h)"""
        return None
    def drawEllipse(self, _center, _rx, _ry):
        """None QPainter.drawEllipse(None self, QPointF _center, float _rx, float _ry)"""
        return None
    def drawEllipse(self, _center, _rx, _ry):
        """None QPainter.drawEllipse(None self, QPoint _center, int _rx, int _ry)"""
        return None
    def drawRects(self, _rect, *args):
        """None QPainter.drawRects(None self, QRectF _rect, ... *args)"""
        return None
    def drawRects(self, _rects):
        """None QPainter.drawRects(None self, list-of-QRectF _rects)"""
        return None
    def drawRects(self, _rect, *args):
        """None QPainter.drawRects(None self, QRect _rect, ... *args)"""
        return None
    def drawRects(self, _rects):
        """None QPainter.drawRects(None self, list-of-QRect _rects)"""
        return None
    def drawLines(self, _line, *args):
        """None QPainter.drawLines(None self, QLineF _line, ... *args)"""
        return None
    def drawLines(self, _lines):
        """None QPainter.drawLines(None self, list-of-QLineF _lines)"""
        return None
    def drawLines(self, _pointPair, *args):
        """None QPainter.drawLines(None self, QPointF _pointPair, ... *args)"""
        return None
    def drawLines(self, _pointPairs):
        """None QPainter.drawLines(None self, list-of-QPointF _pointPairs)"""
        return None
    def drawLines(self, _line, *args):
        """None QPainter.drawLines(None self, QLine _line, ... *args)"""
        return None
    def drawLines(self, _lines):
        """None QPainter.drawLines(None self, list-of-QLine _lines)"""
        return None
    def drawLines(self, _pointPair, *args):
        """None QPainter.drawLines(None self, QPoint _pointPair, ... *args)"""
        return None
    def drawLines(self, _pointPairs):
        """None QPainter.drawLines(None self, list-of-QPoint _pointPairs)"""
        return None
    def drawPoints(self, _point, *args):
        """None QPainter.drawPoints(None self, QPointF _point, ... *args)"""
        return None
    def drawPoints(self, _points):
        """None QPainter.drawPoints(None self, QPolygonF _points)"""
        return None
    def drawPoints(self, _point, *args):
        """None QPainter.drawPoints(None self, QPoint _point, ... *args)"""
        return None
    def drawPoints(self, _points):
        """None QPainter.drawPoints(None self, QPolygon _points)"""
        return None
    def drawPath(self, _path):
        """None QPainter.drawPath(None self, QPainterPath _path)"""
        return None
    def fillPath(self, _path, _brush):
        """None QPainter.fillPath(None self, QPainterPath _path, QBrush _brush)"""
        return None
    def strokePath(self, _path, _pen):
        """None QPainter.strokePath(None self, QPainterPath _path, QPen _pen)"""
        return None
    def viewTransformEnabled(self):
        """bool QPainter.viewTransformEnabled(None self)"""
        return bool()
    def setViewTransformEnabled(self, _enable):
        """None QPainter.setViewTransformEnabled(None self, bool _enable)"""
        return None
    def setViewport(self, _viewport):
        """None QPainter.setViewport(None self, QRect _viewport)"""
        return None
    def setViewport(self, _x, _y, _w, _h):
        """None QPainter.setViewport(None self, int _x, int _y, int _w, int _h)"""
        return None
    def viewport(self):
        """QRect QPainter.viewport(None self)"""
        return QRect()
    def setWindow(self, _window):
        """None QPainter.setWindow(None self, QRect _window)"""
        return None
    def setWindow(self, _x, _y, _w, _h):
        """None QPainter.setWindow(None self, int _x, int _y, int _w, int _h)"""
        return None
    def window(self):
        """QRect QPainter.window(None self)"""
        return QRect()
    def translate(self, _offset):
        """None QPainter.translate(None self, QPointF _offset)"""
        return None
    def translate(self, _dx, _dy):
        """None QPainter.translate(None self, float _dx, float _dy)"""
        return None
    def translate(self, _offset):
        """None QPainter.translate(None self, QPoint _offset)"""
        return None
    def rotate(self, _a):
        """None QPainter.rotate(None self, float _a)"""
        return None
    def shear(self, _sh, _sv):
        """None QPainter.shear(None self, float _sh, float _sv)"""
        return None
    def scale(self, _sx, _sy):
        """None QPainter.scale(None self, float _sx, float _sy)"""
        return None
    def matrixEnabled(self):
        """bool QPainter.matrixEnabled(None self)"""
        return bool()
    def setMatrixEnabled(self, _enabled):
        """None QPainter.setMatrixEnabled(None self, bool _enabled)"""
        return None
    def resetMatrix(self):
        """None QPainter.resetMatrix(None self)"""
        return None
    def deviceMatrix(self):
        """QMatrix QPainter.deviceMatrix(None self)"""
        return QMatrix()
    def matrix(self):
        """QMatrix QPainter.matrix(None self)"""
        return QMatrix()
    def setMatrix(self, _matrix, _combine):
        """None QPainter.setMatrix(None self, QMatrix _matrix, bool _combine)"""
        return None
    def restore(self):
        """None QPainter.restore(None self)"""
        return None
    def save(self):
        """None QPainter.save(None self)"""
        return None
    def hasClipping(self):
        """bool QPainter.hasClipping(None self)"""
        return bool()
    def setClipping(self, _enable):
        """None QPainter.setClipping(None self, bool _enable)"""
        return None
    def setClipPath(self, _path, _operation):
        """None QPainter.setClipPath(None self, QPainterPath _path, Qt.ClipOperation _operation)"""
        return None
    def setClipRegion(self, _region, _operation):
        """None QPainter.setClipRegion(None self, QRegion _region, Qt.ClipOperation _operation)"""
        return None
    def setClipRect(self, _rectangle, _operation):
        """None QPainter.setClipRect(None self, QRectF _rectangle, Qt.ClipOperation _operation)"""
        return None
    def setClipRect(self, _x, _y, _width, _height, _operation):
        """None QPainter.setClipRect(None self, int _x, int _y, int _width, int _height, Qt.ClipOperation _operation)"""
        return None
    def setClipRect(self, _rectangle, _operation):
        """None QPainter.setClipRect(None self, QRect _rectangle, Qt.ClipOperation _operation)"""
        return None
    def clipPath(self):
        """QPainterPath QPainter.clipPath(None self)"""
        return QPainterPath()
    def clipRegion(self):
        """QRegion QPainter.clipRegion(None self)"""
        return QRegion()
    def background(self):
        """QBrush QPainter.background(None self)"""
        return QBrush()
    def setBackground(self, _bg):
        """None QPainter.setBackground(None self, QBrush _bg)"""
        return None
    def setBrushOrigin(self):
        """QPointF QPainter.setBrushOrigin(None self)"""
        return QPointF()
    def setBrushOrigin(self, _x, _y):
        """None QPainter.setBrushOrigin(None self, int _x, int _y)"""
        return None
    def setBrushOrigin(self, _p):
        """None QPainter.setBrushOrigin(None self, QPoint _p)"""
        return None
    def brushOrigin(self):
        """QPoint QPainter.brushOrigin(None self)"""
        return QPoint()
    def backgroundMode(self):
        """Qt.BGMode QPainter.backgroundMode(None self)"""
        return Qt.BGMode()
    def setBackgroundMode(self, _mode):
        """None QPainter.setBackgroundMode(None self, Qt.BGMode _mode)"""
        return None
    def brush(self):
        """QBrush QPainter.brush(None self)"""
        return QBrush()
    def setBrush(self, _brush):
        """None QPainter.setBrush(None self, QBrush _brush)"""
        return None
    def setBrush(self, _style):
        """None QPainter.setBrush(None self, Qt.BrushStyle _style)"""
        return None
    def pen(self):
        """QPen QPainter.pen(None self)"""
        return QPen()
    def setPen(self, _color):
        """None QPainter.setPen(None self, QColor _color)"""
        return None
    def setPen(self, _pen):
        """None QPainter.setPen(None self, QPen _pen)"""
        return None
    def setPen(self, _style):
        """None QPainter.setPen(None self, Qt.PenStyle _style)"""
        return None
    def fontInfo(self):
        """QFontInfo QPainter.fontInfo(None self)"""
        return QFontInfo()
    def fontMetrics(self):
        """QFontMetrics QPainter.fontMetrics(None self)"""
        return QFontMetrics()
    def setFont(self, _f):
        """None QPainter.setFont(None self, QFont _f)"""
        return None
    def font(self):
        """QFont QPainter.font(None self)"""
        return QFont()
    def compositionMode(self):
        """QPainter.CompositionMode QPainter.compositionMode(None self)"""
        return QPainter.CompositionMode()
    def setCompositionMode(self, _mode):
        """None QPainter.setCompositionMode(None self, QPainter.CompositionMode _mode)"""
        return None
    def initFrom(self, _widget):
        """None QPainter.initFrom(None self, QWidget _widget)"""
        return None
    def isActive(self):
        """bool QPainter.isActive(None self)"""
        return bool()
    def end(self):
        """bool QPainter.end(None self)"""
        return bool()
    def begin(self):
        """QPaintDevice QPainter.begin(None self)"""
        return QPaintDevice()
    def device(self):
        """QPaintDevice QPainter.device(None self)"""
        return QPaintDevice()


class QTextItem():
    """"""
    RightToLeft = int() # QTextItem.RenderFlag enum
    Overline = int() # QTextItem.RenderFlag enum
    Underline = int() # QTextItem.RenderFlag enum
    StrikeOut = int() # QTextItem.RenderFlag enum

    def __init__(self):
        """None QTextItem.__init__(None self)"""
        return None
    def __init__(self):
        """QTextItem QTextItem.__init__(None self)"""
        return QTextItem()
    def font(self):
        """QFont QTextItem.font(None self)"""
        return QFont()
    def text(self):
        """QString QTextItem.text(None self)"""
        return QString()
    def renderFlags(self):
        """QTextItem.RenderFlags QTextItem.renderFlags(None self)"""
        return QTextItem.RenderFlags()
    def width(self):
        """float QTextItem.width(None self)"""
        return float()
    def ascent(self):
        """float QTextItem.ascent(None self)"""
        return float()
    def descent(self):
        """float QTextItem.descent(None self)"""
        return float()


class QPaintEngine():
    """"""
    X11 = int() # QPaintEngine.Type enum
    Windows = int() # QPaintEngine.Type enum
    QuickDraw = int() # QPaintEngine.Type enum
    CoreGraphics = int() # QPaintEngine.Type enum
    MacPrinter = int() # QPaintEngine.Type enum
    QWindowSystem = int() # QPaintEngine.Type enum
    PostScript = int() # QPaintEngine.Type enum
    OpenGL = int() # QPaintEngine.Type enum
    Picture = int() # QPaintEngine.Type enum
    SVG = int() # QPaintEngine.Type enum
    Raster = int() # QPaintEngine.Type enum
    Direct3D = int() # QPaintEngine.Type enum
    Pdf = int() # QPaintEngine.Type enum
    OpenVG = int() # QPaintEngine.Type enum
    OpenGL2 = int() # QPaintEngine.Type enum
    PaintBuffer = int() # QPaintEngine.Type enum
    User = int() # QPaintEngine.Type enum
    MaxUser = int() # QPaintEngine.Type enum

    OddEvenMode = int() # QPaintEngine.PolygonDrawMode enum
    WindingMode = int() # QPaintEngine.PolygonDrawMode enum
    ConvexMode = int() # QPaintEngine.PolygonDrawMode enum
    PolylineMode = int() # QPaintEngine.PolygonDrawMode enum

    DirtyPen = int() # QPaintEngine.DirtyFlag enum
    DirtyBrush = int() # QPaintEngine.DirtyFlag enum
    DirtyBrushOrigin = int() # QPaintEngine.DirtyFlag enum
    DirtyFont = int() # QPaintEngine.DirtyFlag enum
    DirtyBackground = int() # QPaintEngine.DirtyFlag enum
    DirtyBackgroundMode = int() # QPaintEngine.DirtyFlag enum
    DirtyTransform = int() # QPaintEngine.DirtyFlag enum
    DirtyClipRegion = int() # QPaintEngine.DirtyFlag enum
    DirtyClipPath = int() # QPaintEngine.DirtyFlag enum
    DirtyHints = int() # QPaintEngine.DirtyFlag enum
    DirtyCompositionMode = int() # QPaintEngine.DirtyFlag enum
    DirtyClipEnabled = int() # QPaintEngine.DirtyFlag enum
    DirtyOpacity = int() # QPaintEngine.DirtyFlag enum
    AllDirty = int() # QPaintEngine.DirtyFlag enum

    PrimitiveTransform = int() # QPaintEngine.PaintEngineFeature enum
    PatternTransform = int() # QPaintEngine.PaintEngineFeature enum
    PixmapTransform = int() # QPaintEngine.PaintEngineFeature enum
    PatternBrush = int() # QPaintEngine.PaintEngineFeature enum
    LinearGradientFill = int() # QPaintEngine.PaintEngineFeature enum
    RadialGradientFill = int() # QPaintEngine.PaintEngineFeature enum
    ConicalGradientFill = int() # QPaintEngine.PaintEngineFeature enum
    AlphaBlend = int() # QPaintEngine.PaintEngineFeature enum
    PorterDuff = int() # QPaintEngine.PaintEngineFeature enum
    PainterPaths = int() # QPaintEngine.PaintEngineFeature enum
    Antialiasing = int() # QPaintEngine.PaintEngineFeature enum
    BrushStroke = int() # QPaintEngine.PaintEngineFeature enum
    ConstantOpacity = int() # QPaintEngine.PaintEngineFeature enum
    MaskedBrush = int() # QPaintEngine.PaintEngineFeature enum
    PaintOutsidePaintEvent = int() # QPaintEngine.PaintEngineFeature enum
    PerspectiveTransform = int() # QPaintEngine.PaintEngineFeature enum
    BlendModes = int() # QPaintEngine.PaintEngineFeature enum
    ObjectBoundingModeGradients = int() # QPaintEngine.PaintEngineFeature enum
    RasterOpModes = int() # QPaintEngine.PaintEngineFeature enum
    AllFeatures = int() # QPaintEngine.PaintEngineFeature enum

    def __init__(self, _features):
        """None QPaintEngine.__init__(None self, QPaintEngine.PaintEngineFeatures _features)"""
        return None
    def painter(self):
        """QPainter QPaintEngine.painter(None self)"""
        return QPainter()
    def hasFeature(self, _feature):
        """bool QPaintEngine.hasFeature(None self, QPaintEngine.PaintEngineFeatures _feature)"""
        return bool()
    def type(self):
        """abstract QPaintEngine.Type QPaintEngine.type(None self)"""
        return QPaintEngine.Type()
    def paintDevice(self):
        """QPaintDevice QPaintEngine.paintDevice(None self)"""
        return QPaintDevice()
    def setPaintDevice(self, _device):
        """None QPaintEngine.setPaintDevice(None self, QPaintDevice _device)"""
        return None
    def drawImage(self, _r, _pm, _sr, _flags):
        """None QPaintEngine.drawImage(None self, QRectF _r, QImage _pm, QRectF _sr, Qt.ImageConversionFlags _flags)"""
        return None
    def drawTiledPixmap(self, _r, _pixmap, _s):
        """None QPaintEngine.drawTiledPixmap(None self, QRectF _r, QPixmap _pixmap, QPointF _s)"""
        return None
    def drawTextItem(self, _p, _textItem):
        """None QPaintEngine.drawTextItem(None self, QPointF _p, QTextItem _textItem)"""
        return None
    def drawPixmap(self, _r, _pm, _sr):
        """abstract None QPaintEngine.drawPixmap(None self, QRectF _r, QPixmap _pm, QRectF _sr)"""
        return None
    def drawPolygon(self, _points, _mode):
        """None QPaintEngine.drawPolygon(None self, QPointF _points, QPaintEngine.PolygonDrawMode _mode)"""
        return None
    def drawPolygon(self, _points, _mode):
        """None QPaintEngine.drawPolygon(None self, QPoint _points, QPaintEngine.PolygonDrawMode _mode)"""
        return None
    def drawPoints(self, _points):
        """None QPaintEngine.drawPoints(None self, QPointF _points)"""
        return None
    def drawPoints(self, _points):
        """None QPaintEngine.drawPoints(None self, QPoint _points)"""
        return None
    def drawPath(self, _path):
        """None QPaintEngine.drawPath(None self, QPainterPath _path)"""
        return None
    def drawEllipse(self, _r):
        """None QPaintEngine.drawEllipse(None self, QRectF _r)"""
        return None
    def drawEllipse(self, _r):
        """None QPaintEngine.drawEllipse(None self, QRect _r)"""
        return None
    def drawLines(self, _lines):
        """None QPaintEngine.drawLines(None self, QLine _lines)"""
        return None
    def drawLines(self, _lines):
        """None QPaintEngine.drawLines(None self, QLineF _lines)"""
        return None
    def drawRects(self, _rects):
        """None QPaintEngine.drawRects(None self, QRect _rects)"""
        return None
    def drawRects(self, _rects):
        """None QPaintEngine.drawRects(None self, QRectF _rects)"""
        return None
    def updateState(self, _state):
        """abstract None QPaintEngine.updateState(None self, QPaintEngineState _state)"""
        return None
    def end(self):
        """abstract bool QPaintEngine.end(None self)"""
        return bool()
    def begin(self, _pdev):
        """abstract bool QPaintEngine.begin(None self, QPaintDevice _pdev)"""
        return bool()
    def setActive(self, _newState):
        """None QPaintEngine.setActive(None self, bool _newState)"""
        return None
    def isActive(self):
        """bool QPaintEngine.isActive(None self)"""
        return bool()


class QPaintEngineState():
    """"""
    def __init__(self):
        """None QPaintEngineState.__init__(None self)"""
        return None
    def __init__(self):
        """QPaintEngineState QPaintEngineState.__init__(None self)"""
        return QPaintEngineState()
    def penNeedsResolving(self):
        """bool QPaintEngineState.penNeedsResolving(None self)"""
        return bool()
    def brushNeedsResolving(self):
        """bool QPaintEngineState.brushNeedsResolving(None self)"""
        return bool()
    def transform(self):
        """QTransform QPaintEngineState.transform(None self)"""
        return QTransform()
    def painter(self):
        """QPainter QPaintEngineState.painter(None self)"""
        return QPainter()
    def compositionMode(self):
        """QPainter.CompositionMode QPaintEngineState.compositionMode(None self)"""
        return QPainter.CompositionMode()
    def renderHints(self):
        """QPainter.RenderHints QPaintEngineState.renderHints(None self)"""
        return QPainter.RenderHints()
    def isClipEnabled(self):
        """bool QPaintEngineState.isClipEnabled(None self)"""
        return bool()
    def clipPath(self):
        """QPainterPath QPaintEngineState.clipPath(None self)"""
        return QPainterPath()
    def clipRegion(self):
        """QRegion QPaintEngineState.clipRegion(None self)"""
        return QRegion()
    def clipOperation(self):
        """Qt.ClipOperation QPaintEngineState.clipOperation(None self)"""
        return Qt.ClipOperation()
    def opacity(self):
        """float QPaintEngineState.opacity(None self)"""
        return float()
    def matrix(self):
        """QMatrix QPaintEngineState.matrix(None self)"""
        return QMatrix()
    def font(self):
        """QFont QPaintEngineState.font(None self)"""
        return QFont()
    def backgroundMode(self):
        """Qt.BGMode QPaintEngineState.backgroundMode(None self)"""
        return Qt.BGMode()
    def backgroundBrush(self):
        """QBrush QPaintEngineState.backgroundBrush(None self)"""
        return QBrush()
    def brushOrigin(self):
        """QPointF QPaintEngineState.brushOrigin(None self)"""
        return QPointF()
    def brush(self):
        """QBrush QPaintEngineState.brush(None self)"""
        return QBrush()
    def pen(self):
        """QPen QPaintEngineState.pen(None self)"""
        return QPen()
    def state(self):
        """QPaintEngine.DirtyFlags QPaintEngineState.state(None self)"""
        return QPaintEngine.DirtyFlags()


class QPainterPath():
    """"""
    MoveToElement = int() # QPainterPath.ElementType enum
    LineToElement = int() # QPainterPath.ElementType enum
    CurveToElement = int() # QPainterPath.ElementType enum
    CurveToDataElement = int() # QPainterPath.ElementType enum

    def __init__(self):
        """None QPainterPath.__init__(None self)"""
        return None
    def __init__(self, _startPoint):
        """None QPainterPath.__init__(None self, QPointF _startPoint)"""
        return None
    def __init__(self, _other):
        """None QPainterPath.__init__(None self, QPainterPath _other)"""
        return None
    def __mul__(self, _m):
        """QPainterPath QPainterPath.__mul__(None self, QMatrix _m)"""
        return QPainterPath()
    def __mul__(self, _m):
        """QPainterPath QPainterPath.__mul__(None self, QTransform _m)"""
        return QPainterPath()
    def translated(self, _dx, _dy):
        """QPainterPath QPainterPath.translated(None self, float _dx, float _dy)"""
        return QPainterPath()
    def translated(self, _offset):
        """QPainterPath QPainterPath.translated(None self, QPointF _offset)"""
        return QPainterPath()
    def translate(self, _dx, _dy):
        """None QPainterPath.translate(None self, float _dx, float _dy)"""
        return None
    def translate(self, _offset):
        """None QPainterPath.translate(None self, QPointF _offset)"""
        return None
    def __isub__(self, _other):
        """QPainterPath QPainterPath.__isub__(None self, QPainterPath _other)"""
        return QPainterPath()
    def __iadd__(self, _other):
        """QPainterPath QPainterPath.__iadd__(None self, QPainterPath _other)"""
        return QPainterPath()
    def __ior__(self, _other):
        """QPainterPath QPainterPath.__ior__(None self, QPainterPath _other)"""
        return QPainterPath()
    def __iand__(self, _other):
        """QPainterPath QPainterPath.__iand__(None self, QPainterPath _other)"""
        return QPainterPath()
    def __sub__(self, _other):
        """QPainterPath QPainterPath.__sub__(None self, QPainterPath _other)"""
        return QPainterPath()
    def __add__(self, _other):
        """QPainterPath QPainterPath.__add__(None self, QPainterPath _other)"""
        return QPainterPath()
    def __or__(self, _other):
        """QPainterPath QPainterPath.__or__(None self, QPainterPath _other)"""
        return QPainterPath()
    def __and__(self, _other):
        """QPainterPath QPainterPath.__and__(None self, QPainterPath _other)"""
        return QPainterPath()
    def simplified(self):
        """QPainterPath QPainterPath.simplified(None self)"""
        return QPainterPath()
    def addRoundedRect(self, _rect, _xRadius, _yRadius, _mode):
        """None QPainterPath.addRoundedRect(None self, QRectF _rect, float _xRadius, float _yRadius, Qt.SizeMode _mode)"""
        return None
    def addRoundedRect(self, _x, _y, _w, _h, _xRadius, _yRadius, _mode):
        """None QPainterPath.addRoundedRect(None self, float _x, float _y, float _w, float _h, float _xRadius, float _yRadius, Qt.SizeMode _mode)"""
        return None
    def subtractedInverted(self, _r):
        """QPainterPath QPainterPath.subtractedInverted(None self, QPainterPath _r)"""
        return QPainterPath()
    def subtracted(self, _r):
        """QPainterPath QPainterPath.subtracted(None self, QPainterPath _r)"""
        return QPainterPath()
    def intersected(self, _r):
        """QPainterPath QPainterPath.intersected(None self, QPainterPath _r)"""
        return QPainterPath()
    def united(self, _r):
        """QPainterPath QPainterPath.united(None self, QPainterPath _r)"""
        return QPainterPath()
    def slopeAtPercent(self, _t):
        """float QPainterPath.slopeAtPercent(None self, float _t)"""
        return float()
    def angleAtPercent(self, _t):
        """float QPainterPath.angleAtPercent(None self, float _t)"""
        return float()
    def pointAtPercent(self, _t):
        """QPointF QPainterPath.pointAtPercent(None self, float _t)"""
        return QPointF()
    def percentAtLength(self, _t):
        """float QPainterPath.percentAtLength(None self, float _t)"""
        return float()
    def length(self):
        """float QPainterPath.length(None self)"""
        return float()
    def addRoundRect(self, _rect, _xRnd, _yRnd):
        """None QPainterPath.addRoundRect(None self, QRectF _rect, int _xRnd, int _yRnd)"""
        return None
    def addRoundRect(self, _x, _y, _w, _h, _xRnd, _yRnd):
        """None QPainterPath.addRoundRect(None self, float _x, float _y, float _w, float _h, int _xRnd, int _yRnd)"""
        return None
    def addRoundRect(self, _rect, _roundness):
        """None QPainterPath.addRoundRect(None self, QRectF _rect, int _roundness)"""
        return None
    def addRoundRect(self, _x, _y, _w, _h, _roundness):
        """None QPainterPath.addRoundRect(None self, float _x, float _y, float _w, float _h, int _roundness)"""
        return None
    def setElementPositionAt(self, _i, _x, _y):
        """None QPainterPath.setElementPositionAt(None self, int _i, float _x, float _y)"""
        return None
    def elementAt(self, _i):
        """QPainterPath.Element QPainterPath.elementAt(None self, int _i)"""
        return QPainterPath.Element()
    def elementCount(self):
        """int QPainterPath.elementCount(None self)"""
        return int()
    def isEmpty(self):
        """bool QPainterPath.isEmpty(None self)"""
        return bool()
    def arcMoveTo(self, _rect, _angle):
        """None QPainterPath.arcMoveTo(None self, QRectF _rect, float _angle)"""
        return None
    def arcMoveTo(self, _x, _y, _w, _h, _angle):
        """None QPainterPath.arcMoveTo(None self, float _x, float _y, float _w, float _h, float _angle)"""
        return None
    def __ne__(self, _other):
        """bool QPainterPath.__ne__(None self, QPainterPath _other)"""
        return bool()
    def __eq__(self, _other):
        """bool QPainterPath.__eq__(None self, QPainterPath _other)"""
        return bool()
    def toFillPolygon(self, _matrix):
        """QPolygonF QPainterPath.toFillPolygon(None self, QMatrix _matrix)"""
        return QPolygonF()
    def toFillPolygon(self, _matrix):
        """QPolygonF QPainterPath.toFillPolygon(None self, QTransform _matrix)"""
        return QPolygonF()
    def toFillPolygons(self, _matrix):
        """list-of-QPolygonF QPainterPath.toFillPolygons(None self, QMatrix _matrix)"""
        return [QPolygonF()]
    def toFillPolygons(self, _matrix):
        """list-of-QPolygonF QPainterPath.toFillPolygons(None self, QTransform _matrix)"""
        return [QPolygonF()]
    def toSubpathPolygons(self, _matrix):
        """list-of-QPolygonF QPainterPath.toSubpathPolygons(None self, QMatrix _matrix)"""
        return [QPolygonF()]
    def toSubpathPolygons(self, _matrix):
        """list-of-QPolygonF QPainterPath.toSubpathPolygons(None self, QTransform _matrix)"""
        return [QPolygonF()]
    def toReversed(self):
        """QPainterPath QPainterPath.toReversed(None self)"""
        return QPainterPath()
    def setFillRule(self, _fillRule):
        """None QPainterPath.setFillRule(None self, Qt.FillRule _fillRule)"""
        return None
    def fillRule(self):
        """Qt.FillRule QPainterPath.fillRule(None self)"""
        return Qt.FillRule()
    def controlPointRect(self):
        """QRectF QPainterPath.controlPointRect(None self)"""
        return QRectF()
    def boundingRect(self):
        """QRectF QPainterPath.boundingRect(None self)"""
        return QRectF()
    def intersects(self, _rect):
        """bool QPainterPath.intersects(None self, QRectF _rect)"""
        return bool()
    def intersects(self, _p):
        """bool QPainterPath.intersects(None self, QPainterPath _p)"""
        return bool()
    def contains(self, _pt):
        """bool QPainterPath.contains(None self, QPointF _pt)"""
        return bool()
    def contains(self, _rect):
        """bool QPainterPath.contains(None self, QRectF _rect)"""
        return bool()
    def contains(self, _p):
        """bool QPainterPath.contains(None self, QPainterPath _p)"""
        return bool()
    def connectPath(self, _path):
        """None QPainterPath.connectPath(None self, QPainterPath _path)"""
        return None
    def addRegion(self, _region):
        """None QPainterPath.addRegion(None self, QRegion _region)"""
        return None
    def addPath(self, _path):
        """None QPainterPath.addPath(None self, QPainterPath _path)"""
        return None
    def addText(self, _point, _f, _text):
        """None QPainterPath.addText(None self, QPointF _point, QFont _f, QString _text)"""
        return None
    def addText(self, _x, _y, _f, _text):
        """None QPainterPath.addText(None self, float _x, float _y, QFont _f, QString _text)"""
        return None
    def addPolygon(self, _polygon):
        """None QPainterPath.addPolygon(None self, QPolygonF _polygon)"""
        return None
    def addEllipse(self, _rect):
        """None QPainterPath.addEllipse(None self, QRectF _rect)"""
        return None
    def addEllipse(self, _x, _y, _w, _h):
        """None QPainterPath.addEllipse(None self, float _x, float _y, float _w, float _h)"""
        return None
    def addEllipse(self, _center, _rx, _ry):
        """None QPainterPath.addEllipse(None self, QPointF _center, float _rx, float _ry)"""
        return None
    def addRect(self, _rect):
        """None QPainterPath.addRect(None self, QRectF _rect)"""
        return None
    def addRect(self, _x, _y, _w, _h):
        """None QPainterPath.addRect(None self, float _x, float _y, float _w, float _h)"""
        return None
    def currentPosition(self):
        """QPointF QPainterPath.currentPosition(None self)"""
        return QPointF()
    def quadTo(self, _ctrlPt, _endPt):
        """None QPainterPath.quadTo(None self, QPointF _ctrlPt, QPointF _endPt)"""
        return None
    def quadTo(self, _ctrlPtx, _ctrlPty, _endPtx, _endPty):
        """None QPainterPath.quadTo(None self, float _ctrlPtx, float _ctrlPty, float _endPtx, float _endPty)"""
        return None
    def cubicTo(self, _ctrlPt1, _ctrlPt2, _endPt):
        """None QPainterPath.cubicTo(None self, QPointF _ctrlPt1, QPointF _ctrlPt2, QPointF _endPt)"""
        return None
    def cubicTo(self, _ctrlPt1x, _ctrlPt1y, _ctrlPt2x, _ctrlPt2y, _endPtx, _endPty):
        """None QPainterPath.cubicTo(None self, float _ctrlPt1x, float _ctrlPt1y, float _ctrlPt2x, float _ctrlPt2y, float _endPtx, float _endPty)"""
        return None
    def arcTo(self, _rect, _startAngle, _arcLength):
        """None QPainterPath.arcTo(None self, QRectF _rect, float _startAngle, float _arcLength)"""
        return None
    def arcTo(self, _x, _y, _w, _h, _startAngle, _arcLenght):
        """None QPainterPath.arcTo(None self, float _x, float _y, float _w, float _h, float _startAngle, float _arcLenght)"""
        return None
    def lineTo(self, _p):
        """None QPainterPath.lineTo(None self, QPointF _p)"""
        return None
    def lineTo(self, _x, _y):
        """None QPainterPath.lineTo(None self, float _x, float _y)"""
        return None
    def moveTo(self, _p):
        """None QPainterPath.moveTo(None self, QPointF _p)"""
        return None
    def moveTo(self, _x, _y):
        """None QPainterPath.moveTo(None self, float _x, float _y)"""
        return None
    def closeSubpath(self):
        """None QPainterPath.closeSubpath(None self)"""
        return None


class QPainterPathStroker():
    """"""
    def __init__(self):
        """None QPainterPathStroker.__init__(None self)"""
        return None
    def dashPattern(self):
        """list-of-float QPainterPathStroker.dashPattern(None self)"""
        return [float()]
    def dashOffset(self):
        """float QPainterPathStroker.dashOffset(None self)"""
        return float()
    def setDashOffset(self, _offset):
        """None QPainterPathStroker.setDashOffset(None self, float _offset)"""
        return None
    def createStroke(self, _path):
        """QPainterPath QPainterPathStroker.createStroke(None self, QPainterPath _path)"""
        return QPainterPath()
    def setDashPattern(self):
        """Qt.PenStyle QPainterPathStroker.setDashPattern(None self)"""
        return Qt.PenStyle()
    def setDashPattern(self, _dashPattern):
        """None QPainterPathStroker.setDashPattern(None self, list-of-float _dashPattern)"""
        return None
    def curveThreshold(self):
        """float QPainterPathStroker.curveThreshold(None self)"""
        return float()
    def setCurveThreshold(self, _threshold):
        """None QPainterPathStroker.setCurveThreshold(None self, float _threshold)"""
        return None
    def miterLimit(self):
        """float QPainterPathStroker.miterLimit(None self)"""
        return float()
    def setMiterLimit(self, _length):
        """None QPainterPathStroker.setMiterLimit(None self, float _length)"""
        return None
    def joinStyle(self):
        """Qt.PenJoinStyle QPainterPathStroker.joinStyle(None self)"""
        return Qt.PenJoinStyle()
    def setJoinStyle(self, _style):
        """None QPainterPathStroker.setJoinStyle(None self, Qt.PenJoinStyle _style)"""
        return None
    def capStyle(self):
        """Qt.PenCapStyle QPainterPathStroker.capStyle(None self)"""
        return Qt.PenCapStyle()
    def setCapStyle(self, _style):
        """None QPainterPathStroker.setCapStyle(None self, Qt.PenCapStyle _style)"""
        return None
    def width(self):
        """float QPainterPathStroker.width(None self)"""
        return float()
    def setWidth(self, _width):
        """None QPainterPathStroker.setWidth(None self, float _width)"""
        return None


class QPalette():
    """"""
    WindowText = int() # QPalette.ColorRole enum
    Foreground = int() # QPalette.ColorRole enum
    Button = int() # QPalette.ColorRole enum
    Light = int() # QPalette.ColorRole enum
    Midlight = int() # QPalette.ColorRole enum
    Dark = int() # QPalette.ColorRole enum
    Mid = int() # QPalette.ColorRole enum
    Text = int() # QPalette.ColorRole enum
    BrightText = int() # QPalette.ColorRole enum
    ButtonText = int() # QPalette.ColorRole enum
    Base = int() # QPalette.ColorRole enum
    Window = int() # QPalette.ColorRole enum
    Background = int() # QPalette.ColorRole enum
    Shadow = int() # QPalette.ColorRole enum
    Highlight = int() # QPalette.ColorRole enum
    HighlightedText = int() # QPalette.ColorRole enum
    Link = int() # QPalette.ColorRole enum
    LinkVisited = int() # QPalette.ColorRole enum
    AlternateBase = int() # QPalette.ColorRole enum
    ToolTipBase = int() # QPalette.ColorRole enum
    ToolTipText = int() # QPalette.ColorRole enum
    NColorRoles = int() # QPalette.ColorRole enum
    NoRole = int() # QPalette.ColorRole enum

    Active = int() # QPalette.ColorGroup enum
    Disabled = int() # QPalette.ColorGroup enum
    Inactive = int() # QPalette.ColorGroup enum
    NColorGroups = int() # QPalette.ColorGroup enum
    Current = int() # QPalette.ColorGroup enum
    All = int() # QPalette.ColorGroup enum
    Normal = int() # QPalette.ColorGroup enum

    def __init__(self):
        """None QPalette.__init__(None self)"""
        return None
    def __init__(self, _button):
        """None QPalette.__init__(None self, QColor _button)"""
        return None
    def __init__(self, _button):
        """None QPalette.__init__(None self, Qt.GlobalColor _button)"""
        return None
    def __init__(self, _button, _background):
        """None QPalette.__init__(None self, QColor _button, QColor _background)"""
        return None
    def __init__(self, _foreground, _button, _light, _dark, _mid, _text, _bright_text, _base, _background):
        """None QPalette.__init__(None self, QBrush _foreground, QBrush _button, QBrush _light, QBrush _dark, QBrush _mid, QBrush _text, QBrush _bright_text, QBrush _base, QBrush _background)"""
        return None
    def __init__(self, _foreground, _background, _light, _dark, _mid, _text, _base):
        """None QPalette.__init__(None self, QColor _foreground, QColor _background, QColor _light, QColor _dark, QColor _mid, QColor _text, QColor _base)"""
        return None
    def __init__(self, _palette):
        """None QPalette.__init__(None self, QPalette _palette)"""
        return None
    def __init__(self, _variant):
        """None QPalette.__init__(None self, QVariant _variant)"""
        return None
    def cacheKey(self):
        """int QPalette.cacheKey(None self)"""
        return int()
    def isBrushSet(self, _cg, _cr):
        """bool QPalette.isBrushSet(None self, QPalette.ColorGroup _cg, QPalette.ColorRole _cr)"""
        return bool()
    def setColor(self, _acg, _acr, _acolor):
        """None QPalette.setColor(None self, QPalette.ColorGroup _acg, QPalette.ColorRole _acr, QColor _acolor)"""
        return None
    def setColor(self, _acr, _acolor):
        """None QPalette.setColor(None self, QPalette.ColorRole _acr, QColor _acolor)"""
        return None
    def resolve(self):
        """QPalette QPalette.resolve(None self)"""
        return QPalette()
    def resolve(self):
        """int QPalette.resolve(None self)"""
        return int()
    def resolve(self, _mask):
        """None QPalette.resolve(None self, int _mask)"""
        return None
    def serialNumber(self):
        """int QPalette.serialNumber(None self)"""
        return int()
    def isCopyOf(self, _p):
        """bool QPalette.isCopyOf(None self, QPalette _p)"""
        return bool()
    def __ne__(self, _p):
        """bool QPalette.__ne__(None self, QPalette _p)"""
        return bool()
    def __eq__(self, _p):
        """bool QPalette.__eq__(None self, QPalette _p)"""
        return bool()
    def toolTipText(self):
        """QBrush QPalette.toolTipText(None self)"""
        return QBrush()
    def toolTipBase(self):
        """QBrush QPalette.toolTipBase(None self)"""
        return QBrush()
    def linkVisited(self):
        """QBrush QPalette.linkVisited(None self)"""
        return QBrush()
    def link(self):
        """QBrush QPalette.link(None self)"""
        return QBrush()
    def highlightedText(self):
        """QBrush QPalette.highlightedText(None self)"""
        return QBrush()
    def highlight(self):
        """QBrush QPalette.highlight(None self)"""
        return QBrush()
    def shadow(self):
        """QBrush QPalette.shadow(None self)"""
        return QBrush()
    def buttonText(self):
        """QBrush QPalette.buttonText(None self)"""
        return QBrush()
    def brightText(self):
        """QBrush QPalette.brightText(None self)"""
        return QBrush()
    def midlight(self):
        """QBrush QPalette.midlight(None self)"""
        return QBrush()
    def background(self):
        """QBrush QPalette.background(None self)"""
        return QBrush()
    def window(self):
        """QBrush QPalette.window(None self)"""
        return QBrush()
    def alternateBase(self):
        """QBrush QPalette.alternateBase(None self)"""
        return QBrush()
    def base(self):
        """QBrush QPalette.base(None self)"""
        return QBrush()
    def text(self):
        """QBrush QPalette.text(None self)"""
        return QBrush()
    def mid(self):
        """QBrush QPalette.mid(None self)"""
        return QBrush()
    def dark(self):
        """QBrush QPalette.dark(None self)"""
        return QBrush()
    def light(self):
        """QBrush QPalette.light(None self)"""
        return QBrush()
    def button(self):
        """QBrush QPalette.button(None self)"""
        return QBrush()
    def windowText(self):
        """QBrush QPalette.windowText(None self)"""
        return QBrush()
    def foreground(self):
        """QBrush QPalette.foreground(None self)"""
        return QBrush()
    def isEqual(self, _cr1, _cr2):
        """bool QPalette.isEqual(None self, QPalette.ColorGroup _cr1, QPalette.ColorGroup _cr2)"""
        return bool()
    def setColorGroup(self, _cr, _foreground, _button, _light, _dark, _mid, _text, _bright_text, _base, _background):
        """None QPalette.setColorGroup(None self, QPalette.ColorGroup _cr, QBrush _foreground, QBrush _button, QBrush _light, QBrush _dark, QBrush _mid, QBrush _text, QBrush _bright_text, QBrush _base, QBrush _background)"""
        return None
    def setBrush(self, _cg, _cr, _brush):
        """None QPalette.setBrush(None self, QPalette.ColorGroup _cg, QPalette.ColorRole _cr, QBrush _brush)"""
        return None
    def setBrush(self, _acr, _abrush):
        """None QPalette.setBrush(None self, QPalette.ColorRole _acr, QBrush _abrush)"""
        return None
    def brush(self, _cg, _cr):
        """QBrush QPalette.brush(None self, QPalette.ColorGroup _cg, QPalette.ColorRole _cr)"""
        return QBrush()
    def brush(self, _cr):
        """QBrush QPalette.brush(None self, QPalette.ColorRole _cr)"""
        return QBrush()
    def color(self, _cg, _cr):
        """QColor QPalette.color(None self, QPalette.ColorGroup _cg, QPalette.ColorRole _cr)"""
        return QColor()
    def color(self, _cr):
        """QColor QPalette.color(None self, QPalette.ColorRole _cr)"""
        return QColor()
    def setCurrentColorGroup(self, _cg):
        """None QPalette.setCurrentColorGroup(None self, QPalette.ColorGroup _cg)"""
        return None
    def currentColorGroup(self):
        """QPalette.ColorGroup QPalette.currentColorGroup(None self)"""
        return QPalette.ColorGroup()


class QPen():
    """"""
    def __init__(self):
        """None QPen.__init__(None self)"""
        return None
    def __init__(self):
        """Qt.PenStyle QPen.__init__(None self)"""
        return Qt.PenStyle()
    def __init__(self, _color):
        """None QPen.__init__(None self, QColor _color)"""
        return None
    def __init__(self, _brush, _width, _style, _cap, _join):
        """None QPen.__init__(None self, QBrush _brush, float _width, Qt.PenStyle _style, Qt.PenCapStyle _cap, Qt.PenJoinStyle _join)"""
        return None
    def __init__(self, _pen):
        """None QPen.__init__(None self, QPen _pen)"""
        return None
    def __init__(self, _variant):
        """None QPen.__init__(None self, QVariant _variant)"""
        return None
    def setCosmetic(self, _cosmetic):
        """None QPen.setCosmetic(None self, bool _cosmetic)"""
        return None
    def isCosmetic(self):
        """bool QPen.isCosmetic(None self)"""
        return bool()
    def setDashOffset(self, _doffset):
        """None QPen.setDashOffset(None self, float _doffset)"""
        return None
    def dashOffset(self):
        """float QPen.dashOffset(None self)"""
        return float()
    def __ne__(self, _p):
        """bool QPen.__ne__(None self, QPen _p)"""
        return bool()
    def __eq__(self, _p):
        """bool QPen.__eq__(None self, QPen _p)"""
        return bool()
    def setMiterLimit(self, _limit):
        """None QPen.setMiterLimit(None self, float _limit)"""
        return None
    def miterLimit(self):
        """float QPen.miterLimit(None self)"""
        return float()
    def setDashPattern(self, _pattern):
        """None QPen.setDashPattern(None self, list-of-float _pattern)"""
        return None
    def dashPattern(self):
        """list-of-float QPen.dashPattern(None self)"""
        return [float()]
    def setJoinStyle(self, _pcs):
        """None QPen.setJoinStyle(None self, Qt.PenJoinStyle _pcs)"""
        return None
    def joinStyle(self):
        """Qt.PenJoinStyle QPen.joinStyle(None self)"""
        return Qt.PenJoinStyle()
    def setCapStyle(self, _pcs):
        """None QPen.setCapStyle(None self, Qt.PenCapStyle _pcs)"""
        return None
    def capStyle(self):
        """Qt.PenCapStyle QPen.capStyle(None self)"""
        return Qt.PenCapStyle()
    def isSolid(self):
        """bool QPen.isSolid(None self)"""
        return bool()
    def setBrush(self, _brush):
        """None QPen.setBrush(None self, QBrush _brush)"""
        return None
    def brush(self):
        """QBrush QPen.brush(None self)"""
        return QBrush()
    def setColor(self, _color):
        """None QPen.setColor(None self, QColor _color)"""
        return None
    def color(self):
        """QColor QPen.color(None self)"""
        return QColor()
    def setWidth(self, _width):
        """None QPen.setWidth(None self, int _width)"""
        return None
    def width(self):
        """int QPen.width(None self)"""
        return int()
    def setWidthF(self, _width):
        """None QPen.setWidthF(None self, float _width)"""
        return None
    def widthF(self):
        """float QPen.widthF(None self)"""
        return float()
    def setStyle(self):
        """Qt.PenStyle QPen.setStyle(None self)"""
        return Qt.PenStyle()
    def style(self):
        """Qt.PenStyle QPen.style(None self)"""
        return Qt.PenStyle()


class QPicture(QPaintDevice):
    """"""
    def __init__(self, _formatVersion):
        """None QPicture.__init__(None self, int _formatVersion)"""
        return None
    def __init__(self):
        """QPicture QPicture.__init__(None self)"""
        return QPicture()
    def metric(self, _m):
        """int QPicture.metric(None self, QPaintDevice.PaintDeviceMetric _m)"""
        return int()
    def paintEngine(self):
        """QPaintEngine QPicture.paintEngine(None self)"""
        return QPaintEngine()
    def outputFormatList(self):
        """QStringList QPicture.outputFormatList(None self)"""
        return QStringList()
    def inputFormatList(self):
        """QStringList QPicture.inputFormatList(None self)"""
        return QStringList()
    def outputFormats(self):
        """list-of-QByteArray QPicture.outputFormats(None self)"""
        return [QByteArray()]
    def inputFormats(self):
        """list-of-QByteArray QPicture.inputFormats(None self)"""
        return [QByteArray()]
    def pictureFormat(self, _fileName):
        """str QPicture.pictureFormat(None self, QString _fileName)"""
        return str()
    def isDetached(self):
        """bool QPicture.isDetached(None self)"""
        return bool()
    def detach(self):
        """None QPicture.detach(None self)"""
        return None
    def setBoundingRect(self, _r):
        """None QPicture.setBoundingRect(None self, QRect _r)"""
        return None
    def boundingRect(self):
        """QRect QPicture.boundingRect(None self)"""
        return QRect()
    def save(self, _dev, _format):
        """bool QPicture.save(None self, QIODevice _dev, str _format)"""
        return bool()
    def save(self, _fileName, _format):
        """bool QPicture.save(None self, QString _fileName, str _format)"""
        return bool()
    def load(self, _dev, _format):
        """bool QPicture.load(None self, QIODevice _dev, str _format)"""
        return bool()
    def load(self, _fileName, _format):
        """bool QPicture.load(None self, QString _fileName, str _format)"""
        return bool()
    def play(self, _p):
        """bool QPicture.play(None self, QPainter _p)"""
        return bool()
    def setData(self, _data):
        """None QPicture.setData(None self, str _data)"""
        return None
    def data(self):
        """str QPicture.data(None self)"""
        return str()
    def size(self):
        """int QPicture.size(None self)"""
        return int()
    def devType(self):
        """int QPicture.devType(None self)"""
        return int()
    def isNull(self):
        """bool QPicture.isNull(None self)"""
        return bool()


class QPictureIO():
    """"""
    def __init__(self):
        """None QPictureIO.__init__(None self)"""
        return None
    def __init__(self, _ioDevice, _format):
        """None QPictureIO.__init__(None self, QIODevice _ioDevice, str _format)"""
        return None
    def __init__(self, _fileName, _format):
        """None QPictureIO.__init__(None self, QString _fileName, str _format)"""
        return None
    def defineIOHandler(self, _format, _header, _flags, _read_picture, _write_picture):
        """None QPictureIO.defineIOHandler(None self, str _format, str _header, str _flags, callable _read_picture, callable _write_picture)"""
        return None
    def outputFormats(self):
        """list-of-QByteArray QPictureIO.outputFormats(None self)"""
        return [QByteArray()]
    def inputFormats(self):
        """list-of-QByteArray QPictureIO.inputFormats(None self)"""
        return [QByteArray()]
    def pictureFormat(self, _fileName):
        """QByteArray QPictureIO.pictureFormat(None self, QString _fileName)"""
        return QByteArray()
    def pictureFormat(self):
        """QIODevice QPictureIO.pictureFormat(None self)"""
        return QIODevice()
    def write(self):
        """bool QPictureIO.write(None self)"""
        return bool()
    def read(self):
        """bool QPictureIO.read(None self)"""
        return bool()
    def setGamma(self):
        """float QPictureIO.setGamma(None self)"""
        return float()
    def setParameters(self):
        """str QPictureIO.setParameters(None self)"""
        return str()
    def setDescription(self):
        """QString QPictureIO.setDescription(None self)"""
        return QString()
    def setQuality(self):
        """int QPictureIO.setQuality(None self)"""
        return int()
    def setFileName(self):
        """QString QPictureIO.setFileName(None self)"""
        return QString()
    def setIODevice(self):
        """QIODevice QPictureIO.setIODevice(None self)"""
        return QIODevice()
    def setFormat(self):
        """str QPictureIO.setFormat(None self)"""
        return str()
    def setStatus(self):
        """int QPictureIO.setStatus(None self)"""
        return int()
    def setPicture(self):
        """QPicture QPictureIO.setPicture(None self)"""
        return QPicture()
    def gamma(self):
        """float QPictureIO.gamma(None self)"""
        return float()
    def parameters(self):
        """str QPictureIO.parameters(None self)"""
        return str()
    def description(self):
        """QString QPictureIO.description(None self)"""
        return QString()
    def quality(self):
        """int QPictureIO.quality(None self)"""
        return int()
    def fileName(self):
        """QString QPictureIO.fileName(None self)"""
        return QString()
    def ioDevice(self):
        """QIODevice QPictureIO.ioDevice(None self)"""
        return QIODevice()
    def format(self):
        """str QPictureIO.format(None self)"""
        return str()
    def status(self):
        """int QPictureIO.status(None self)"""
        return int()
    def picture(self):
        """QPicture QPictureIO.picture(None self)"""
        return QPicture()


class QPixmapCache():
    """"""
    def __init__(self):
        """None QPixmapCache.__init__(None self)"""
        return None
    def __init__(self):
        """QPixmapCache QPixmapCache.__init__(None self)"""
        return QPixmapCache()
    def setCacheLimit(self):
        """int QPixmapCache.setCacheLimit(None self)"""
        return int()
    def replace(self, _key, _pixmap):
        """bool QPixmapCache.replace(None self, QPixmapCache.Key _key, QPixmap _pixmap)"""
        return bool()
    def remove(self, _key):
        """None QPixmapCache.remove(None self, QString _key)"""
        return None
    def remove(self, _key):
        """None QPixmapCache.remove(None self, QPixmapCache.Key _key)"""
        return None
    def insert(self, _key):
        """QPixmap QPixmapCache.insert(None self, QString _key)"""
        return QPixmap()
    def insert(self, _pixmap):
        """QPixmapCache.Key QPixmapCache.insert(None self, QPixmap _pixmap)"""
        return QPixmapCache.Key()
    def find(self, _key):
        """QPixmap QPixmapCache.find(None self, QString _key)"""
        return QPixmap()
    def find(self, _key, _pixmap):
        """bool QPixmapCache.find(None self, QString _key, QPixmap _pixmap)"""
        return bool()
    def find(self, _key, _pixmap):
        """bool QPixmapCache.find(None self, QPixmapCache.Key _key, QPixmap _pixmap)"""
        return bool()
    def clear(self):
        """None QPixmapCache.clear(None self)"""
        return None
    def cacheLimit(self):
        """int QPixmapCache.cacheLimit(None self)"""
        return int()


class QPlainTextEdit(QAbstractScrollArea):
    """"""
    NoWrap = int() # QPlainTextEdit.LineWrapMode enum
    WidgetWidth = int() # QPlainTextEdit.LineWrapMode enum

    def __init__(self, _parent):
        """None QPlainTextEdit.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _text, _parent):
        """None QPlainTextEdit.__init__(None self, QString _text, QWidget _parent)"""
        return None
    def anchorAt(self, _pos):
        """QString QPlainTextEdit.anchorAt(None self, QPoint _pos)"""
        return QString()
    def getPaintContext(self):
        """QAbstractTextDocumentLayout.PaintContext QPlainTextEdit.getPaintContext(None self)"""
        return QAbstractTextDocumentLayout.PaintContext()
    def blockBoundingGeometry(self, _block):
        """QRectF QPlainTextEdit.blockBoundingGeometry(None self, QTextBlock _block)"""
        return QRectF()
    def blockBoundingRect(self, _block):
        """QRectF QPlainTextEdit.blockBoundingRect(None self, QTextBlock _block)"""
        return QRectF()
    def contentOffset(self):
        """QPointF QPlainTextEdit.contentOffset(None self)"""
        return QPointF()
    def firstVisibleBlock(self):
        """QTextBlock QPlainTextEdit.firstVisibleBlock(None self)"""
        return QTextBlock()
    def scrollContentsBy(self, _dx, _dy):
        """None QPlainTextEdit.scrollContentsBy(None self, int _dx, int _dy)"""
        return None
    def insertFromMimeData(self, _source):
        """None QPlainTextEdit.insertFromMimeData(None self, QMimeData _source)"""
        return None
    def canInsertFromMimeData(self, _source):
        """bool QPlainTextEdit.canInsertFromMimeData(None self, QMimeData _source)"""
        return bool()
    def createMimeDataFromSelection(self):
        """QMimeData QPlainTextEdit.createMimeDataFromSelection(None self)"""
        return QMimeData()
    def inputMethodQuery(self, _property):
        """QVariant QPlainTextEdit.inputMethodQuery(None self, Qt.InputMethodQuery _property)"""
        return QVariant()
    def inputMethodEvent(self):
        """QInputMethodEvent QPlainTextEdit.inputMethodEvent(None self)"""
        return QInputMethodEvent()
    def wheelEvent(self, _e):
        """None QPlainTextEdit.wheelEvent(None self, QWheelEvent _e)"""
        return None
    def changeEvent(self, _e):
        """None QPlainTextEdit.changeEvent(None self, QEvent _e)"""
        return None
    def showEvent(self):
        """QShowEvent QPlainTextEdit.showEvent(None self)"""
        return QShowEvent()
    def focusOutEvent(self, _e):
        """None QPlainTextEdit.focusOutEvent(None self, QFocusEvent _e)"""
        return None
    def focusInEvent(self, _e):
        """None QPlainTextEdit.focusInEvent(None self, QFocusEvent _e)"""
        return None
    def dropEvent(self, _e):
        """None QPlainTextEdit.dropEvent(None self, QDropEvent _e)"""
        return None
    def dragMoveEvent(self, _e):
        """None QPlainTextEdit.dragMoveEvent(None self, QDragMoveEvent _e)"""
        return None
    def dragLeaveEvent(self, _e):
        """None QPlainTextEdit.dragLeaveEvent(None self, QDragLeaveEvent _e)"""
        return None
    def dragEnterEvent(self, _e):
        """None QPlainTextEdit.dragEnterEvent(None self, QDragEnterEvent _e)"""
        return None
    def contextMenuEvent(self, _e):
        """None QPlainTextEdit.contextMenuEvent(None self, QContextMenuEvent _e)"""
        return None
    def focusNextPrevChild(self, _next):
        """bool QPlainTextEdit.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def mouseDoubleClickEvent(self, _e):
        """None QPlainTextEdit.mouseDoubleClickEvent(None self, QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(self, _e):
        """None QPlainTextEdit.mouseReleaseEvent(None self, QMouseEvent _e)"""
        return None
    def mouseMoveEvent(self, _e):
        """None QPlainTextEdit.mouseMoveEvent(None self, QMouseEvent _e)"""
        return None
    def mousePressEvent(self, _e):
        """None QPlainTextEdit.mousePressEvent(None self, QMouseEvent _e)"""
        return None
    def paintEvent(self, _e):
        """None QPlainTextEdit.paintEvent(None self, QPaintEvent _e)"""
        return None
    def resizeEvent(self, _e):
        """None QPlainTextEdit.resizeEvent(None self, QResizeEvent _e)"""
        return None
    def keyReleaseEvent(self, _e):
        """None QPlainTextEdit.keyReleaseEvent(None self, QKeyEvent _e)"""
        return None
    def keyPressEvent(self, _e):
        """None QPlainTextEdit.keyPressEvent(None self, QKeyEvent _e)"""
        return None
    def timerEvent(self, _e):
        """None QPlainTextEdit.timerEvent(None self, QTimerEvent _e)"""
        return None
    def event(self, _e):
        """bool QPlainTextEdit.event(None self, QEvent _e)"""
        return bool()
    def centerCursor(self):
        """None QPlainTextEdit.centerCursor(None self)"""
        return None
    def appendHtml(self, _html):
        """None QPlainTextEdit.appendHtml(None self, QString _html)"""
        return None
    def appendPlainText(self, _text):
        """None QPlainTextEdit.appendPlainText(None self, QString _text)"""
        return None
    def insertPlainText(self, _text):
        """None QPlainTextEdit.insertPlainText(None self, QString _text)"""
        return None
    def selectAll(self):
        """None QPlainTextEdit.selectAll(None self)"""
        return None
    def clear(self):
        """None QPlainTextEdit.clear(None self)"""
        return None
    def redo(self):
        """None QPlainTextEdit.redo(None self)"""
        return None
    def undo(self):
        """None QPlainTextEdit.undo(None self)"""
        return None
    def paste(self):
        """None QPlainTextEdit.paste(None self)"""
        return None
    def copy(self):
        """None QPlainTextEdit.copy(None self)"""
        return None
    def cut(self):
        """None QPlainTextEdit.cut(None self)"""
        return None
    def setPlainText(self, _text):
        """None QPlainTextEdit.setPlainText(None self, QString _text)"""
        return None
    def blockCount(self):
        """int QPlainTextEdit.blockCount(None self)"""
        return int()
    def print_(self, _printer):
        """None QPlainTextEdit.print_(None self, QPrinter _printer)"""
        return None
    def canPaste(self):
        """bool QPlainTextEdit.canPaste(None self)"""
        return bool()
    def moveCursor(self, _operation, _mode):
        """None QPlainTextEdit.moveCursor(None self, QTextCursor.MoveOperation _operation, QTextCursor.MoveMode _mode)"""
        return None
    def extraSelections(self):
        """list-of-QTextEdit.ExtraSelection QPlainTextEdit.extraSelections(None self)"""
        return [QTextEdit.ExtraSelection()]
    def setExtraSelections(self, _selections):
        """None QPlainTextEdit.setExtraSelections(None self, list-of-QTextEdit.ExtraSelection _selections)"""
        return None
    def setCursorWidth(self, _width):
        """None QPlainTextEdit.setCursorWidth(None self, int _width)"""
        return None
    def cursorWidth(self):
        """int QPlainTextEdit.cursorWidth(None self)"""
        return int()
    def setTabStopWidth(self, _width):
        """None QPlainTextEdit.setTabStopWidth(None self, int _width)"""
        return None
    def tabStopWidth(self):
        """int QPlainTextEdit.tabStopWidth(None self)"""
        return int()
    def setOverwriteMode(self, _overwrite):
        """None QPlainTextEdit.setOverwriteMode(None self, bool _overwrite)"""
        return None
    def overwriteMode(self):
        """bool QPlainTextEdit.overwriteMode(None self)"""
        return bool()
    def cursorRect(self, _cursor):
        """QRect QPlainTextEdit.cursorRect(None self, QTextCursor _cursor)"""
        return QRect()
    def cursorRect(self):
        """QRect QPlainTextEdit.cursorRect(None self)"""
        return QRect()
    def cursorForPosition(self, _pos):
        """QTextCursor QPlainTextEdit.cursorForPosition(None self, QPoint _pos)"""
        return QTextCursor()
    def createStandardContextMenu(self):
        """QMenu QPlainTextEdit.createStandardContextMenu(None self)"""
        return QMenu()
    def loadResource(self, _type, _name):
        """QVariant QPlainTextEdit.loadResource(None self, int _type, QUrl _name)"""
        return QVariant()
    def ensureCursorVisible(self):
        """None QPlainTextEdit.ensureCursorVisible(None self)"""
        return None
    def toPlainText(self):
        """QString QPlainTextEdit.toPlainText(None self)"""
        return QString()
    def find(self, _exp, _options):
        """bool QPlainTextEdit.find(None self, QString _exp, QTextDocument.FindFlags _options)"""
        return bool()
    def centerOnScroll(self):
        """bool QPlainTextEdit.centerOnScroll(None self)"""
        return bool()
    def setCenterOnScroll(self, _enabled):
        """None QPlainTextEdit.setCenterOnScroll(None self, bool _enabled)"""
        return None
    def backgroundVisible(self):
        """bool QPlainTextEdit.backgroundVisible(None self)"""
        return bool()
    def setBackgroundVisible(self, _visible):
        """None QPlainTextEdit.setBackgroundVisible(None self, bool _visible)"""
        return None
    def setWordWrapMode(self, _policy):
        """None QPlainTextEdit.setWordWrapMode(None self, QTextOption.WrapMode _policy)"""
        return None
    def wordWrapMode(self):
        """QTextOption.WrapMode QPlainTextEdit.wordWrapMode(None self)"""
        return QTextOption.WrapMode()
    def setLineWrapMode(self, _mode):
        """None QPlainTextEdit.setLineWrapMode(None self, QPlainTextEdit.LineWrapMode _mode)"""
        return None
    def lineWrapMode(self):
        """QPlainTextEdit.LineWrapMode QPlainTextEdit.lineWrapMode(None self)"""
        return QPlainTextEdit.LineWrapMode()
    def maximumBlockCount(self):
        """int QPlainTextEdit.maximumBlockCount(None self)"""
        return int()
    def setMaximumBlockCount(self, _maximum):
        """None QPlainTextEdit.setMaximumBlockCount(None self, int _maximum)"""
        return None
    def setUndoRedoEnabled(self, _enable):
        """None QPlainTextEdit.setUndoRedoEnabled(None self, bool _enable)"""
        return None
    def isUndoRedoEnabled(self):
        """bool QPlainTextEdit.isUndoRedoEnabled(None self)"""
        return bool()
    def documentTitle(self):
        """QString QPlainTextEdit.documentTitle(None self)"""
        return QString()
    def setDocumentTitle(self, _title):
        """None QPlainTextEdit.setDocumentTitle(None self, QString _title)"""
        return None
    def setTabChangesFocus(self, _b):
        """None QPlainTextEdit.setTabChangesFocus(None self, bool _b)"""
        return None
    def tabChangesFocus(self):
        """bool QPlainTextEdit.tabChangesFocus(None self)"""
        return bool()
    def currentCharFormat(self):
        """QTextCharFormat QPlainTextEdit.currentCharFormat(None self)"""
        return QTextCharFormat()
    def setCurrentCharFormat(self, _format):
        """None QPlainTextEdit.setCurrentCharFormat(None self, QTextCharFormat _format)"""
        return None
    def mergeCurrentCharFormat(self, _modifier):
        """None QPlainTextEdit.mergeCurrentCharFormat(None self, QTextCharFormat _modifier)"""
        return None
    def textInteractionFlags(self):
        """Qt.TextInteractionFlags QPlainTextEdit.textInteractionFlags(None self)"""
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(self, _flags):
        """None QPlainTextEdit.setTextInteractionFlags(None self, Qt.TextInteractionFlags _flags)"""
        return None
    def setReadOnly(self, _ro):
        """None QPlainTextEdit.setReadOnly(None self, bool _ro)"""
        return None
    def isReadOnly(self):
        """bool QPlainTextEdit.isReadOnly(None self)"""
        return bool()
    def textCursor(self):
        """QTextCursor QPlainTextEdit.textCursor(None self)"""
        return QTextCursor()
    def setTextCursor(self, _cursor):
        """None QPlainTextEdit.setTextCursor(None self, QTextCursor _cursor)"""
        return None
    def document(self):
        """QTextDocument QPlainTextEdit.document(None self)"""
        return QTextDocument()
    def setDocument(self, _document):
        """None QPlainTextEdit.setDocument(None self, QTextDocument _document)"""
        return None


class QPlainTextDocumentLayout(QAbstractTextDocumentLayout):
    """"""
    def __init__(self, _document):
        """None QPlainTextDocumentLayout.__init__(None self, QTextDocument _document)"""
        return None
    def documentChanged(self, _from, _charsAdded):
        """int QPlainTextDocumentLayout.documentChanged(None self, int _from, int _charsAdded)"""
        return int()
    def requestUpdate(self):
        """None QPlainTextDocumentLayout.requestUpdate(None self)"""
        return None
    def cursorWidth(self):
        """int QPlainTextDocumentLayout.cursorWidth(None self)"""
        return int()
    def setCursorWidth(self, _width):
        """None QPlainTextDocumentLayout.setCursorWidth(None self, int _width)"""
        return None
    def ensureBlockLayout(self, _block):
        """None QPlainTextDocumentLayout.ensureBlockLayout(None self, QTextBlock _block)"""
        return None
    def blockBoundingRect(self, _block):
        """QRectF QPlainTextDocumentLayout.blockBoundingRect(None self, QTextBlock _block)"""
        return QRectF()
    def frameBoundingRect(self):
        """QTextFrame QPlainTextDocumentLayout.frameBoundingRect(None self)"""
        return QTextFrame()
    def documentSize(self):
        """QSizeF QPlainTextDocumentLayout.documentSize(None self)"""
        return QSizeF()
    def pageCount(self):
        """int QPlainTextDocumentLayout.pageCount(None self)"""
        return int()
    def hitTest(self):
        """Qt.HitTestAccuracy QPlainTextDocumentLayout.hitTest(None self)"""
        return Qt.HitTestAccuracy()
    def draw(self):
        """QAbstractTextDocumentLayout.PaintContext QPlainTextDocumentLayout.draw(None self)"""
        return QAbstractTextDocumentLayout.PaintContext()


class QPolygon():
    """"""
    def __init__(self):
        """None QPolygon.__init__(None self)"""
        return None
    def __init__(self, _a):
        """None QPolygon.__init__(None self, QPolygon _a)"""
        return None
    def __init__(self, _v):
        """None QPolygon.__init__(None self, list-of-QPoint _v)"""
        return None
    def __init__(self, _rectangle, _closed):
        """None QPolygon.__init__(None self, QRect _rectangle, bool _closed)"""
        return None
    def __init__(self, _asize):
        """None QPolygon.__init__(None self, int _asize)"""
        return None
    def __init__(self, _points):
        """None QPolygon.__init__(None self, list-of-int _points)"""
        return None
    def __init__(self, _variant):
        """None QPolygon.__init__(None self, QVariant _variant)"""
        return None
    def __mul__(self, _m):
        """QPolygon QPolygon.__mul__(None self, QMatrix _m)"""
        return QPolygon()
    def __mul__(self, _m):
        """QPolygon QPolygon.__mul__(None self, QTransform _m)"""
        return QPolygon()
    def __contains__(self, _value):
        """int QPolygon.__contains__(None self, QPoint _value)"""
        return int()
    def __delitem__(self, _i):
        """None QPolygon.__delitem__(None self, int _i)"""
        return None
    def __delitem__(self, _slice):
        """None QPolygon.__delitem__(None self, slice _slice)"""
        return None
    def __setitem__(self, _i, _value):
        """None QPolygon.__setitem__(None self, int _i, QPoint _value)"""
        return None
    def __setitem__(self, _slice, _list):
        """None QPolygon.__setitem__(None self, slice _slice, QPolygon _list)"""
        return None
    def __getitem__(self, _i):
        """QPoint QPolygon.__getitem__(None self, int _i)"""
        return QPoint()
    def __getitem__(self, _slice):
        """QPolygon QPolygon.__getitem__(None self, slice _slice)"""
        return QPolygon()
    def __lshift__(self, _value):
        """object QPolygon.__lshift__(None self, QPoint _value)"""
        return object()
    def __eq__(self, _other):
        """bool QPolygon.__eq__(None self, QPolygon _other)"""
        return bool()
    def __iadd__(self, _other):
        """QPolygon QPolygon.__iadd__(None self, QPolygon _other)"""
        return QPolygon()
    def __iadd__(self, _value):
        """QPolygon QPolygon.__iadd__(None self, QPoint _value)"""
        return QPolygon()
    def __add__(self, _other):
        """QPolygon QPolygon.__add__(None self, QPolygon _other)"""
        return QPolygon()
    def __ne__(self, _other):
        """bool QPolygon.__ne__(None self, QPolygon _other)"""
        return bool()
    def value(self, _i):
        """QPoint QPolygon.value(None self, int _i)"""
        return QPoint()
    def value(self, _i, _defaultValue):
        """QPoint QPolygon.value(None self, int _i, QPoint _defaultValue)"""
        return QPoint()
    def size(self):
        """int QPolygon.size(None self)"""
        return int()
    def replace(self, _i, _value):
        """None QPolygon.replace(None self, int _i, QPoint _value)"""
        return None
    def remove(self, _i):
        """None QPolygon.remove(None self, int _i)"""
        return None
    def remove(self, _i, _count):
        """None QPolygon.remove(None self, int _i, int _count)"""
        return None
    def prepend(self, _value):
        """None QPolygon.prepend(None self, QPoint _value)"""
        return None
    def mid(self, _pos, _length):
        """QPolygon QPolygon.mid(None self, int _pos, int _length)"""
        return QPolygon()
    def lastIndexOf(self, _value, _from):
        """int QPolygon.lastIndexOf(None self, QPoint _value, int _from)"""
        return int()
    def last(self):
        """QPoint QPolygon.last(None self)"""
        return QPoint()
    def isEmpty(self):
        """bool QPolygon.isEmpty(None self)"""
        return bool()
    def insert(self, _i, _value):
        """None QPolygon.insert(None self, int _i, QPoint _value)"""
        return None
    def indexOf(self, _value, _from):
        """int QPolygon.indexOf(None self, QPoint _value, int _from)"""
        return int()
    def first(self):
        """QPoint QPolygon.first(None self)"""
        return QPoint()
    def fill(self, _value, _size):
        """None QPolygon.fill(None self, QPoint _value, int _size)"""
        return None
    def data(self):
        """sip.voidptr QPolygon.data(None self)"""
        return sip.voidptr()
    def __len__(self):
        """ QPolygon.__len__(None self)"""
        return ()
    def count(self, _value):
        """int QPolygon.count(None self, QPoint _value)"""
        return int()
    def count(self):
        """int QPolygon.count(None self)"""
        return int()
    def contains(self, _value):
        """bool QPolygon.contains(None self, QPoint _value)"""
        return bool()
    def clear(self):
        """None QPolygon.clear(None self)"""
        return None
    def at(self, _i):
        """QPoint QPolygon.at(None self, int _i)"""
        return QPoint()
    def append(self, _value):
        """None QPolygon.append(None self, QPoint _value)"""
        return None
    def translated(self, _dx, _dy):
        """QPolygon QPolygon.translated(None self, int _dx, int _dy)"""
        return QPolygon()
    def translated(self, _offset):
        """QPolygon QPolygon.translated(None self, QPoint _offset)"""
        return QPolygon()
    def subtracted(self, _r):
        """QPolygon QPolygon.subtracted(None self, QPolygon _r)"""
        return QPolygon()
    def intersected(self, _r):
        """QPolygon QPolygon.intersected(None self, QPolygon _r)"""
        return QPolygon()
    def united(self, _r):
        """QPolygon QPolygon.united(None self, QPolygon _r)"""
        return QPolygon()
    def containsPoint(self, _pt, _fillRule):
        """bool QPolygon.containsPoint(None self, QPoint _pt, Qt.FillRule _fillRule)"""
        return bool()
    def setPoint(self, _index, _pt):
        """None QPolygon.setPoint(None self, int _index, QPoint _pt)"""
        return None
    def setPoint(self, _index, _x, _y):
        """None QPolygon.setPoint(None self, int _index, int _x, int _y)"""
        return None
    def putPoints(self, _index, _firstx, _firsty, *args):
        """None QPolygon.putPoints(None self, int _index, int _firstx, int _firsty, ... *args)"""
        return None
    def putPoints(self, _index, _nPoints, _fromPolygon, _from):
        """None QPolygon.putPoints(None self, int _index, int _nPoints, QPolygon _fromPolygon, int _from)"""
        return None
    def setPoints(self, _points):
        """None QPolygon.setPoints(None self, list-of-int _points)"""
        return None
    def setPoints(self, _firstx, _firsty, *args):
        """None QPolygon.setPoints(None self, int _firstx, int _firsty, ... *args)"""
        return None
    def point(self, _index):
        """QPoint QPolygon.point(None self, int _index)"""
        return QPoint()
    def boundingRect(self):
        """QRect QPolygon.boundingRect(None self)"""
        return QRect()
    def translate(self, _dx, _dy):
        """None QPolygon.translate(None self, int _dx, int _dy)"""
        return None
    def translate(self, _offset):
        """None QPolygon.translate(None self, QPoint _offset)"""
        return None


class QPolygonF():
    """"""
    def __init__(self):
        """None QPolygonF.__init__(None self)"""
        return None
    def __init__(self, _a):
        """None QPolygonF.__init__(None self, QPolygonF _a)"""
        return None
    def __init__(self, _v):
        """None QPolygonF.__init__(None self, list-of-QPointF _v)"""
        return None
    def __init__(self, _r):
        """None QPolygonF.__init__(None self, QRectF _r)"""
        return None
    def __init__(self, _a):
        """None QPolygonF.__init__(None self, QPolygon _a)"""
        return None
    def __init__(self, _asize):
        """None QPolygonF.__init__(None self, int _asize)"""
        return None
    def __mul__(self, _m):
        """QPolygonF QPolygonF.__mul__(None self, QMatrix _m)"""
        return QPolygonF()
    def __mul__(self, _m):
        """QPolygonF QPolygonF.__mul__(None self, QTransform _m)"""
        return QPolygonF()
    def __contains__(self, _value):
        """int QPolygonF.__contains__(None self, QPointF _value)"""
        return int()
    def __delitem__(self, _i):
        """None QPolygonF.__delitem__(None self, int _i)"""
        return None
    def __delitem__(self, _slice):
        """None QPolygonF.__delitem__(None self, slice _slice)"""
        return None
    def __setitem__(self, _i, _value):
        """None QPolygonF.__setitem__(None self, int _i, QPointF _value)"""
        return None
    def __setitem__(self, _slice, _list):
        """None QPolygonF.__setitem__(None self, slice _slice, QPolygonF _list)"""
        return None
    def __getitem__(self, _i):
        """QPointF QPolygonF.__getitem__(None self, int _i)"""
        return QPointF()
    def __getitem__(self, _slice):
        """QPolygonF QPolygonF.__getitem__(None self, slice _slice)"""
        return QPolygonF()
    def __lshift__(self, _value):
        """object QPolygonF.__lshift__(None self, QPointF _value)"""
        return object()
    def __eq__(self, _other):
        """bool QPolygonF.__eq__(None self, QPolygonF _other)"""
        return bool()
    def __iadd__(self, _other):
        """QPolygonF QPolygonF.__iadd__(None self, QPolygonF _other)"""
        return QPolygonF()
    def __iadd__(self, _value):
        """QPolygonF QPolygonF.__iadd__(None self, QPointF _value)"""
        return QPolygonF()
    def __add__(self, _other):
        """QPolygonF QPolygonF.__add__(None self, QPolygonF _other)"""
        return QPolygonF()
    def __ne__(self, _other):
        """bool QPolygonF.__ne__(None self, QPolygonF _other)"""
        return bool()
    def value(self, _i):
        """QPointF QPolygonF.value(None self, int _i)"""
        return QPointF()
    def value(self, _i, _defaultValue):
        """QPointF QPolygonF.value(None self, int _i, QPointF _defaultValue)"""
        return QPointF()
    def size(self):
        """int QPolygonF.size(None self)"""
        return int()
    def replace(self, _i, _value):
        """None QPolygonF.replace(None self, int _i, QPointF _value)"""
        return None
    def remove(self, _i):
        """None QPolygonF.remove(None self, int _i)"""
        return None
    def remove(self, _i, _count):
        """None QPolygonF.remove(None self, int _i, int _count)"""
        return None
    def prepend(self, _value):
        """None QPolygonF.prepend(None self, QPointF _value)"""
        return None
    def mid(self, _pos, _length):
        """QPolygonF QPolygonF.mid(None self, int _pos, int _length)"""
        return QPolygonF()
    def lastIndexOf(self, _value, _from):
        """int QPolygonF.lastIndexOf(None self, QPointF _value, int _from)"""
        return int()
    def last(self):
        """QPointF QPolygonF.last(None self)"""
        return QPointF()
    def isEmpty(self):
        """bool QPolygonF.isEmpty(None self)"""
        return bool()
    def insert(self, _i, _value):
        """None QPolygonF.insert(None self, int _i, QPointF _value)"""
        return None
    def indexOf(self, _value, _from):
        """int QPolygonF.indexOf(None self, QPointF _value, int _from)"""
        return int()
    def first(self):
        """QPointF QPolygonF.first(None self)"""
        return QPointF()
    def fill(self, _value, _size):
        """None QPolygonF.fill(None self, QPointF _value, int _size)"""
        return None
    def data(self):
        """sip.voidptr QPolygonF.data(None self)"""
        return sip.voidptr()
    def __len__(self):
        """ QPolygonF.__len__(None self)"""
        return ()
    def count(self, _value):
        """int QPolygonF.count(None self, QPointF _value)"""
        return int()
    def count(self):
        """int QPolygonF.count(None self)"""
        return int()
    def contains(self, _value):
        """bool QPolygonF.contains(None self, QPointF _value)"""
        return bool()
    def clear(self):
        """None QPolygonF.clear(None self)"""
        return None
    def at(self, _i):
        """QPointF QPolygonF.at(None self, int _i)"""
        return QPointF()
    def append(self, _value):
        """None QPolygonF.append(None self, QPointF _value)"""
        return None
    def translated(self, _offset):
        """QPolygonF QPolygonF.translated(None self, QPointF _offset)"""
        return QPolygonF()
    def translated(self, _dx, _dy):
        """QPolygonF QPolygonF.translated(None self, float _dx, float _dy)"""
        return QPolygonF()
    def subtracted(self, _r):
        """QPolygonF QPolygonF.subtracted(None self, QPolygonF _r)"""
        return QPolygonF()
    def intersected(self, _r):
        """QPolygonF QPolygonF.intersected(None self, QPolygonF _r)"""
        return QPolygonF()
    def united(self, _r):
        """QPolygonF QPolygonF.united(None self, QPolygonF _r)"""
        return QPolygonF()
    def containsPoint(self, _pt, _fillRule):
        """bool QPolygonF.containsPoint(None self, QPointF _pt, Qt.FillRule _fillRule)"""
        return bool()
    def boundingRect(self):
        """QRectF QPolygonF.boundingRect(None self)"""
        return QRectF()
    def isClosed(self):
        """bool QPolygonF.isClosed(None self)"""
        return bool()
    def toPolygon(self):
        """QPolygon QPolygonF.toPolygon(None self)"""
        return QPolygon()
    def translate(self, _offset):
        """None QPolygonF.translate(None self, QPointF _offset)"""
        return None
    def translate(self, _dx, _dy):
        """None QPolygonF.translate(None self, float _dx, float _dy)"""
        return None


class QPrinter(QPaintDevice):
    """"""
    Millimeter = int() # QPrinter.Unit enum
    Point = int() # QPrinter.Unit enum
    Inch = int() # QPrinter.Unit enum
    Pica = int() # QPrinter.Unit enum
    Didot = int() # QPrinter.Unit enum
    Cicero = int() # QPrinter.Unit enum
    DevicePixel = int() # QPrinter.Unit enum

    DuplexNone = int() # QPrinter.DuplexMode enum
    DuplexAuto = int() # QPrinter.DuplexMode enum
    DuplexLongSide = int() # QPrinter.DuplexMode enum
    DuplexShortSide = int() # QPrinter.DuplexMode enum

    AllPages = int() # QPrinter.PrintRange enum
    Selection = int() # QPrinter.PrintRange enum
    PageRange = int() # QPrinter.PrintRange enum
    CurrentPage = int() # QPrinter.PrintRange enum

    NativeFormat = int() # QPrinter.OutputFormat enum
    PdfFormat = int() # QPrinter.OutputFormat enum
    PostScriptFormat = int() # QPrinter.OutputFormat enum

    Idle = int() # QPrinter.PrinterState enum
    Active = int() # QPrinter.PrinterState enum
    Aborted = int() # QPrinter.PrinterState enum
    Error = int() # QPrinter.PrinterState enum

    OnlyOne = int() # QPrinter.PaperSource enum
    Lower = int() # QPrinter.PaperSource enum
    Middle = int() # QPrinter.PaperSource enum
    Manual = int() # QPrinter.PaperSource enum
    Envelope = int() # QPrinter.PaperSource enum
    EnvelopeManual = int() # QPrinter.PaperSource enum
    Auto = int() # QPrinter.PaperSource enum
    Tractor = int() # QPrinter.PaperSource enum
    SmallFormat = int() # QPrinter.PaperSource enum
    LargeFormat = int() # QPrinter.PaperSource enum
    LargeCapacity = int() # QPrinter.PaperSource enum
    Cassette = int() # QPrinter.PaperSource enum
    FormSource = int() # QPrinter.PaperSource enum
    MaxPageSource = int() # QPrinter.PaperSource enum

    GrayScale = int() # QPrinter.ColorMode enum
    Color = int() # QPrinter.ColorMode enum

    FirstPageFirst = int() # QPrinter.PageOrder enum
    LastPageFirst = int() # QPrinter.PageOrder enum

    A4 = int() # QPrinter.PageSize enum
    B5 = int() # QPrinter.PageSize enum
    Letter = int() # QPrinter.PageSize enum
    Legal = int() # QPrinter.PageSize enum
    Executive = int() # QPrinter.PageSize enum
    A0 = int() # QPrinter.PageSize enum
    A1 = int() # QPrinter.PageSize enum
    A2 = int() # QPrinter.PageSize enum
    A3 = int() # QPrinter.PageSize enum
    A5 = int() # QPrinter.PageSize enum
    A6 = int() # QPrinter.PageSize enum
    A7 = int() # QPrinter.PageSize enum
    A8 = int() # QPrinter.PageSize enum
    A9 = int() # QPrinter.PageSize enum
    B0 = int() # QPrinter.PageSize enum
    B1 = int() # QPrinter.PageSize enum
    B10 = int() # QPrinter.PageSize enum
    B2 = int() # QPrinter.PageSize enum
    B3 = int() # QPrinter.PageSize enum
    B4 = int() # QPrinter.PageSize enum
    B6 = int() # QPrinter.PageSize enum
    B7 = int() # QPrinter.PageSize enum
    B8 = int() # QPrinter.PageSize enum
    B9 = int() # QPrinter.PageSize enum
    C5E = int() # QPrinter.PageSize enum
    Comm10E = int() # QPrinter.PageSize enum
    DLE = int() # QPrinter.PageSize enum
    Folio = int() # QPrinter.PageSize enum
    Ledger = int() # QPrinter.PageSize enum
    Tabloid = int() # QPrinter.PageSize enum
    Custom = int() # QPrinter.PageSize enum

    Portrait = int() # QPrinter.Orientation enum
    Landscape = int() # QPrinter.Orientation enum

    ScreenResolution = int() # QPrinter.PrinterMode enum
    PrinterResolution = int() # QPrinter.PrinterMode enum
    HighResolution = int() # QPrinter.PrinterMode enum

    def __init__(self, _mode):
        """None QPrinter.__init__(None self, QPrinter.PrinterMode _mode)"""
        return None
    def __init__(self, _printer, _mode):
        """None QPrinter.__init__(None self, QPrinterInfo _printer, QPrinter.PrinterMode _mode)"""
        return None
    def supportsMultipleCopies(self):
        """bool QPrinter.supportsMultipleCopies(None self)"""
        return bool()
    def copyCount(self):
        """int QPrinter.copyCount(None self)"""
        return int()
    def setCopyCount(self):
        """int QPrinter.setCopyCount(None self)"""
        return int()
    def setEngines(self, _printEngine, _paintEngine):
        """None QPrinter.setEngines(None self, QPrintEngine _printEngine, QPaintEngine _paintEngine)"""
        return None
    def metric(self):
        """QPaintDevice.PaintDeviceMetric QPrinter.metric(None self)"""
        return QPaintDevice.PaintDeviceMetric()
    def actualNumCopies(self):
        """int QPrinter.actualNumCopies(None self)"""
        return int()
    def getPageMargins(self, _left, _top, _right, _bottom, _unit):
        """None QPrinter.getPageMargins(None self, float _left, float _top, float _right, float _bottom, QPrinter.Unit _unit)"""
        return None
    def setPageMargins(self, _left, _top, _right, _bottom, _unit):
        """None QPrinter.setPageMargins(None self, float _left, float _top, float _right, float _bottom, QPrinter.Unit _unit)"""
        return None
    def duplex(self):
        """QPrinter.DuplexMode QPrinter.duplex(None self)"""
        return QPrinter.DuplexMode()
    def setDuplex(self, _duplex):
        """None QPrinter.setDuplex(None self, QPrinter.DuplexMode _duplex)"""
        return None
    def paperSize(self):
        """QPrinter.PageSize QPrinter.paperSize(None self)"""
        return QPrinter.PageSize()
    def paperSize(self, _unit):
        """QSizeF QPrinter.paperSize(None self, QPrinter.Unit _unit)"""
        return QSizeF()
    def setPaperSize(self):
        """QPrinter.PageSize QPrinter.setPaperSize(None self)"""
        return QPrinter.PageSize()
    def setPaperSize(self, _paperSize, _unit):
        """None QPrinter.setPaperSize(None self, QSizeF _paperSize, QPrinter.Unit _unit)"""
        return None
    def isValid(self):
        """bool QPrinter.isValid(None self)"""
        return bool()
    def doubleSidedPrinting(self):
        """bool QPrinter.doubleSidedPrinting(None self)"""
        return bool()
    def setDoubleSidedPrinting(self, _enable):
        """None QPrinter.setDoubleSidedPrinting(None self, bool _enable)"""
        return None
    def printRange(self):
        """QPrinter.PrintRange QPrinter.printRange(None self)"""
        return QPrinter.PrintRange()
    def setPrintRange(self, _range):
        """None QPrinter.setPrintRange(None self, QPrinter.PrintRange _range)"""
        return None
    def toPage(self):
        """int QPrinter.toPage(None self)"""
        return int()
    def fromPage(self):
        """int QPrinter.fromPage(None self)"""
        return int()
    def setFromTo(self, _fromPage, _toPage):
        """None QPrinter.setFromTo(None self, int _fromPage, int _toPage)"""
        return None
    def printEngine(self):
        """QPrintEngine QPrinter.printEngine(None self)"""
        return QPrintEngine()
    def fontEmbeddingEnabled(self):
        """bool QPrinter.fontEmbeddingEnabled(None self)"""
        return bool()
    def setFontEmbeddingEnabled(self, _enable):
        """None QPrinter.setFontEmbeddingEnabled(None self, bool _enable)"""
        return None
    def outputFormat(self):
        """QPrinter.OutputFormat QPrinter.outputFormat(None self)"""
        return QPrinter.OutputFormat()
    def setOutputFormat(self, _format):
        """None QPrinter.setOutputFormat(None self, QPrinter.OutputFormat _format)"""
        return None
    def paintEngine(self):
        """QPaintEngine QPrinter.paintEngine(None self)"""
        return QPaintEngine()
    def printerState(self):
        """QPrinter.PrinterState QPrinter.printerState(None self)"""
        return QPrinter.PrinterState()
    def abort(self):
        """bool QPrinter.abort(None self)"""
        return bool()
    def newPage(self):
        """bool QPrinter.newPage(None self)"""
        return bool()
    def setPrinterSelectionOption(self):
        """QString QPrinter.setPrinterSelectionOption(None self)"""
        return QString()
    def printerSelectionOption(self):
        """QString QPrinter.printerSelectionOption(None self)"""
        return QString()
    def pageRect(self):
        """QRect QPrinter.pageRect(None self)"""
        return QRect()
    def pageRect(self):
        """QPrinter.Unit QPrinter.pageRect(None self)"""
        return QPrinter.Unit()
    def paperRect(self):
        """QRect QPrinter.paperRect(None self)"""
        return QRect()
    def paperRect(self):
        """QPrinter.Unit QPrinter.paperRect(None self)"""
        return QPrinter.Unit()
    def supportedResolutions(self):
        """list-of-int QPrinter.supportedResolutions(None self)"""
        return [int()]
    def paperSource(self):
        """QPrinter.PaperSource QPrinter.paperSource(None self)"""
        return QPrinter.PaperSource()
    def setPaperSource(self):
        """QPrinter.PaperSource QPrinter.setPaperSource(None self)"""
        return QPrinter.PaperSource()
    def numCopies(self):
        """int QPrinter.numCopies(None self)"""
        return int()
    def setNumCopies(self):
        """int QPrinter.setNumCopies(None self)"""
        return int()
    def fullPage(self):
        """bool QPrinter.fullPage(None self)"""
        return bool()
    def setFullPage(self):
        """bool QPrinter.setFullPage(None self)"""
        return bool()
    def collateCopies(self):
        """bool QPrinter.collateCopies(None self)"""
        return bool()
    def setCollateCopies(self, _collate):
        """None QPrinter.setCollateCopies(None self, bool _collate)"""
        return None
    def colorMode(self):
        """QPrinter.ColorMode QPrinter.colorMode(None self)"""
        return QPrinter.ColorMode()
    def setColorMode(self):
        """QPrinter.ColorMode QPrinter.setColorMode(None self)"""
        return QPrinter.ColorMode()
    def resolution(self):
        """int QPrinter.resolution(None self)"""
        return int()
    def setResolution(self):
        """int QPrinter.setResolution(None self)"""
        return int()
    def pageOrder(self):
        """QPrinter.PageOrder QPrinter.pageOrder(None self)"""
        return QPrinter.PageOrder()
    def setPageOrder(self):
        """QPrinter.PageOrder QPrinter.setPageOrder(None self)"""
        return QPrinter.PageOrder()
    def pageSize(self):
        """QPrinter.PageSize QPrinter.pageSize(None self)"""
        return QPrinter.PageSize()
    def setPageSize(self):
        """QPrinter.PageSize QPrinter.setPageSize(None self)"""
        return QPrinter.PageSize()
    def orientation(self):
        """QPrinter.Orientation QPrinter.orientation(None self)"""
        return QPrinter.Orientation()
    def setOrientation(self):
        """QPrinter.Orientation QPrinter.setOrientation(None self)"""
        return QPrinter.Orientation()
    def creator(self):
        """QString QPrinter.creator(None self)"""
        return QString()
    def setCreator(self):
        """QString QPrinter.setCreator(None self)"""
        return QString()
    def docName(self):
        """QString QPrinter.docName(None self)"""
        return QString()
    def setDocName(self):
        """QString QPrinter.setDocName(None self)"""
        return QString()
    def printProgram(self):
        """QString QPrinter.printProgram(None self)"""
        return QString()
    def setPrintProgram(self):
        """QString QPrinter.setPrintProgram(None self)"""
        return QString()
    def outputFileName(self):
        """QString QPrinter.outputFileName(None self)"""
        return QString()
    def setOutputFileName(self):
        """QString QPrinter.setOutputFileName(None self)"""
        return QString()
    def printerName(self):
        """QString QPrinter.printerName(None self)"""
        return QString()
    def setPrinterName(self):
        """QString QPrinter.setPrinterName(None self)"""
        return QString()
    def devType(self):
        """int QPrinter.devType(None self)"""
        return int()


class QPrintDialog(QAbstractPrintDialog):
    """"""
    def __init__(self, _printer, _parent):
        """None QPrintDialog.__init__(None self, QPrinter _printer, QWidget _parent)"""
        return None
    def __init__(self, _parent):
        """None QPrintDialog.__init__(None self, QWidget _parent)"""
        return None
    def accepted(self):
        """None QPrintDialog.accepted(None self)"""
        return None
    def open(self):
        """None QPrintDialog.open(None self)"""
        return None
    def open(self, _receiver, _member):
        """None QPrintDialog.open(None self, QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(self, _receiver):
        """None QPrintDialog.open(None self, callable _receiver)"""
        return None
    def setVisible(self, _visible):
        """None QPrintDialog.setVisible(None self, bool _visible)"""
        return None
    def options(self):
        """QAbstractPrintDialog.PrintDialogOptions QPrintDialog.options(None self)"""
        return QAbstractPrintDialog.PrintDialogOptions()
    def setOptions(self, _options):
        """None QPrintDialog.setOptions(None self, QAbstractPrintDialog.PrintDialogOptions _options)"""
        return None
    def testOption(self, _option):
        """bool QPrintDialog.testOption(None self, QAbstractPrintDialog.PrintDialogOption _option)"""
        return bool()
    def setOption(self, _option, _on):
        """None QPrintDialog.setOption(None self, QAbstractPrintDialog.PrintDialogOption _option, bool _on)"""
        return None
    def done(self, _result):
        """None QPrintDialog.done(None self, int _result)"""
        return None
    def accept(self):
        """None QPrintDialog.accept(None self)"""
        return None
    def exec_(self):
        """int QPrintDialog.exec_(None self)"""
        return int()


class QPrintEngine():
    """"""
    PPK_CollateCopies = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_ColorMode = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_Creator = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_DocumentName = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_FullPage = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_NumberOfCopies = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_Orientation = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_OutputFileName = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PageOrder = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PageRect = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PageSize = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PaperRect = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PaperSource = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PrinterName = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PrinterProgram = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_Resolution = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_SelectionOption = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_SupportedResolutions = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_WindowsPageSize = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_FontEmbedding = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_SuppressSystemPrintStatus = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_Duplex = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PaperSources = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_CustomPaperSize = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PageMargins = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_PaperSize = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_CopyCount = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_SupportsMultipleCopies = int() # QPrintEngine.PrintEnginePropertyKey enum
    PPK_CustomBase = int() # QPrintEngine.PrintEnginePropertyKey enum

    def __init__(self):
        """None QPrintEngine.__init__(None self)"""
        return None
    def __init__(self):
        """QPrintEngine QPrintEngine.__init__(None self)"""
        return QPrintEngine()
    def printerState(self):
        """abstract QPrinter.PrinterState QPrintEngine.printerState(None self)"""
        return QPrinter.PrinterState()
    def metric(self):
        """abstract QPaintDevice.PaintDeviceMetric QPrintEngine.metric(None self)"""
        return QPaintDevice.PaintDeviceMetric()
    def abort(self):
        """abstract bool QPrintEngine.abort(None self)"""
        return bool()
    def newPage(self):
        """abstract bool QPrintEngine.newPage(None self)"""
        return bool()
    def property(self, _key):
        """abstract QVariant QPrintEngine.property(None self, QPrintEngine.PrintEnginePropertyKey _key)"""
        return QVariant()
    def setProperty(self, _key, _value):
        """abstract None QPrintEngine.setProperty(None self, QPrintEngine.PrintEnginePropertyKey _key, QVariant _value)"""
        return None


class QPrinterInfo():
    """"""
    def __init__(self):
        """None QPrinterInfo.__init__(None self)"""
        return None
    def __init__(self, _src):
        """None QPrinterInfo.__init__(None self, QPrinterInfo _src)"""
        return None
    def __init__(self, _printer):
        """None QPrinterInfo.__init__(None self, QPrinter _printer)"""
        return None
    def defaultPrinter(self):
        """QPrinterInfo QPrinterInfo.defaultPrinter(None self)"""
        return QPrinterInfo()
    def availablePrinters(self):
        """list-of-QPrinterInfo QPrinterInfo.availablePrinters(None self)"""
        return [QPrinterInfo()]
    def supportedPaperSizes(self):
        """list-of-QPrinter.PageSize QPrinterInfo.supportedPaperSizes(None self)"""
        return [QPrinter.PageSize()]
    def isDefault(self):
        """bool QPrinterInfo.isDefault(None self)"""
        return bool()
    def isNull(self):
        """bool QPrinterInfo.isNull(None self)"""
        return bool()
    def printerName(self):
        """QString QPrinterInfo.printerName(None self)"""
        return QString()


class QPrintPreviewDialog(QDialog):
    """"""
    def __init__(self, _parent, _flags):
        """None QPrintPreviewDialog.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(self, _printer, _parent, _flags):
        """None QPrintPreviewDialog.__init__(None self, QPrinter _printer, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def done(self, _result):
        """None QPrintPreviewDialog.done(None self, int _result)"""
        return None
    def printer(self):
        """QPrinter QPrintPreviewDialog.printer(None self)"""
        return QPrinter()
    def open(self):
        """None QPrintPreviewDialog.open(None self)"""
        return None
    def open(self, _receiver, _member):
        """None QPrintPreviewDialog.open(None self, QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(self, _receiver):
        """None QPrintPreviewDialog.open(None self, callable _receiver)"""
        return None
    def setVisible(self, _visible):
        """None QPrintPreviewDialog.setVisible(None self, bool _visible)"""
        return None


class QPrintPreviewWidget(QWidget):
    """"""
    CustomZoom = int() # QPrintPreviewWidget.ZoomMode enum
    FitToWidth = int() # QPrintPreviewWidget.ZoomMode enum
    FitInView = int() # QPrintPreviewWidget.ZoomMode enum

    SinglePageView = int() # QPrintPreviewWidget.ViewMode enum
    FacingPagesView = int() # QPrintPreviewWidget.ViewMode enum
    AllPagesView = int() # QPrintPreviewWidget.ViewMode enum

    def __init__(self, _printer, _parent, _flags):
        """None QPrintPreviewWidget.__init__(None self, QPrinter _printer, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(self, _parent, _flags):
        """None QPrintPreviewWidget.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def pageCount(self):
        """int QPrintPreviewWidget.pageCount(None self)"""
        return int()
    def updatePreview(self):
        """None QPrintPreviewWidget.updatePreview(None self)"""
        return None
    def setAllPagesViewMode(self):
        """None QPrintPreviewWidget.setAllPagesViewMode(None self)"""
        return None
    def setFacingPagesViewMode(self):
        """None QPrintPreviewWidget.setFacingPagesViewMode(None self)"""
        return None
    def setSinglePageViewMode(self):
        """None QPrintPreviewWidget.setSinglePageViewMode(None self)"""
        return None
    def setPortraitOrientation(self):
        """None QPrintPreviewWidget.setPortraitOrientation(None self)"""
        return None
    def setLandscapeOrientation(self):
        """None QPrintPreviewWidget.setLandscapeOrientation(None self)"""
        return None
    def fitInView(self):
        """None QPrintPreviewWidget.fitInView(None self)"""
        return None
    def fitToWidth(self):
        """None QPrintPreviewWidget.fitToWidth(None self)"""
        return None
    def setCurrentPage(self, _pageNumber):
        """None QPrintPreviewWidget.setCurrentPage(None self, int _pageNumber)"""
        return None
    def setZoomMode(self, _zoomMode):
        """None QPrintPreviewWidget.setZoomMode(None self, QPrintPreviewWidget.ZoomMode _zoomMode)"""
        return None
    def setViewMode(self, _viewMode):
        """None QPrintPreviewWidget.setViewMode(None self, QPrintPreviewWidget.ViewMode _viewMode)"""
        return None
    def setOrientation(self, _orientation):
        """None QPrintPreviewWidget.setOrientation(None self, QPrinter.Orientation _orientation)"""
        return None
    def setZoomFactor(self, _zoomFactor):
        """None QPrintPreviewWidget.setZoomFactor(None self, float _zoomFactor)"""
        return None
    def zoomOut(self, _factor):
        """None QPrintPreviewWidget.zoomOut(None self, float _factor)"""
        return None
    def zoomIn(self, _factor):
        """None QPrintPreviewWidget.zoomIn(None self, float _factor)"""
        return None
    def print_(self):
        """None QPrintPreviewWidget.print_(None self)"""
        return None
    def setVisible(self, _visible):
        """None QPrintPreviewWidget.setVisible(None self, bool _visible)"""
        return None
    def numPages(self):
        """int QPrintPreviewWidget.numPages(None self)"""
        return int()
    def currentPage(self):
        """int QPrintPreviewWidget.currentPage(None self)"""
        return int()
    def zoomMode(self):
        """QPrintPreviewWidget.ZoomMode QPrintPreviewWidget.zoomMode(None self)"""
        return QPrintPreviewWidget.ZoomMode()
    def viewMode(self):
        """QPrintPreviewWidget.ViewMode QPrintPreviewWidget.viewMode(None self)"""
        return QPrintPreviewWidget.ViewMode()
    def orientation(self):
        """QPrinter.Orientation QPrintPreviewWidget.orientation(None self)"""
        return QPrinter.Orientation()
    def zoomFactor(self):
        """float QPrintPreviewWidget.zoomFactor(None self)"""
        return float()


class QProgressBar(QWidget):
    """"""
    TopToBottom = int() # QProgressBar.Direction enum
    BottomToTop = int() # QProgressBar.Direction enum

    def __init__(self, _parent):
        """None QProgressBar.__init__(None self, QWidget _parent)"""
        return None
    def paintEvent(self):
        """QPaintEvent QProgressBar.paintEvent(None self)"""
        return QPaintEvent()
    def event(self, _e):
        """bool QProgressBar.event(None self, QEvent _e)"""
        return bool()
    def initStyleOption(self, _option):
        """None QProgressBar.initStyleOption(None self, QStyleOptionProgressBar _option)"""
        return None
    def setOrientation(self):
        """Qt.Orientation QProgressBar.setOrientation(None self)"""
        return Qt.Orientation()
    def setValue(self, _value):
        """None QProgressBar.setValue(None self, int _value)"""
        return None
    def setMaximum(self, _maximum):
        """None QProgressBar.setMaximum(None self, int _maximum)"""
        return None
    def setMinimum(self, _minimum):
        """None QProgressBar.setMinimum(None self, int _minimum)"""
        return None
    def reset(self):
        """None QProgressBar.reset(None self)"""
        return None
    def format(self):
        """QString QProgressBar.format(None self)"""
        return QString()
    def setFormat(self, _format):
        """None QProgressBar.setFormat(None self, QString _format)"""
        return None
    def textDirection(self):
        """QProgressBar.Direction QProgressBar.textDirection(None self)"""
        return QProgressBar.Direction()
    def setTextDirection(self, _textDirection):
        """None QProgressBar.setTextDirection(None self, QProgressBar.Direction _textDirection)"""
        return None
    def invertedAppearance(self):
        """bool QProgressBar.invertedAppearance(None self)"""
        return bool()
    def setInvertedAppearance(self, _invert):
        """None QProgressBar.setInvertedAppearance(None self, bool _invert)"""
        return None
    def orientation(self):
        """Qt.Orientation QProgressBar.orientation(None self)"""
        return Qt.Orientation()
    def minimumSizeHint(self):
        """QSize QProgressBar.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QProgressBar.sizeHint(None self)"""
        return QSize()
    def setAlignment(self, _alignment):
        """None QProgressBar.setAlignment(None self, Qt.Alignment _alignment)"""
        return None
    def alignment(self):
        """Qt.Alignment QProgressBar.alignment(None self)"""
        return Qt.Alignment()
    def isTextVisible(self):
        """bool QProgressBar.isTextVisible(None self)"""
        return bool()
    def setTextVisible(self, _visible):
        """None QProgressBar.setTextVisible(None self, bool _visible)"""
        return None
    def text(self):
        """QString QProgressBar.text(None self)"""
        return QString()
    def value(self):
        """int QProgressBar.value(None self)"""
        return int()
    def setRange(self, _minimum, _maximum):
        """None QProgressBar.setRange(None self, int _minimum, int _maximum)"""
        return None
    def maximum(self):
        """int QProgressBar.maximum(None self)"""
        return int()
    def minimum(self):
        """int QProgressBar.minimum(None self)"""
        return int()


class QProgressDialog(QDialog):
    """"""
    def __init__(self, _parent, _flags):
        """None QProgressDialog.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def __init__(self, _labelText, _cancelButtonText, _minimum, _maximum, _parent, _flags):
        """None QProgressDialog.__init__(None self, QString _labelText, QString _cancelButtonText, int _minimum, int _maximum, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def open(self):
        """None QProgressDialog.open(None self)"""
        return None
    def open(self, _receiver, _member):
        """None QProgressDialog.open(None self, QObject _receiver, SLOT()SLOT() _member)"""
        return None
    def open(self, _receiver):
        """None QProgressDialog.open(None self, callable _receiver)"""
        return None
    def forceShow(self):
        """None QProgressDialog.forceShow(None self)"""
        return None
    def showEvent(self, _e):
        """None QProgressDialog.showEvent(None self, QShowEvent _e)"""
        return None
    def changeEvent(self):
        """QEvent QProgressDialog.changeEvent(None self)"""
        return QEvent()
    def closeEvent(self):
        """QCloseEvent QProgressDialog.closeEvent(None self)"""
        return QCloseEvent()
    def resizeEvent(self):
        """QResizeEvent QProgressDialog.resizeEvent(None self)"""
        return QResizeEvent()
    def setMinimumDuration(self, _ms):
        """None QProgressDialog.setMinimumDuration(None self, int _ms)"""
        return None
    def setCancelButtonText(self):
        """QString QProgressDialog.setCancelButtonText(None self)"""
        return QString()
    def setLabelText(self):
        """QString QProgressDialog.setLabelText(None self)"""
        return QString()
    def setValue(self, _progress):
        """None QProgressDialog.setValue(None self, int _progress)"""
        return None
    def setMinimum(self, _minimum):
        """None QProgressDialog.setMinimum(None self, int _minimum)"""
        return None
    def setMaximum(self, _maximum):
        """None QProgressDialog.setMaximum(None self, int _maximum)"""
        return None
    def reset(self):
        """None QProgressDialog.reset(None self)"""
        return None
    def cancel(self):
        """None QProgressDialog.cancel(None self)"""
        return None
    def autoClose(self):
        """bool QProgressDialog.autoClose(None self)"""
        return bool()
    def setAutoClose(self, _b):
        """None QProgressDialog.setAutoClose(None self, bool _b)"""
        return None
    def autoReset(self):
        """bool QProgressDialog.autoReset(None self)"""
        return bool()
    def setAutoReset(self, _b):
        """None QProgressDialog.setAutoReset(None self, bool _b)"""
        return None
    def minimumDuration(self):
        """int QProgressDialog.minimumDuration(None self)"""
        return int()
    def labelText(self):
        """QString QProgressDialog.labelText(None self)"""
        return QString()
    def sizeHint(self):
        """QSize QProgressDialog.sizeHint(None self)"""
        return QSize()
    def value(self):
        """int QProgressDialog.value(None self)"""
        return int()
    def setRange(self, _minimum, _maximum):
        """None QProgressDialog.setRange(None self, int _minimum, int _maximum)"""
        return None
    def maximum(self):
        """int QProgressDialog.maximum(None self)"""
        return int()
    def minimum(self):
        """int QProgressDialog.minimum(None self)"""
        return int()
    def wasCanceled(self):
        """bool QProgressDialog.wasCanceled(None self)"""
        return bool()
    def setBar(self, _bar):
        """None QProgressDialog.setBar(None self, QProgressBar _bar)"""
        return None
    def setCancelButton(self, _button):
        """None QProgressDialog.setCancelButton(None self, QPushButton _button)"""
        return None
    def setLabel(self, _label):
        """None QProgressDialog.setLabel(None self, QLabel _label)"""
        return None


class QProxyModel(QAbstractItemModel):
    """"""
    def __init__(self, _parent):
        """None QProxyModel.__init__(None self, QObject _parent)"""
        return None
    def revert(self):
        """None QProxyModel.revert(None self)"""
        return None
    def submit(self):
        """bool QProxyModel.submit(None self)"""
        return bool()
    def span(self, _index):
        """QSize QProxyModel.span(None self, QModelIndex _index)"""
        return QSize()
    def match(self, _start, _role, _value, _hits, _flags):
        """list-of-QModelIndex QProxyModel.match(None self, QModelIndex _start, int _role, QVariant _value, int _hits, Qt.MatchFlags _flags)"""
        return [QModelIndex()]
    def sort(self, _column, _order):
        """None QProxyModel.sort(None self, int _column, Qt.SortOrder _order)"""
        return None
    def flags(self, _index):
        """Qt.ItemFlags QProxyModel.flags(None self, QModelIndex _index)"""
        return Qt.ItemFlags()
    def fetchMore(self, _parent):
        """None QProxyModel.fetchMore(None self, QModelIndex _parent)"""
        return None
    def insertColumns(self, _column, _count, _parent):
        """bool QProxyModel.insertColumns(None self, int _column, int _count, QModelIndex _parent)"""
        return bool()
    def insertRows(self, _row, _count, _parent):
        """bool QProxyModel.insertRows(None self, int _row, int _count, QModelIndex _parent)"""
        return bool()
    def supportedDropActions(self):
        """Qt.DropActions QProxyModel.supportedDropActions(None self)"""
        return Qt.DropActions()
    def dropMimeData(self, _data, _action, _row, _column, _parent):
        """bool QProxyModel.dropMimeData(None self, QMimeData _data, Qt.DropAction _action, int _row, int _column, QModelIndex _parent)"""
        return bool()
    def mimeData(self, _indexes):
        """QMimeData QProxyModel.mimeData(None self, list-of-QModelIndex _indexes)"""
        return QMimeData()
    def mimeTypes(self):
        """QStringList QProxyModel.mimeTypes(None self)"""
        return QStringList()
    def setHeaderData(self, _section, _orientation, _value, _role):
        """bool QProxyModel.setHeaderData(None self, int _section, Qt.Orientation _orientation, QVariant _value, int _role)"""
        return bool()
    def headerData(self, _section, _orientation, _role):
        """QVariant QProxyModel.headerData(None self, int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(self, _index, _value, _role):
        """bool QProxyModel.setData(None self, QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def data(self, _index, _role):
        """QVariant QProxyModel.data(None self, QModelIndex _index, int _role)"""
        return QVariant()
    def hasChildren(self, _parent):
        """bool QProxyModel.hasChildren(None self, QModelIndex _parent)"""
        return bool()
    def columnCount(self, _parent):
        """int QProxyModel.columnCount(None self, QModelIndex _parent)"""
        return int()
    def rowCount(self, _parent):
        """int QProxyModel.rowCount(None self, QModelIndex _parent)"""
        return int()
    def parent(self, _child):
        """QModelIndex QProxyModel.parent(None self, QModelIndex _child)"""
        return QModelIndex()
    def parent(self):
        """QObject QProxyModel.parent(None self)"""
        return QObject()
    def index(self, _row, _column, _parent):
        """QModelIndex QProxyModel.index(None self, int _row, int _column, QModelIndex _parent)"""
        return QModelIndex()
    def model(self):
        """QAbstractItemModel QProxyModel.model(None self)"""
        return QAbstractItemModel()
    def setModel(self, _model):
        """None QProxyModel.setModel(None self, QAbstractItemModel _model)"""
        return None


class QQuaternion():
    """"""
    def __init__(self):
        """None QQuaternion.__init__(None self)"""
        return None
    def __init__(self, _aScalar, _xpos, _ypos, _zpos):
        """None QQuaternion.__init__(None self, float _aScalar, float _xpos, float _ypos, float _zpos)"""
        return None
    def __init__(self, _aScalar, _aVector):
        """None QQuaternion.__init__(None self, float _aScalar, QVector3D _aVector)"""
        return None
    def __init__(self, _aVector):
        """None QQuaternion.__init__(None self, QVector4D _aVector)"""
        return None
    def __init__(self):
        """QQuaternion QQuaternion.__init__(None self)"""
        return QQuaternion()
    def __eq__(self, _q2):
        """bool QQuaternion.__eq__(None self, QQuaternion _q2)"""
        return bool()
    def __mul__(self, _q2):
        """QQuaternion QQuaternion.__mul__(None self, QQuaternion _q2)"""
        return QQuaternion()
    def __mul__(self, _quaternion):
        """QQuaternion QQuaternion.__mul__(None self, QQuaternion _quaternion)"""
        return QQuaternion()
    def __mul__(self, _factor):
        """QQuaternion QQuaternion.__mul__(None self, float _factor)"""
        return QQuaternion()
    def __div__(self, _divisor):
        """QQuaternion QQuaternion.__div__(None self, float _divisor)"""
        return QQuaternion()
    def __add__(self, _q2):
        """QQuaternion QQuaternion.__add__(None self, QQuaternion _q2)"""
        return QQuaternion()
    def __sub__(self, _q2):
        """QQuaternion QQuaternion.__sub__(None self, QQuaternion _q2)"""
        return QQuaternion()
    def __neg__(self):
        """QQuaternion QQuaternion.__neg__(None self)"""
        return QQuaternion()
    def __ne__(self, _q2):
        """bool QQuaternion.__ne__(None self, QQuaternion _q2)"""
        return bool()
    def toVector4D(self):
        """QVector4D QQuaternion.toVector4D(None self)"""
        return QVector4D()
    def vector(self):
        """QVector3D QQuaternion.vector(None self)"""
        return QVector3D()
    def setVector(self, _aVector):
        """None QQuaternion.setVector(None self, QVector3D _aVector)"""
        return None
    def setVector(self, _aX, _aY, _aZ):
        """None QQuaternion.setVector(None self, float _aX, float _aY, float _aZ)"""
        return None
    def __idiv__(self, _divisor):
        """QQuaternion QQuaternion.__idiv__(None self, float _divisor)"""
        return QQuaternion()
    def __imul__(self, _factor):
        """QQuaternion QQuaternion.__imul__(None self, float _factor)"""
        return QQuaternion()
    def __imul__(self, _quaternion):
        """QQuaternion QQuaternion.__imul__(None self, QQuaternion _quaternion)"""
        return QQuaternion()
    def __isub__(self, _quaternion):
        """QQuaternion QQuaternion.__isub__(None self, QQuaternion _quaternion)"""
        return QQuaternion()
    def __iadd__(self, _quaternion):
        """QQuaternion QQuaternion.__iadd__(None self, QQuaternion _quaternion)"""
        return QQuaternion()
    def conjugate(self):
        """QQuaternion QQuaternion.conjugate(None self)"""
        return QQuaternion()
    def setScalar(self, _aScalar):
        """None QQuaternion.setScalar(None self, float _aScalar)"""
        return None
    def setZ(self, _aZ):
        """None QQuaternion.setZ(None self, float _aZ)"""
        return None
    def setY(self, _aY):
        """None QQuaternion.setY(None self, float _aY)"""
        return None
    def setX(self, _aX):
        """None QQuaternion.setX(None self, float _aX)"""
        return None
    def scalar(self):
        """float QQuaternion.scalar(None self)"""
        return float()
    def z(self):
        """float QQuaternion.z(None self)"""
        return float()
    def y(self):
        """float QQuaternion.y(None self)"""
        return float()
    def x(self):
        """float QQuaternion.x(None self)"""
        return float()
    def isIdentity(self):
        """bool QQuaternion.isIdentity(None self)"""
        return bool()
    def isNull(self):
        """bool QQuaternion.isNull(None self)"""
        return bool()
    def nlerp(self, _q1, _q2, _t):
        """QQuaternion QQuaternion.nlerp(None self, QQuaternion _q1, QQuaternion _q2, float _t)"""
        return QQuaternion()
    def slerp(self, _q1, _q2, _t):
        """QQuaternion QQuaternion.slerp(None self, QQuaternion _q1, QQuaternion _q2, float _t)"""
        return QQuaternion()
    def fromAxisAndAngle(self, _axis, _angle):
        """QQuaternion QQuaternion.fromAxisAndAngle(None self, QVector3D _axis, float _angle)"""
        return QQuaternion()
    def fromAxisAndAngle(self, _x, _y, _z, _angle):
        """QQuaternion QQuaternion.fromAxisAndAngle(None self, float _x, float _y, float _z, float _angle)"""
        return QQuaternion()
    def rotatedVector(self, _vector):
        """QVector3D QQuaternion.rotatedVector(None self, QVector3D _vector)"""
        return QVector3D()
    def normalize(self):
        """None QQuaternion.normalize(None self)"""
        return None
    def normalized(self):
        """QQuaternion QQuaternion.normalized(None self)"""
        return QQuaternion()
    def lengthSquared(self):
        """float QQuaternion.lengthSquared(None self)"""
        return float()
    def length(self):
        """float QQuaternion.length(None self)"""
        return float()
    def __repr__(self):
        """str QQuaternion.__repr__(None self)"""
        return str()


class QRadioButton(QAbstractButton):
    """"""
    def __init__(self, _parent):
        """None QRadioButton.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _text, _parent):
        """None QRadioButton.__init__(None self, QString _text, QWidget _parent)"""
        return None
    def mouseMoveEvent(self):
        """QMouseEvent QRadioButton.mouseMoveEvent(None self)"""
        return QMouseEvent()
    def paintEvent(self):
        """QPaintEvent QRadioButton.paintEvent(None self)"""
        return QPaintEvent()
    def event(self, _e):
        """bool QRadioButton.event(None self, QEvent _e)"""
        return bool()
    def hitButton(self):
        """QPoint QRadioButton.hitButton(None self)"""
        return QPoint()
    def initStyleOption(self, _button):
        """None QRadioButton.initStyleOption(None self, QStyleOptionButton _button)"""
        return None
    def sizeHint(self):
        """QSize QRadioButton.sizeHint(None self)"""
        return QSize()


class QRegion():
    """"""
    Rectangle = int() # QRegion.RegionType enum
    Ellipse = int() # QRegion.RegionType enum

    def __init__(self):
        """None QRegion.__init__(None self)"""
        return None
    def __init__(self, _x, _y, _w, _h, _type):
        """None QRegion.__init__(None self, int _x, int _y, int _w, int _h, QRegion.RegionType _type)"""
        return None
    def __init__(self, _r, _type):
        """None QRegion.__init__(None self, QRect _r, QRegion.RegionType _type)"""
        return None
    def __init__(self, _a, _fillRule):
        """None QRegion.__init__(None self, QPolygon _a, Qt.FillRule _fillRule)"""
        return None
    def __init__(self, _bitmap):
        """None QRegion.__init__(None self, QBitmap _bitmap)"""
        return None
    def __init__(self, _region):
        """None QRegion.__init__(None self, QRegion _region)"""
        return None
    def __init__(self, _variant):
        """None QRegion.__init__(None self, QVariant _variant)"""
        return None
    def __mul__(self, _m):
        """QRegion QRegion.__mul__(None self, QMatrix _m)"""
        return QRegion()
    def __mul__(self, _m):
        """QRegion QRegion.__mul__(None self, QTransform _m)"""
        return QRegion()
    def rectCount(self):
        """int QRegion.rectCount(None self)"""
        return int()
    def numRects(self):
        """int QRegion.numRects(None self)"""
        return int()
    def intersects(self, _r):
        """bool QRegion.intersects(None self, QRegion _r)"""
        return bool()
    def intersects(self, _r):
        """bool QRegion.intersects(None self, QRect _r)"""
        return bool()
    def xored(self, _r):
        """QRegion QRegion.xored(None self, QRegion _r)"""
        return QRegion()
    def subtracted(self, _r):
        """QRegion QRegion.subtracted(None self, QRegion _r)"""
        return QRegion()
    def intersected(self, _r):
        """QRegion QRegion.intersected(None self, QRegion _r)"""
        return QRegion()
    def intersected(self, _r):
        """QRegion QRegion.intersected(None self, QRect _r)"""
        return QRegion()
    def __ne__(self, _r):
        """bool QRegion.__ne__(None self, QRegion _r)"""
        return bool()
    def __eq__(self, _r):
        """bool QRegion.__eq__(None self, QRegion _r)"""
        return bool()
    def __ixor__(self, _r):
        """QRegion QRegion.__ixor__(None self, QRegion _r)"""
        return QRegion()
    def __isub__(self, _r):
        """QRegion QRegion.__isub__(None self, QRegion _r)"""
        return QRegion()
    def __iand__(self, _r):
        """QRegion QRegion.__iand__(None self, QRegion _r)"""
        return QRegion()
    def __iand__(self, _r):
        """QRegion QRegion.__iand__(None self, QRect _r)"""
        return QRegion()
    def __iadd__(self, _r):
        """QRegion QRegion.__iadd__(None self, QRegion _r)"""
        return QRegion()
    def __iadd__(self, _r):
        """QRegion QRegion.__iadd__(None self, QRect _r)"""
        return QRegion()
    def __ior__(self, _r):
        """QRegion QRegion.__ior__(None self, QRegion _r)"""
        return QRegion()
    def __xor__(self, _r):
        """QRegion QRegion.__xor__(None self, QRegion _r)"""
        return QRegion()
    def __sub__(self, _r):
        """QRegion QRegion.__sub__(None self, QRegion _r)"""
        return QRegion()
    def __and__(self, _r):
        """QRegion QRegion.__and__(None self, QRegion _r)"""
        return QRegion()
    def __and__(self, _r):
        """QRegion QRegion.__and__(None self, QRect _r)"""
        return QRegion()
    def __add__(self, _r):
        """QRegion QRegion.__add__(None self, QRegion _r)"""
        return QRegion()
    def __add__(self, _r):
        """QRegion QRegion.__add__(None self, QRect _r)"""
        return QRegion()
    def __or__(self, _r):
        """QRegion QRegion.__or__(None self, QRegion _r)"""
        return QRegion()
    def rects(self):
        """list-of-QRect QRegion.rects(None self)"""
        return [QRect()]
    def boundingRect(self):
        """QRect QRegion.boundingRect(None self)"""
        return QRect()
    def eor(self, _r):
        """QRegion QRegion.eor(None self, QRegion _r)"""
        return QRegion()
    def subtract(self, _r):
        """QRegion QRegion.subtract(None self, QRegion _r)"""
        return QRegion()
    def intersect(self, _r):
        """QRegion QRegion.intersect(None self, QRegion _r)"""
        return QRegion()
    def united(self, _r):
        """QRegion QRegion.united(None self, QRegion _r)"""
        return QRegion()
    def united(self, _r):
        """QRegion QRegion.united(None self, QRect _r)"""
        return QRegion()
    def unite(self, _r):
        """QRegion QRegion.unite(None self, QRegion _r)"""
        return QRegion()
    def translated(self, _dx, _dy):
        """QRegion QRegion.translated(None self, int _dx, int _dy)"""
        return QRegion()
    def translated(self, _p):
        """QRegion QRegion.translated(None self, QPoint _p)"""
        return QRegion()
    def translate(self, _dx, _dy):
        """None QRegion.translate(None self, int _dx, int _dy)"""
        return None
    def translate(self, _p):
        """None QRegion.translate(None self, QPoint _p)"""
        return None
    def __contains__(self, _p):
        """int QRegion.__contains__(None self, QPoint _p)"""
        return int()
    def __contains__(self, _r):
        """int QRegion.__contains__(None self, QRect _r)"""
        return int()
    def contains(self, _p):
        """bool QRegion.contains(None self, QPoint _p)"""
        return bool()
    def contains(self, _r):
        """bool QRegion.contains(None self, QRect _r)"""
        return bool()
    def __bool__(self):
        """int QRegion.__bool__(None self)"""
        return int()
    def isEmpty(self):
        """bool QRegion.isEmpty(None self)"""
        return bool()


class QRubberBand(QWidget):
    """"""
    Line = int() # QRubberBand.Shape enum
    Rectangle = int() # QRubberBand.Shape enum

    def __init__(self, _parent):
        """QRubberBand.Shape QRubberBand.__init__(None self, QWidget _parent)"""
        return QRubberBand.Shape()
    def moveEvent(self):
        """QMoveEvent QRubberBand.moveEvent(None self)"""
        return QMoveEvent()
    def resizeEvent(self):
        """QResizeEvent QRubberBand.resizeEvent(None self)"""
        return QResizeEvent()
    def showEvent(self):
        """QShowEvent QRubberBand.showEvent(None self)"""
        return QShowEvent()
    def changeEvent(self):
        """QEvent QRubberBand.changeEvent(None self)"""
        return QEvent()
    def paintEvent(self):
        """QPaintEvent QRubberBand.paintEvent(None self)"""
        return QPaintEvent()
    def event(self, _e):
        """bool QRubberBand.event(None self, QEvent _e)"""
        return bool()
    def initStyleOption(self, _option):
        """None QRubberBand.initStyleOption(None self, QStyleOptionRubberBand _option)"""
        return None
    def resize(self, _w, _h):
        """None QRubberBand.resize(None self, int _w, int _h)"""
        return None
    def resize(self, _s):
        """None QRubberBand.resize(None self, QSize _s)"""
        return None
    def move(self, _p):
        """None QRubberBand.move(None self, QPoint _p)"""
        return None
    def move(self, _ax, _ay):
        """None QRubberBand.move(None self, int _ax, int _ay)"""
        return None
    def setGeometry(self, _r):
        """None QRubberBand.setGeometry(None self, QRect _r)"""
        return None
    def setGeometry(self, _ax, _ay, _aw, _ah):
        """None QRubberBand.setGeometry(None self, int _ax, int _ay, int _aw, int _ah)"""
        return None
    def shape(self):
        """QRubberBand.Shape QRubberBand.shape(None self)"""
        return QRubberBand.Shape()


class QScrollArea(QAbstractScrollArea):
    """"""
    def __init__(self, _parent):
        """None QScrollArea.__init__(None self, QWidget _parent)"""
        return None
    def scrollContentsBy(self, _dx, _dy):
        """None QScrollArea.scrollContentsBy(None self, int _dx, int _dy)"""
        return None
    def resizeEvent(self):
        """QResizeEvent QScrollArea.resizeEvent(None self)"""
        return QResizeEvent()
    def eventFilter(self):
        """QEvent QScrollArea.eventFilter(None self)"""
        return QEvent()
    def event(self):
        """QEvent QScrollArea.event(None self)"""
        return QEvent()
    def ensureWidgetVisible(self, _childWidget, _xMargin, _yMargin):
        """None QScrollArea.ensureWidgetVisible(None self, QWidget _childWidget, int _xMargin, int _yMargin)"""
        return None
    def ensureVisible(self, _x, _y, _xMargin, _yMargin):
        """None QScrollArea.ensureVisible(None self, int _x, int _y, int _xMargin, int _yMargin)"""
        return None
    def focusNextPrevChild(self, _next):
        """bool QScrollArea.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def sizeHint(self):
        """QSize QScrollArea.sizeHint(None self)"""
        return QSize()
    def setAlignment(self):
        """Qt.Alignment QScrollArea.setAlignment(None self)"""
        return Qt.Alignment()
    def alignment(self):
        """Qt.Alignment QScrollArea.alignment(None self)"""
        return Qt.Alignment()
    def setWidgetResizable(self, _resizable):
        """None QScrollArea.setWidgetResizable(None self, bool _resizable)"""
        return None
    def widgetResizable(self):
        """bool QScrollArea.widgetResizable(None self)"""
        return bool()
    def takeWidget(self):
        """QWidget QScrollArea.takeWidget(None self)"""
        return QWidget()
    def setWidget(self, _w):
        """None QScrollArea.setWidget(None self, QWidget _w)"""
        return None
    def widget(self):
        """QWidget QScrollArea.widget(None self)"""
        return QWidget()


class QScrollBar(QAbstractSlider):
    """"""
    def __init__(self, _parent):
        """None QScrollBar.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _orientation, _parent):
        """None QScrollBar.__init__(None self, Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def sliderChange(self, _change):
        """None QScrollBar.sliderChange(None self, QAbstractSlider.SliderChange _change)"""
        return None
    def contextMenuEvent(self):
        """QContextMenuEvent QScrollBar.contextMenuEvent(None self)"""
        return QContextMenuEvent()
    def hideEvent(self):
        """QHideEvent QScrollBar.hideEvent(None self)"""
        return QHideEvent()
    def mouseMoveEvent(self):
        """QMouseEvent QScrollBar.mouseMoveEvent(None self)"""
        return QMouseEvent()
    def mouseReleaseEvent(self):
        """QMouseEvent QScrollBar.mouseReleaseEvent(None self)"""
        return QMouseEvent()
    def mousePressEvent(self):
        """QMouseEvent QScrollBar.mousePressEvent(None self)"""
        return QMouseEvent()
    def paintEvent(self):
        """QPaintEvent QScrollBar.paintEvent(None self)"""
        return QPaintEvent()
    def initStyleOption(self, _option):
        """None QScrollBar.initStyleOption(None self, QStyleOptionSlider _option)"""
        return None
    def event(self, _event):
        """bool QScrollBar.event(None self, QEvent _event)"""
        return bool()
    def sizeHint(self):
        """QSize QScrollBar.sizeHint(None self)"""
        return QSize()


class QSessionManager(QObject):
    """"""
    RestartIfRunning = int() # QSessionManager.RestartHint enum
    RestartAnyway = int() # QSessionManager.RestartHint enum
    RestartImmediately = int() # QSessionManager.RestartHint enum
    RestartNever = int() # QSessionManager.RestartHint enum

    def requestPhase2(self):
        """None QSessionManager.requestPhase2(None self)"""
        return None
    def isPhase2(self):
        """bool QSessionManager.isPhase2(None self)"""
        return bool()
    def setManagerProperty(self, _name, _value):
        """None QSessionManager.setManagerProperty(None self, QString _name, QString _value)"""
        return None
    def setManagerProperty(self, _name, _value):
        """None QSessionManager.setManagerProperty(None self, QString _name, QStringList _value)"""
        return None
    def discardCommand(self):
        """QStringList QSessionManager.discardCommand(None self)"""
        return QStringList()
    def setDiscardCommand(self):
        """QStringList QSessionManager.setDiscardCommand(None self)"""
        return QStringList()
    def restartCommand(self):
        """QStringList QSessionManager.restartCommand(None self)"""
        return QStringList()
    def setRestartCommand(self):
        """QStringList QSessionManager.setRestartCommand(None self)"""
        return QStringList()
    def restartHint(self):
        """QSessionManager.RestartHint QSessionManager.restartHint(None self)"""
        return QSessionManager.RestartHint()
    def setRestartHint(self):
        """QSessionManager.RestartHint QSessionManager.setRestartHint(None self)"""
        return QSessionManager.RestartHint()
    def cancel(self):
        """None QSessionManager.cancel(None self)"""
        return None
    def release(self):
        """None QSessionManager.release(None self)"""
        return None
    def allowsErrorInteraction(self):
        """bool QSessionManager.allowsErrorInteraction(None self)"""
        return bool()
    def allowsInteraction(self):
        """bool QSessionManager.allowsInteraction(None self)"""
        return bool()
    def sessionKey(self):
        """QString QSessionManager.sessionKey(None self)"""
        return QString()
    def sessionId(self):
        """QString QSessionManager.sessionId(None self)"""
        return QString()


class QShortcut(QObject):
    """"""
    def __init__(self, _parent):
        """None QShortcut.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _key, _parent, _member, _ambiguousMember, _context):
        """None QShortcut.__init__(None self, QKeySequence _key, QWidget _parent, SLOT() _member, SLOT() _ambiguousMember, Qt.ShortcutContext _context)"""
        return None
    def event(self, _e):
        """bool QShortcut.event(None self, QEvent _e)"""
        return bool()
    def autoRepeat(self):
        """bool QShortcut.autoRepeat(None self)"""
        return bool()
    def setAutoRepeat(self, _on):
        """None QShortcut.setAutoRepeat(None self, bool _on)"""
        return None
    def parentWidget(self):
        """QWidget QShortcut.parentWidget(None self)"""
        return QWidget()
    def id(self):
        """int QShortcut.id(None self)"""
        return int()
    def whatsThis(self):
        """QString QShortcut.whatsThis(None self)"""
        return QString()
    def setWhatsThis(self, _text):
        """None QShortcut.setWhatsThis(None self, QString _text)"""
        return None
    def context(self):
        """Qt.ShortcutContext QShortcut.context(None self)"""
        return Qt.ShortcutContext()
    def setContext(self, _context):
        """None QShortcut.setContext(None self, Qt.ShortcutContext _context)"""
        return None
    def isEnabled(self):
        """bool QShortcut.isEnabled(None self)"""
        return bool()
    def setEnabled(self, _enable):
        """None QShortcut.setEnabled(None self, bool _enable)"""
        return None
    def key(self):
        """QKeySequence QShortcut.key(None self)"""
        return QKeySequence()
    def setKey(self, _key):
        """None QShortcut.setKey(None self, QKeySequence _key)"""
        return None


class QSizeGrip(QWidget):
    """"""
    def __init__(self, _parent):
        """None QSizeGrip.__init__(None self, QWidget _parent)"""
        return None
    def hideEvent(self, _hideEvent):
        """None QSizeGrip.hideEvent(None self, QHideEvent _hideEvent)"""
        return None
    def showEvent(self, _showEvent):
        """None QSizeGrip.showEvent(None self, QShowEvent _showEvent)"""
        return None
    def moveEvent(self, _moveEvent):
        """None QSizeGrip.moveEvent(None self, QMoveEvent _moveEvent)"""
        return None
    def event(self):
        """QEvent QSizeGrip.event(None self)"""
        return QEvent()
    def eventFilter(self):
        """QEvent QSizeGrip.eventFilter(None self)"""
        return QEvent()
    def mouseMoveEvent(self):
        """QMouseEvent QSizeGrip.mouseMoveEvent(None self)"""
        return QMouseEvent()
    def mouseReleaseEvent(self, _mouseEvent):
        """None QSizeGrip.mouseReleaseEvent(None self, QMouseEvent _mouseEvent)"""
        return None
    def mousePressEvent(self):
        """QMouseEvent QSizeGrip.mousePressEvent(None self)"""
        return QMouseEvent()
    def paintEvent(self):
        """QPaintEvent QSizeGrip.paintEvent(None self)"""
        return QPaintEvent()
    def setVisible(self):
        """bool QSizeGrip.setVisible(None self)"""
        return bool()
    def sizeHint(self):
        """QSize QSizeGrip.sizeHint(None self)"""
        return QSize()


class QSizePolicy():
    """"""
    DefaultType = int() # QSizePolicy.ControlType enum
    ButtonBox = int() # QSizePolicy.ControlType enum
    CheckBox = int() # QSizePolicy.ControlType enum
    ComboBox = int() # QSizePolicy.ControlType enum
    Frame = int() # QSizePolicy.ControlType enum
    GroupBox = int() # QSizePolicy.ControlType enum
    Label = int() # QSizePolicy.ControlType enum
    Line = int() # QSizePolicy.ControlType enum
    LineEdit = int() # QSizePolicy.ControlType enum
    PushButton = int() # QSizePolicy.ControlType enum
    RadioButton = int() # QSizePolicy.ControlType enum
    Slider = int() # QSizePolicy.ControlType enum
    SpinBox = int() # QSizePolicy.ControlType enum
    TabWidget = int() # QSizePolicy.ControlType enum
    ToolButton = int() # QSizePolicy.ControlType enum

    Fixed = int() # QSizePolicy.Policy enum
    Minimum = int() # QSizePolicy.Policy enum
    Maximum = int() # QSizePolicy.Policy enum
    Preferred = int() # QSizePolicy.Policy enum
    MinimumExpanding = int() # QSizePolicy.Policy enum
    Expanding = int() # QSizePolicy.Policy enum
    Ignored = int() # QSizePolicy.Policy enum

    GrowFlag = int() # QSizePolicy.PolicyFlag enum
    ExpandFlag = int() # QSizePolicy.PolicyFlag enum
    ShrinkFlag = int() # QSizePolicy.PolicyFlag enum
    IgnoreFlag = int() # QSizePolicy.PolicyFlag enum

    def __init__(self):
        """None QSizePolicy.__init__(None self)"""
        return None
    def __init__(self, _horizontal, _vertical):
        """None QSizePolicy.__init__(None self, QSizePolicy.Policy _horizontal, QSizePolicy.Policy _vertical)"""
        return None
    def __init__(self, _variant):
        """None QSizePolicy.__init__(None self, QVariant _variant)"""
        return None
    def __init__(self, _horizontal, _vertical, _type):
        """None QSizePolicy.__init__(None self, QSizePolicy.Policy _horizontal, QSizePolicy.Policy _vertical, QSizePolicy.ControlType _type)"""
        return None
    def __init__(self):
        """QSizePolicy QSizePolicy.__init__(None self)"""
        return QSizePolicy()
    def setControlType(self, _type):
        """None QSizePolicy.setControlType(None self, QSizePolicy.ControlType _type)"""
        return None
    def controlType(self):
        """QSizePolicy.ControlType QSizePolicy.controlType(None self)"""
        return QSizePolicy.ControlType()
    def transpose(self):
        """None QSizePolicy.transpose(None self)"""
        return None
    def setVerticalStretch(self, _stretchFactor):
        """None QSizePolicy.setVerticalStretch(None self, int _stretchFactor)"""
        return None
    def setHorizontalStretch(self, _stretchFactor):
        """None QSizePolicy.setHorizontalStretch(None self, int _stretchFactor)"""
        return None
    def verticalStretch(self):
        """int QSizePolicy.verticalStretch(None self)"""
        return int()
    def horizontalStretch(self):
        """int QSizePolicy.horizontalStretch(None self)"""
        return int()
    def __ne__(self, _s):
        """bool QSizePolicy.__ne__(None self, QSizePolicy _s)"""
        return bool()
    def __eq__(self, _s):
        """bool QSizePolicy.__eq__(None self, QSizePolicy _s)"""
        return bool()
    def hasHeightForWidth(self):
        """bool QSizePolicy.hasHeightForWidth(None self)"""
        return bool()
    def setHeightForWidth(self, _b):
        """None QSizePolicy.setHeightForWidth(None self, bool _b)"""
        return None
    def expandingDirections(self):
        """Qt.Orientations QSizePolicy.expandingDirections(None self)"""
        return Qt.Orientations()
    def setVerticalPolicy(self, _d):
        """None QSizePolicy.setVerticalPolicy(None self, QSizePolicy.Policy _d)"""
        return None
    def setHorizontalPolicy(self, _d):
        """None QSizePolicy.setHorizontalPolicy(None self, QSizePolicy.Policy _d)"""
        return None
    def verticalPolicy(self):
        """QSizePolicy.Policy QSizePolicy.verticalPolicy(None self)"""
        return QSizePolicy.Policy()
    def horizontalPolicy(self):
        """QSizePolicy.Policy QSizePolicy.horizontalPolicy(None self)"""
        return QSizePolicy.Policy()


class QSlider(QAbstractSlider):
    """"""
    NoTicks = int() # QSlider.TickPosition enum
    TicksAbove = int() # QSlider.TickPosition enum
    TicksLeft = int() # QSlider.TickPosition enum
    TicksBelow = int() # QSlider.TickPosition enum
    TicksRight = int() # QSlider.TickPosition enum
    TicksBothSides = int() # QSlider.TickPosition enum

    def __init__(self, _parent):
        """None QSlider.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _orientation, _parent):
        """None QSlider.__init__(None self, Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def mouseMoveEvent(self, _ev):
        """None QSlider.mouseMoveEvent(None self, QMouseEvent _ev)"""
        return None
    def mouseReleaseEvent(self, _ev):
        """None QSlider.mouseReleaseEvent(None self, QMouseEvent _ev)"""
        return None
    def mousePressEvent(self, _ev):
        """None QSlider.mousePressEvent(None self, QMouseEvent _ev)"""
        return None
    def paintEvent(self, _ev):
        """None QSlider.paintEvent(None self, QPaintEvent _ev)"""
        return None
    def initStyleOption(self, _option):
        """None QSlider.initStyleOption(None self, QStyleOptionSlider _option)"""
        return None
    def event(self, _event):
        """bool QSlider.event(None self, QEvent _event)"""
        return bool()
    def tickInterval(self):
        """int QSlider.tickInterval(None self)"""
        return int()
    def setTickInterval(self, _ti):
        """None QSlider.setTickInterval(None self, int _ti)"""
        return None
    def tickPosition(self):
        """QSlider.TickPosition QSlider.tickPosition(None self)"""
        return QSlider.TickPosition()
    def setTickPosition(self, _position):
        """None QSlider.setTickPosition(None self, QSlider.TickPosition _position)"""
        return None
    def minimumSizeHint(self):
        """QSize QSlider.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QSlider.sizeHint(None self)"""
        return QSize()


class QSortFilterProxyModel(QAbstractProxyModel):
    """"""
    def __init__(self, _parent):
        """None QSortFilterProxyModel.__init__(None self, QObject _parent)"""
        return None
    def invalidateFilter(self):
        """None QSortFilterProxyModel.invalidateFilter(None self)"""
        return None
    def invalidate(self):
        """None QSortFilterProxyModel.invalidate(None self)"""
        return None
    def data(self, _index, _role):
        """QVariant QSortFilterProxyModel.data(None self, QModelIndex _index, int _role)"""
        return QVariant()
    def setSortLocaleAware(self, _on):
        """None QSortFilterProxyModel.setSortLocaleAware(None self, bool _on)"""
        return None
    def isSortLocaleAware(self):
        """bool QSortFilterProxyModel.isSortLocaleAware(None self)"""
        return bool()
    def supportedDropActions(self):
        """Qt.DropActions QSortFilterProxyModel.supportedDropActions(None self)"""
        return Qt.DropActions()
    def mimeTypes(self):
        """QStringList QSortFilterProxyModel.mimeTypes(None self)"""
        return QStringList()
    def setFilterRole(self, _role):
        """None QSortFilterProxyModel.setFilterRole(None self, int _role)"""
        return None
    def filterRole(self):
        """int QSortFilterProxyModel.filterRole(None self)"""
        return int()
    def sortOrder(self):
        """Qt.SortOrder QSortFilterProxyModel.sortOrder(None self)"""
        return Qt.SortOrder()
    def sortColumn(self):
        """int QSortFilterProxyModel.sortColumn(None self)"""
        return int()
    def setSortRole(self, _role):
        """None QSortFilterProxyModel.setSortRole(None self, int _role)"""
        return None
    def sortRole(self):
        """int QSortFilterProxyModel.sortRole(None self)"""
        return int()
    def setDynamicSortFilter(self, _enable):
        """None QSortFilterProxyModel.setDynamicSortFilter(None self, bool _enable)"""
        return None
    def dynamicSortFilter(self):
        """bool QSortFilterProxyModel.dynamicSortFilter(None self)"""
        return bool()
    def setSortCaseSensitivity(self, _cs):
        """None QSortFilterProxyModel.setSortCaseSensitivity(None self, Qt.CaseSensitivity _cs)"""
        return None
    def sortCaseSensitivity(self):
        """Qt.CaseSensitivity QSortFilterProxyModel.sortCaseSensitivity(None self)"""
        return Qt.CaseSensitivity()
    def sort(self, _column, _order):
        """None QSortFilterProxyModel.sort(None self, int _column, Qt.SortOrder _order)"""
        return None
    def match(self, _start, _role, _value, _hits, _flags):
        """list-of-QModelIndex QSortFilterProxyModel.match(None self, QModelIndex _start, int _role, QVariant _value, int _hits, Qt.MatchFlags _flags)"""
        return [QModelIndex()]
    def span(self, _index):
        """QSize QSortFilterProxyModel.span(None self, QModelIndex _index)"""
        return QSize()
    def buddy(self, _index):
        """QModelIndex QSortFilterProxyModel.buddy(None self, QModelIndex _index)"""
        return QModelIndex()
    def flags(self, _index):
        """Qt.ItemFlags QSortFilterProxyModel.flags(None self, QModelIndex _index)"""
        return Qt.ItemFlags()
    def canFetchMore(self, _parent):
        """bool QSortFilterProxyModel.canFetchMore(None self, QModelIndex _parent)"""
        return bool()
    def fetchMore(self, _parent):
        """None QSortFilterProxyModel.fetchMore(None self, QModelIndex _parent)"""
        return None
    def removeColumns(self, _column, _count, _parent):
        """bool QSortFilterProxyModel.removeColumns(None self, int _column, int _count, QModelIndex _parent)"""
        return bool()
    def removeRows(self, _row, _count, _parent):
        """bool QSortFilterProxyModel.removeRows(None self, int _row, int _count, QModelIndex _parent)"""
        return bool()
    def insertColumns(self, _column, _count, _parent):
        """bool QSortFilterProxyModel.insertColumns(None self, int _column, int _count, QModelIndex _parent)"""
        return bool()
    def insertRows(self, _row, _count, _parent):
        """bool QSortFilterProxyModel.insertRows(None self, int _row, int _count, QModelIndex _parent)"""
        return bool()
    def dropMimeData(self, _data, _action, _row, _column, _parent):
        """bool QSortFilterProxyModel.dropMimeData(None self, QMimeData _data, Qt.DropAction _action, int _row, int _column, QModelIndex _parent)"""
        return bool()
    def mimeData(self, _indexes):
        """QMimeData QSortFilterProxyModel.mimeData(None self, list-of-QModelIndex _indexes)"""
        return QMimeData()
    def setHeaderData(self, _section, _orientation, _value, _role):
        """bool QSortFilterProxyModel.setHeaderData(None self, int _section, Qt.Orientation _orientation, QVariant _value, int _role)"""
        return bool()
    def headerData(self, _section, _orientation, _role):
        """QVariant QSortFilterProxyModel.headerData(None self, int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(self, _index, _value, _role):
        """bool QSortFilterProxyModel.setData(None self, QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def hasChildren(self, _parent):
        """bool QSortFilterProxyModel.hasChildren(None self, QModelIndex _parent)"""
        return bool()
    def columnCount(self, _parent):
        """int QSortFilterProxyModel.columnCount(None self, QModelIndex _parent)"""
        return int()
    def rowCount(self, _parent):
        """int QSortFilterProxyModel.rowCount(None self, QModelIndex _parent)"""
        return int()
    def parent(self, _child):
        """QModelIndex QSortFilterProxyModel.parent(None self, QModelIndex _child)"""
        return QModelIndex()
    def parent(self):
        """QObject QSortFilterProxyModel.parent(None self)"""
        return QObject()
    def index(self, _row, _column, _parent):
        """QModelIndex QSortFilterProxyModel.index(None self, int _row, int _column, QModelIndex _parent)"""
        return QModelIndex()
    def lessThan(self, _left, _right):
        """bool QSortFilterProxyModel.lessThan(None self, QModelIndex _left, QModelIndex _right)"""
        return bool()
    def filterChanged(self):
        """None QSortFilterProxyModel.filterChanged(None self)"""
        return None
    def filterAcceptsColumn(self, _source_column, _source_parent):
        """bool QSortFilterProxyModel.filterAcceptsColumn(None self, int _source_column, QModelIndex _source_parent)"""
        return bool()
    def filterAcceptsRow(self, _source_row, _source_parent):
        """bool QSortFilterProxyModel.filterAcceptsRow(None self, int _source_row, QModelIndex _source_parent)"""
        return bool()
    def clear(self):
        """None QSortFilterProxyModel.clear(None self)"""
        return None
    def setFilterFixedString(self, _pattern):
        """None QSortFilterProxyModel.setFilterFixedString(None self, QString _pattern)"""
        return None
    def setFilterWildcard(self, _pattern):
        """None QSortFilterProxyModel.setFilterWildcard(None self, QString _pattern)"""
        return None
    def setFilterCaseSensitivity(self, _cs):
        """None QSortFilterProxyModel.setFilterCaseSensitivity(None self, Qt.CaseSensitivity _cs)"""
        return None
    def filterCaseSensitivity(self):
        """Qt.CaseSensitivity QSortFilterProxyModel.filterCaseSensitivity(None self)"""
        return Qt.CaseSensitivity()
    def setFilterKeyColumn(self, _column):
        """None QSortFilterProxyModel.setFilterKeyColumn(None self, int _column)"""
        return None
    def filterKeyColumn(self):
        """int QSortFilterProxyModel.filterKeyColumn(None self)"""
        return int()
    def setFilterRegExp(self, _regExp):
        """None QSortFilterProxyModel.setFilterRegExp(None self, QRegExp _regExp)"""
        return None
    def setFilterRegExp(self, _pattern):
        """None QSortFilterProxyModel.setFilterRegExp(None self, QString _pattern)"""
        return None
    def filterRegExp(self):
        """QRegExp QSortFilterProxyModel.filterRegExp(None self)"""
        return QRegExp()
    def mapSelectionFromSource(self, _sourceSelection):
        """QItemSelection QSortFilterProxyModel.mapSelectionFromSource(None self, QItemSelection _sourceSelection)"""
        return QItemSelection()
    def mapSelectionToSource(self, _proxySelection):
        """QItemSelection QSortFilterProxyModel.mapSelectionToSource(None self, QItemSelection _proxySelection)"""
        return QItemSelection()
    def mapFromSource(self, _sourceIndex):
        """QModelIndex QSortFilterProxyModel.mapFromSource(None self, QModelIndex _sourceIndex)"""
        return QModelIndex()
    def mapToSource(self, _proxyIndex):
        """QModelIndex QSortFilterProxyModel.mapToSource(None self, QModelIndex _proxyIndex)"""
        return QModelIndex()
    def setSourceModel(self, _sourceModel):
        """None QSortFilterProxyModel.setSourceModel(None self, QAbstractItemModel _sourceModel)"""
        return None


class QSound(QObject):
    """"""
    def __init__(self, _filename, _parent):
        """None QSound.__init__(None self, QString _filename, QObject _parent)"""
        return None
    def stop(self):
        """None QSound.stop(None self)"""
        return None
    def isFinished(self):
        """bool QSound.isFinished(None self)"""
        return bool()
    def fileName(self):
        """QString QSound.fileName(None self)"""
        return QString()
    def setLoops(self):
        """int QSound.setLoops(None self)"""
        return int()
    def loopsRemaining(self):
        """int QSound.loopsRemaining(None self)"""
        return int()
    def loops(self):
        """int QSound.loops(None self)"""
        return int()
    def play(self, _filename):
        """None QSound.play(None self, QString _filename)"""
        return None
    def play(self):
        """None QSound.play(None self)"""
        return None
    def isAvailable(self):
        """bool QSound.isAvailable(None self)"""
        return bool()


class QSpinBox(QAbstractSpinBox):
    """"""
    def __init__(self, _parent):
        """None QSpinBox.__init__(None self, QWidget _parent)"""
        return None
    def setValue(self, _val):
        """None QSpinBox.setValue(None self, int _val)"""
        return None
    def event(self, _e):
        """bool QSpinBox.event(None self, QEvent _e)"""
        return bool()
    def fixup(self, _str):
        """None QSpinBox.fixup(None self, QString _str)"""
        return None
    def fixup(self, _str):
        """None QSpinBox.fixup(None self, QString _str)"""
        return None
    def textFromValue(self, _v):
        """QString QSpinBox.textFromValue(None self, int _v)"""
        return QString()
    def valueFromText(self, _text):
        """int QSpinBox.valueFromText(None self, QString _text)"""
        return int()
    def validate(self, _input, _pos):
        """QValidator.State QSpinBox.validate(None self, QString _input, int _pos)"""
        return QValidator.State()
    def validate(self, _input, _pos):
        """QValidator.State QSpinBox.validate(None self, QString _input, int _pos)"""
        return QValidator.State()
    def setRange(self, _min, _max):
        """None QSpinBox.setRange(None self, int _min, int _max)"""
        return None
    def setMaximum(self, _max):
        """None QSpinBox.setMaximum(None self, int _max)"""
        return None
    def maximum(self):
        """int QSpinBox.maximum(None self)"""
        return int()
    def setMinimum(self, _min):
        """None QSpinBox.setMinimum(None self, int _min)"""
        return None
    def minimum(self):
        """int QSpinBox.minimum(None self)"""
        return int()
    def setSingleStep(self, _val):
        """None QSpinBox.setSingleStep(None self, int _val)"""
        return None
    def singleStep(self):
        """int QSpinBox.singleStep(None self)"""
        return int()
    def cleanText(self):
        """QString QSpinBox.cleanText(None self)"""
        return QString()
    def setSuffix(self, _s):
        """None QSpinBox.setSuffix(None self, QString _s)"""
        return None
    def suffix(self):
        """QString QSpinBox.suffix(None self)"""
        return QString()
    def setPrefix(self, _p):
        """None QSpinBox.setPrefix(None self, QString _p)"""
        return None
    def prefix(self):
        """QString QSpinBox.prefix(None self)"""
        return QString()
    def value(self):
        """int QSpinBox.value(None self)"""
        return int()


class QDoubleSpinBox(QAbstractSpinBox):
    """"""
    def __init__(self, _parent):
        """None QDoubleSpinBox.__init__(None self, QWidget _parent)"""
        return None
    def setValue(self, _val):
        """None QDoubleSpinBox.setValue(None self, float _val)"""
        return None
    def fixup(self, _str):
        """None QDoubleSpinBox.fixup(None self, QString _str)"""
        return None
    def fixup(self, _str):
        """None QDoubleSpinBox.fixup(None self, QString _str)"""
        return None
    def textFromValue(self, _v):
        """QString QDoubleSpinBox.textFromValue(None self, float _v)"""
        return QString()
    def valueFromText(self, _text):
        """float QDoubleSpinBox.valueFromText(None self, QString _text)"""
        return float()
    def validate(self, _input, _pos):
        """QValidator.State QDoubleSpinBox.validate(None self, QString _input, int _pos)"""
        return QValidator.State()
    def validate(self, _input, _pos):
        """QValidator.State QDoubleSpinBox.validate(None self, QString _input, int _pos)"""
        return QValidator.State()
    def setDecimals(self, _prec):
        """None QDoubleSpinBox.setDecimals(None self, int _prec)"""
        return None
    def decimals(self):
        """int QDoubleSpinBox.decimals(None self)"""
        return int()
    def setRange(self, _min, _max):
        """None QDoubleSpinBox.setRange(None self, float _min, float _max)"""
        return None
    def setMaximum(self, _max):
        """None QDoubleSpinBox.setMaximum(None self, float _max)"""
        return None
    def maximum(self):
        """float QDoubleSpinBox.maximum(None self)"""
        return float()
    def setMinimum(self, _min):
        """None QDoubleSpinBox.setMinimum(None self, float _min)"""
        return None
    def minimum(self):
        """float QDoubleSpinBox.minimum(None self)"""
        return float()
    def setSingleStep(self, _val):
        """None QDoubleSpinBox.setSingleStep(None self, float _val)"""
        return None
    def singleStep(self):
        """float QDoubleSpinBox.singleStep(None self)"""
        return float()
    def cleanText(self):
        """QString QDoubleSpinBox.cleanText(None self)"""
        return QString()
    def setSuffix(self, _s):
        """None QDoubleSpinBox.setSuffix(None self, QString _s)"""
        return None
    def suffix(self):
        """QString QDoubleSpinBox.suffix(None self)"""
        return QString()
    def setPrefix(self, _p):
        """None QDoubleSpinBox.setPrefix(None self, QString _p)"""
        return None
    def prefix(self):
        """QString QDoubleSpinBox.prefix(None self)"""
        return QString()
    def value(self):
        """float QDoubleSpinBox.value(None self)"""
        return float()


class QSplashScreen(QWidget):
    """"""
    def __init__(self, _pixmap, _flags):
        """None QSplashScreen.__init__(None self, QPixmap _pixmap, Qt.WindowFlags _flags)"""
        return None
    def __init__(self, _parent, _pixmap, _flags):
        """None QSplashScreen.__init__(None self, QWidget _parent, QPixmap _pixmap, Qt.WindowFlags _flags)"""
        return None
    def mousePressEvent(self):
        """QMouseEvent QSplashScreen.mousePressEvent(None self)"""
        return QMouseEvent()
    def event(self, _e):
        """bool QSplashScreen.event(None self, QEvent _e)"""
        return bool()
    def drawContents(self, _painter):
        """None QSplashScreen.drawContents(None self, QPainter _painter)"""
        return None
    def clearMessage(self):
        """None QSplashScreen.clearMessage(None self)"""
        return None
    def showMessage(self, _message, _alignment, _color):
        """None QSplashScreen.showMessage(None self, QString _message, int _alignment, QColor _color)"""
        return None
    def repaint(self):
        """None QSplashScreen.repaint(None self)"""
        return None
    def finish(self, _w):
        """None QSplashScreen.finish(None self, QWidget _w)"""
        return None
    def pixmap(self):
        """QPixmap QSplashScreen.pixmap(None self)"""
        return QPixmap()
    def setPixmap(self, _pixmap):
        """None QSplashScreen.setPixmap(None self, QPixmap _pixmap)"""
        return None


class QSplitter(QFrame):
    """"""
    def __init__(self, _parent):
        """None QSplitter.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _orientation, _parent):
        """None QSplitter.__init__(None self, Qt.Orientation _orientation, QWidget _parent)"""
        return None
    def closestLegalPosition(self):
        """int QSplitter.closestLegalPosition(None self)"""
        return int()
    def setRubberBand(self, _position):
        """None QSplitter.setRubberBand(None self, int _position)"""
        return None
    def moveSplitter(self, _pos, _index):
        """None QSplitter.moveSplitter(None self, int _pos, int _index)"""
        return None
    def changeEvent(self):
        """QEvent QSplitter.changeEvent(None self)"""
        return QEvent()
    def resizeEvent(self):
        """QResizeEvent QSplitter.resizeEvent(None self)"""
        return QResizeEvent()
    def event(self):
        """QEvent QSplitter.event(None self)"""
        return QEvent()
    def childEvent(self):
        """QChildEvent QSplitter.childEvent(None self)"""
        return QChildEvent()
    def createHandle(self):
        """QSplitterHandle QSplitter.createHandle(None self)"""
        return QSplitterHandle()
    def setStretchFactor(self, _index, _stretch):
        """None QSplitter.setStretchFactor(None self, int _index, int _stretch)"""
        return None
    def handle(self, _index):
        """QSplitterHandle QSplitter.handle(None self, int _index)"""
        return QSplitterHandle()
    def getRange(self, _index):
        """int QSplitter.getRange(None self, int _index)"""
        return int()
    def __len__(self):
        """ QSplitter.__len__(None self)"""
        return ()
    def count(self):
        """int QSplitter.count(None self)"""
        return int()
    def widget(self, _index):
        """QWidget QSplitter.widget(None self, int _index)"""
        return QWidget()
    def indexOf(self, _w):
        """int QSplitter.indexOf(None self, QWidget _w)"""
        return int()
    def setHandleWidth(self):
        """int QSplitter.setHandleWidth(None self)"""
        return int()
    def handleWidth(self):
        """int QSplitter.handleWidth(None self)"""
        return int()
    def restoreState(self, _state):
        """bool QSplitter.restoreState(None self, QByteArray _state)"""
        return bool()
    def saveState(self):
        """QByteArray QSplitter.saveState(None self)"""
        return QByteArray()
    def setSizes(self, _list):
        """None QSplitter.setSizes(None self, list-of-int _list)"""
        return None
    def sizes(self):
        """list-of-int QSplitter.sizes(None self)"""
        return [int()]
    def minimumSizeHint(self):
        """QSize QSplitter.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QSplitter.sizeHint(None self)"""
        return QSize()
    def refresh(self):
        """None QSplitter.refresh(None self)"""
        return None
    def opaqueResize(self):
        """bool QSplitter.opaqueResize(None self)"""
        return bool()
    def setOpaqueResize(self, _opaque):
        """None QSplitter.setOpaqueResize(None self, bool _opaque)"""
        return None
    def isCollapsible(self, _index):
        """bool QSplitter.isCollapsible(None self, int _index)"""
        return bool()
    def setCollapsible(self, _index):
        """bool QSplitter.setCollapsible(None self, int _index)"""
        return bool()
    def childrenCollapsible(self):
        """bool QSplitter.childrenCollapsible(None self)"""
        return bool()
    def setChildrenCollapsible(self):
        """bool QSplitter.setChildrenCollapsible(None self)"""
        return bool()
    def orientation(self):
        """Qt.Orientation QSplitter.orientation(None self)"""
        return Qt.Orientation()
    def setOrientation(self):
        """Qt.Orientation QSplitter.setOrientation(None self)"""
        return Qt.Orientation()
    def insertWidget(self, _index, _widget):
        """None QSplitter.insertWidget(None self, int _index, QWidget _widget)"""
        return None
    def addWidget(self, _widget):
        """None QSplitter.addWidget(None self, QWidget _widget)"""
        return None


class QSplitterHandle(QWidget):
    """"""
    def __init__(self, _o, _parent):
        """None QSplitterHandle.__init__(None self, Qt.Orientation _o, QSplitter _parent)"""
        return None
    def resizeEvent(self):
        """QResizeEvent QSplitterHandle.resizeEvent(None self)"""
        return QResizeEvent()
    def closestLegalPosition(self, _p):
        """int QSplitterHandle.closestLegalPosition(None self, int _p)"""
        return int()
    def moveSplitter(self, _p):
        """None QSplitterHandle.moveSplitter(None self, int _p)"""
        return None
    def event(self):
        """QEvent QSplitterHandle.event(None self)"""
        return QEvent()
    def mouseReleaseEvent(self):
        """QMouseEvent QSplitterHandle.mouseReleaseEvent(None self)"""
        return QMouseEvent()
    def mousePressEvent(self):
        """QMouseEvent QSplitterHandle.mousePressEvent(None self)"""
        return QMouseEvent()
    def mouseMoveEvent(self):
        """QMouseEvent QSplitterHandle.mouseMoveEvent(None self)"""
        return QMouseEvent()
    def paintEvent(self):
        """QPaintEvent QSplitterHandle.paintEvent(None self)"""
        return QPaintEvent()
    def sizeHint(self):
        """QSize QSplitterHandle.sizeHint(None self)"""
        return QSize()
    def splitter(self):
        """QSplitter QSplitterHandle.splitter(None self)"""
        return QSplitter()
    def opaqueResize(self):
        """bool QSplitterHandle.opaqueResize(None self)"""
        return bool()
    def orientation(self):
        """Qt.Orientation QSplitterHandle.orientation(None self)"""
        return Qt.Orientation()
    def setOrientation(self, _o):
        """None QSplitterHandle.setOrientation(None self, Qt.Orientation _o)"""
        return None


class QStackedLayout(QLayout):
    """"""
    StackOne = int() # QStackedLayout.StackingMode enum
    StackAll = int() # QStackedLayout.StackingMode enum

    def __init__(self):
        """None QStackedLayout.__init__(None self)"""
        return None
    def __init__(self, _parent):
        """None QStackedLayout.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _parentLayout):
        """None QStackedLayout.__init__(None self, QLayout _parentLayout)"""
        return None
    def setStackingMode(self, _stackingMode):
        """None QStackedLayout.setStackingMode(None self, QStackedLayout.StackingMode _stackingMode)"""
        return None
    def stackingMode(self):
        """QStackedLayout.StackingMode QStackedLayout.stackingMode(None self)"""
        return QStackedLayout.StackingMode()
    def setCurrentWidget(self, _w):
        """None QStackedLayout.setCurrentWidget(None self, QWidget _w)"""
        return None
    def setCurrentIndex(self, _index):
        """None QStackedLayout.setCurrentIndex(None self, int _index)"""
        return None
    def setGeometry(self, _rect):
        """None QStackedLayout.setGeometry(None self, QRect _rect)"""
        return None
    def takeAt(self):
        """int QStackedLayout.takeAt(None self)"""
        return int()
    def itemAt(self):
        """int QStackedLayout.itemAt(None self)"""
        return int()
    def minimumSize(self):
        """QSize QStackedLayout.minimumSize(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QStackedLayout.sizeHint(None self)"""
        return QSize()
    def addItem(self, _item):
        """None QStackedLayout.addItem(None self, QLayoutItem _item)"""
        return None
    def count(self):
        """int QStackedLayout.count(None self)"""
        return int()
    def widget(self):
        """int QStackedLayout.widget(None self)"""
        return int()
    def widget(self):
        """QWidget QStackedLayout.widget(None self)"""
        return QWidget()
    def currentIndex(self):
        """int QStackedLayout.currentIndex(None self)"""
        return int()
    def currentWidget(self):
        """QWidget QStackedLayout.currentWidget(None self)"""
        return QWidget()
    def insertWidget(self, _index, _w):
        """int QStackedLayout.insertWidget(None self, int _index, QWidget _w)"""
        return int()
    def addWidget(self, _w):
        """int QStackedLayout.addWidget(None self, QWidget _w)"""
        return int()


class QStackedWidget(QFrame):
    """"""
    def __init__(self, _parent):
        """None QStackedWidget.__init__(None self, QWidget _parent)"""
        return None
    def event(self, _e):
        """bool QStackedWidget.event(None self, QEvent _e)"""
        return bool()
    def setCurrentWidget(self, _w):
        """None QStackedWidget.setCurrentWidget(None self, QWidget _w)"""
        return None
    def setCurrentIndex(self, _index):
        """None QStackedWidget.setCurrentIndex(None self, int _index)"""
        return None
    def __len__(self):
        """ QStackedWidget.__len__(None self)"""
        return ()
    def count(self):
        """int QStackedWidget.count(None self)"""
        return int()
    def widget(self):
        """int QStackedWidget.widget(None self)"""
        return int()
    def indexOf(self):
        """QWidget QStackedWidget.indexOf(None self)"""
        return QWidget()
    def currentIndex(self):
        """int QStackedWidget.currentIndex(None self)"""
        return int()
    def currentWidget(self):
        """QWidget QStackedWidget.currentWidget(None self)"""
        return QWidget()
    def removeWidget(self, _w):
        """None QStackedWidget.removeWidget(None self, QWidget _w)"""
        return None
    def insertWidget(self, _index, _w):
        """int QStackedWidget.insertWidget(None self, int _index, QWidget _w)"""
        return int()
    def addWidget(self, _w):
        """int QStackedWidget.addWidget(None self, QWidget _w)"""
        return int()


class QStandardItemModel(QAbstractItemModel):
    """"""
    def __init__(self, _parent):
        """None QStandardItemModel.__init__(None self, QObject _parent)"""
        return None
    def __init__(self, _rows, _columns, _parent):
        """None QStandardItemModel.__init__(None self, int _rows, int _columns, QObject _parent)"""
        return None
    def dropMimeData(self, _data, _action, _row, _column, _parent):
        """bool QStandardItemModel.dropMimeData(None self, QMimeData _data, Qt.DropAction _action, int _row, int _column, QModelIndex _parent)"""
        return bool()
    def mimeData(self, _indexes):
        """QMimeData QStandardItemModel.mimeData(None self, list-of-QModelIndex _indexes)"""
        return QMimeData()
    def mimeTypes(self):
        """QStringList QStandardItemModel.mimeTypes(None self)"""
        return QStringList()
    def setSortRole(self, _role):
        """None QStandardItemModel.setSortRole(None self, int _role)"""
        return None
    def sortRole(self):
        """int QStandardItemModel.sortRole(None self)"""
        return int()
    def findItems(self, _text, _flags, _column):
        """list-of-QStandardItem QStandardItemModel.findItems(None self, QString _text, Qt.MatchFlags _flags, int _column)"""
        return [QStandardItem()]
    def setItemPrototype(self, _item):
        """None QStandardItemModel.setItemPrototype(None self, QStandardItem _item)"""
        return None
    def itemPrototype(self):
        """QStandardItem QStandardItemModel.itemPrototype(None self)"""
        return QStandardItem()
    def takeVerticalHeaderItem(self, _row):
        """QStandardItem QStandardItemModel.takeVerticalHeaderItem(None self, int _row)"""
        return QStandardItem()
    def takeHorizontalHeaderItem(self, _column):
        """QStandardItem QStandardItemModel.takeHorizontalHeaderItem(None self, int _column)"""
        return QStandardItem()
    def takeColumn(self, _column):
        """list-of-QStandardItem QStandardItemModel.takeColumn(None self, int _column)"""
        return [QStandardItem()]
    def takeRow(self, _row):
        """list-of-QStandardItem QStandardItemModel.takeRow(None self, int _row)"""
        return [QStandardItem()]
    def takeItem(self, _row, _column):
        """QStandardItem QStandardItemModel.takeItem(None self, int _row, int _column)"""
        return QStandardItem()
    def insertColumn(self, _column, _items):
        """None QStandardItemModel.insertColumn(None self, int _column, list-of-QStandardItem _items)"""
        return None
    def insertColumn(self, _column, _parent):
        """bool QStandardItemModel.insertColumn(None self, int _column, QModelIndex _parent)"""
        return bool()
    def insertRow(self, _row, _items):
        """None QStandardItemModel.insertRow(None self, int _row, list-of-QStandardItem _items)"""
        return None
    def insertRow(self, _arow, _aitem):
        """None QStandardItemModel.insertRow(None self, int _arow, QStandardItem _aitem)"""
        return None
    def insertRow(self, _row, _parent):
        """bool QStandardItemModel.insertRow(None self, int _row, QModelIndex _parent)"""
        return bool()
    def appendColumn(self, _items):
        """None QStandardItemModel.appendColumn(None self, list-of-QStandardItem _items)"""
        return None
    def appendRow(self, _items):
        """None QStandardItemModel.appendRow(None self, list-of-QStandardItem _items)"""
        return None
    def appendRow(self, _aitem):
        """None QStandardItemModel.appendRow(None self, QStandardItem _aitem)"""
        return None
    def setColumnCount(self, _columns):
        """None QStandardItemModel.setColumnCount(None self, int _columns)"""
        return None
    def setRowCount(self, _rows):
        """None QStandardItemModel.setRowCount(None self, int _rows)"""
        return None
    def setVerticalHeaderLabels(self, _labels):
        """None QStandardItemModel.setVerticalHeaderLabels(None self, QStringList _labels)"""
        return None
    def setHorizontalHeaderLabels(self, _labels):
        """None QStandardItemModel.setHorizontalHeaderLabels(None self, QStringList _labels)"""
        return None
    def setVerticalHeaderItem(self, _row, _item):
        """None QStandardItemModel.setVerticalHeaderItem(None self, int _row, QStandardItem _item)"""
        return None
    def verticalHeaderItem(self, _row):
        """QStandardItem QStandardItemModel.verticalHeaderItem(None self, int _row)"""
        return QStandardItem()
    def setHorizontalHeaderItem(self, _column, _item):
        """None QStandardItemModel.setHorizontalHeaderItem(None self, int _column, QStandardItem _item)"""
        return None
    def horizontalHeaderItem(self, _column):
        """QStandardItem QStandardItemModel.horizontalHeaderItem(None self, int _column)"""
        return QStandardItem()
    def invisibleRootItem(self):
        """QStandardItem QStandardItemModel.invisibleRootItem(None self)"""
        return QStandardItem()
    def setItem(self, _row, _column, _item):
        """None QStandardItemModel.setItem(None self, int _row, int _column, QStandardItem _item)"""
        return None
    def setItem(self, _arow, _aitem):
        """None QStandardItemModel.setItem(None self, int _arow, QStandardItem _aitem)"""
        return None
    def item(self, _row, _column):
        """QStandardItem QStandardItemModel.item(None self, int _row, int _column)"""
        return QStandardItem()
    def indexFromItem(self, _item):
        """QModelIndex QStandardItemModel.indexFromItem(None self, QStandardItem _item)"""
        return QModelIndex()
    def itemFromIndex(self, _index):
        """QStandardItem QStandardItemModel.itemFromIndex(None self, QModelIndex _index)"""
        return QStandardItem()
    def sort(self, _column, _order):
        """None QStandardItemModel.sort(None self, int _column, Qt.SortOrder _order)"""
        return None
    def setItemData(self, _index, _roles):
        """bool QStandardItemModel.setItemData(None self, QModelIndex _index, dict-of-int-QVariant _roles)"""
        return bool()
    def itemData(self, _index):
        """dict-of-int-QVariant QStandardItemModel.itemData(None self, QModelIndex _index)"""
        return dict-of-int-QVariant()
    def supportedDropActions(self):
        """Qt.DropActions QStandardItemModel.supportedDropActions(None self)"""
        return Qt.DropActions()
    def clear(self):
        """None QStandardItemModel.clear(None self)"""
        return None
    def flags(self, _index):
        """Qt.ItemFlags QStandardItemModel.flags(None self, QModelIndex _index)"""
        return Qt.ItemFlags()
    def removeColumns(self, _column, _count, _parent):
        """bool QStandardItemModel.removeColumns(None self, int _column, int _count, QModelIndex _parent)"""
        return bool()
    def removeRows(self, _row, _count, _parent):
        """bool QStandardItemModel.removeRows(None self, int _row, int _count, QModelIndex _parent)"""
        return bool()
    def insertColumns(self, _column, _count, _parent):
        """bool QStandardItemModel.insertColumns(None self, int _column, int _count, QModelIndex _parent)"""
        return bool()
    def insertRows(self, _row, _count, _parent):
        """bool QStandardItemModel.insertRows(None self, int _row, int _count, QModelIndex _parent)"""
        return bool()
    def setHeaderData(self, _section, _orientation, _value, _role):
        """bool QStandardItemModel.setHeaderData(None self, int _section, Qt.Orientation _orientation, QVariant _value, int _role)"""
        return bool()
    def headerData(self, _section, _orientation, _role):
        """QVariant QStandardItemModel.headerData(None self, int _section, Qt.Orientation _orientation, int _role)"""
        return QVariant()
    def setData(self, _index, _value, _role):
        """bool QStandardItemModel.setData(None self, QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def data(self, _index, _role):
        """QVariant QStandardItemModel.data(None self, QModelIndex _index, int _role)"""
        return QVariant()
    def hasChildren(self, _parent):
        """bool QStandardItemModel.hasChildren(None self, QModelIndex _parent)"""
        return bool()
    def columnCount(self, _parent):
        """int QStandardItemModel.columnCount(None self, QModelIndex _parent)"""
        return int()
    def rowCount(self, _parent):
        """int QStandardItemModel.rowCount(None self, QModelIndex _parent)"""
        return int()
    def parent(self, _child):
        """QModelIndex QStandardItemModel.parent(None self, QModelIndex _child)"""
        return QModelIndex()
    def parent(self):
        """QObject QStandardItemModel.parent(None self)"""
        return QObject()
    def index(self, _row, _column, _parent):
        """QModelIndex QStandardItemModel.index(None self, int _row, int _column, QModelIndex _parent)"""
        return QModelIndex()


class QStandardItem():
    """"""
    Type = int() # QStandardItem.ItemType enum
    UserType = int() # QStandardItem.ItemType enum

    def __init__(self):
        """None QStandardItem.__init__(None self)"""
        return None
    def __init__(self, _text):
        """None QStandardItem.__init__(None self, QString _text)"""
        return None
    def __init__(self, _icon, _text):
        """None QStandardItem.__init__(None self, QIcon _icon, QString _text)"""
        return None
    def __init__(self, _rows, _columns):
        """None QStandardItem.__init__(None self, int _rows, int _columns)"""
        return None
    def __init__(self, _other):
        """None QStandardItem.__init__(None self, QStandardItem _other)"""
        return None
    def __ge__(self, _other):
        """bool QStandardItem.__ge__(None self, QStandardItem _other)"""
        return bool()
    def emitDataChanged(self):
        """None QStandardItem.emitDataChanged(None self)"""
        return None
    def appendRows(self, _aitems):
        """None QStandardItem.appendRows(None self, list-of-QStandardItem _aitems)"""
        return None
    def appendColumn(self, _aitems):
        """None QStandardItem.appendColumn(None self, list-of-QStandardItem _aitems)"""
        return None
    def appendRow(self, _aitems):
        """None QStandardItem.appendRow(None self, list-of-QStandardItem _aitems)"""
        return None
    def appendRow(self, _aitem):
        """None QStandardItem.appendRow(None self, QStandardItem _aitem)"""
        return None
    def setAccessibleDescription(self, _aaccessibleDescription):
        """None QStandardItem.setAccessibleDescription(None self, QString _aaccessibleDescription)"""
        return None
    def setAccessibleText(self, _aaccessibleText):
        """None QStandardItem.setAccessibleText(None self, QString _aaccessibleText)"""
        return None
    def setCheckState(self, _acheckState):
        """None QStandardItem.setCheckState(None self, Qt.CheckState _acheckState)"""
        return None
    def setForeground(self, _abrush):
        """None QStandardItem.setForeground(None self, QBrush _abrush)"""
        return None
    def setBackground(self, _abrush):
        """None QStandardItem.setBackground(None self, QBrush _abrush)"""
        return None
    def setTextAlignment(self, _atextAlignment):
        """None QStandardItem.setTextAlignment(None self, Qt.Alignment _atextAlignment)"""
        return None
    def setFont(self, _afont):
        """None QStandardItem.setFont(None self, QFont _afont)"""
        return None
    def setSizeHint(self, _asizeHint):
        """None QStandardItem.setSizeHint(None self, QSize _asizeHint)"""
        return None
    def setWhatsThis(self, _awhatsThis):
        """None QStandardItem.setWhatsThis(None self, QString _awhatsThis)"""
        return None
    def setStatusTip(self, _astatusTip):
        """None QStandardItem.setStatusTip(None self, QString _astatusTip)"""
        return None
    def setToolTip(self, _atoolTip):
        """None QStandardItem.setToolTip(None self, QString _atoolTip)"""
        return None
    def setIcon(self, _aicon):
        """None QStandardItem.setIcon(None self, QIcon _aicon)"""
        return None
    def setText(self, _atext):
        """None QStandardItem.setText(None self, QString _atext)"""
        return None
    def __lt__(self, _other):
        """bool QStandardItem.__lt__(None self, QStandardItem _other)"""
        return bool()
    def write(self, _out):
        """None QStandardItem.write(None self, QDataStream _out)"""
        return None
    def read(self, _in):
        """None QStandardItem.read(None self, QDataStream _in)"""
        return None
    def type(self):
        """int QStandardItem.type(None self)"""
        return int()
    def clone(self):
        """QStandardItem QStandardItem.clone(None self)"""
        return QStandardItem()
    def sortChildren(self, _column, _order):
        """None QStandardItem.sortChildren(None self, int _column, Qt.SortOrder _order)"""
        return None
    def takeColumn(self, _column):
        """list-of-QStandardItem QStandardItem.takeColumn(None self, int _column)"""
        return [QStandardItem()]
    def takeRow(self, _row):
        """list-of-QStandardItem QStandardItem.takeRow(None self, int _row)"""
        return [QStandardItem()]
    def takeChild(self, _row, _column):
        """QStandardItem QStandardItem.takeChild(None self, int _row, int _column)"""
        return QStandardItem()
    def removeColumns(self, _column, _count):
        """None QStandardItem.removeColumns(None self, int _column, int _count)"""
        return None
    def removeRows(self, _row, _count):
        """None QStandardItem.removeRows(None self, int _row, int _count)"""
        return None
    def removeColumn(self, _column):
        """None QStandardItem.removeColumn(None self, int _column)"""
        return None
    def removeRow(self, _row):
        """None QStandardItem.removeRow(None self, int _row)"""
        return None
    def insertColumns(self, _column, _count):
        """None QStandardItem.insertColumns(None self, int _column, int _count)"""
        return None
    def insertColumn(self, _column, _items):
        """None QStandardItem.insertColumn(None self, int _column, list-of-QStandardItem _items)"""
        return None
    def insertRows(self, _row, _count):
        """None QStandardItem.insertRows(None self, int _row, int _count)"""
        return None
    def insertRows(self, _row, _items):
        """None QStandardItem.insertRows(None self, int _row, list-of-QStandardItem _items)"""
        return None
    def insertRow(self, _row, _items):
        """None QStandardItem.insertRow(None self, int _row, list-of-QStandardItem _items)"""
        return None
    def insertRow(self, _arow, _aitem):
        """None QStandardItem.insertRow(None self, int _arow, QStandardItem _aitem)"""
        return None
    def setChild(self, _row, _column, _item):
        """None QStandardItem.setChild(None self, int _row, int _column, QStandardItem _item)"""
        return None
    def setChild(self, _arow, _aitem):
        """None QStandardItem.setChild(None self, int _arow, QStandardItem _aitem)"""
        return None
    def child(self, _row, _column):
        """QStandardItem QStandardItem.child(None self, int _row, int _column)"""
        return QStandardItem()
    def hasChildren(self):
        """bool QStandardItem.hasChildren(None self)"""
        return bool()
    def setColumnCount(self, _columns):
        """None QStandardItem.setColumnCount(None self, int _columns)"""
        return None
    def columnCount(self):
        """int QStandardItem.columnCount(None self)"""
        return int()
    def setRowCount(self, _rows):
        """None QStandardItem.setRowCount(None self, int _rows)"""
        return None
    def rowCount(self):
        """int QStandardItem.rowCount(None self)"""
        return int()
    def model(self):
        """QStandardItemModel QStandardItem.model(None self)"""
        return QStandardItemModel()
    def index(self):
        """QModelIndex QStandardItem.index(None self)"""
        return QModelIndex()
    def column(self):
        """int QStandardItem.column(None self)"""
        return int()
    def row(self):
        """int QStandardItem.row(None self)"""
        return int()
    def parent(self):
        """QStandardItem QStandardItem.parent(None self)"""
        return QStandardItem()
    def setDropEnabled(self, _dropEnabled):
        """None QStandardItem.setDropEnabled(None self, bool _dropEnabled)"""
        return None
    def isDropEnabled(self):
        """bool QStandardItem.isDropEnabled(None self)"""
        return bool()
    def setDragEnabled(self, _dragEnabled):
        """None QStandardItem.setDragEnabled(None self, bool _dragEnabled)"""
        return None
    def isDragEnabled(self):
        """bool QStandardItem.isDragEnabled(None self)"""
        return bool()
    def setTristate(self, _tristate):
        """None QStandardItem.setTristate(None self, bool _tristate)"""
        return None
    def isTristate(self):
        """bool QStandardItem.isTristate(None self)"""
        return bool()
    def setCheckable(self, _checkable):
        """None QStandardItem.setCheckable(None self, bool _checkable)"""
        return None
    def isCheckable(self):
        """bool QStandardItem.isCheckable(None self)"""
        return bool()
    def setSelectable(self, _selectable):
        """None QStandardItem.setSelectable(None self, bool _selectable)"""
        return None
    def isSelectable(self):
        """bool QStandardItem.isSelectable(None self)"""
        return bool()
    def setEditable(self, _editable):
        """None QStandardItem.setEditable(None self, bool _editable)"""
        return None
    def isEditable(self):
        """bool QStandardItem.isEditable(None self)"""
        return bool()
    def setEnabled(self, _enabled):
        """None QStandardItem.setEnabled(None self, bool _enabled)"""
        return None
    def isEnabled(self):
        """bool QStandardItem.isEnabled(None self)"""
        return bool()
    def setFlags(self, _flags):
        """None QStandardItem.setFlags(None self, Qt.ItemFlags _flags)"""
        return None
    def flags(self):
        """Qt.ItemFlags QStandardItem.flags(None self)"""
        return Qt.ItemFlags()
    def accessibleDescription(self):
        """QString QStandardItem.accessibleDescription(None self)"""
        return QString()
    def accessibleText(self):
        """QString QStandardItem.accessibleText(None self)"""
        return QString()
    def checkState(self):
        """Qt.CheckState QStandardItem.checkState(None self)"""
        return Qt.CheckState()
    def foreground(self):
        """QBrush QStandardItem.foreground(None self)"""
        return QBrush()
    def background(self):
        """QBrush QStandardItem.background(None self)"""
        return QBrush()
    def textAlignment(self):
        """Qt.Alignment QStandardItem.textAlignment(None self)"""
        return Qt.Alignment()
    def font(self):
        """QFont QStandardItem.font(None self)"""
        return QFont()
    def sizeHint(self):
        """QSize QStandardItem.sizeHint(None self)"""
        return QSize()
    def whatsThis(self):
        """QString QStandardItem.whatsThis(None self)"""
        return QString()
    def statusTip(self):
        """QString QStandardItem.statusTip(None self)"""
        return QString()
    def toolTip(self):
        """QString QStandardItem.toolTip(None self)"""
        return QString()
    def icon(self):
        """QIcon QStandardItem.icon(None self)"""
        return QIcon()
    def text(self):
        """QString QStandardItem.text(None self)"""
        return QString()
    def setData(self, _value, _role):
        """None QStandardItem.setData(None self, QVariant _value, int _role)"""
        return None
    def data(self, _role):
        """QVariant QStandardItem.data(None self, int _role)"""
        return QVariant()


class QStaticText():
    """"""
    ModerateCaching = int() # QStaticText.PerformanceHint enum
    AggressiveCaching = int() # QStaticText.PerformanceHint enum

    def __init__(self):
        """None QStaticText.__init__(None self)"""
        return None
    def __init__(self, _text):
        """None QStaticText.__init__(None self, QString _text)"""
        return None
    def __init__(self, _other):
        """None QStaticText.__init__(None self, QStaticText _other)"""
        return None
    def __ne__(self):
        """QStaticText QStaticText.__ne__(None self)"""
        return QStaticText()
    def __eq__(self):
        """QStaticText QStaticText.__eq__(None self)"""
        return QStaticText()
    def performanceHint(self):
        """QStaticText.PerformanceHint QStaticText.performanceHint(None self)"""
        return QStaticText.PerformanceHint()
    def setPerformanceHint(self, _performanceHint):
        """None QStaticText.setPerformanceHint(None self, QStaticText.PerformanceHint _performanceHint)"""
        return None
    def prepare(self, _matrix, _font):
        """None QStaticText.prepare(None self, QTransform _matrix, QFont _font)"""
        return None
    def size(self):
        """QSizeF QStaticText.size(None self)"""
        return QSizeF()
    def textOption(self):
        """QTextOption QStaticText.textOption(None self)"""
        return QTextOption()
    def setTextOption(self, _textOption):
        """None QStaticText.setTextOption(None self, QTextOption _textOption)"""
        return None
    def textWidth(self):
        """float QStaticText.textWidth(None self)"""
        return float()
    def setTextWidth(self, _textWidth):
        """None QStaticText.setTextWidth(None self, float _textWidth)"""
        return None
    def textFormat(self):
        """Qt.TextFormat QStaticText.textFormat(None self)"""
        return Qt.TextFormat()
    def setTextFormat(self, _textFormat):
        """None QStaticText.setTextFormat(None self, Qt.TextFormat _textFormat)"""
        return None
    def text(self):
        """QString QStaticText.text(None self)"""
        return QString()
    def setText(self, _text):
        """None QStaticText.setText(None self, QString _text)"""
        return None


class QStatusBar(QWidget):
    """"""
    def __init__(self, _parent):
        """None QStatusBar.__init__(None self, QWidget _parent)"""
        return None
    def showEvent(self):
        """QShowEvent QStatusBar.showEvent(None self)"""
        return QShowEvent()
    def event(self):
        """QEvent QStatusBar.event(None self)"""
        return QEvent()
    def hideOrShow(self):
        """None QStatusBar.hideOrShow(None self)"""
        return None
    def reformat(self):
        """None QStatusBar.reformat(None self)"""
        return None
    def resizeEvent(self):
        """QResizeEvent QStatusBar.resizeEvent(None self)"""
        return QResizeEvent()
    def paintEvent(self):
        """QPaintEvent QStatusBar.paintEvent(None self)"""
        return QPaintEvent()
    def clearMessage(self):
        """None QStatusBar.clearMessage(None self)"""
        return None
    def showMessage(self, _message, _msecs):
        """None QStatusBar.showMessage(None self, QString _message, int _msecs)"""
        return None
    def insertPermanentWidget(self, _index, _widget, _stretch):
        """int QStatusBar.insertPermanentWidget(None self, int _index, QWidget _widget, int _stretch)"""
        return int()
    def insertWidget(self, _index, _widget, _stretch):
        """int QStatusBar.insertWidget(None self, int _index, QWidget _widget, int _stretch)"""
        return int()
    def currentMessage(self):
        """QString QStatusBar.currentMessage(None self)"""
        return QString()
    def isSizeGripEnabled(self):
        """bool QStatusBar.isSizeGripEnabled(None self)"""
        return bool()
    def setSizeGripEnabled(self):
        """bool QStatusBar.setSizeGripEnabled(None self)"""
        return bool()
    def removeWidget(self, _widget):
        """None QStatusBar.removeWidget(None self, QWidget _widget)"""
        return None
    def addPermanentWidget(self, _widget, _stretch):
        """None QStatusBar.addPermanentWidget(None self, QWidget _widget, int _stretch)"""
        return None
    def addWidget(self, _widget, _stretch):
        """None QStatusBar.addWidget(None self, QWidget _widget, int _stretch)"""
        return None


class QStringListModel(QAbstractListModel):
    """"""
    def __init__(self, _parent):
        """None QStringListModel.__init__(None self, QObject _parent)"""
        return None
    def __init__(self, _strings, _parent):
        """None QStringListModel.__init__(None self, QStringList _strings, QObject _parent)"""
        return None
    def supportedDropActions(self):
        """Qt.DropActions QStringListModel.supportedDropActions(None self)"""
        return Qt.DropActions()
    def sort(self, _column, _order):
        """None QStringListModel.sort(None self, int _column, Qt.SortOrder _order)"""
        return None
    def setStringList(self, _strings):
        """None QStringListModel.setStringList(None self, QStringList _strings)"""
        return None
    def stringList(self):
        """QStringList QStringListModel.stringList(None self)"""
        return QStringList()
    def removeRows(self, _row, _count, _parent):
        """bool QStringListModel.removeRows(None self, int _row, int _count, QModelIndex _parent)"""
        return bool()
    def insertRows(self, _row, _count, _parent):
        """bool QStringListModel.insertRows(None self, int _row, int _count, QModelIndex _parent)"""
        return bool()
    def flags(self, _index):
        """Qt.ItemFlags QStringListModel.flags(None self, QModelIndex _index)"""
        return Qt.ItemFlags()
    def setData(self, _index, _value, _role):
        """bool QStringListModel.setData(None self, QModelIndex _index, QVariant _value, int _role)"""
        return bool()
    def data(self, _index, _role):
        """QVariant QStringListModel.data(None self, QModelIndex _index, int _role)"""
        return QVariant()
    def rowCount(self, _parent):
        """int QStringListModel.rowCount(None self, QModelIndex _parent)"""
        return int()


class QStyle(QObject):
    """"""
    RSIP_OnMouseClickAndAlreadyFocused = int() # QStyle.RequestSoftwareInputPanel enum
    RSIP_OnMouseClick = int() # QStyle.RequestSoftwareInputPanel enum

    SP_TitleBarMenuButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarMinButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarMaxButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarCloseButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarNormalButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarShadeButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarUnshadeButton = int() # QStyle.StandardPixmap enum
    SP_TitleBarContextHelpButton = int() # QStyle.StandardPixmap enum
    SP_DockWidgetCloseButton = int() # QStyle.StandardPixmap enum
    SP_MessageBoxInformation = int() # QStyle.StandardPixmap enum
    SP_MessageBoxWarning = int() # QStyle.StandardPixmap enum
    SP_MessageBoxCritical = int() # QStyle.StandardPixmap enum
    SP_MessageBoxQuestion = int() # QStyle.StandardPixmap enum
    SP_DesktopIcon = int() # QStyle.StandardPixmap enum
    SP_TrashIcon = int() # QStyle.StandardPixmap enum
    SP_ComputerIcon = int() # QStyle.StandardPixmap enum
    SP_DriveFDIcon = int() # QStyle.StandardPixmap enum
    SP_DriveHDIcon = int() # QStyle.StandardPixmap enum
    SP_DriveCDIcon = int() # QStyle.StandardPixmap enum
    SP_DriveDVDIcon = int() # QStyle.StandardPixmap enum
    SP_DriveNetIcon = int() # QStyle.StandardPixmap enum
    SP_DirOpenIcon = int() # QStyle.StandardPixmap enum
    SP_DirClosedIcon = int() # QStyle.StandardPixmap enum
    SP_DirLinkIcon = int() # QStyle.StandardPixmap enum
    SP_FileIcon = int() # QStyle.StandardPixmap enum
    SP_FileLinkIcon = int() # QStyle.StandardPixmap enum
    SP_ToolBarHorizontalExtensionButton = int() # QStyle.StandardPixmap enum
    SP_ToolBarVerticalExtensionButton = int() # QStyle.StandardPixmap enum
    SP_FileDialogStart = int() # QStyle.StandardPixmap enum
    SP_FileDialogEnd = int() # QStyle.StandardPixmap enum
    SP_FileDialogToParent = int() # QStyle.StandardPixmap enum
    SP_FileDialogNewFolder = int() # QStyle.StandardPixmap enum
    SP_FileDialogDetailedView = int() # QStyle.StandardPixmap enum
    SP_FileDialogInfoView = int() # QStyle.StandardPixmap enum
    SP_FileDialogContentsView = int() # QStyle.StandardPixmap enum
    SP_FileDialogListView = int() # QStyle.StandardPixmap enum
    SP_FileDialogBack = int() # QStyle.StandardPixmap enum
    SP_DirIcon = int() # QStyle.StandardPixmap enum
    SP_DialogOkButton = int() # QStyle.StandardPixmap enum
    SP_DialogCancelButton = int() # QStyle.StandardPixmap enum
    SP_DialogHelpButton = int() # QStyle.StandardPixmap enum
    SP_DialogOpenButton = int() # QStyle.StandardPixmap enum
    SP_DialogSaveButton = int() # QStyle.StandardPixmap enum
    SP_DialogCloseButton = int() # QStyle.StandardPixmap enum
    SP_DialogApplyButton = int() # QStyle.StandardPixmap enum
    SP_DialogResetButton = int() # QStyle.StandardPixmap enum
    SP_DialogDiscardButton = int() # QStyle.StandardPixmap enum
    SP_DialogYesButton = int() # QStyle.StandardPixmap enum
    SP_DialogNoButton = int() # QStyle.StandardPixmap enum
    SP_ArrowUp = int() # QStyle.StandardPixmap enum
    SP_ArrowDown = int() # QStyle.StandardPixmap enum
    SP_ArrowLeft = int() # QStyle.StandardPixmap enum
    SP_ArrowRight = int() # QStyle.StandardPixmap enum
    SP_ArrowBack = int() # QStyle.StandardPixmap enum
    SP_ArrowForward = int() # QStyle.StandardPixmap enum
    SP_DirHomeIcon = int() # QStyle.StandardPixmap enum
    SP_CommandLink = int() # QStyle.StandardPixmap enum
    SP_VistaShield = int() # QStyle.StandardPixmap enum
    SP_BrowserReload = int() # QStyle.StandardPixmap enum
    SP_BrowserStop = int() # QStyle.StandardPixmap enum
    SP_MediaPlay = int() # QStyle.StandardPixmap enum
    SP_MediaStop = int() # QStyle.StandardPixmap enum
    SP_MediaPause = int() # QStyle.StandardPixmap enum
    SP_MediaSkipForward = int() # QStyle.StandardPixmap enum
    SP_MediaSkipBackward = int() # QStyle.StandardPixmap enum
    SP_MediaSeekForward = int() # QStyle.StandardPixmap enum
    SP_MediaSeekBackward = int() # QStyle.StandardPixmap enum
    SP_MediaVolume = int() # QStyle.StandardPixmap enum
    SP_MediaVolumeMuted = int() # QStyle.StandardPixmap enum
    SP_CustomBase = int() # QStyle.StandardPixmap enum

    SH_EtchDisabledText = int() # QStyle.StyleHint enum
    SH_DitherDisabledText = int() # QStyle.StyleHint enum
    SH_ScrollBar_MiddleClickAbsolutePosition = int() # QStyle.StyleHint enum
    SH_ScrollBar_ScrollWhenPointerLeavesControl = int() # QStyle.StyleHint enum
    SH_TabBar_SelectMouseType = int() # QStyle.StyleHint enum
    SH_TabBar_Alignment = int() # QStyle.StyleHint enum
    SH_Header_ArrowAlignment = int() # QStyle.StyleHint enum
    SH_Slider_SnapToValue = int() # QStyle.StyleHint enum
    SH_Slider_SloppyKeyEvents = int() # QStyle.StyleHint enum
    SH_ProgressDialog_CenterCancelButton = int() # QStyle.StyleHint enum
    SH_ProgressDialog_TextLabelAlignment = int() # QStyle.StyleHint enum
    SH_PrintDialog_RightAlignButtons = int() # QStyle.StyleHint enum
    SH_MainWindow_SpaceBelowMenuBar = int() # QStyle.StyleHint enum
    SH_FontDialog_SelectAssociatedText = int() # QStyle.StyleHint enum
    SH_Menu_AllowActiveAndDisabled = int() # QStyle.StyleHint enum
    SH_Menu_SpaceActivatesItem = int() # QStyle.StyleHint enum
    SH_Menu_SubMenuPopupDelay = int() # QStyle.StyleHint enum
    SH_ScrollView_FrameOnlyAroundContents = int() # QStyle.StyleHint enum
    SH_MenuBar_AltKeyNavigation = int() # QStyle.StyleHint enum
    SH_ComboBox_ListMouseTracking = int() # QStyle.StyleHint enum
    SH_Menu_MouseTracking = int() # QStyle.StyleHint enum
    SH_MenuBar_MouseTracking = int() # QStyle.StyleHint enum
    SH_ItemView_ChangeHighlightOnFocus = int() # QStyle.StyleHint enum
    SH_Widget_ShareActivation = int() # QStyle.StyleHint enum
    SH_Workspace_FillSpaceOnMaximize = int() # QStyle.StyleHint enum
    SH_ComboBox_Popup = int() # QStyle.StyleHint enum
    SH_TitleBar_NoBorder = int() # QStyle.StyleHint enum
    SH_ScrollBar_StopMouseOverSlider = int() # QStyle.StyleHint enum
    SH_BlinkCursorWhenTextSelected = int() # QStyle.StyleHint enum
    SH_RichText_FullWidthSelection = int() # QStyle.StyleHint enum
    SH_Menu_Scrollable = int() # QStyle.StyleHint enum
    SH_GroupBox_TextLabelVerticalAlignment = int() # QStyle.StyleHint enum
    SH_GroupBox_TextLabelColor = int() # QStyle.StyleHint enum
    SH_Menu_SloppySubMenus = int() # QStyle.StyleHint enum
    SH_Table_GridLineColor = int() # QStyle.StyleHint enum
    SH_LineEdit_PasswordCharacter = int() # QStyle.StyleHint enum
    SH_DialogButtons_DefaultButton = int() # QStyle.StyleHint enum
    SH_ToolBox_SelectedPageTitleBold = int() # QStyle.StyleHint enum
    SH_TabBar_PreferNoArrows = int() # QStyle.StyleHint enum
    SH_ScrollBar_LeftClickAbsolutePosition = int() # QStyle.StyleHint enum
    SH_Q3ListViewExpand_SelectMouseType = int() # QStyle.StyleHint enum
    SH_UnderlineShortcut = int() # QStyle.StyleHint enum
    SH_SpinBox_AnimateButton = int() # QStyle.StyleHint enum
    SH_SpinBox_KeyPressAutoRepeatRate = int() # QStyle.StyleHint enum
    SH_SpinBox_ClickAutoRepeatRate = int() # QStyle.StyleHint enum
    SH_Menu_FillScreenWithScroll = int() # QStyle.StyleHint enum
    SH_ToolTipLabel_Opacity = int() # QStyle.StyleHint enum
    SH_DrawMenuBarSeparator = int() # QStyle.StyleHint enum
    SH_TitleBar_ModifyNotification = int() # QStyle.StyleHint enum
    SH_Button_FocusPolicy = int() # QStyle.StyleHint enum
    SH_MenuBar_DismissOnSecondClick = int() # QStyle.StyleHint enum
    SH_MessageBox_UseBorderForButtonSpacing = int() # QStyle.StyleHint enum
    SH_TitleBar_AutoRaise = int() # QStyle.StyleHint enum
    SH_ToolButton_PopupDelay = int() # QStyle.StyleHint enum
    SH_FocusFrame_Mask = int() # QStyle.StyleHint enum
    SH_RubberBand_Mask = int() # QStyle.StyleHint enum
    SH_WindowFrame_Mask = int() # QStyle.StyleHint enum
    SH_SpinControls_DisableOnBounds = int() # QStyle.StyleHint enum
    SH_Dial_BackgroundRole = int() # QStyle.StyleHint enum
    SH_ComboBox_LayoutDirection = int() # QStyle.StyleHint enum
    SH_ItemView_EllipsisLocation = int() # QStyle.StyleHint enum
    SH_ItemView_ShowDecorationSelected = int() # QStyle.StyleHint enum
    SH_ItemView_ActivateItemOnSingleClick = int() # QStyle.StyleHint enum
    SH_ScrollBar_ContextMenu = int() # QStyle.StyleHint enum
    SH_ScrollBar_RollBetweenButtons = int() # QStyle.StyleHint enum
    SH_Slider_StopMouseOverSlider = int() # QStyle.StyleHint enum
    SH_Slider_AbsoluteSetButtons = int() # QStyle.StyleHint enum
    SH_Slider_PageSetButtons = int() # QStyle.StyleHint enum
    SH_Menu_KeyboardSearch = int() # QStyle.StyleHint enum
    SH_TabBar_ElideMode = int() # QStyle.StyleHint enum
    SH_DialogButtonLayout = int() # QStyle.StyleHint enum
    SH_ComboBox_PopupFrameStyle = int() # QStyle.StyleHint enum
    SH_MessageBox_TextInteractionFlags = int() # QStyle.StyleHint enum
    SH_DialogButtonBox_ButtonsHaveIcons = int() # QStyle.StyleHint enum
    SH_SpellCheckUnderlineStyle = int() # QStyle.StyleHint enum
    SH_MessageBox_CenterButtons = int() # QStyle.StyleHint enum
    SH_Menu_SelectionWrap = int() # QStyle.StyleHint enum
    SH_ItemView_MovementWithoutUpdatingSelection = int() # QStyle.StyleHint enum
    SH_ToolTip_Mask = int() # QStyle.StyleHint enum
    SH_FocusFrame_AboveWidget = int() # QStyle.StyleHint enum
    SH_TextControl_FocusIndicatorTextCharFormat = int() # QStyle.StyleHint enum
    SH_WizardStyle = int() # QStyle.StyleHint enum
    SH_ItemView_ArrowKeysNavigateIntoChildren = int() # QStyle.StyleHint enum
    SH_Menu_Mask = int() # QStyle.StyleHint enum
    SH_Menu_FlashTriggeredItem = int() # QStyle.StyleHint enum
    SH_Menu_FadeOutOnHide = int() # QStyle.StyleHint enum
    SH_SpinBox_ClickAutoRepeatThreshold = int() # QStyle.StyleHint enum
    SH_ItemView_PaintAlternatingRowColorsForEmptyArea = int() # QStyle.StyleHint enum
    SH_FormLayoutWrapPolicy = int() # QStyle.StyleHint enum
    SH_TabWidget_DefaultTabPosition = int() # QStyle.StyleHint enum
    SH_ToolBar_Movable = int() # QStyle.StyleHint enum
    SH_FormLayoutFieldGrowthPolicy = int() # QStyle.StyleHint enum
    SH_FormLayoutFormAlignment = int() # QStyle.StyleHint enum
    SH_FormLayoutLabelAlignment = int() # QStyle.StyleHint enum
    SH_ItemView_DrawDelegateFrame = int() # QStyle.StyleHint enum
    SH_TabBar_CloseButtonPosition = int() # QStyle.StyleHint enum
    SH_DockWidget_ButtonsHaveFrame = int() # QStyle.StyleHint enum
    SH_ToolButtonStyle = int() # QStyle.StyleHint enum
    SH_RequestSoftwareInputPanel = int() # QStyle.StyleHint enum
    SH_CustomBase = int() # QStyle.StyleHint enum

    CT_PushButton = int() # QStyle.ContentsType enum
    CT_CheckBox = int() # QStyle.ContentsType enum
    CT_RadioButton = int() # QStyle.ContentsType enum
    CT_ToolButton = int() # QStyle.ContentsType enum
    CT_ComboBox = int() # QStyle.ContentsType enum
    CT_Splitter = int() # QStyle.ContentsType enum
    CT_Q3DockWindow = int() # QStyle.ContentsType enum
    CT_ProgressBar = int() # QStyle.ContentsType enum
    CT_MenuItem = int() # QStyle.ContentsType enum
    CT_MenuBarItem = int() # QStyle.ContentsType enum
    CT_MenuBar = int() # QStyle.ContentsType enum
    CT_Menu = int() # QStyle.ContentsType enum
    CT_TabBarTab = int() # QStyle.ContentsType enum
    CT_Slider = int() # QStyle.ContentsType enum
    CT_ScrollBar = int() # QStyle.ContentsType enum
    CT_Q3Header = int() # QStyle.ContentsType enum
    CT_LineEdit = int() # QStyle.ContentsType enum
    CT_SpinBox = int() # QStyle.ContentsType enum
    CT_SizeGrip = int() # QStyle.ContentsType enum
    CT_TabWidget = int() # QStyle.ContentsType enum
    CT_DialogButtons = int() # QStyle.ContentsType enum
    CT_HeaderSection = int() # QStyle.ContentsType enum
    CT_GroupBox = int() # QStyle.ContentsType enum
    CT_MdiControls = int() # QStyle.ContentsType enum
    CT_ItemViewItem = int() # QStyle.ContentsType enum
    CT_CustomBase = int() # QStyle.ContentsType enum

    PM_ButtonMargin = int() # QStyle.PixelMetric enum
    PM_ButtonDefaultIndicator = int() # QStyle.PixelMetric enum
    PM_MenuButtonIndicator = int() # QStyle.PixelMetric enum
    PM_ButtonShiftHorizontal = int() # QStyle.PixelMetric enum
    PM_ButtonShiftVertical = int() # QStyle.PixelMetric enum
    PM_DefaultFrameWidth = int() # QStyle.PixelMetric enum
    PM_SpinBoxFrameWidth = int() # QStyle.PixelMetric enum
    PM_ComboBoxFrameWidth = int() # QStyle.PixelMetric enum
    PM_MaximumDragDistance = int() # QStyle.PixelMetric enum
    PM_ScrollBarExtent = int() # QStyle.PixelMetric enum
    PM_ScrollBarSliderMin = int() # QStyle.PixelMetric enum
    PM_SliderThickness = int() # QStyle.PixelMetric enum
    PM_SliderControlThickness = int() # QStyle.PixelMetric enum
    PM_SliderLength = int() # QStyle.PixelMetric enum
    PM_SliderTickmarkOffset = int() # QStyle.PixelMetric enum
    PM_SliderSpaceAvailable = int() # QStyle.PixelMetric enum
    PM_DockWidgetSeparatorExtent = int() # QStyle.PixelMetric enum
    PM_DockWidgetHandleExtent = int() # QStyle.PixelMetric enum
    PM_DockWidgetFrameWidth = int() # QStyle.PixelMetric enum
    PM_TabBarTabOverlap = int() # QStyle.PixelMetric enum
    PM_TabBarTabHSpace = int() # QStyle.PixelMetric enum
    PM_TabBarTabVSpace = int() # QStyle.PixelMetric enum
    PM_TabBarBaseHeight = int() # QStyle.PixelMetric enum
    PM_TabBarBaseOverlap = int() # QStyle.PixelMetric enum
    PM_ProgressBarChunkWidth = int() # QStyle.PixelMetric enum
    PM_SplitterWidth = int() # QStyle.PixelMetric enum
    PM_TitleBarHeight = int() # QStyle.PixelMetric enum
    PM_MenuScrollerHeight = int() # QStyle.PixelMetric enum
    PM_MenuHMargin = int() # QStyle.PixelMetric enum
    PM_MenuVMargin = int() # QStyle.PixelMetric enum
    PM_MenuPanelWidth = int() # QStyle.PixelMetric enum
    PM_MenuTearoffHeight = int() # QStyle.PixelMetric enum
    PM_MenuDesktopFrameWidth = int() # QStyle.PixelMetric enum
    PM_MenuBarPanelWidth = int() # QStyle.PixelMetric enum
    PM_MenuBarItemSpacing = int() # QStyle.PixelMetric enum
    PM_MenuBarVMargin = int() # QStyle.PixelMetric enum
    PM_MenuBarHMargin = int() # QStyle.PixelMetric enum
    PM_IndicatorWidth = int() # QStyle.PixelMetric enum
    PM_IndicatorHeight = int() # QStyle.PixelMetric enum
    PM_ExclusiveIndicatorWidth = int() # QStyle.PixelMetric enum
    PM_ExclusiveIndicatorHeight = int() # QStyle.PixelMetric enum
    PM_CheckListButtonSize = int() # QStyle.PixelMetric enum
    PM_CheckListControllerSize = int() # QStyle.PixelMetric enum
    PM_DialogButtonsSeparator = int() # QStyle.PixelMetric enum
    PM_DialogButtonsButtonWidth = int() # QStyle.PixelMetric enum
    PM_DialogButtonsButtonHeight = int() # QStyle.PixelMetric enum
    PM_MdiSubWindowFrameWidth = int() # QStyle.PixelMetric enum
    PM_MDIFrameWidth = int() # QStyle.PixelMetric enum
    PM_MdiSubWindowMinimizedWidth = int() # QStyle.PixelMetric enum
    PM_MDIMinimizedWidth = int() # QStyle.PixelMetric enum
    PM_HeaderMargin = int() # QStyle.PixelMetric enum
    PM_HeaderMarkSize = int() # QStyle.PixelMetric enum
    PM_HeaderGripMargin = int() # QStyle.PixelMetric enum
    PM_TabBarTabShiftHorizontal = int() # QStyle.PixelMetric enum
    PM_TabBarTabShiftVertical = int() # QStyle.PixelMetric enum
    PM_TabBarScrollButtonWidth = int() # QStyle.PixelMetric enum
    PM_ToolBarFrameWidth = int() # QStyle.PixelMetric enum
    PM_ToolBarHandleExtent = int() # QStyle.PixelMetric enum
    PM_ToolBarItemSpacing = int() # QStyle.PixelMetric enum
    PM_ToolBarItemMargin = int() # QStyle.PixelMetric enum
    PM_ToolBarSeparatorExtent = int() # QStyle.PixelMetric enum
    PM_ToolBarExtensionExtent = int() # QStyle.PixelMetric enum
    PM_SpinBoxSliderHeight = int() # QStyle.PixelMetric enum
    PM_DefaultTopLevelMargin = int() # QStyle.PixelMetric enum
    PM_DefaultChildMargin = int() # QStyle.PixelMetric enum
    PM_DefaultLayoutSpacing = int() # QStyle.PixelMetric enum
    PM_ToolBarIconSize = int() # QStyle.PixelMetric enum
    PM_ListViewIconSize = int() # QStyle.PixelMetric enum
    PM_IconViewIconSize = int() # QStyle.PixelMetric enum
    PM_SmallIconSize = int() # QStyle.PixelMetric enum
    PM_LargeIconSize = int() # QStyle.PixelMetric enum
    PM_FocusFrameVMargin = int() # QStyle.PixelMetric enum
    PM_FocusFrameHMargin = int() # QStyle.PixelMetric enum
    PM_ToolTipLabelFrameWidth = int() # QStyle.PixelMetric enum
    PM_CheckBoxLabelSpacing = int() # QStyle.PixelMetric enum
    PM_TabBarIconSize = int() # QStyle.PixelMetric enum
    PM_SizeGripSize = int() # QStyle.PixelMetric enum
    PM_DockWidgetTitleMargin = int() # QStyle.PixelMetric enum
    PM_MessageBoxIconSize = int() # QStyle.PixelMetric enum
    PM_ButtonIconSize = int() # QStyle.PixelMetric enum
    PM_DockWidgetTitleBarButtonMargin = int() # QStyle.PixelMetric enum
    PM_RadioButtonLabelSpacing = int() # QStyle.PixelMetric enum
    PM_LayoutLeftMargin = int() # QStyle.PixelMetric enum
    PM_LayoutTopMargin = int() # QStyle.PixelMetric enum
    PM_LayoutRightMargin = int() # QStyle.PixelMetric enum
    PM_LayoutBottomMargin = int() # QStyle.PixelMetric enum
    PM_LayoutHorizontalSpacing = int() # QStyle.PixelMetric enum
    PM_LayoutVerticalSpacing = int() # QStyle.PixelMetric enum
    PM_TabBar_ScrollButtonOverlap = int() # QStyle.PixelMetric enum
    PM_TextCursorWidth = int() # QStyle.PixelMetric enum
    PM_TabCloseIndicatorWidth = int() # QStyle.PixelMetric enum
    PM_TabCloseIndicatorHeight = int() # QStyle.PixelMetric enum
    PM_ScrollView_ScrollBarSpacing = int() # QStyle.PixelMetric enum
    PM_SubMenuOverlap = int() # QStyle.PixelMetric enum
    PM_CustomBase = int() # QStyle.PixelMetric enum

    SC_None = int() # QStyle.SubControl enum
    SC_ScrollBarAddLine = int() # QStyle.SubControl enum
    SC_ScrollBarSubLine = int() # QStyle.SubControl enum
    SC_ScrollBarAddPage = int() # QStyle.SubControl enum
    SC_ScrollBarSubPage = int() # QStyle.SubControl enum
    SC_ScrollBarFirst = int() # QStyle.SubControl enum
    SC_ScrollBarLast = int() # QStyle.SubControl enum
    SC_ScrollBarSlider = int() # QStyle.SubControl enum
    SC_ScrollBarGroove = int() # QStyle.SubControl enum
    SC_SpinBoxUp = int() # QStyle.SubControl enum
    SC_SpinBoxDown = int() # QStyle.SubControl enum
    SC_SpinBoxFrame = int() # QStyle.SubControl enum
    SC_SpinBoxEditField = int() # QStyle.SubControl enum
    SC_ComboBoxFrame = int() # QStyle.SubControl enum
    SC_ComboBoxEditField = int() # QStyle.SubControl enum
    SC_ComboBoxArrow = int() # QStyle.SubControl enum
    SC_ComboBoxListBoxPopup = int() # QStyle.SubControl enum
    SC_SliderGroove = int() # QStyle.SubControl enum
    SC_SliderHandle = int() # QStyle.SubControl enum
    SC_SliderTickmarks = int() # QStyle.SubControl enum
    SC_ToolButton = int() # QStyle.SubControl enum
    SC_ToolButtonMenu = int() # QStyle.SubControl enum
    SC_TitleBarSysMenu = int() # QStyle.SubControl enum
    SC_TitleBarMinButton = int() # QStyle.SubControl enum
    SC_TitleBarMaxButton = int() # QStyle.SubControl enum
    SC_TitleBarCloseButton = int() # QStyle.SubControl enum
    SC_TitleBarNormalButton = int() # QStyle.SubControl enum
    SC_TitleBarShadeButton = int() # QStyle.SubControl enum
    SC_TitleBarUnshadeButton = int() # QStyle.SubControl enum
    SC_TitleBarContextHelpButton = int() # QStyle.SubControl enum
    SC_TitleBarLabel = int() # QStyle.SubControl enum
    SC_Q3ListView = int() # QStyle.SubControl enum
    SC_Q3ListViewBranch = int() # QStyle.SubControl enum
    SC_Q3ListViewExpand = int() # QStyle.SubControl enum
    SC_DialGroove = int() # QStyle.SubControl enum
    SC_DialHandle = int() # QStyle.SubControl enum
    SC_DialTickmarks = int() # QStyle.SubControl enum
    SC_GroupBoxCheckBox = int() # QStyle.SubControl enum
    SC_GroupBoxLabel = int() # QStyle.SubControl enum
    SC_GroupBoxContents = int() # QStyle.SubControl enum
    SC_GroupBoxFrame = int() # QStyle.SubControl enum
    SC_MdiMinButton = int() # QStyle.SubControl enum
    SC_MdiNormalButton = int() # QStyle.SubControl enum
    SC_MdiCloseButton = int() # QStyle.SubControl enum
    SC_CustomBase = int() # QStyle.SubControl enum
    SC_All = int() # QStyle.SubControl enum

    CC_SpinBox = int() # QStyle.ComplexControl enum
    CC_ComboBox = int() # QStyle.ComplexControl enum
    CC_ScrollBar = int() # QStyle.ComplexControl enum
    CC_Slider = int() # QStyle.ComplexControl enum
    CC_ToolButton = int() # QStyle.ComplexControl enum
    CC_TitleBar = int() # QStyle.ComplexControl enum
    CC_Q3ListView = int() # QStyle.ComplexControl enum
    CC_Dial = int() # QStyle.ComplexControl enum
    CC_GroupBox = int() # QStyle.ComplexControl enum
    CC_MdiControls = int() # QStyle.ComplexControl enum
    CC_CustomBase = int() # QStyle.ComplexControl enum

    SE_PushButtonContents = int() # QStyle.SubElement enum
    SE_PushButtonFocusRect = int() # QStyle.SubElement enum
    SE_CheckBoxIndicator = int() # QStyle.SubElement enum
    SE_CheckBoxContents = int() # QStyle.SubElement enum
    SE_CheckBoxFocusRect = int() # QStyle.SubElement enum
    SE_CheckBoxClickRect = int() # QStyle.SubElement enum
    SE_RadioButtonIndicator = int() # QStyle.SubElement enum
    SE_RadioButtonContents = int() # QStyle.SubElement enum
    SE_RadioButtonFocusRect = int() # QStyle.SubElement enum
    SE_RadioButtonClickRect = int() # QStyle.SubElement enum
    SE_ComboBoxFocusRect = int() # QStyle.SubElement enum
    SE_SliderFocusRect = int() # QStyle.SubElement enum
    SE_Q3DockWindowHandleRect = int() # QStyle.SubElement enum
    SE_ProgressBarGroove = int() # QStyle.SubElement enum
    SE_ProgressBarContents = int() # QStyle.SubElement enum
    SE_ProgressBarLabel = int() # QStyle.SubElement enum
    SE_DialogButtonAccept = int() # QStyle.SubElement enum
    SE_DialogButtonReject = int() # QStyle.SubElement enum
    SE_DialogButtonApply = int() # QStyle.SubElement enum
    SE_DialogButtonHelp = int() # QStyle.SubElement enum
    SE_DialogButtonAll = int() # QStyle.SubElement enum
    SE_DialogButtonAbort = int() # QStyle.SubElement enum
    SE_DialogButtonIgnore = int() # QStyle.SubElement enum
    SE_DialogButtonRetry = int() # QStyle.SubElement enum
    SE_DialogButtonCustom = int() # QStyle.SubElement enum
    SE_ToolBoxTabContents = int() # QStyle.SubElement enum
    SE_HeaderLabel = int() # QStyle.SubElement enum
    SE_HeaderArrow = int() # QStyle.SubElement enum
    SE_TabWidgetTabBar = int() # QStyle.SubElement enum
    SE_TabWidgetTabPane = int() # QStyle.SubElement enum
    SE_TabWidgetTabContents = int() # QStyle.SubElement enum
    SE_TabWidgetLeftCorner = int() # QStyle.SubElement enum
    SE_TabWidgetRightCorner = int() # QStyle.SubElement enum
    SE_ViewItemCheckIndicator = int() # QStyle.SubElement enum
    SE_TabBarTearIndicator = int() # QStyle.SubElement enum
    SE_TreeViewDisclosureItem = int() # QStyle.SubElement enum
    SE_LineEditContents = int() # QStyle.SubElement enum
    SE_FrameContents = int() # QStyle.SubElement enum
    SE_DockWidgetCloseButton = int() # QStyle.SubElement enum
    SE_DockWidgetFloatButton = int() # QStyle.SubElement enum
    SE_DockWidgetTitleBarText = int() # QStyle.SubElement enum
    SE_DockWidgetIcon = int() # QStyle.SubElement enum
    SE_CheckBoxLayoutItem = int() # QStyle.SubElement enum
    SE_ComboBoxLayoutItem = int() # QStyle.SubElement enum
    SE_DateTimeEditLayoutItem = int() # QStyle.SubElement enum
    SE_DialogButtonBoxLayoutItem = int() # QStyle.SubElement enum
    SE_LabelLayoutItem = int() # QStyle.SubElement enum
    SE_ProgressBarLayoutItem = int() # QStyle.SubElement enum
    SE_PushButtonLayoutItem = int() # QStyle.SubElement enum
    SE_RadioButtonLayoutItem = int() # QStyle.SubElement enum
    SE_SliderLayoutItem = int() # QStyle.SubElement enum
    SE_SpinBoxLayoutItem = int() # QStyle.SubElement enum
    SE_ToolButtonLayoutItem = int() # QStyle.SubElement enum
    SE_FrameLayoutItem = int() # QStyle.SubElement enum
    SE_GroupBoxLayoutItem = int() # QStyle.SubElement enum
    SE_TabWidgetLayoutItem = int() # QStyle.SubElement enum
    SE_ItemViewItemCheckIndicator = int() # QStyle.SubElement enum
    SE_ItemViewItemDecoration = int() # QStyle.SubElement enum
    SE_ItemViewItemText = int() # QStyle.SubElement enum
    SE_ItemViewItemFocusRect = int() # QStyle.SubElement enum
    SE_TabBarTabLeftButton = int() # QStyle.SubElement enum
    SE_TabBarTabRightButton = int() # QStyle.SubElement enum
    SE_TabBarTabText = int() # QStyle.SubElement enum
    SE_ShapedFrameContents = int() # QStyle.SubElement enum
    SE_ToolBarHandle = int() # QStyle.SubElement enum
    SE_CustomBase = int() # QStyle.SubElement enum

    CE_PushButton = int() # QStyle.ControlElement enum
    CE_PushButtonBevel = int() # QStyle.ControlElement enum
    CE_PushButtonLabel = int() # QStyle.ControlElement enum
    CE_CheckBox = int() # QStyle.ControlElement enum
    CE_CheckBoxLabel = int() # QStyle.ControlElement enum
    CE_RadioButton = int() # QStyle.ControlElement enum
    CE_RadioButtonLabel = int() # QStyle.ControlElement enum
    CE_TabBarTab = int() # QStyle.ControlElement enum
    CE_TabBarTabShape = int() # QStyle.ControlElement enum
    CE_TabBarTabLabel = int() # QStyle.ControlElement enum
    CE_ProgressBar = int() # QStyle.ControlElement enum
    CE_ProgressBarGroove = int() # QStyle.ControlElement enum
    CE_ProgressBarContents = int() # QStyle.ControlElement enum
    CE_ProgressBarLabel = int() # QStyle.ControlElement enum
    CE_MenuItem = int() # QStyle.ControlElement enum
    CE_MenuScroller = int() # QStyle.ControlElement enum
    CE_MenuVMargin = int() # QStyle.ControlElement enum
    CE_MenuHMargin = int() # QStyle.ControlElement enum
    CE_MenuTearoff = int() # QStyle.ControlElement enum
    CE_MenuEmptyArea = int() # QStyle.ControlElement enum
    CE_MenuBarItem = int() # QStyle.ControlElement enum
    CE_MenuBarEmptyArea = int() # QStyle.ControlElement enum
    CE_ToolButtonLabel = int() # QStyle.ControlElement enum
    CE_Header = int() # QStyle.ControlElement enum
    CE_HeaderSection = int() # QStyle.ControlElement enum
    CE_HeaderLabel = int() # QStyle.ControlElement enum
    CE_Q3DockWindowEmptyArea = int() # QStyle.ControlElement enum
    CE_ToolBoxTab = int() # QStyle.ControlElement enum
    CE_SizeGrip = int() # QStyle.ControlElement enum
    CE_Splitter = int() # QStyle.ControlElement enum
    CE_RubberBand = int() # QStyle.ControlElement enum
    CE_DockWidgetTitle = int() # QStyle.ControlElement enum
    CE_ScrollBarAddLine = int() # QStyle.ControlElement enum
    CE_ScrollBarSubLine = int() # QStyle.ControlElement enum
    CE_ScrollBarAddPage = int() # QStyle.ControlElement enum
    CE_ScrollBarSubPage = int() # QStyle.ControlElement enum
    CE_ScrollBarSlider = int() # QStyle.ControlElement enum
    CE_ScrollBarFirst = int() # QStyle.ControlElement enum
    CE_ScrollBarLast = int() # QStyle.ControlElement enum
    CE_FocusFrame = int() # QStyle.ControlElement enum
    CE_ComboBoxLabel = int() # QStyle.ControlElement enum
    CE_ToolBar = int() # QStyle.ControlElement enum
    CE_ToolBoxTabShape = int() # QStyle.ControlElement enum
    CE_ToolBoxTabLabel = int() # QStyle.ControlElement enum
    CE_HeaderEmptyArea = int() # QStyle.ControlElement enum
    CE_ColumnViewGrip = int() # QStyle.ControlElement enum
    CE_ItemViewItem = int() # QStyle.ControlElement enum
    CE_ShapedFrame = int() # QStyle.ControlElement enum
    CE_CustomBase = int() # QStyle.ControlElement enum

    PE_Q3CheckListController = int() # QStyle.PrimitiveElement enum
    PE_Q3CheckListExclusiveIndicator = int() # QStyle.PrimitiveElement enum
    PE_Q3CheckListIndicator = int() # QStyle.PrimitiveElement enum
    PE_Q3DockWindowSeparator = int() # QStyle.PrimitiveElement enum
    PE_Q3Separator = int() # QStyle.PrimitiveElement enum
    PE_Frame = int() # QStyle.PrimitiveElement enum
    PE_FrameDefaultButton = int() # QStyle.PrimitiveElement enum
    PE_FrameDockWidget = int() # QStyle.PrimitiveElement enum
    PE_FrameFocusRect = int() # QStyle.PrimitiveElement enum
    PE_FrameGroupBox = int() # QStyle.PrimitiveElement enum
    PE_FrameLineEdit = int() # QStyle.PrimitiveElement enum
    PE_FrameMenu = int() # QStyle.PrimitiveElement enum
    PE_FrameStatusBar = int() # QStyle.PrimitiveElement enum
    PE_FrameTabWidget = int() # QStyle.PrimitiveElement enum
    PE_FrameWindow = int() # QStyle.PrimitiveElement enum
    PE_FrameButtonBevel = int() # QStyle.PrimitiveElement enum
    PE_FrameButtonTool = int() # QStyle.PrimitiveElement enum
    PE_FrameTabBarBase = int() # QStyle.PrimitiveElement enum
    PE_PanelButtonCommand = int() # QStyle.PrimitiveElement enum
    PE_PanelButtonBevel = int() # QStyle.PrimitiveElement enum
    PE_PanelButtonTool = int() # QStyle.PrimitiveElement enum
    PE_PanelMenuBar = int() # QStyle.PrimitiveElement enum
    PE_PanelToolBar = int() # QStyle.PrimitiveElement enum
    PE_PanelLineEdit = int() # QStyle.PrimitiveElement enum
    PE_IndicatorArrowDown = int() # QStyle.PrimitiveElement enum
    PE_IndicatorArrowLeft = int() # QStyle.PrimitiveElement enum
    PE_IndicatorArrowRight = int() # QStyle.PrimitiveElement enum
    PE_IndicatorArrowUp = int() # QStyle.PrimitiveElement enum
    PE_IndicatorBranch = int() # QStyle.PrimitiveElement enum
    PE_IndicatorButtonDropDown = int() # QStyle.PrimitiveElement enum
    PE_IndicatorViewItemCheck = int() # QStyle.PrimitiveElement enum
    PE_IndicatorCheckBox = int() # QStyle.PrimitiveElement enum
    PE_IndicatorDockWidgetResizeHandle = int() # QStyle.PrimitiveElement enum
    PE_IndicatorHeaderArrow = int() # QStyle.PrimitiveElement enum
    PE_IndicatorMenuCheckMark = int() # QStyle.PrimitiveElement enum
    PE_IndicatorProgressChunk = int() # QStyle.PrimitiveElement enum
    PE_IndicatorRadioButton = int() # QStyle.PrimitiveElement enum
    PE_IndicatorSpinDown = int() # QStyle.PrimitiveElement enum
    PE_IndicatorSpinMinus = int() # QStyle.PrimitiveElement enum
    PE_IndicatorSpinPlus = int() # QStyle.PrimitiveElement enum
    PE_IndicatorSpinUp = int() # QStyle.PrimitiveElement enum
    PE_IndicatorToolBarHandle = int() # QStyle.PrimitiveElement enum
    PE_IndicatorToolBarSeparator = int() # QStyle.PrimitiveElement enum
    PE_PanelTipLabel = int() # QStyle.PrimitiveElement enum
    PE_IndicatorTabTear = int() # QStyle.PrimitiveElement enum
    PE_PanelScrollAreaCorner = int() # QStyle.PrimitiveElement enum
    PE_Widget = int() # QStyle.PrimitiveElement enum
    PE_IndicatorColumnViewArrow = int() # QStyle.PrimitiveElement enum
    PE_FrameStatusBarItem = int() # QStyle.PrimitiveElement enum
    PE_IndicatorItemViewItemCheck = int() # QStyle.PrimitiveElement enum
    PE_IndicatorItemViewItemDrop = int() # QStyle.PrimitiveElement enum
    PE_PanelItemViewItem = int() # QStyle.PrimitiveElement enum
    PE_PanelItemViewRow = int() # QStyle.PrimitiveElement enum
    PE_PanelStatusBar = int() # QStyle.PrimitiveElement enum
    PE_IndicatorTabClose = int() # QStyle.PrimitiveElement enum
    PE_PanelMenu = int() # QStyle.PrimitiveElement enum
    PE_CustomBase = int() # QStyle.PrimitiveElement enum

    State_None = int() # QStyle.StateFlag enum
    State_Enabled = int() # QStyle.StateFlag enum
    State_Raised = int() # QStyle.StateFlag enum
    State_Sunken = int() # QStyle.StateFlag enum
    State_Off = int() # QStyle.StateFlag enum
    State_NoChange = int() # QStyle.StateFlag enum
    State_On = int() # QStyle.StateFlag enum
    State_DownArrow = int() # QStyle.StateFlag enum
    State_Horizontal = int() # QStyle.StateFlag enum
    State_HasFocus = int() # QStyle.StateFlag enum
    State_Top = int() # QStyle.StateFlag enum
    State_Bottom = int() # QStyle.StateFlag enum
    State_FocusAtBorder = int() # QStyle.StateFlag enum
    State_AutoRaise = int() # QStyle.StateFlag enum
    State_MouseOver = int() # QStyle.StateFlag enum
    State_UpArrow = int() # QStyle.StateFlag enum
    State_Selected = int() # QStyle.StateFlag enum
    State_Active = int() # QStyle.StateFlag enum
    State_Open = int() # QStyle.StateFlag enum
    State_Children = int() # QStyle.StateFlag enum
    State_Item = int() # QStyle.StateFlag enum
    State_Sibling = int() # QStyle.StateFlag enum
    State_Editing = int() # QStyle.StateFlag enum
    State_KeyboardFocusChange = int() # QStyle.StateFlag enum
    State_ReadOnly = int() # QStyle.StateFlag enum
    State_Window = int() # QStyle.StateFlag enum
    State_Small = int() # QStyle.StateFlag enum
    State_Mini = int() # QStyle.StateFlag enum

    def __init__(self):
        """None QStyle.__init__(None self)"""
        return None
    def proxy(self):
        """QStyle QStyle.proxy(None self)"""
        return QStyle()
    def layoutSpacingImplementation(self, _control1, _control2, _orientation, _option, _widget):
        """int QStyle.layoutSpacingImplementation(None self, QSizePolicy.ControlType _control1, QSizePolicy.ControlType _control2, Qt.Orientation _orientation, QStyleOption _option, QWidget _widget)"""
        return int()
    def standardIconImplementation(self, _standardIcon, _option, _widget):
        """QIcon QStyle.standardIconImplementation(None self, QStyle.StandardPixmap _standardIcon, QStyleOption _option, QWidget _widget)"""
        return QIcon()
    def combinedLayoutSpacing(self, _controls1, _controls2, _orientation, _option, _widget):
        """int QStyle.combinedLayoutSpacing(None self, QSizePolicy.ControlTypes _controls1, QSizePolicy.ControlTypes _controls2, Qt.Orientation _orientation, QStyleOption _option, QWidget _widget)"""
        return int()
    def layoutSpacing(self, _control1, _control2, _orientation, _option, _widget):
        """int QStyle.layoutSpacing(None self, QSizePolicy.ControlType _control1, QSizePolicy.ControlType _control2, Qt.Orientation _orientation, QStyleOption _option, QWidget _widget)"""
        return int()
    def alignedRect(self, _direction, _alignment, _size, _rectangle):
        """QRect QStyle.alignedRect(None self, Qt.LayoutDirection _direction, Qt.Alignment _alignment, QSize _size, QRect _rectangle)"""
        return QRect()
    def visualAlignment(self, _direction, _alignment):
        """Qt.Alignment QStyle.visualAlignment(None self, Qt.LayoutDirection _direction, Qt.Alignment _alignment)"""
        return Qt.Alignment()
    def sliderValueFromPosition(self, _min, _max, _position, _span, _upsideDown):
        """int QStyle.sliderValueFromPosition(None self, int _min, int _max, int _position, int _span, bool _upsideDown)"""
        return int()
    def sliderPositionFromValue(self, _min, _max, _logicalValue, _span, _upsideDown):
        """int QStyle.sliderPositionFromValue(None self, int _min, int _max, int _logicalValue, int _span, bool _upsideDown)"""
        return int()
    def visualPos(self, _direction, _boundingRect, _logicalPos):
        """QPoint QStyle.visualPos(None self, Qt.LayoutDirection _direction, QRect _boundingRect, QPoint _logicalPos)"""
        return QPoint()
    def visualRect(self, _direction, _boundingRect, _logicalRect):
        """QRect QStyle.visualRect(None self, Qt.LayoutDirection _direction, QRect _boundingRect, QRect _logicalRect)"""
        return QRect()
    def generatedIconPixmap(self, _iconMode, _pixmap, _opt):
        """abstract QPixmap QStyle.generatedIconPixmap(None self, QIcon.Mode _iconMode, QPixmap _pixmap, QStyleOption _opt)"""
        return QPixmap()
    def standardIcon(self, _standardIcon, _option, _widget):
        """QIcon QStyle.standardIcon(None self, QStyle.StandardPixmap _standardIcon, QStyleOption _option, QWidget _widget)"""
        return QIcon()
    def standardPixmap(self, _standardPixmap, _option, _widget):
        """abstract QPixmap QStyle.standardPixmap(None self, QStyle.StandardPixmap _standardPixmap, QStyleOption _option, QWidget _widget)"""
        return QPixmap()
    def styleHint(self, _stylehint, _option, _widget, _returnData):
        """abstract int QStyle.styleHint(None self, QStyle.StyleHint _stylehint, QStyleOption _option, QWidget _widget, QStyleHintReturn _returnData)"""
        return int()
    def sizeFromContents(self, _ct, _opt, _contentsSize, _widget):
        """abstract QSize QStyle.sizeFromContents(None self, QStyle.ContentsType _ct, QStyleOption _opt, QSize _contentsSize, QWidget _widget)"""
        return QSize()
    def pixelMetric(self, _metric, _option, _widget):
        """abstract int QStyle.pixelMetric(None self, QStyle.PixelMetric _metric, QStyleOption _option, QWidget _widget)"""
        return int()
    def subControlRect(self, _cc, _opt, _sc, _widget):
        """abstract QRect QStyle.subControlRect(None self, QStyle.ComplexControl _cc, QStyleOptionComplex _opt, QStyle.SubControl _sc, QWidget _widget)"""
        return QRect()
    def hitTestComplexControl(self, _cc, _opt, _pt, _widget):
        """abstract QStyle.SubControl QStyle.hitTestComplexControl(None self, QStyle.ComplexControl _cc, QStyleOptionComplex _opt, QPoint _pt, QWidget _widget)"""
        return QStyle.SubControl()
    def drawComplexControl(self, _cc, _opt, _p, _widget):
        """abstract None QStyle.drawComplexControl(None self, QStyle.ComplexControl _cc, QStyleOptionComplex _opt, QPainter _p, QWidget _widget)"""
        return None
    def subElementRect(self, _subElement, _option, _widget):
        """abstract QRect QStyle.subElementRect(None self, QStyle.SubElement _subElement, QStyleOption _option, QWidget _widget)"""
        return QRect()
    def drawControl(self, _element, _opt, _p, _widget):
        """abstract None QStyle.drawControl(None self, QStyle.ControlElement _element, QStyleOption _opt, QPainter _p, QWidget _widget)"""
        return None
    def drawPrimitive(self, _pe, _opt, _p, _widget):
        """abstract None QStyle.drawPrimitive(None self, QStyle.PrimitiveElement _pe, QStyleOption _opt, QPainter _p, QWidget _widget)"""
        return None
    def standardPalette(self):
        """QPalette QStyle.standardPalette(None self)"""
        return QPalette()
    def drawItemPixmap(self, _painter, _rect, _alignment, _pixmap):
        """None QStyle.drawItemPixmap(None self, QPainter _painter, QRect _rect, int _alignment, QPixmap _pixmap)"""
        return None
    def drawItemText(self, _painter, _rectangle, _alignment, _palette, _enabled, _text, _textRole):
        """None QStyle.drawItemText(None self, QPainter _painter, QRect _rectangle, int _alignment, QPalette _palette, bool _enabled, QString _text, QPalette.ColorRole _textRole)"""
        return None
    def itemPixmapRect(self, _r, _flags, _pixmap):
        """QRect QStyle.itemPixmapRect(None self, QRect _r, int _flags, QPixmap _pixmap)"""
        return QRect()
    def itemTextRect(self, _fm, _r, _flags, _enabled, _text):
        """QRect QStyle.itemTextRect(None self, QFontMetrics _fm, QRect _r, int _flags, bool _enabled, QString _text)"""
        return QRect()
    def unpolish(self):
        """QWidget QStyle.unpolish(None self)"""
        return QWidget()
    def unpolish(self):
        """QApplication QStyle.unpolish(None self)"""
        return QApplication()
    def polish(self):
        """QWidget QStyle.polish(None self)"""
        return QWidget()
    def polish(self):
        """QApplication QStyle.polish(None self)"""
        return QApplication()
    def polish(self):
        """QPalette QStyle.polish(None self)"""
        return QPalette()


class QStyledItemDelegate(QAbstractItemDelegate):
    """"""
    def __init__(self, _parent):
        """None QStyledItemDelegate.__init__(None self, QObject _parent)"""
        return None
    def editorEvent(self, _event, _model, _option, _index):
        """bool QStyledItemDelegate.editorEvent(None self, QEvent _event, QAbstractItemModel _model, QStyleOptionViewItem _option, QModelIndex _index)"""
        return bool()
    def eventFilter(self, _object, _event):
        """bool QStyledItemDelegate.eventFilter(None self, QObject _object, QEvent _event)"""
        return bool()
    def initStyleOption(self, _option, _index):
        """None QStyledItemDelegate.initStyleOption(None self, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None
    def displayText(self, _value, _locale):
        """QString QStyledItemDelegate.displayText(None self, QVariant _value, QLocale _locale)"""
        return QString()
    def setItemEditorFactory(self, _factory):
        """None QStyledItemDelegate.setItemEditorFactory(None self, QItemEditorFactory _factory)"""
        return None
    def itemEditorFactory(self):
        """QItemEditorFactory QStyledItemDelegate.itemEditorFactory(None self)"""
        return QItemEditorFactory()
    def updateEditorGeometry(self, _editor, _option, _index):
        """None QStyledItemDelegate.updateEditorGeometry(None self, QWidget _editor, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None
    def setModelData(self, _editor, _model, _index):
        """None QStyledItemDelegate.setModelData(None self, QWidget _editor, QAbstractItemModel _model, QModelIndex _index)"""
        return None
    def setEditorData(self, _editor, _index):
        """None QStyledItemDelegate.setEditorData(None self, QWidget _editor, QModelIndex _index)"""
        return None
    def createEditor(self, _parent, _option, _index):
        """QWidget QStyledItemDelegate.createEditor(None self, QWidget _parent, QStyleOptionViewItem _option, QModelIndex _index)"""
        return QWidget()
    def sizeHint(self, _option, _index):
        """QSize QStyledItemDelegate.sizeHint(None self, QStyleOptionViewItem _option, QModelIndex _index)"""
        return QSize()
    def paint(self, _painter, _option, _index):
        """None QStyledItemDelegate.paint(None self, QPainter _painter, QStyleOptionViewItem _option, QModelIndex _index)"""
        return None


class QStyleFactory():
    """"""
    def __init__(self):
        """None QStyleFactory.__init__(None self)"""
        return None
    def __init__(self):
        """QStyleFactory QStyleFactory.__init__(None self)"""
        return QStyleFactory()
    def create(self):
        """QString QStyleFactory.create(None self)"""
        return QString()
    def keys(self):
        """QStringList QStyleFactory.keys(None self)"""
        return QStringList()


class QStyleOption():
    """"""
    Version = int() # QStyleOption.StyleOptionVersion enum

    Type = int() # QStyleOption.StyleOptionType enum

    SO_Default = int() # QStyleOption.OptionType enum
    SO_FocusRect = int() # QStyleOption.OptionType enum
    SO_Button = int() # QStyleOption.OptionType enum
    SO_Tab = int() # QStyleOption.OptionType enum
    SO_MenuItem = int() # QStyleOption.OptionType enum
    SO_Frame = int() # QStyleOption.OptionType enum
    SO_ProgressBar = int() # QStyleOption.OptionType enum
    SO_ToolBox = int() # QStyleOption.OptionType enum
    SO_Header = int() # QStyleOption.OptionType enum
    SO_Q3DockWindow = int() # QStyleOption.OptionType enum
    SO_DockWidget = int() # QStyleOption.OptionType enum
    SO_Q3ListViewItem = int() # QStyleOption.OptionType enum
    SO_ViewItem = int() # QStyleOption.OptionType enum
    SO_TabWidgetFrame = int() # QStyleOption.OptionType enum
    SO_TabBarBase = int() # QStyleOption.OptionType enum
    SO_RubberBand = int() # QStyleOption.OptionType enum
    SO_ToolBar = int() # QStyleOption.OptionType enum
    SO_Complex = int() # QStyleOption.OptionType enum
    SO_Slider = int() # QStyleOption.OptionType enum
    SO_SpinBox = int() # QStyleOption.OptionType enum
    SO_ToolButton = int() # QStyleOption.OptionType enum
    SO_ComboBox = int() # QStyleOption.OptionType enum
    SO_Q3ListView = int() # QStyleOption.OptionType enum
    SO_TitleBar = int() # QStyleOption.OptionType enum
    SO_GroupBox = int() # QStyleOption.OptionType enum
    SO_ComplexCustomBase = int() # QStyleOption.OptionType enum
    SO_GraphicsItem = int() # QStyleOption.OptionType enum
    SO_SizeGrip = int() # QStyleOption.OptionType enum
    SO_CustomBase = int() # QStyleOption.OptionType enum

    direction = None # Qt.LayoutDirection member
    fontMetrics = None # QFontMetrics member
    palette = None # QPalette member
    rect = None # QRect member
    state = None # QStyle.State member
    type = None # int member
    version = None # int member
    def __init__(self, _version, _type):
        """None QStyleOption.__init__(None self, int _version, int _type)"""
        return None
    def __init__(self, _other):
        """None QStyleOption.__init__(None self, QStyleOption _other)"""
        return None
    def initFrom(self, _w):
        """None QStyleOption.initFrom(None self, QWidget _w)"""
        return None
    def init(self, _w):
        """None QStyleOption.init(None self, QWidget _w)"""
        return None


class QStyleOptionFocusRect(QStyleOption):
    """"""
    Version = int() # QStyleOptionFocusRect.StyleOptionVersion enum

    Type = int() # QStyleOptionFocusRect.StyleOptionType enum

    backgroundColor = None # QColor member
    def __init__(self):
        """None QStyleOptionFocusRect.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionFocusRect.__init__(None self, QStyleOptionFocusRect _other)"""
        return None


class QStyleOptionFrame(QStyleOption):
    """"""
    Version = int() # QStyleOptionFrame.StyleOptionVersion enum

    Type = int() # QStyleOptionFrame.StyleOptionType enum

    lineWidth = None # int member
    midLineWidth = None # int member
    def __init__(self):
        """None QStyleOptionFrame.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionFrame.__init__(None self, QStyleOptionFrame _other)"""
        return None


class QStyleOptionFrameV2(QStyleOptionFrame):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionFrameV2.FrameFeature enum
    Flat = int() # QStyleOptionFrameV2.FrameFeature enum

    Version = int() # QStyleOptionFrameV2.StyleOptionVersion enum

    features = None # QStyleOptionFrameV2.FrameFeatures member
    def __init__(self):
        """None QStyleOptionFrameV2.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionFrameV2.__init__(None self, QStyleOptionFrameV2 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionFrameV2.__init__(None self, QStyleOptionFrame _other)"""
        return None


class QStyleOptionTabWidgetFrame(QStyleOption):
    """"""
    Version = int() # QStyleOptionTabWidgetFrame.StyleOptionVersion enum

    Type = int() # QStyleOptionTabWidgetFrame.StyleOptionType enum

    leftCornerWidgetSize = None # QSize member
    lineWidth = None # int member
    midLineWidth = None # int member
    rightCornerWidgetSize = None # QSize member
    shape = None # QTabBar.Shape member
    tabBarSize = None # QSize member
    def __init__(self):
        """None QStyleOptionTabWidgetFrame.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTabWidgetFrame.__init__(None self, QStyleOptionTabWidgetFrame _other)"""
        return None


class QStyleOptionTabBarBase(QStyleOption):
    """"""
    Version = int() # QStyleOptionTabBarBase.StyleOptionVersion enum

    Type = int() # QStyleOptionTabBarBase.StyleOptionType enum

    selectedTabRect = None # QRect member
    shape = None # QTabBar.Shape member
    tabBarRect = None # QRect member
    def __init__(self):
        """None QStyleOptionTabBarBase.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTabBarBase.__init__(None self, QStyleOptionTabBarBase _other)"""
        return None


class QStyleOptionHeader(QStyleOption):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionHeader.SortIndicator enum
    SortUp = int() # QStyleOptionHeader.SortIndicator enum
    SortDown = int() # QStyleOptionHeader.SortIndicator enum

    NotAdjacent = int() # QStyleOptionHeader.SelectedPosition enum
    NextIsSelected = int() # QStyleOptionHeader.SelectedPosition enum
    PreviousIsSelected = int() # QStyleOptionHeader.SelectedPosition enum
    NextAndPreviousAreSelected = int() # QStyleOptionHeader.SelectedPosition enum

    Beginning = int() # QStyleOptionHeader.SectionPosition enum
    Middle = int() # QStyleOptionHeader.SectionPosition enum
    End = int() # QStyleOptionHeader.SectionPosition enum
    OnlyOneSection = int() # QStyleOptionHeader.SectionPosition enum

    Version = int() # QStyleOptionHeader.StyleOptionVersion enum

    Type = int() # QStyleOptionHeader.StyleOptionType enum

    icon = None # QIcon member
    iconAlignment = None # Qt.Alignment member
    orientation = None # Qt.Orientation member
    position = None # QStyleOptionHeader.SectionPosition member
    section = None # int member
    selectedPosition = None # QStyleOptionHeader.SelectedPosition member
    sortIndicator = None # QStyleOptionHeader.SortIndicator member
    text = None # QString member
    textAlignment = None # Qt.Alignment member
    def __init__(self):
        """None QStyleOptionHeader.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionHeader.__init__(None self, QStyleOptionHeader _other)"""
        return None


class QStyleOptionButton(QStyleOption):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionButton.ButtonFeature enum
    Flat = int() # QStyleOptionButton.ButtonFeature enum
    HasMenu = int() # QStyleOptionButton.ButtonFeature enum
    DefaultButton = int() # QStyleOptionButton.ButtonFeature enum
    AutoDefaultButton = int() # QStyleOptionButton.ButtonFeature enum
    CommandLinkButton = int() # QStyleOptionButton.ButtonFeature enum

    Version = int() # QStyleOptionButton.StyleOptionVersion enum

    Type = int() # QStyleOptionButton.StyleOptionType enum

    features = None # QStyleOptionButton.ButtonFeatures member
    icon = None # QIcon member
    iconSize = None # QSize member
    text = None # QString member
    def __init__(self):
        """None QStyleOptionButton.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionButton.__init__(None self, QStyleOptionButton _other)"""
        return None


class QStyleOptionTab(QStyleOption):
    """"""
    NoCornerWidgets = int() # QStyleOptionTab.CornerWidget enum
    LeftCornerWidget = int() # QStyleOptionTab.CornerWidget enum
    RightCornerWidget = int() # QStyleOptionTab.CornerWidget enum

    NotAdjacent = int() # QStyleOptionTab.SelectedPosition enum
    NextIsSelected = int() # QStyleOptionTab.SelectedPosition enum
    PreviousIsSelected = int() # QStyleOptionTab.SelectedPosition enum

    Beginning = int() # QStyleOptionTab.TabPosition enum
    Middle = int() # QStyleOptionTab.TabPosition enum
    End = int() # QStyleOptionTab.TabPosition enum
    OnlyOneTab = int() # QStyleOptionTab.TabPosition enum

    Version = int() # QStyleOptionTab.StyleOptionVersion enum

    Type = int() # QStyleOptionTab.StyleOptionType enum

    cornerWidgets = None # QStyleOptionTab.CornerWidgets member
    icon = None # QIcon member
    position = None # QStyleOptionTab.TabPosition member
    row = None # int member
    selectedPosition = None # QStyleOptionTab.SelectedPosition member
    shape = None # QTabBar.Shape member
    text = None # QString member
    def __init__(self):
        """None QStyleOptionTab.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTab.__init__(None self, QStyleOptionTab _other)"""
        return None


class QStyleOptionTabV2(QStyleOptionTab):
    """"""
    Version = int() # QStyleOptionTabV2.StyleOptionVersion enum

    iconSize = None # QSize member
    def __init__(self):
        """None QStyleOptionTabV2.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTabV2.__init__(None self, QStyleOptionTabV2 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTabV2.__init__(None self, QStyleOptionTab _other)"""
        return None


class QStyleOptionProgressBar(QStyleOption):
    """"""
    Version = int() # QStyleOptionProgressBar.StyleOptionVersion enum

    Type = int() # QStyleOptionProgressBar.StyleOptionType enum

    maximum = None # int member
    minimum = None # int member
    progress = None # int member
    text = None # QString member
    textAlignment = None # Qt.Alignment member
    textVisible = None # bool member
    def __init__(self):
        """None QStyleOptionProgressBar.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionProgressBar.__init__(None self, QStyleOptionProgressBar _other)"""
        return None


class QStyleOptionProgressBarV2(QStyleOptionProgressBar):
    """"""
    Version = int() # QStyleOptionProgressBarV2.StyleOptionVersion enum

    Type = int() # QStyleOptionProgressBarV2.StyleOptionType enum

    bottomToTop = None # bool member
    invertedAppearance = None # bool member
    orientation = None # Qt.Orientation member
    def __init__(self):
        """None QStyleOptionProgressBarV2.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionProgressBarV2.__init__(None self, QStyleOptionProgressBar _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionProgressBarV2.__init__(None self, QStyleOptionProgressBarV2 _other)"""
        return None


class QStyleOptionMenuItem(QStyleOption):
    """"""
    NotCheckable = int() # QStyleOptionMenuItem.CheckType enum
    Exclusive = int() # QStyleOptionMenuItem.CheckType enum
    NonExclusive = int() # QStyleOptionMenuItem.CheckType enum

    Normal = int() # QStyleOptionMenuItem.MenuItemType enum
    DefaultItem = int() # QStyleOptionMenuItem.MenuItemType enum
    Separator = int() # QStyleOptionMenuItem.MenuItemType enum
    SubMenu = int() # QStyleOptionMenuItem.MenuItemType enum
    Scroller = int() # QStyleOptionMenuItem.MenuItemType enum
    TearOff = int() # QStyleOptionMenuItem.MenuItemType enum
    Margin = int() # QStyleOptionMenuItem.MenuItemType enum
    EmptyArea = int() # QStyleOptionMenuItem.MenuItemType enum

    Version = int() # QStyleOptionMenuItem.StyleOptionVersion enum

    Type = int() # QStyleOptionMenuItem.StyleOptionType enum

    checkType = None # QStyleOptionMenuItem.CheckType member
    checked = None # bool member
    font = None # QFont member
    icon = None # QIcon member
    maxIconWidth = None # int member
    menuHasCheckableItems = None # bool member
    menuItemType = None # QStyleOptionMenuItem.MenuItemType member
    menuRect = None # QRect member
    tabWidth = None # int member
    text = None # QString member
    def __init__(self):
        """None QStyleOptionMenuItem.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionMenuItem.__init__(None self, QStyleOptionMenuItem _other)"""
        return None


class QStyleOptionDockWidget(QStyleOption):
    """"""
    Version = int() # QStyleOptionDockWidget.StyleOptionVersion enum

    Type = int() # QStyleOptionDockWidget.StyleOptionType enum

    closable = None # bool member
    floatable = None # bool member
    movable = None # bool member
    title = None # QString member
    def __init__(self):
        """None QStyleOptionDockWidget.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionDockWidget.__init__(None self, QStyleOptionDockWidget _other)"""
        return None


class QStyleOptionViewItem(QStyleOption):
    """"""
    Left = int() # QStyleOptionViewItem.Position enum
    Right = int() # QStyleOptionViewItem.Position enum
    Top = int() # QStyleOptionViewItem.Position enum
    Bottom = int() # QStyleOptionViewItem.Position enum

    Version = int() # QStyleOptionViewItem.StyleOptionVersion enum

    Type = int() # QStyleOptionViewItem.StyleOptionType enum

    decorationAlignment = None # Qt.Alignment member
    decorationPosition = None # QStyleOptionViewItem.Position member
    decorationSize = None # QSize member
    displayAlignment = None # Qt.Alignment member
    font = None # QFont member
    showDecorationSelected = None # bool member
    textElideMode = None # Qt.TextElideMode member
    def __init__(self):
        """None QStyleOptionViewItem.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionViewItem.__init__(None self, QStyleOptionViewItem _other)"""
        return None


class QStyleOptionToolBox(QStyleOption):
    """"""
    Version = int() # QStyleOptionToolBox.StyleOptionVersion enum

    Type = int() # QStyleOptionToolBox.StyleOptionType enum

    icon = None # QIcon member
    text = None # QString member
    def __init__(self):
        """None QStyleOptionToolBox.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionToolBox.__init__(None self, QStyleOptionToolBox _other)"""
        return None


class QStyleOptionRubberBand(QStyleOption):
    """"""
    Version = int() # QStyleOptionRubberBand.StyleOptionVersion enum

    Type = int() # QStyleOptionRubberBand.StyleOptionType enum

    opaque = None # bool member
    shape = None # QRubberBand.Shape member
    def __init__(self):
        """None QStyleOptionRubberBand.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionRubberBand.__init__(None self, QStyleOptionRubberBand _other)"""
        return None


class QStyleOptionComplex(QStyleOption):
    """"""
    Version = int() # QStyleOptionComplex.StyleOptionVersion enum

    Type = int() # QStyleOptionComplex.StyleOptionType enum

    activeSubControls = None # QStyle.SubControls member
    subControls = None # QStyle.SubControls member
    def __init__(self, _version, _type):
        """None QStyleOptionComplex.__init__(None self, int _version, int _type)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionComplex.__init__(None self, QStyleOptionComplex _other)"""
        return None


class QStyleOptionSlider(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionSlider.StyleOptionVersion enum

    Type = int() # QStyleOptionSlider.StyleOptionType enum

    dialWrapping = None # bool member
    maximum = None # int member
    minimum = None # int member
    notchTarget = None # float member
    orientation = None # Qt.Orientation member
    pageStep = None # int member
    singleStep = None # int member
    sliderPosition = None # int member
    sliderValue = None # int member
    tickInterval = None # int member
    tickPosition = None # QSlider.TickPosition member
    upsideDown = None # bool member
    def __init__(self):
        """None QStyleOptionSlider.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionSlider.__init__(None self, QStyleOptionSlider _other)"""
        return None


class QStyleOptionSpinBox(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionSpinBox.StyleOptionVersion enum

    Type = int() # QStyleOptionSpinBox.StyleOptionType enum

    buttonSymbols = None # QAbstractSpinBox.ButtonSymbols member
    frame = None # bool member
    stepEnabled = None # QAbstractSpinBox.StepEnabled member
    def __init__(self):
        """None QStyleOptionSpinBox.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionSpinBox.__init__(None self, QStyleOptionSpinBox _other)"""
        return None


class QStyleOptionToolButton(QStyleOptionComplex):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionToolButton.ToolButtonFeature enum
    Arrow = int() # QStyleOptionToolButton.ToolButtonFeature enum
    Menu = int() # QStyleOptionToolButton.ToolButtonFeature enum
    PopupDelay = int() # QStyleOptionToolButton.ToolButtonFeature enum
    MenuButtonPopup = int() # QStyleOptionToolButton.ToolButtonFeature enum
    HasMenu = int() # QStyleOptionToolButton.ToolButtonFeature enum

    Version = int() # QStyleOptionToolButton.StyleOptionVersion enum

    Type = int() # QStyleOptionToolButton.StyleOptionType enum

    arrowType = None # Qt.ArrowType member
    features = None # QStyleOptionToolButton.ToolButtonFeatures member
    font = None # QFont member
    icon = None # QIcon member
    iconSize = None # QSize member
    pos = None # QPoint member
    text = None # QString member
    toolButtonStyle = None # Qt.ToolButtonStyle member
    def __init__(self):
        """None QStyleOptionToolButton.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionToolButton.__init__(None self, QStyleOptionToolButton _other)"""
        return None


class QStyleOptionComboBox(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionComboBox.StyleOptionVersion enum

    Type = int() # QStyleOptionComboBox.StyleOptionType enum

    currentIcon = None # QIcon member
    currentText = None # QString member
    editable = None # bool member
    frame = None # bool member
    iconSize = None # QSize member
    popupRect = None # QRect member
    def __init__(self):
        """None QStyleOptionComboBox.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionComboBox.__init__(None self, QStyleOptionComboBox _other)"""
        return None


class QStyleOptionTitleBar(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionTitleBar.StyleOptionVersion enum

    Type = int() # QStyleOptionTitleBar.StyleOptionType enum

    icon = None # QIcon member
    text = None # QString member
    titleBarFlags = None # Qt.WindowFlags member
    titleBarState = None # int member
    def __init__(self):
        """None QStyleOptionTitleBar.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTitleBar.__init__(None self, QStyleOptionTitleBar _other)"""
        return None


class QStyleHintReturn():
    """"""
    Version = int() # QStyleHintReturn.StyleOptionVersion enum

    Type = int() # QStyleHintReturn.StyleOptionType enum

    SH_Default = int() # QStyleHintReturn.HintReturnType enum
    SH_Mask = int() # QStyleHintReturn.HintReturnType enum
    SH_Variant = int() # QStyleHintReturn.HintReturnType enum

    type = None # int member
    version = None # int member
    def __init__(self, _version, _type):
        """None QStyleHintReturn.__init__(None self, int _version, int _type)"""
        return None
    def __init__(self):
        """QStyleHintReturn QStyleHintReturn.__init__(None self)"""
        return QStyleHintReturn()


class QStyleHintReturnMask(QStyleHintReturn):
    """"""
    Version = int() # QStyleHintReturnMask.StyleOptionVersion enum

    Type = int() # QStyleHintReturnMask.StyleOptionType enum

    region = None # QRegion member
    def __init__(self):
        """None QStyleHintReturnMask.__init__(None self)"""
        return None
    def __init__(self):
        """QStyleHintReturnMask QStyleHintReturnMask.__init__(None self)"""
        return QStyleHintReturnMask()


class QStyleOptionToolBar(QStyleOption):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionToolBar.ToolBarFeature enum
    Movable = int() # QStyleOptionToolBar.ToolBarFeature enum

    Beginning = int() # QStyleOptionToolBar.ToolBarPosition enum
    Middle = int() # QStyleOptionToolBar.ToolBarPosition enum
    End = int() # QStyleOptionToolBar.ToolBarPosition enum
    OnlyOne = int() # QStyleOptionToolBar.ToolBarPosition enum

    Version = int() # QStyleOptionToolBar.StyleOptionVersion enum

    Type = int() # QStyleOptionToolBar.StyleOptionType enum

    features = None # QStyleOptionToolBar.ToolBarFeatures member
    lineWidth = None # int member
    midLineWidth = None # int member
    positionOfLine = None # QStyleOptionToolBar.ToolBarPosition member
    positionWithinLine = None # QStyleOptionToolBar.ToolBarPosition member
    toolBarArea = None # Qt.ToolBarArea member
    def __init__(self):
        """None QStyleOptionToolBar.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionToolBar.__init__(None self, QStyleOptionToolBar _other)"""
        return None


class QStyleOptionGroupBox(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionGroupBox.StyleOptionVersion enum

    Type = int() # QStyleOptionGroupBox.StyleOptionType enum

    features = None # QStyleOptionFrameV2.FrameFeatures member
    lineWidth = None # int member
    midLineWidth = None # int member
    text = None # QString member
    textAlignment = None # Qt.Alignment member
    textColor = None # QColor member
    def __init__(self):
        """None QStyleOptionGroupBox.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionGroupBox.__init__(None self, QStyleOptionGroupBox _other)"""
        return None


class QStyleOptionViewItemV2(QStyleOptionViewItem):
    """"""
    __kdevpythondocumentation_builtin_None = int() # QStyleOptionViewItemV2.ViewItemFeature enum
    WrapText = int() # QStyleOptionViewItemV2.ViewItemFeature enum
    Alternate = int() # QStyleOptionViewItemV2.ViewItemFeature enum
    HasCheckIndicator = int() # QStyleOptionViewItemV2.ViewItemFeature enum
    HasDisplay = int() # QStyleOptionViewItemV2.ViewItemFeature enum
    HasDecoration = int() # QStyleOptionViewItemV2.ViewItemFeature enum

    Version = int() # QStyleOptionViewItemV2.StyleOptionVersion enum

    features = None # QStyleOptionViewItemV2.ViewItemFeatures member
    def __init__(self):
        """None QStyleOptionViewItemV2.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionViewItemV2.__init__(None self, QStyleOptionViewItemV2 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionViewItemV2.__init__(None self, QStyleOptionViewItem _other)"""
        return None


class QStyleOptionSizeGrip(QStyleOptionComplex):
    """"""
    Version = int() # QStyleOptionSizeGrip.StyleOptionVersion enum

    Type = int() # QStyleOptionSizeGrip.StyleOptionType enum

    corner = None # Qt.Corner member
    def __init__(self):
        """None QStyleOptionSizeGrip.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionSizeGrip.__init__(None self, QStyleOptionSizeGrip _other)"""
        return None


class QStyleOptionGraphicsItem(QStyleOption):
    """"""
    Version = int() # QStyleOptionGraphicsItem.StyleOptionVersion enum

    Type = int() # QStyleOptionGraphicsItem.StyleOptionType enum

    exposedRect = None # QRectF member
    levelOfDetail = None # float member
    matrix = None # QMatrix member
    def __init__(self):
        """None QStyleOptionGraphicsItem.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionGraphicsItem.__init__(None self, QStyleOptionGraphicsItem _other)"""
        return None
    def levelOfDetailFromTransform(self, _worldTransform):
        """float QStyleOptionGraphicsItem.levelOfDetailFromTransform(None self, QTransform _worldTransform)"""
        return float()


class QStyleOptionDockWidgetV2(QStyleOptionDockWidget):
    """"""
    Version = int() # QStyleOptionDockWidgetV2.StyleOptionVersion enum

    verticalTitleBar = None # bool member
    def __init__(self):
        """None QStyleOptionDockWidgetV2.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionDockWidgetV2.__init__(None self, QStyleOptionDockWidgetV2 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionDockWidgetV2.__init__(None self, QStyleOptionDockWidget _other)"""
        return None


class QStyleOptionViewItemV3(QStyleOptionViewItemV2):
    """"""
    Version = int() # QStyleOptionViewItemV3.StyleOptionVersion enum

    locale = None # QLocale member
    widget = None # QWidget member
    def __init__(self):
        """None QStyleOptionViewItemV3.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionViewItemV3.__init__(None self, QStyleOptionViewItemV3 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionViewItemV3.__init__(None self, QStyleOptionViewItem _other)"""
        return None


class QStyleOptionToolBoxV2(QStyleOptionToolBox):
    """"""
    NotAdjacent = int() # QStyleOptionToolBoxV2.SelectedPosition enum
    NextIsSelected = int() # QStyleOptionToolBoxV2.SelectedPosition enum
    PreviousIsSelected = int() # QStyleOptionToolBoxV2.SelectedPosition enum

    Beginning = int() # QStyleOptionToolBoxV2.TabPosition enum
    Middle = int() # QStyleOptionToolBoxV2.TabPosition enum
    End = int() # QStyleOptionToolBoxV2.TabPosition enum
    OnlyOneTab = int() # QStyleOptionToolBoxV2.TabPosition enum

    Version = int() # QStyleOptionToolBoxV2.StyleOptionVersion enum

    position = None # QStyleOptionToolBoxV2.TabPosition member
    selectedPosition = None # QStyleOptionToolBoxV2.SelectedPosition member
    def __init__(self):
        """None QStyleOptionToolBoxV2.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionToolBoxV2.__init__(None self, QStyleOptionToolBoxV2 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionToolBoxV2.__init__(None self, QStyleOptionToolBox _other)"""
        return None


class QStyleHintReturnVariant(QStyleHintReturn):
    """"""
    Version = int() # QStyleHintReturnVariant.StyleOptionVersion enum

    Type = int() # QStyleHintReturnVariant.StyleOptionType enum

    variant = None # QVariant member
    def __init__(self):
        """None QStyleHintReturnVariant.__init__(None self)"""
        return None
    def __init__(self):
        """QStyleHintReturnVariant QStyleHintReturnVariant.__init__(None self)"""
        return QStyleHintReturnVariant()


class QStyleOptionViewItemV4(QStyleOptionViewItemV3):
    """"""
    Invalid = int() # QStyleOptionViewItemV4.ViewItemPosition enum
    Beginning = int() # QStyleOptionViewItemV4.ViewItemPosition enum
    Middle = int() # QStyleOptionViewItemV4.ViewItemPosition enum
    End = int() # QStyleOptionViewItemV4.ViewItemPosition enum
    OnlyOne = int() # QStyleOptionViewItemV4.ViewItemPosition enum

    Version = int() # QStyleOptionViewItemV4.StyleOptionVersion enum

    backgroundBrush = None # QBrush member
    checkState = None # Qt.CheckState member
    icon = None # QIcon member
    index = None # QModelIndex member
    text = None # QString member
    viewItemPosition = None # QStyleOptionViewItemV4.ViewItemPosition member
    def __init__(self):
        """None QStyleOptionViewItemV4.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionViewItemV4.__init__(None self, QStyleOptionViewItemV4 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionViewItemV4.__init__(None self, QStyleOptionViewItem _other)"""
        return None


class QStyleOptionFrameV3(QStyleOptionFrameV2):
    """"""
    Version = int() # QStyleOptionFrameV3.StyleOptionVersion enum

    frameShape = None # QFrame.Shape member
    unused = None # int member
    def __init__(self):
        """None QStyleOptionFrameV3.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionFrameV3.__init__(None self, QStyleOptionFrameV3 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionFrameV3.__init__(None self, QStyleOptionFrame _other)"""
        return None


class QStyleOptionTabBarBaseV2(QStyleOptionTabBarBase):
    """"""
    Version = int() # QStyleOptionTabBarBaseV2.StyleOptionVersion enum

    documentMode = None # bool member
    def __init__(self):
        """None QStyleOptionTabBarBaseV2.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTabBarBaseV2.__init__(None self, QStyleOptionTabBarBaseV2 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTabBarBaseV2.__init__(None self, QStyleOptionTabBarBase _other)"""
        return None


class QStyleOptionTabV3(QStyleOptionTabV2):
    """"""
    Version = int() # QStyleOptionTabV3.StyleOptionVersion enum

    documentMode = None # bool member
    leftButtonSize = None # QSize member
    rightButtonSize = None # QSize member
    def __init__(self):
        """None QStyleOptionTabV3.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTabV3.__init__(None self, QStyleOptionTabV3 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTabV3.__init__(None self, QStyleOptionTabV2 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTabV3.__init__(None self, QStyleOptionTab _other)"""
        return None


class QStyleOptionTabWidgetFrameV2(QStyleOptionTabWidgetFrame):
    """"""
    Version = int() # QStyleOptionTabWidgetFrameV2.StyleOptionVersion enum

    selectedTabRect = None # QRect member
    tabBarRect = None # QRect member
    def __init__(self):
        """None QStyleOptionTabWidgetFrameV2.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTabWidgetFrameV2.__init__(None self, QStyleOptionTabWidgetFrameV2 _other)"""
        return None
    def __init__(self, _other):
        """None QStyleOptionTabWidgetFrameV2.__init__(None self, QStyleOptionTabWidgetFrame _other)"""
        return None


class QStylePainter(QPainter):
    """"""
    def __init__(self):
        """None QStylePainter.__init__(None self)"""
        return None
    def __init__(self, _w):
        """None QStylePainter.__init__(None self, QWidget _w)"""
        return None
    def __init__(self, _pd, _w):
        """None QStylePainter.__init__(None self, QPaintDevice _pd, QWidget _w)"""
        return None
    def drawItemPixmap(self, _r, _flags, _pixmap):
        """None QStylePainter.drawItemPixmap(None self, QRect _r, int _flags, QPixmap _pixmap)"""
        return None
    def drawItemText(self, _rect, _flags, _pal, _enabled, _text, _textRole):
        """None QStylePainter.drawItemText(None self, QRect _rect, int _flags, QPalette _pal, bool _enabled, QString _text, QPalette.ColorRole _textRole)"""
        return None
    def drawComplexControl(self, _cc, _opt):
        """None QStylePainter.drawComplexControl(None self, QStyle.ComplexControl _cc, QStyleOptionComplex _opt)"""
        return None
    def drawControl(self, _ce, _opt):
        """None QStylePainter.drawControl(None self, QStyle.ControlElement _ce, QStyleOption _opt)"""
        return None
    def drawPrimitive(self, _pe, _opt):
        """None QStylePainter.drawPrimitive(None self, QStyle.PrimitiveElement _pe, QStyleOption _opt)"""
        return None
    def style(self):
        """QStyle QStylePainter.style(None self)"""
        return QStyle()
    def begin(self, _w):
        """bool QStylePainter.begin(None self, QWidget _w)"""
        return bool()
    def begin(self, _pd, _w):
        """bool QStylePainter.begin(None self, QPaintDevice _pd, QWidget _w)"""
        return bool()


class QSyntaxHighlighter(QObject):
    """"""
    def __init__(self, _parent):
        """None QSyntaxHighlighter.__init__(None self, QTextEdit _parent)"""
        return None
    def __init__(self, _parent):
        """None QSyntaxHighlighter.__init__(None self, QTextDocument _parent)"""
        return None
    def __init__(self, _parent):
        """None QSyntaxHighlighter.__init__(None self, QObject _parent)"""
        return None
    def currentBlock(self):
        """QTextBlock QSyntaxHighlighter.currentBlock(None self)"""
        return QTextBlock()
    def currentBlockUserData(self):
        """QTextBlockUserData QSyntaxHighlighter.currentBlockUserData(None self)"""
        return QTextBlockUserData()
    def setCurrentBlockUserData(self, _data):
        """None QSyntaxHighlighter.setCurrentBlockUserData(None self, QTextBlockUserData _data)"""
        return None
    def setCurrentBlockState(self, _newState):
        """None QSyntaxHighlighter.setCurrentBlockState(None self, int _newState)"""
        return None
    def currentBlockState(self):
        """int QSyntaxHighlighter.currentBlockState(None self)"""
        return int()
    def previousBlockState(self):
        """int QSyntaxHighlighter.previousBlockState(None self)"""
        return int()
    def format(self, _pos):
        """QTextCharFormat QSyntaxHighlighter.format(None self, int _pos)"""
        return QTextCharFormat()
    def setFormat(self, _start, _count, _format):
        """None QSyntaxHighlighter.setFormat(None self, int _start, int _count, QTextCharFormat _format)"""
        return None
    def setFormat(self, _start, _count, _color):
        """None QSyntaxHighlighter.setFormat(None self, int _start, int _count, QColor _color)"""
        return None
    def setFormat(self, _start, _count, _font):
        """None QSyntaxHighlighter.setFormat(None self, int _start, int _count, QFont _font)"""
        return None
    def highlightBlock(self, _text):
        """abstract None QSyntaxHighlighter.highlightBlock(None self, QString _text)"""
        return None
    def rehighlightBlock(self, _block):
        """None QSyntaxHighlighter.rehighlightBlock(None self, QTextBlock _block)"""
        return None
    def rehighlight(self):
        """None QSyntaxHighlighter.rehighlight(None self)"""
        return None
    def document(self):
        """QTextDocument QSyntaxHighlighter.document(None self)"""
        return QTextDocument()
    def setDocument(self, _doc):
        """None QSyntaxHighlighter.setDocument(None self, QTextDocument _doc)"""
        return None


class QSystemTrayIcon(QObject):
    """"""
    NoIcon = int() # QSystemTrayIcon.MessageIcon enum
    Information = int() # QSystemTrayIcon.MessageIcon enum
    Warning = int() # QSystemTrayIcon.MessageIcon enum
    Critical = int() # QSystemTrayIcon.MessageIcon enum

    Unknown = int() # QSystemTrayIcon.ActivationReason enum
    Context = int() # QSystemTrayIcon.ActivationReason enum
    DoubleClick = int() # QSystemTrayIcon.ActivationReason enum
    Trigger = int() # QSystemTrayIcon.ActivationReason enum
    MiddleClick = int() # QSystemTrayIcon.ActivationReason enum

    def __init__(self, _parent):
        """None QSystemTrayIcon.__init__(None self, QObject _parent)"""
        return None
    def __init__(self, _icon, _parent):
        """None QSystemTrayIcon.__init__(None self, QIcon _icon, QObject _parent)"""
        return None
    def event(self, _event):
        """bool QSystemTrayIcon.event(None self, QEvent _event)"""
        return bool()
    def show(self):
        """None QSystemTrayIcon.show(None self)"""
        return None
    def setVisible(self, _visible):
        """None QSystemTrayIcon.setVisible(None self, bool _visible)"""
        return None
    def hide(self):
        """None QSystemTrayIcon.hide(None self)"""
        return None
    def isVisible(self):
        """bool QSystemTrayIcon.isVisible(None self)"""
        return bool()
    def showMessage(self, _title, _msg, _icon, _msecs):
        """None QSystemTrayIcon.showMessage(None self, QString _title, QString _msg, QSystemTrayIcon.MessageIcon _icon, int _msecs)"""
        return None
    def supportsMessages(self):
        """bool QSystemTrayIcon.supportsMessages(None self)"""
        return bool()
    def isSystemTrayAvailable(self):
        """bool QSystemTrayIcon.isSystemTrayAvailable(None self)"""
        return bool()
    def setToolTip(self, _tip):
        """None QSystemTrayIcon.setToolTip(None self, QString _tip)"""
        return None
    def toolTip(self):
        """QString QSystemTrayIcon.toolTip(None self)"""
        return QString()
    def setIcon(self, _icon):
        """None QSystemTrayIcon.setIcon(None self, QIcon _icon)"""
        return None
    def icon(self):
        """QIcon QSystemTrayIcon.icon(None self)"""
        return QIcon()
    def geometry(self):
        """QRect QSystemTrayIcon.geometry(None self)"""
        return QRect()
    def contextMenu(self):
        """QMenu QSystemTrayIcon.contextMenu(None self)"""
        return QMenu()
    def setContextMenu(self, _menu):
        """None QSystemTrayIcon.setContextMenu(None self, QMenu _menu)"""
        return None


class QTabBar(QWidget):
    """"""
    SelectLeftTab = int() # QTabBar.SelectionBehavior enum
    SelectRightTab = int() # QTabBar.SelectionBehavior enum
    SelectPreviousTab = int() # QTabBar.SelectionBehavior enum

    LeftSide = int() # QTabBar.ButtonPosition enum
    RightSide = int() # QTabBar.ButtonPosition enum

    RoundedNorth = int() # QTabBar.Shape enum
    RoundedSouth = int() # QTabBar.Shape enum
    RoundedWest = int() # QTabBar.Shape enum
    RoundedEast = int() # QTabBar.Shape enum
    TriangularNorth = int() # QTabBar.Shape enum
    TriangularSouth = int() # QTabBar.Shape enum
    TriangularWest = int() # QTabBar.Shape enum
    TriangularEast = int() # QTabBar.Shape enum

    def __init__(self, _parent):
        """None QTabBar.__init__(None self, QWidget _parent)"""
        return None
    def wheelEvent(self, _event):
        """None QTabBar.wheelEvent(None self, QWheelEvent _event)"""
        return None
    def hideEvent(self):
        """QHideEvent QTabBar.hideEvent(None self)"""
        return QHideEvent()
    def setDocumentMode(self, _set):
        """None QTabBar.setDocumentMode(None self, bool _set)"""
        return None
    def documentMode(self):
        """bool QTabBar.documentMode(None self)"""
        return bool()
    def setMovable(self, _movable):
        """None QTabBar.setMovable(None self, bool _movable)"""
        return None
    def isMovable(self):
        """bool QTabBar.isMovable(None self)"""
        return bool()
    def setExpanding(self, _enabled):
        """None QTabBar.setExpanding(None self, bool _enabled)"""
        return None
    def expanding(self):
        """bool QTabBar.expanding(None self)"""
        return bool()
    def setSelectionBehaviorOnRemove(self, _behavior):
        """None QTabBar.setSelectionBehaviorOnRemove(None self, QTabBar.SelectionBehavior _behavior)"""
        return None
    def selectionBehaviorOnRemove(self):
        """QTabBar.SelectionBehavior QTabBar.selectionBehaviorOnRemove(None self)"""
        return QTabBar.SelectionBehavior()
    def tabButton(self, _index, _position):
        """QWidget QTabBar.tabButton(None self, int _index, QTabBar.ButtonPosition _position)"""
        return QWidget()
    def setTabButton(self, _index, _position, _widget):
        """None QTabBar.setTabButton(None self, int _index, QTabBar.ButtonPosition _position, QWidget _widget)"""
        return None
    def setTabsClosable(self, _closable):
        """None QTabBar.setTabsClosable(None self, bool _closable)"""
        return None
    def tabsClosable(self):
        """bool QTabBar.tabsClosable(None self)"""
        return bool()
    def moveTab(self, _from, _to):
        """None QTabBar.moveTab(None self, int _from, int _to)"""
        return None
    def changeEvent(self):
        """QEvent QTabBar.changeEvent(None self)"""
        return QEvent()
    def keyPressEvent(self):
        """QKeyEvent QTabBar.keyPressEvent(None self)"""
        return QKeyEvent()
    def mouseReleaseEvent(self):
        """QMouseEvent QTabBar.mouseReleaseEvent(None self)"""
        return QMouseEvent()
    def mouseMoveEvent(self):
        """QMouseEvent QTabBar.mouseMoveEvent(None self)"""
        return QMouseEvent()
    def mousePressEvent(self):
        """QMouseEvent QTabBar.mousePressEvent(None self)"""
        return QMouseEvent()
    def paintEvent(self):
        """QPaintEvent QTabBar.paintEvent(None self)"""
        return QPaintEvent()
    def showEvent(self):
        """QShowEvent QTabBar.showEvent(None self)"""
        return QShowEvent()
    def resizeEvent(self):
        """QResizeEvent QTabBar.resizeEvent(None self)"""
        return QResizeEvent()
    def event(self):
        """QEvent QTabBar.event(None self)"""
        return QEvent()
    def tabLayoutChange(self):
        """None QTabBar.tabLayoutChange(None self)"""
        return None
    def tabRemoved(self, _index):
        """None QTabBar.tabRemoved(None self, int _index)"""
        return None
    def tabInserted(self, _index):
        """None QTabBar.tabInserted(None self, int _index)"""
        return None
    def tabSizeHint(self, _index):
        """QSize QTabBar.tabSizeHint(None self, int _index)"""
        return QSize()
    def initStyleOption(self, _option, _tabIndex):
        """None QTabBar.initStyleOption(None self, QStyleOptionTab _option, int _tabIndex)"""
        return None
    def setCurrentIndex(self, _index):
        """None QTabBar.setCurrentIndex(None self, int _index)"""
        return None
    def usesScrollButtons(self):
        """bool QTabBar.usesScrollButtons(None self)"""
        return bool()
    def setUsesScrollButtons(self, _useButtons):
        """None QTabBar.setUsesScrollButtons(None self, bool _useButtons)"""
        return None
    def setElideMode(self):
        """Qt.TextElideMode QTabBar.setElideMode(None self)"""
        return Qt.TextElideMode()
    def elideMode(self):
        """Qt.TextElideMode QTabBar.elideMode(None self)"""
        return Qt.TextElideMode()
    def setIconSize(self, _size):
        """None QTabBar.setIconSize(None self, QSize _size)"""
        return None
    def iconSize(self):
        """QSize QTabBar.iconSize(None self)"""
        return QSize()
    def drawBase(self):
        """bool QTabBar.drawBase(None self)"""
        return bool()
    def setDrawBase(self, _drawTheBase):
        """None QTabBar.setDrawBase(None self, bool _drawTheBase)"""
        return None
    def minimumSizeHint(self):
        """QSize QTabBar.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QTabBar.sizeHint(None self)"""
        return QSize()
    def __len__(self):
        """ QTabBar.__len__(None self)"""
        return ()
    def count(self):
        """int QTabBar.count(None self)"""
        return int()
    def currentIndex(self):
        """int QTabBar.currentIndex(None self)"""
        return int()
    def tabRect(self, _index):
        """QRect QTabBar.tabRect(None self, int _index)"""
        return QRect()
    def tabAt(self, _pos):
        """int QTabBar.tabAt(None self, QPoint _pos)"""
        return int()
    def tabData(self, _index):
        """QVariant QTabBar.tabData(None self, int _index)"""
        return QVariant()
    def setTabData(self, _index, _data):
        """None QTabBar.setTabData(None self, int _index, QVariant _data)"""
        return None
    def tabWhatsThis(self, _index):
        """QString QTabBar.tabWhatsThis(None self, int _index)"""
        return QString()
    def setTabWhatsThis(self, _index, _text):
        """None QTabBar.setTabWhatsThis(None self, int _index, QString _text)"""
        return None
    def tabToolTip(self, _index):
        """QString QTabBar.tabToolTip(None self, int _index)"""
        return QString()
    def setTabToolTip(self, _index, _tip):
        """None QTabBar.setTabToolTip(None self, int _index, QString _tip)"""
        return None
    def setTabIcon(self, _index, _icon):
        """None QTabBar.setTabIcon(None self, int _index, QIcon _icon)"""
        return None
    def tabIcon(self, _index):
        """QIcon QTabBar.tabIcon(None self, int _index)"""
        return QIcon()
    def setTabTextColor(self, _index, _color):
        """None QTabBar.setTabTextColor(None self, int _index, QColor _color)"""
        return None
    def tabTextColor(self, _index):
        """QColor QTabBar.tabTextColor(None self, int _index)"""
        return QColor()
    def setTabText(self, _index, _text):
        """None QTabBar.setTabText(None self, int _index, QString _text)"""
        return None
    def tabText(self, _index):
        """QString QTabBar.tabText(None self, int _index)"""
        return QString()
    def setTabEnabled(self, _index):
        """bool QTabBar.setTabEnabled(None self, int _index)"""
        return bool()
    def isTabEnabled(self, _index):
        """bool QTabBar.isTabEnabled(None self, int _index)"""
        return bool()
    def removeTab(self, _index):
        """None QTabBar.removeTab(None self, int _index)"""
        return None
    def insertTab(self, _index, _text):
        """int QTabBar.insertTab(None self, int _index, QString _text)"""
        return int()
    def insertTab(self, _index, _icon, _text):
        """int QTabBar.insertTab(None self, int _index, QIcon _icon, QString _text)"""
        return int()
    def addTab(self, _text):
        """int QTabBar.addTab(None self, QString _text)"""
        return int()
    def addTab(self, _icon, _text):
        """int QTabBar.addTab(None self, QIcon _icon, QString _text)"""
        return int()
    def setShape(self, _shape):
        """None QTabBar.setShape(None self, QTabBar.Shape _shape)"""
        return None
    def shape(self):
        """QTabBar.Shape QTabBar.shape(None self)"""
        return QTabBar.Shape()


class QTableView(QAbstractItemView):
    """"""
    def __init__(self, _parent):
        """None QTableView.__init__(None self, QWidget _parent)"""
        return None
    def currentChanged(self, _current, _previous):
        """None QTableView.currentChanged(None self, QModelIndex _current, QModelIndex _previous)"""
        return None
    def selectionChanged(self, _selected, _deselected):
        """None QTableView.selectionChanged(None self, QItemSelection _selected, QItemSelection _deselected)"""
        return None
    def clearSpans(self):
        """None QTableView.clearSpans(None self)"""
        return None
    def isCornerButtonEnabled(self):
        """bool QTableView.isCornerButtonEnabled(None self)"""
        return bool()
    def setCornerButtonEnabled(self, _enable):
        """None QTableView.setCornerButtonEnabled(None self, bool _enable)"""
        return None
    def wordWrap(self):
        """bool QTableView.wordWrap(None self)"""
        return bool()
    def setWordWrap(self, _on):
        """None QTableView.setWordWrap(None self, bool _on)"""
        return None
    def columnSpan(self, _row, _column):
        """int QTableView.columnSpan(None self, int _row, int _column)"""
        return int()
    def rowSpan(self, _row, _column):
        """int QTableView.rowSpan(None self, int _row, int _column)"""
        return int()
    def setSpan(self, _row, _column, _rowSpan, _columnSpan):
        """None QTableView.setSpan(None self, int _row, int _column, int _rowSpan, int _columnSpan)"""
        return None
    def isSortingEnabled(self):
        """bool QTableView.isSortingEnabled(None self)"""
        return bool()
    def setSortingEnabled(self, _enable):
        """None QTableView.setSortingEnabled(None self, bool _enable)"""
        return None
    def isIndexHidden(self, _index):
        """bool QTableView.isIndexHidden(None self, QModelIndex _index)"""
        return bool()
    def horizontalScrollbarAction(self, _action):
        """None QTableView.horizontalScrollbarAction(None self, int _action)"""
        return None
    def verticalScrollbarAction(self, _action):
        """None QTableView.verticalScrollbarAction(None self, int _action)"""
        return None
    def sizeHintForColumn(self, _column):
        """int QTableView.sizeHintForColumn(None self, int _column)"""
        return int()
    def sizeHintForRow(self, _row):
        """int QTableView.sizeHintForRow(None self, int _row)"""
        return int()
    def updateGeometries(self):
        """None QTableView.updateGeometries(None self)"""
        return None
    def selectedIndexes(self):
        """list-of-QModelIndex QTableView.selectedIndexes(None self)"""
        return [QModelIndex()]
    def visualRegionForSelection(self, _selection):
        """QRegion QTableView.visualRegionForSelection(None self, QItemSelection _selection)"""
        return QRegion()
    def setSelection(self, _rect, _command):
        """None QTableView.setSelection(None self, QRect _rect, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def moveCursor(self, _cursorAction, _modifiers):
        """QModelIndex QTableView.moveCursor(None self, QAbstractItemView.CursorAction _cursorAction, Qt.KeyboardModifiers _modifiers)"""
        return QModelIndex()
    def verticalOffset(self):
        """int QTableView.verticalOffset(None self)"""
        return int()
    def horizontalOffset(self):
        """int QTableView.horizontalOffset(None self)"""
        return int()
    def timerEvent(self, _event):
        """None QTableView.timerEvent(None self, QTimerEvent _event)"""
        return None
    def paintEvent(self, _e):
        """None QTableView.paintEvent(None self, QPaintEvent _e)"""
        return None
    def viewOptions(self):
        """QStyleOptionViewItem QTableView.viewOptions(None self)"""
        return QStyleOptionViewItem()
    def scrollContentsBy(self, _dx, _dy):
        """None QTableView.scrollContentsBy(None self, int _dx, int _dy)"""
        return None
    def columnCountChanged(self, _oldCount, _newCount):
        """None QTableView.columnCountChanged(None self, int _oldCount, int _newCount)"""
        return None
    def rowCountChanged(self, _oldCount, _newCount):
        """None QTableView.rowCountChanged(None self, int _oldCount, int _newCount)"""
        return None
    def columnResized(self, _column, _oldWidth, _newWidth):
        """None QTableView.columnResized(None self, int _column, int _oldWidth, int _newWidth)"""
        return None
    def rowResized(self, _row, _oldHeight, _newHeight):
        """None QTableView.rowResized(None self, int _row, int _oldHeight, int _newHeight)"""
        return None
    def columnMoved(self, _column, _oldIndex, _newIndex):
        """None QTableView.columnMoved(None self, int _column, int _oldIndex, int _newIndex)"""
        return None
    def rowMoved(self, _row, _oldIndex, _newIndex):
        """None QTableView.rowMoved(None self, int _row, int _oldIndex, int _newIndex)"""
        return None
    def sortByColumn(self, _column):
        """None QTableView.sortByColumn(None self, int _column)"""
        return None
    def sortByColumn(self, _column, _order):
        """None QTableView.sortByColumn(None self, int _column, Qt.SortOrder _order)"""
        return None
    def resizeColumnsToContents(self):
        """None QTableView.resizeColumnsToContents(None self)"""
        return None
    def resizeColumnToContents(self, _column):
        """None QTableView.resizeColumnToContents(None self, int _column)"""
        return None
    def resizeRowsToContents(self):
        """None QTableView.resizeRowsToContents(None self)"""
        return None
    def resizeRowToContents(self, _row):
        """None QTableView.resizeRowToContents(None self, int _row)"""
        return None
    def showColumn(self, _column):
        """None QTableView.showColumn(None self, int _column)"""
        return None
    def showRow(self, _row):
        """None QTableView.showRow(None self, int _row)"""
        return None
    def hideColumn(self, _column):
        """None QTableView.hideColumn(None self, int _column)"""
        return None
    def hideRow(self, _row):
        """None QTableView.hideRow(None self, int _row)"""
        return None
    def selectColumn(self, _column):
        """None QTableView.selectColumn(None self, int _column)"""
        return None
    def selectRow(self, _row):
        """None QTableView.selectRow(None self, int _row)"""
        return None
    def indexAt(self, _p):
        """QModelIndex QTableView.indexAt(None self, QPoint _p)"""
        return QModelIndex()
    def scrollTo(self, _index, _hint):
        """None QTableView.scrollTo(None self, QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def visualRect(self, _index):
        """QRect QTableView.visualRect(None self, QModelIndex _index)"""
        return QRect()
    def setGridStyle(self, _style):
        """None QTableView.setGridStyle(None self, Qt.PenStyle _style)"""
        return None
    def gridStyle(self):
        """Qt.PenStyle QTableView.gridStyle(None self)"""
        return Qt.PenStyle()
    def setShowGrid(self, _show):
        """None QTableView.setShowGrid(None self, bool _show)"""
        return None
    def showGrid(self):
        """bool QTableView.showGrid(None self)"""
        return bool()
    def setColumnHidden(self, _column, _hide):
        """None QTableView.setColumnHidden(None self, int _column, bool _hide)"""
        return None
    def isColumnHidden(self, _column):
        """bool QTableView.isColumnHidden(None self, int _column)"""
        return bool()
    def setRowHidden(self, _row, _hide):
        """None QTableView.setRowHidden(None self, int _row, bool _hide)"""
        return None
    def isRowHidden(self, _row):
        """bool QTableView.isRowHidden(None self, int _row)"""
        return bool()
    def columnAt(self, _x):
        """int QTableView.columnAt(None self, int _x)"""
        return int()
    def columnWidth(self, _column):
        """int QTableView.columnWidth(None self, int _column)"""
        return int()
    def setColumnWidth(self, _column, _width):
        """None QTableView.setColumnWidth(None self, int _column, int _width)"""
        return None
    def columnViewportPosition(self, _column):
        """int QTableView.columnViewportPosition(None self, int _column)"""
        return int()
    def rowAt(self, _y):
        """int QTableView.rowAt(None self, int _y)"""
        return int()
    def rowHeight(self, _row):
        """int QTableView.rowHeight(None self, int _row)"""
        return int()
    def setRowHeight(self, _row, _height):
        """None QTableView.setRowHeight(None self, int _row, int _height)"""
        return None
    def rowViewportPosition(self, _row):
        """int QTableView.rowViewportPosition(None self, int _row)"""
        return int()
    def setVerticalHeader(self, _header):
        """None QTableView.setVerticalHeader(None self, QHeaderView _header)"""
        return None
    def setHorizontalHeader(self, _header):
        """None QTableView.setHorizontalHeader(None self, QHeaderView _header)"""
        return None
    def verticalHeader(self):
        """QHeaderView QTableView.verticalHeader(None self)"""
        return QHeaderView()
    def horizontalHeader(self):
        """QHeaderView QTableView.horizontalHeader(None self)"""
        return QHeaderView()
    def setSelectionModel(self, _selectionModel):
        """None QTableView.setSelectionModel(None self, QItemSelectionModel _selectionModel)"""
        return None
    def setRootIndex(self, _index):
        """None QTableView.setRootIndex(None self, QModelIndex _index)"""
        return None
    def setModel(self, _model):
        """None QTableView.setModel(None self, QAbstractItemModel _model)"""
        return None


class QTableWidgetSelectionRange():
    """"""
    def __init__(self):
        """None QTableWidgetSelectionRange.__init__(None self)"""
        return None
    def __init__(self, _top, _left, _bottom, _right):
        """None QTableWidgetSelectionRange.__init__(None self, int _top, int _left, int _bottom, int _right)"""
        return None
    def __init__(self, _other):
        """None QTableWidgetSelectionRange.__init__(None self, QTableWidgetSelectionRange _other)"""
        return None
    def columnCount(self):
        """int QTableWidgetSelectionRange.columnCount(None self)"""
        return int()
    def rowCount(self):
        """int QTableWidgetSelectionRange.rowCount(None self)"""
        return int()
    def rightColumn(self):
        """int QTableWidgetSelectionRange.rightColumn(None self)"""
        return int()
    def leftColumn(self):
        """int QTableWidgetSelectionRange.leftColumn(None self)"""
        return int()
    def bottomRow(self):
        """int QTableWidgetSelectionRange.bottomRow(None self)"""
        return int()
    def topRow(self):
        """int QTableWidgetSelectionRange.topRow(None self)"""
        return int()


class QTableWidgetItem():
    """"""
    Type = int() # QTableWidgetItem.ItemType enum
    UserType = int() # QTableWidgetItem.ItemType enum

    def __init__(self, _type):
        """None QTableWidgetItem.__init__(None self, int _type)"""
        return None
    def __init__(self, _text, _type):
        """None QTableWidgetItem.__init__(None self, QString _text, int _type)"""
        return None
    def __init__(self, _icon, _text, _type):
        """None QTableWidgetItem.__init__(None self, QIcon _icon, QString _text, int _type)"""
        return None
    def __init__(self, _other):
        """None QTableWidgetItem.__init__(None self, QTableWidgetItem _other)"""
        return None
    def __ge__(self, _other):
        """bool QTableWidgetItem.__ge__(None self, QTableWidgetItem _other)"""
        return bool()
    def isSelected(self):
        """bool QTableWidgetItem.isSelected(None self)"""
        return bool()
    def setSelected(self, _aselect):
        """None QTableWidgetItem.setSelected(None self, bool _aselect)"""
        return None
    def column(self):
        """int QTableWidgetItem.column(None self)"""
        return int()
    def row(self):
        """int QTableWidgetItem.row(None self)"""
        return int()
    def setForeground(self, _brush):
        """None QTableWidgetItem.setForeground(None self, QBrush _brush)"""
        return None
    def foreground(self):
        """QBrush QTableWidgetItem.foreground(None self)"""
        return QBrush()
    def setBackground(self, _brush):
        """None QTableWidgetItem.setBackground(None self, QBrush _brush)"""
        return None
    def background(self):
        """QBrush QTableWidgetItem.background(None self)"""
        return QBrush()
    def setSizeHint(self, _size):
        """None QTableWidgetItem.setSizeHint(None self, QSize _size)"""
        return None
    def sizeHint(self):
        """QSize QTableWidgetItem.sizeHint(None self)"""
        return QSize()
    def setFont(self, _afont):
        """None QTableWidgetItem.setFont(None self, QFont _afont)"""
        return None
    def setWhatsThis(self, _awhatsThis):
        """None QTableWidgetItem.setWhatsThis(None self, QString _awhatsThis)"""
        return None
    def setToolTip(self, _atoolTip):
        """None QTableWidgetItem.setToolTip(None self, QString _atoolTip)"""
        return None
    def setStatusTip(self, _astatusTip):
        """None QTableWidgetItem.setStatusTip(None self, QString _astatusTip)"""
        return None
    def setIcon(self, _aicon):
        """None QTableWidgetItem.setIcon(None self, QIcon _aicon)"""
        return None
    def setText(self, _atext):
        """None QTableWidgetItem.setText(None self, QString _atext)"""
        return None
    def setFlags(self, _aflags):
        """None QTableWidgetItem.setFlags(None self, Qt.ItemFlags _aflags)"""
        return None
    def type(self):
        """int QTableWidgetItem.type(None self)"""
        return int()
    def write(self, _out):
        """None QTableWidgetItem.write(None self, QDataStream _out)"""
        return None
    def read(self, _in):
        """None QTableWidgetItem.read(None self, QDataStream _in)"""
        return None
    def __lt__(self, _other):
        """bool QTableWidgetItem.__lt__(None self, QTableWidgetItem _other)"""
        return bool()
    def setData(self, _role, _value):
        """None QTableWidgetItem.setData(None self, int _role, QVariant _value)"""
        return None
    def data(self, _role):
        """QVariant QTableWidgetItem.data(None self, int _role)"""
        return QVariant()
    def setCheckState(self, _state):
        """None QTableWidgetItem.setCheckState(None self, Qt.CheckState _state)"""
        return None
    def checkState(self):
        """Qt.CheckState QTableWidgetItem.checkState(None self)"""
        return Qt.CheckState()
    def setTextColor(self, _color):
        """None QTableWidgetItem.setTextColor(None self, QColor _color)"""
        return None
    def textColor(self):
        """QColor QTableWidgetItem.textColor(None self)"""
        return QColor()
    def setBackgroundColor(self, _color):
        """None QTableWidgetItem.setBackgroundColor(None self, QColor _color)"""
        return None
    def backgroundColor(self):
        """QColor QTableWidgetItem.backgroundColor(None self)"""
        return QColor()
    def setTextAlignment(self, _alignment):
        """None QTableWidgetItem.setTextAlignment(None self, int _alignment)"""
        return None
    def textAlignment(self):
        """int QTableWidgetItem.textAlignment(None self)"""
        return int()
    def font(self):
        """QFont QTableWidgetItem.font(None self)"""
        return QFont()
    def whatsThis(self):
        """QString QTableWidgetItem.whatsThis(None self)"""
        return QString()
    def toolTip(self):
        """QString QTableWidgetItem.toolTip(None self)"""
        return QString()
    def statusTip(self):
        """QString QTableWidgetItem.statusTip(None self)"""
        return QString()
    def icon(self):
        """QIcon QTableWidgetItem.icon(None self)"""
        return QIcon()
    def text(self):
        """QString QTableWidgetItem.text(None self)"""
        return QString()
    def flags(self):
        """Qt.ItemFlags QTableWidgetItem.flags(None self)"""
        return Qt.ItemFlags()
    def tableWidget(self):
        """QTableWidget QTableWidgetItem.tableWidget(None self)"""
        return QTableWidget()
    def clone(self):
        """QTableWidgetItem QTableWidgetItem.clone(None self)"""
        return QTableWidgetItem()


class QTableWidget(QTableView):
    """"""
    def __init__(self, _parent):
        """None QTableWidget.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _rows, _columns, _parent):
        """None QTableWidget.__init__(None self, int _rows, int _columns, QWidget _parent)"""
        return None
    def dropEvent(self, _event):
        """None QTableWidget.dropEvent(None self, QDropEvent _event)"""
        return None
    def event(self, _e):
        """bool QTableWidget.event(None self, QEvent _e)"""
        return bool()
    def itemFromIndex(self, _index):
        """QTableWidgetItem QTableWidget.itemFromIndex(None self, QModelIndex _index)"""
        return QTableWidgetItem()
    def indexFromItem(self, _item):
        """QModelIndex QTableWidget.indexFromItem(None self, QTableWidgetItem _item)"""
        return QModelIndex()
    def items(self, _data):
        """list-of-QTableWidgetItem QTableWidget.items(None self, QMimeData _data)"""
        return [QTableWidgetItem()]
    def supportedDropActions(self):
        """Qt.DropActions QTableWidget.supportedDropActions(None self)"""
        return Qt.DropActions()
    def dropMimeData(self, _row, _column, _data, _action):
        """bool QTableWidget.dropMimeData(None self, int _row, int _column, QMimeData _data, Qt.DropAction _action)"""
        return bool()
    def mimeData(self, _items):
        """QMimeData QTableWidget.mimeData(None self, list-of-QTableWidgetItem _items)"""
        return QMimeData()
    def mimeTypes(self):
        """QStringList QTableWidget.mimeTypes(None self)"""
        return QStringList()
    def clearContents(self):
        """None QTableWidget.clearContents(None self)"""
        return None
    def clear(self):
        """None QTableWidget.clear(None self)"""
        return None
    def removeColumn(self, _column):
        """None QTableWidget.removeColumn(None self, int _column)"""
        return None
    def removeRow(self, _row):
        """None QTableWidget.removeRow(None self, int _row)"""
        return None
    def insertColumn(self, _column):
        """None QTableWidget.insertColumn(None self, int _column)"""
        return None
    def insertRow(self, _row):
        """None QTableWidget.insertRow(None self, int _row)"""
        return None
    def scrollToItem(self, _item, _hint):
        """None QTableWidget.scrollToItem(None self, QTableWidgetItem _item, QAbstractItemView.ScrollHint _hint)"""
        return None
    def setItemPrototype(self, _item):
        """None QTableWidget.setItemPrototype(None self, QTableWidgetItem _item)"""
        return None
    def itemPrototype(self):
        """QTableWidgetItem QTableWidget.itemPrototype(None self)"""
        return QTableWidgetItem()
    def visualItemRect(self, _item):
        """QRect QTableWidget.visualItemRect(None self, QTableWidgetItem _item)"""
        return QRect()
    def itemAt(self, _p):
        """QTableWidgetItem QTableWidget.itemAt(None self, QPoint _p)"""
        return QTableWidgetItem()
    def itemAt(self, _ax, _ay):
        """QTableWidgetItem QTableWidget.itemAt(None self, int _ax, int _ay)"""
        return QTableWidgetItem()
    def visualColumn(self, _logicalColumn):
        """int QTableWidget.visualColumn(None self, int _logicalColumn)"""
        return int()
    def visualRow(self, _logicalRow):
        """int QTableWidget.visualRow(None self, int _logicalRow)"""
        return int()
    def findItems(self, _text, _flags):
        """list-of-QTableWidgetItem QTableWidget.findItems(None self, QString _text, Qt.MatchFlags _flags)"""
        return [QTableWidgetItem()]
    def selectedItems(self):
        """list-of-QTableWidgetItem QTableWidget.selectedItems(None self)"""
        return [QTableWidgetItem()]
    def selectedRanges(self):
        """list-of-QTableWidgetSelectionRange QTableWidget.selectedRanges(None self)"""
        return [QTableWidgetSelectionRange()]
    def setRangeSelected(self, _range, _select):
        """None QTableWidget.setRangeSelected(None self, QTableWidgetSelectionRange _range, bool _select)"""
        return None
    def setItemSelected(self, _item, _select):
        """None QTableWidget.setItemSelected(None self, QTableWidgetItem _item, bool _select)"""
        return None
    def isItemSelected(self, _item):
        """bool QTableWidget.isItemSelected(None self, QTableWidgetItem _item)"""
        return bool()
    def removeCellWidget(self, _arow, _acolumn):
        """None QTableWidget.removeCellWidget(None self, int _arow, int _acolumn)"""
        return None
    def setCellWidget(self, _row, _column, _widget):
        """None QTableWidget.setCellWidget(None self, int _row, int _column, QWidget _widget)"""
        return None
    def cellWidget(self, _row, _column):
        """QWidget QTableWidget.cellWidget(None self, int _row, int _column)"""
        return QWidget()
    def closePersistentEditor(self, _item):
        """None QTableWidget.closePersistentEditor(None self, QTableWidgetItem _item)"""
        return None
    def openPersistentEditor(self, _item):
        """None QTableWidget.openPersistentEditor(None self, QTableWidgetItem _item)"""
        return None
    def editItem(self, _item):
        """None QTableWidget.editItem(None self, QTableWidgetItem _item)"""
        return None
    def isSortingEnabled(self):
        """bool QTableWidget.isSortingEnabled(None self)"""
        return bool()
    def setSortingEnabled(self, _enable):
        """None QTableWidget.setSortingEnabled(None self, bool _enable)"""
        return None
    def sortItems(self, _column, _order):
        """None QTableWidget.sortItems(None self, int _column, Qt.SortOrder _order)"""
        return None
    def setCurrentCell(self, _row, _column):
        """None QTableWidget.setCurrentCell(None self, int _row, int _column)"""
        return None
    def setCurrentCell(self, _row, _column, _command):
        """None QTableWidget.setCurrentCell(None self, int _row, int _column, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def setCurrentItem(self, _item):
        """None QTableWidget.setCurrentItem(None self, QTableWidgetItem _item)"""
        return None
    def setCurrentItem(self, _item, _command):
        """None QTableWidget.setCurrentItem(None self, QTableWidgetItem _item, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def currentItem(self):
        """QTableWidgetItem QTableWidget.currentItem(None self)"""
        return QTableWidgetItem()
    def currentColumn(self):
        """int QTableWidget.currentColumn(None self)"""
        return int()
    def currentRow(self):
        """int QTableWidget.currentRow(None self)"""
        return int()
    def setHorizontalHeaderLabels(self, _labels):
        """None QTableWidget.setHorizontalHeaderLabels(None self, QStringList _labels)"""
        return None
    def setVerticalHeaderLabels(self, _labels):
        """None QTableWidget.setVerticalHeaderLabels(None self, QStringList _labels)"""
        return None
    def takeHorizontalHeaderItem(self, _column):
        """QTableWidgetItem QTableWidget.takeHorizontalHeaderItem(None self, int _column)"""
        return QTableWidgetItem()
    def setHorizontalHeaderItem(self, _column, _item):
        """None QTableWidget.setHorizontalHeaderItem(None self, int _column, QTableWidgetItem _item)"""
        return None
    def horizontalHeaderItem(self, _column):
        """QTableWidgetItem QTableWidget.horizontalHeaderItem(None self, int _column)"""
        return QTableWidgetItem()
    def takeVerticalHeaderItem(self, _row):
        """QTableWidgetItem QTableWidget.takeVerticalHeaderItem(None self, int _row)"""
        return QTableWidgetItem()
    def setVerticalHeaderItem(self, _row, _item):
        """None QTableWidget.setVerticalHeaderItem(None self, int _row, QTableWidgetItem _item)"""
        return None
    def verticalHeaderItem(self, _row):
        """QTableWidgetItem QTableWidget.verticalHeaderItem(None self, int _row)"""
        return QTableWidgetItem()
    def takeItem(self, _row, _column):
        """QTableWidgetItem QTableWidget.takeItem(None self, int _row, int _column)"""
        return QTableWidgetItem()
    def setItem(self, _row, _column, _item):
        """None QTableWidget.setItem(None self, int _row, int _column, QTableWidgetItem _item)"""
        return None
    def item(self, _row, _column):
        """QTableWidgetItem QTableWidget.item(None self, int _row, int _column)"""
        return QTableWidgetItem()
    def column(self, _item):
        """int QTableWidget.column(None self, QTableWidgetItem _item)"""
        return int()
    def row(self, _item):
        """int QTableWidget.row(None self, QTableWidgetItem _item)"""
        return int()
    def columnCount(self):
        """int QTableWidget.columnCount(None self)"""
        return int()
    def setColumnCount(self, _columns):
        """None QTableWidget.setColumnCount(None self, int _columns)"""
        return None
    def rowCount(self):
        """int QTableWidget.rowCount(None self)"""
        return int()
    def setRowCount(self, _rows):
        """None QTableWidget.setRowCount(None self, int _rows)"""
        return None


class QTabWidget(QWidget):
    """"""
    Rounded = int() # QTabWidget.TabShape enum
    Triangular = int() # QTabWidget.TabShape enum

    North = int() # QTabWidget.TabPosition enum
    South = int() # QTabWidget.TabPosition enum
    West = int() # QTabWidget.TabPosition enum
    East = int() # QTabWidget.TabPosition enum

    def __init__(self, _parent):
        """None QTabWidget.__init__(None self, QWidget _parent)"""
        return None
    def setDocumentMode(self, _set):
        """None QTabWidget.setDocumentMode(None self, bool _set)"""
        return None
    def documentMode(self):
        """bool QTabWidget.documentMode(None self)"""
        return bool()
    def setMovable(self, _movable):
        """None QTabWidget.setMovable(None self, bool _movable)"""
        return None
    def isMovable(self):
        """bool QTabWidget.isMovable(None self)"""
        return bool()
    def setTabsClosable(self, _closeable):
        """None QTabWidget.setTabsClosable(None self, bool _closeable)"""
        return None
    def tabsClosable(self):
        """bool QTabWidget.tabsClosable(None self)"""
        return bool()
    def setUsesScrollButtons(self, _useButtons):
        """None QTabWidget.setUsesScrollButtons(None self, bool _useButtons)"""
        return None
    def usesScrollButtons(self):
        """bool QTabWidget.usesScrollButtons(None self)"""
        return bool()
    def setIconSize(self, _size):
        """None QTabWidget.setIconSize(None self, QSize _size)"""
        return None
    def iconSize(self):
        """QSize QTabWidget.iconSize(None self)"""
        return QSize()
    def setElideMode(self):
        """Qt.TextElideMode QTabWidget.setElideMode(None self)"""
        return Qt.TextElideMode()
    def elideMode(self):
        """Qt.TextElideMode QTabWidget.elideMode(None self)"""
        return Qt.TextElideMode()
    def changeEvent(self):
        """QEvent QTabWidget.changeEvent(None self)"""
        return QEvent()
    def tabBar(self):
        """QTabBar QTabWidget.tabBar(None self)"""
        return QTabBar()
    def setTabBar(self):
        """QTabBar QTabWidget.setTabBar(None self)"""
        return QTabBar()
    def paintEvent(self):
        """QPaintEvent QTabWidget.paintEvent(None self)"""
        return QPaintEvent()
    def keyPressEvent(self):
        """QKeyEvent QTabWidget.keyPressEvent(None self)"""
        return QKeyEvent()
    def resizeEvent(self):
        """QResizeEvent QTabWidget.resizeEvent(None self)"""
        return QResizeEvent()
    def showEvent(self):
        """QShowEvent QTabWidget.showEvent(None self)"""
        return QShowEvent()
    def event(self):
        """QEvent QTabWidget.event(None self)"""
        return QEvent()
    def tabRemoved(self, _index):
        """None QTabWidget.tabRemoved(None self, int _index)"""
        return None
    def tabInserted(self, _index):
        """None QTabWidget.tabInserted(None self, int _index)"""
        return None
    def initStyleOption(self, _option):
        """None QTabWidget.initStyleOption(None self, QStyleOptionTabWidgetFrame _option)"""
        return None
    def setCurrentWidget(self, _widget):
        """None QTabWidget.setCurrentWidget(None self, QWidget _widget)"""
        return None
    def setCurrentIndex(self, _index):
        """None QTabWidget.setCurrentIndex(None self, int _index)"""
        return None
    def cornerWidget(self, _corner):
        """QWidget QTabWidget.cornerWidget(None self, Qt.Corner _corner)"""
        return QWidget()
    def setCornerWidget(self, _widget, _corner):
        """None QTabWidget.setCornerWidget(None self, QWidget _widget, Qt.Corner _corner)"""
        return None
    def minimumSizeHint(self):
        """QSize QTabWidget.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QTabWidget.sizeHint(None self)"""
        return QSize()
    def setTabShape(self, _s):
        """None QTabWidget.setTabShape(None self, QTabWidget.TabShape _s)"""
        return None
    def tabShape(self):
        """QTabWidget.TabShape QTabWidget.tabShape(None self)"""
        return QTabWidget.TabShape()
    def setTabPosition(self):
        """QTabWidget.TabPosition QTabWidget.setTabPosition(None self)"""
        return QTabWidget.TabPosition()
    def tabPosition(self):
        """QTabWidget.TabPosition QTabWidget.tabPosition(None self)"""
        return QTabWidget.TabPosition()
    def __len__(self):
        """ QTabWidget.__len__(None self)"""
        return ()
    def count(self):
        """int QTabWidget.count(None self)"""
        return int()
    def indexOf(self, _widget):
        """int QTabWidget.indexOf(None self, QWidget _widget)"""
        return int()
    def widget(self, _index):
        """QWidget QTabWidget.widget(None self, int _index)"""
        return QWidget()
    def currentWidget(self):
        """QWidget QTabWidget.currentWidget(None self)"""
        return QWidget()
    def currentIndex(self):
        """int QTabWidget.currentIndex(None self)"""
        return int()
    def tabWhatsThis(self, _index):
        """QString QTabWidget.tabWhatsThis(None self, int _index)"""
        return QString()
    def setTabWhatsThis(self, _index, _text):
        """None QTabWidget.setTabWhatsThis(None self, int _index, QString _text)"""
        return None
    def tabToolTip(self, _index):
        """QString QTabWidget.tabToolTip(None self, int _index)"""
        return QString()
    def setTabToolTip(self, _index, _tip):
        """None QTabWidget.setTabToolTip(None self, int _index, QString _tip)"""
        return None
    def setTabIcon(self, _index, _icon):
        """None QTabWidget.setTabIcon(None self, int _index, QIcon _icon)"""
        return None
    def tabIcon(self, _index):
        """QIcon QTabWidget.tabIcon(None self, int _index)"""
        return QIcon()
    def setTabText(self, _index):
        """QString QTabWidget.setTabText(None self, int _index)"""
        return QString()
    def tabText(self, _index):
        """QString QTabWidget.tabText(None self, int _index)"""
        return QString()
    def setTabEnabled(self, _index):
        """bool QTabWidget.setTabEnabled(None self, int _index)"""
        return bool()
    def isTabEnabled(self, _index):
        """bool QTabWidget.isTabEnabled(None self, int _index)"""
        return bool()
    def removeTab(self, _index):
        """None QTabWidget.removeTab(None self, int _index)"""
        return None
    def insertTab(self, _index, _widget):
        """QString QTabWidget.insertTab(None self, int _index, QWidget _widget)"""
        return QString()
    def insertTab(self, _index, _widget, _icon, _label):
        """int QTabWidget.insertTab(None self, int _index, QWidget _widget, QIcon _icon, QString _label)"""
        return int()
    def addTab(self, _widget):
        """QString QTabWidget.addTab(None self, QWidget _widget)"""
        return QString()
    def addTab(self, _widget, _icon, _label):
        """int QTabWidget.addTab(None self, QWidget _widget, QIcon _icon, QString _label)"""
        return int()
    def clear(self):
        """None QTabWidget.clear(None self)"""
        return None


class QTextEdit(QAbstractScrollArea):
    """"""
    AutoNone = int() # QTextEdit.AutoFormattingFlag enum
    AutoBulletList = int() # QTextEdit.AutoFormattingFlag enum
    AutoAll = int() # QTextEdit.AutoFormattingFlag enum

    NoWrap = int() # QTextEdit.LineWrapMode enum
    WidgetWidth = int() # QTextEdit.LineWrapMode enum
    FixedPixelWidth = int() # QTextEdit.LineWrapMode enum
    FixedColumnWidth = int() # QTextEdit.LineWrapMode enum

    def __init__(self, _parent):
        """None QTextEdit.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _text, _parent):
        """None QTextEdit.__init__(None self, QString _text, QWidget _parent)"""
        return None
    def setTextBackgroundColor(self, _c):
        """None QTextEdit.setTextBackgroundColor(None self, QColor _c)"""
        return None
    def textBackgroundColor(self):
        """QColor QTextEdit.textBackgroundColor(None self)"""
        return QColor()
    def scrollContentsBy(self, _dx, _dy):
        """None QTextEdit.scrollContentsBy(None self, int _dx, int _dy)"""
        return None
    def inputMethodQuery(self, _property):
        """QVariant QTextEdit.inputMethodQuery(None self, Qt.InputMethodQuery _property)"""
        return QVariant()
    def inputMethodEvent(self):
        """QInputMethodEvent QTextEdit.inputMethodEvent(None self)"""
        return QInputMethodEvent()
    def insertFromMimeData(self, _source):
        """None QTextEdit.insertFromMimeData(None self, QMimeData _source)"""
        return None
    def canInsertFromMimeData(self, _source):
        """bool QTextEdit.canInsertFromMimeData(None self, QMimeData _source)"""
        return bool()
    def createMimeDataFromSelection(self):
        """QMimeData QTextEdit.createMimeDataFromSelection(None self)"""
        return QMimeData()
    def wheelEvent(self, _e):
        """None QTextEdit.wheelEvent(None self, QWheelEvent _e)"""
        return None
    def changeEvent(self, _e):
        """None QTextEdit.changeEvent(None self, QEvent _e)"""
        return None
    def showEvent(self):
        """QShowEvent QTextEdit.showEvent(None self)"""
        return QShowEvent()
    def focusOutEvent(self, _e):
        """None QTextEdit.focusOutEvent(None self, QFocusEvent _e)"""
        return None
    def focusInEvent(self, _e):
        """None QTextEdit.focusInEvent(None self, QFocusEvent _e)"""
        return None
    def dropEvent(self, _e):
        """None QTextEdit.dropEvent(None self, QDropEvent _e)"""
        return None
    def dragMoveEvent(self, _e):
        """None QTextEdit.dragMoveEvent(None self, QDragMoveEvent _e)"""
        return None
    def dragLeaveEvent(self, _e):
        """None QTextEdit.dragLeaveEvent(None self, QDragLeaveEvent _e)"""
        return None
    def dragEnterEvent(self, _e):
        """None QTextEdit.dragEnterEvent(None self, QDragEnterEvent _e)"""
        return None
    def contextMenuEvent(self, _e):
        """None QTextEdit.contextMenuEvent(None self, QContextMenuEvent _e)"""
        return None
    def focusNextPrevChild(self, _next):
        """bool QTextEdit.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def mouseDoubleClickEvent(self, _e):
        """None QTextEdit.mouseDoubleClickEvent(None self, QMouseEvent _e)"""
        return None
    def mouseReleaseEvent(self, _e):
        """None QTextEdit.mouseReleaseEvent(None self, QMouseEvent _e)"""
        return None
    def mouseMoveEvent(self, _e):
        """None QTextEdit.mouseMoveEvent(None self, QMouseEvent _e)"""
        return None
    def mousePressEvent(self, _e):
        """None QTextEdit.mousePressEvent(None self, QMouseEvent _e)"""
        return None
    def paintEvent(self, _e):
        """None QTextEdit.paintEvent(None self, QPaintEvent _e)"""
        return None
    def resizeEvent(self):
        """QResizeEvent QTextEdit.resizeEvent(None self)"""
        return QResizeEvent()
    def keyReleaseEvent(self, _e):
        """None QTextEdit.keyReleaseEvent(None self, QKeyEvent _e)"""
        return None
    def keyPressEvent(self, _e):
        """None QTextEdit.keyPressEvent(None self, QKeyEvent _e)"""
        return None
    def timerEvent(self, _e):
        """None QTextEdit.timerEvent(None self, QTimerEvent _e)"""
        return None
    def event(self, _e):
        """bool QTextEdit.event(None self, QEvent _e)"""
        return bool()
    def zoomOut(self, _range):
        """None QTextEdit.zoomOut(None self, int _range)"""
        return None
    def zoomIn(self, _range):
        """None QTextEdit.zoomIn(None self, int _range)"""
        return None
    def undo(self):
        """None QTextEdit.undo(None self)"""
        return None
    def redo(self):
        """None QTextEdit.redo(None self)"""
        return None
    def scrollToAnchor(self, _name):
        """None QTextEdit.scrollToAnchor(None self, QString _name)"""
        return None
    def insertHtml(self, _text):
        """None QTextEdit.insertHtml(None self, QString _text)"""
        return None
    def insertPlainText(self, _text):
        """None QTextEdit.insertPlainText(None self, QString _text)"""
        return None
    def selectAll(self):
        """None QTextEdit.selectAll(None self)"""
        return None
    def clear(self):
        """None QTextEdit.clear(None self)"""
        return None
    def paste(self):
        """None QTextEdit.paste(None self)"""
        return None
    def copy(self):
        """None QTextEdit.copy(None self)"""
        return None
    def cut(self):
        """None QTextEdit.cut(None self)"""
        return None
    def setHtml(self, _text):
        """None QTextEdit.setHtml(None self, QString _text)"""
        return None
    def setPlainText(self, _text):
        """None QTextEdit.setPlainText(None self, QString _text)"""
        return None
    def setAlignment(self, _a):
        """None QTextEdit.setAlignment(None self, Qt.Alignment _a)"""
        return None
    def setCurrentFont(self, _f):
        """None QTextEdit.setCurrentFont(None self, QFont _f)"""
        return None
    def setTextColor(self, _c):
        """None QTextEdit.setTextColor(None self, QColor _c)"""
        return None
    def setText(self, _text):
        """None QTextEdit.setText(None self, QString _text)"""
        return None
    def setFontItalic(self, _b):
        """None QTextEdit.setFontItalic(None self, bool _b)"""
        return None
    def setFontUnderline(self, _b):
        """None QTextEdit.setFontUnderline(None self, bool _b)"""
        return None
    def setFontWeight(self, _w):
        """None QTextEdit.setFontWeight(None self, int _w)"""
        return None
    def setFontFamily(self, _fontFamily):
        """None QTextEdit.setFontFamily(None self, QString _fontFamily)"""
        return None
    def setFontPointSize(self, _s):
        """None QTextEdit.setFontPointSize(None self, float _s)"""
        return None
    def print_(self, _printer):
        """None QTextEdit.print_(None self, QPrinter _printer)"""
        return None
    def moveCursor(self, _operation, _mode):
        """None QTextEdit.moveCursor(None self, QTextCursor.MoveOperation _operation, QTextCursor.MoveMode _mode)"""
        return None
    def canPaste(self):
        """bool QTextEdit.canPaste(None self)"""
        return bool()
    def extraSelections(self):
        """list-of-QTextEdit.ExtraSelection QTextEdit.extraSelections(None self)"""
        return [QTextEdit.ExtraSelection()]
    def setExtraSelections(self, _selections):
        """None QTextEdit.setExtraSelections(None self, list-of-QTextEdit.ExtraSelection _selections)"""
        return None
    def cursorWidth(self):
        """int QTextEdit.cursorWidth(None self)"""
        return int()
    def setCursorWidth(self, _width):
        """None QTextEdit.setCursorWidth(None self, int _width)"""
        return None
    def textInteractionFlags(self):
        """Qt.TextInteractionFlags QTextEdit.textInteractionFlags(None self)"""
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(self, _flags):
        """None QTextEdit.setTextInteractionFlags(None self, Qt.TextInteractionFlags _flags)"""
        return None
    def setAcceptRichText(self, _accept):
        """None QTextEdit.setAcceptRichText(None self, bool _accept)"""
        return None
    def acceptRichText(self):
        """bool QTextEdit.acceptRichText(None self)"""
        return bool()
    def setTabStopWidth(self, _width):
        """None QTextEdit.setTabStopWidth(None self, int _width)"""
        return None
    def tabStopWidth(self):
        """int QTextEdit.tabStopWidth(None self)"""
        return int()
    def setOverwriteMode(self, _overwrite):
        """None QTextEdit.setOverwriteMode(None self, bool _overwrite)"""
        return None
    def overwriteMode(self):
        """bool QTextEdit.overwriteMode(None self)"""
        return bool()
    def anchorAt(self, _pos):
        """QString QTextEdit.anchorAt(None self, QPoint _pos)"""
        return QString()
    def cursorRect(self, _cursor):
        """QRect QTextEdit.cursorRect(None self, QTextCursor _cursor)"""
        return QRect()
    def cursorRect(self):
        """QRect QTextEdit.cursorRect(None self)"""
        return QRect()
    def cursorForPosition(self, _pos):
        """QTextCursor QTextEdit.cursorForPosition(None self, QPoint _pos)"""
        return QTextCursor()
    def createStandardContextMenu(self):
        """QMenu QTextEdit.createStandardContextMenu(None self)"""
        return QMenu()
    def createStandardContextMenu(self, _position):
        """QMenu QTextEdit.createStandardContextMenu(None self, QPoint _position)"""
        return QMenu()
    def loadResource(self, _type, _name):
        """QVariant QTextEdit.loadResource(None self, int _type, QUrl _name)"""
        return QVariant()
    def ensureCursorVisible(self):
        """None QTextEdit.ensureCursorVisible(None self)"""
        return None
    def append(self, _text):
        """None QTextEdit.append(None self, QString _text)"""
        return None
    def toHtml(self):
        """QString QTextEdit.toHtml(None self)"""
        return QString()
    def toPlainText(self):
        """QString QTextEdit.toPlainText(None self)"""
        return QString()
    def find(self, _exp, _options):
        """bool QTextEdit.find(None self, QString _exp, QTextDocument.FindFlags _options)"""
        return bool()
    def setWordWrapMode(self, _policy):
        """None QTextEdit.setWordWrapMode(None self, QTextOption.WrapMode _policy)"""
        return None
    def wordWrapMode(self):
        """QTextOption.WrapMode QTextEdit.wordWrapMode(None self)"""
        return QTextOption.WrapMode()
    def setLineWrapColumnOrWidth(self, _w):
        """None QTextEdit.setLineWrapColumnOrWidth(None self, int _w)"""
        return None
    def lineWrapColumnOrWidth(self):
        """int QTextEdit.lineWrapColumnOrWidth(None self)"""
        return int()
    def setLineWrapMode(self, _mode):
        """None QTextEdit.setLineWrapMode(None self, QTextEdit.LineWrapMode _mode)"""
        return None
    def lineWrapMode(self):
        """QTextEdit.LineWrapMode QTextEdit.lineWrapMode(None self)"""
        return QTextEdit.LineWrapMode()
    def setUndoRedoEnabled(self, _enable):
        """None QTextEdit.setUndoRedoEnabled(None self, bool _enable)"""
        return None
    def isUndoRedoEnabled(self):
        """bool QTextEdit.isUndoRedoEnabled(None self)"""
        return bool()
    def documentTitle(self):
        """QString QTextEdit.documentTitle(None self)"""
        return QString()
    def setDocumentTitle(self, _title):
        """None QTextEdit.setDocumentTitle(None self, QString _title)"""
        return None
    def setTabChangesFocus(self, _b):
        """None QTextEdit.setTabChangesFocus(None self, bool _b)"""
        return None
    def tabChangesFocus(self):
        """bool QTextEdit.tabChangesFocus(None self)"""
        return bool()
    def setAutoFormatting(self, _features):
        """None QTextEdit.setAutoFormatting(None self, QTextEdit.AutoFormatting _features)"""
        return None
    def autoFormatting(self):
        """QTextEdit.AutoFormatting QTextEdit.autoFormatting(None self)"""
        return QTextEdit.AutoFormatting()
    def currentCharFormat(self):
        """QTextCharFormat QTextEdit.currentCharFormat(None self)"""
        return QTextCharFormat()
    def setCurrentCharFormat(self, _format):
        """None QTextEdit.setCurrentCharFormat(None self, QTextCharFormat _format)"""
        return None
    def mergeCurrentCharFormat(self, _modifier):
        """None QTextEdit.mergeCurrentCharFormat(None self, QTextCharFormat _modifier)"""
        return None
    def alignment(self):
        """Qt.Alignment QTextEdit.alignment(None self)"""
        return Qt.Alignment()
    def currentFont(self):
        """QFont QTextEdit.currentFont(None self)"""
        return QFont()
    def textColor(self):
        """QColor QTextEdit.textColor(None self)"""
        return QColor()
    def fontItalic(self):
        """bool QTextEdit.fontItalic(None self)"""
        return bool()
    def fontUnderline(self):
        """bool QTextEdit.fontUnderline(None self)"""
        return bool()
    def fontWeight(self):
        """int QTextEdit.fontWeight(None self)"""
        return int()
    def fontFamily(self):
        """QString QTextEdit.fontFamily(None self)"""
        return QString()
    def fontPointSize(self):
        """float QTextEdit.fontPointSize(None self)"""
        return float()
    def setReadOnly(self, _ro):
        """None QTextEdit.setReadOnly(None self, bool _ro)"""
        return None
    def isReadOnly(self):
        """bool QTextEdit.isReadOnly(None self)"""
        return bool()
    def textCursor(self):
        """QTextCursor QTextEdit.textCursor(None self)"""
        return QTextCursor()
    def setTextCursor(self, _cursor):
        """None QTextEdit.setTextCursor(None self, QTextCursor _cursor)"""
        return None
    def document(self):
        """QTextDocument QTextEdit.document(None self)"""
        return QTextDocument()
    def setDocument(self, _document):
        """None QTextEdit.setDocument(None self, QTextDocument _document)"""
        return None


class QTextBrowser(QTextEdit):
    """"""
    def __init__(self, _parent):
        """None QTextBrowser.__init__(None self, QWidget _parent)"""
        return None
    def forwardHistoryCount(self):
        """int QTextBrowser.forwardHistoryCount(None self)"""
        return int()
    def backwardHistoryCount(self):
        """int QTextBrowser.backwardHistoryCount(None self)"""
        return int()
    def historyUrl(self):
        """int QTextBrowser.historyUrl(None self)"""
        return int()
    def historyTitle(self):
        """int QTextBrowser.historyTitle(None self)"""
        return int()
    def setOpenLinks(self, _open):
        """None QTextBrowser.setOpenLinks(None self, bool _open)"""
        return None
    def openLinks(self):
        """bool QTextBrowser.openLinks(None self)"""
        return bool()
    def setOpenExternalLinks(self, _open):
        """None QTextBrowser.setOpenExternalLinks(None self, bool _open)"""
        return None
    def openExternalLinks(self):
        """bool QTextBrowser.openExternalLinks(None self)"""
        return bool()
    def clearHistory(self):
        """None QTextBrowser.clearHistory(None self)"""
        return None
    def isForwardAvailable(self):
        """bool QTextBrowser.isForwardAvailable(None self)"""
        return bool()
    def isBackwardAvailable(self):
        """bool QTextBrowser.isBackwardAvailable(None self)"""
        return bool()
    def paintEvent(self, _e):
        """None QTextBrowser.paintEvent(None self, QPaintEvent _e)"""
        return None
    def focusNextPrevChild(self, _next):
        """bool QTextBrowser.focusNextPrevChild(None self, bool _next)"""
        return bool()
    def focusOutEvent(self, _ev):
        """None QTextBrowser.focusOutEvent(None self, QFocusEvent _ev)"""
        return None
    def mouseReleaseEvent(self, _ev):
        """None QTextBrowser.mouseReleaseEvent(None self, QMouseEvent _ev)"""
        return None
    def mousePressEvent(self, _ev):
        """None QTextBrowser.mousePressEvent(None self, QMouseEvent _ev)"""
        return None
    def mouseMoveEvent(self, _ev):
        """None QTextBrowser.mouseMoveEvent(None self, QMouseEvent _ev)"""
        return None
    def keyPressEvent(self, _ev):
        """None QTextBrowser.keyPressEvent(None self, QKeyEvent _ev)"""
        return None
    def event(self, _e):
        """bool QTextBrowser.event(None self, QEvent _e)"""
        return bool()
    def reload(self):
        """None QTextBrowser.reload(None self)"""
        return None
    def home(self):
        """None QTextBrowser.home(None self)"""
        return None
    def forward(self):
        """None QTextBrowser.forward(None self)"""
        return None
    def backward(self):
        """None QTextBrowser.backward(None self)"""
        return None
    def setSource(self, _name):
        """None QTextBrowser.setSource(None self, QUrl _name)"""
        return None
    def loadResource(self, _type, _name):
        """QVariant QTextBrowser.loadResource(None self, int _type, QUrl _name)"""
        return QVariant()
    def setSearchPaths(self, _paths):
        """None QTextBrowser.setSearchPaths(None self, QStringList _paths)"""
        return None
    def searchPaths(self):
        """QStringList QTextBrowser.searchPaths(None self)"""
        return QStringList()
    def source(self):
        """QUrl QTextBrowser.source(None self)"""
        return QUrl()


class QTextCursor():
    """"""
    WordUnderCursor = int() # QTextCursor.SelectionType enum
    LineUnderCursor = int() # QTextCursor.SelectionType enum
    BlockUnderCursor = int() # QTextCursor.SelectionType enum
    Document = int() # QTextCursor.SelectionType enum

    NoMove = int() # QTextCursor.MoveOperation enum
    Start = int() # QTextCursor.MoveOperation enum
    Up = int() # QTextCursor.MoveOperation enum
    StartOfLine = int() # QTextCursor.MoveOperation enum
    StartOfBlock = int() # QTextCursor.MoveOperation enum
    StartOfWord = int() # QTextCursor.MoveOperation enum
    PreviousBlock = int() # QTextCursor.MoveOperation enum
    PreviousCharacter = int() # QTextCursor.MoveOperation enum
    PreviousWord = int() # QTextCursor.MoveOperation enum
    Left = int() # QTextCursor.MoveOperation enum
    WordLeft = int() # QTextCursor.MoveOperation enum
    End = int() # QTextCursor.MoveOperation enum
    Down = int() # QTextCursor.MoveOperation enum
    EndOfLine = int() # QTextCursor.MoveOperation enum
    EndOfWord = int() # QTextCursor.MoveOperation enum
    EndOfBlock = int() # QTextCursor.MoveOperation enum
    NextBlock = int() # QTextCursor.MoveOperation enum
    NextCharacter = int() # QTextCursor.MoveOperation enum
    NextWord = int() # QTextCursor.MoveOperation enum
    Right = int() # QTextCursor.MoveOperation enum
    WordRight = int() # QTextCursor.MoveOperation enum
    NextCell = int() # QTextCursor.MoveOperation enum
    PreviousCell = int() # QTextCursor.MoveOperation enum
    NextRow = int() # QTextCursor.MoveOperation enum
    PreviousRow = int() # QTextCursor.MoveOperation enum

    MoveAnchor = int() # QTextCursor.MoveMode enum
    KeepAnchor = int() # QTextCursor.MoveMode enum

    def __init__(self):
        """None QTextCursor.__init__(None self)"""
        return None
    def __init__(self, _document):
        """None QTextCursor.__init__(None self, QTextDocument _document)"""
        return None
    def __init__(self, _frame):
        """None QTextCursor.__init__(None self, QTextFrame _frame)"""
        return None
    def __init__(self, _block):
        """None QTextCursor.__init__(None self, QTextBlock _block)"""
        return None
    def __init__(self, _cursor):
        """None QTextCursor.__init__(None self, QTextCursor _cursor)"""
        return None
    def keepPositionOnInsert(self):
        """bool QTextCursor.keepPositionOnInsert(None self)"""
        return bool()
    def setKeepPositionOnInsert(self, _b):
        """None QTextCursor.setKeepPositionOnInsert(None self, bool _b)"""
        return None
    def verticalMovementX(self):
        """int QTextCursor.verticalMovementX(None self)"""
        return int()
    def setVerticalMovementX(self, _x):
        """None QTextCursor.setVerticalMovementX(None self, int _x)"""
        return None
    def positionInBlock(self):
        """int QTextCursor.positionInBlock(None self)"""
        return int()
    def document(self):
        """QTextDocument QTextCursor.document(None self)"""
        return QTextDocument()
    def setVisualNavigation(self, _b):
        """None QTextCursor.setVisualNavigation(None self, bool _b)"""
        return None
    def visualNavigation(self):
        """bool QTextCursor.visualNavigation(None self)"""
        return bool()
    def isCopyOf(self, _other):
        """bool QTextCursor.isCopyOf(None self, QTextCursor _other)"""
        return bool()
    def __gt__(self, _rhs):
        """bool QTextCursor.__gt__(None self, QTextCursor _rhs)"""
        return bool()
    def __ge__(self, _rhs):
        """bool QTextCursor.__ge__(None self, QTextCursor _rhs)"""
        return bool()
    def __eq__(self, _rhs):
        """bool QTextCursor.__eq__(None self, QTextCursor _rhs)"""
        return bool()
    def __le__(self, _rhs):
        """bool QTextCursor.__le__(None self, QTextCursor _rhs)"""
        return bool()
    def __lt__(self, _rhs):
        """bool QTextCursor.__lt__(None self, QTextCursor _rhs)"""
        return bool()
    def __ne__(self, _rhs):
        """bool QTextCursor.__ne__(None self, QTextCursor _rhs)"""
        return bool()
    def columnNumber(self):
        """int QTextCursor.columnNumber(None self)"""
        return int()
    def blockNumber(self):
        """int QTextCursor.blockNumber(None self)"""
        return int()
    def endEditBlock(self):
        """None QTextCursor.endEditBlock(None self)"""
        return None
    def joinPreviousEditBlock(self):
        """None QTextCursor.joinPreviousEditBlock(None self)"""
        return None
    def beginEditBlock(self):
        """None QTextCursor.beginEditBlock(None self)"""
        return None
    def insertImage(self, _format):
        """None QTextCursor.insertImage(None self, QTextImageFormat _format)"""
        return None
    def insertImage(self, _format, _alignment):
        """None QTextCursor.insertImage(None self, QTextImageFormat _format, QTextFrameFormat.Position _alignment)"""
        return None
    def insertImage(self, _name):
        """None QTextCursor.insertImage(None self, QString _name)"""
        return None
    def insertImage(self, _image, _name):
        """None QTextCursor.insertImage(None self, QImage _image, QString _name)"""
        return None
    def insertHtml(self, _html):
        """None QTextCursor.insertHtml(None self, QString _html)"""
        return None
    def insertFragment(self, _fragment):
        """None QTextCursor.insertFragment(None self, QTextDocumentFragment _fragment)"""
        return None
    def currentFrame(self):
        """QTextFrame QTextCursor.currentFrame(None self)"""
        return QTextFrame()
    def insertFrame(self, _format):
        """QTextFrame QTextCursor.insertFrame(None self, QTextFrameFormat _format)"""
        return QTextFrame()
    def currentTable(self):
        """QTextTable QTextCursor.currentTable(None self)"""
        return QTextTable()
    def insertTable(self, _rows, _cols, _format):
        """QTextTable QTextCursor.insertTable(None self, int _rows, int _cols, QTextTableFormat _format)"""
        return QTextTable()
    def insertTable(self, _rows, _cols):
        """QTextTable QTextCursor.insertTable(None self, int _rows, int _cols)"""
        return QTextTable()
    def currentList(self):
        """QTextList QTextCursor.currentList(None self)"""
        return QTextList()
    def createList(self, _format):
        """QTextList QTextCursor.createList(None self, QTextListFormat _format)"""
        return QTextList()
    def createList(self, _style):
        """QTextList QTextCursor.createList(None self, QTextListFormat.Style _style)"""
        return QTextList()
    def insertList(self, _format):
        """QTextList QTextCursor.insertList(None self, QTextListFormat _format)"""
        return QTextList()
    def insertList(self, _style):
        """QTextList QTextCursor.insertList(None self, QTextListFormat.Style _style)"""
        return QTextList()
    def insertBlock(self):
        """None QTextCursor.insertBlock(None self)"""
        return None
    def insertBlock(self, _format):
        """None QTextCursor.insertBlock(None self, QTextBlockFormat _format)"""
        return None
    def insertBlock(self, _format, _charFormat):
        """None QTextCursor.insertBlock(None self, QTextBlockFormat _format, QTextCharFormat _charFormat)"""
        return None
    def atEnd(self):
        """bool QTextCursor.atEnd(None self)"""
        return bool()
    def atStart(self):
        """bool QTextCursor.atStart(None self)"""
        return bool()
    def atBlockEnd(self):
        """bool QTextCursor.atBlockEnd(None self)"""
        return bool()
    def atBlockStart(self):
        """bool QTextCursor.atBlockStart(None self)"""
        return bool()
    def mergeBlockCharFormat(self, _modifier):
        """None QTextCursor.mergeBlockCharFormat(None self, QTextCharFormat _modifier)"""
        return None
    def setBlockCharFormat(self, _format):
        """None QTextCursor.setBlockCharFormat(None self, QTextCharFormat _format)"""
        return None
    def blockCharFormat(self):
        """QTextCharFormat QTextCursor.blockCharFormat(None self)"""
        return QTextCharFormat()
    def mergeBlockFormat(self, _modifier):
        """None QTextCursor.mergeBlockFormat(None self, QTextBlockFormat _modifier)"""
        return None
    def setBlockFormat(self, _format):
        """None QTextCursor.setBlockFormat(None self, QTextBlockFormat _format)"""
        return None
    def blockFormat(self):
        """QTextBlockFormat QTextCursor.blockFormat(None self)"""
        return QTextBlockFormat()
    def mergeCharFormat(self, _modifier):
        """None QTextCursor.mergeCharFormat(None self, QTextCharFormat _modifier)"""
        return None
    def setCharFormat(self, _format):
        """None QTextCursor.setCharFormat(None self, QTextCharFormat _format)"""
        return None
    def charFormat(self):
        """QTextCharFormat QTextCursor.charFormat(None self)"""
        return QTextCharFormat()
    def block(self):
        """QTextBlock QTextCursor.block(None self)"""
        return QTextBlock()
    def selectedTableCells(self, _firstRow, _numRows, _firstColumn, _numColumns):
        """None QTextCursor.selectedTableCells(None self, int _firstRow, int _numRows, int _firstColumn, int _numColumns)"""
        return None
    def selection(self):
        """QTextDocumentFragment QTextCursor.selection(None self)"""
        return QTextDocumentFragment()
    def selectedText(self):
        """QString QTextCursor.selectedText(None self)"""
        return QString()
    def selectionEnd(self):
        """int QTextCursor.selectionEnd(None self)"""
        return int()
    def selectionStart(self):
        """int QTextCursor.selectionStart(None self)"""
        return int()
    def clearSelection(self):
        """None QTextCursor.clearSelection(None self)"""
        return None
    def removeSelectedText(self):
        """None QTextCursor.removeSelectedText(None self)"""
        return None
    def hasComplexSelection(self):
        """bool QTextCursor.hasComplexSelection(None self)"""
        return bool()
    def hasSelection(self):
        """bool QTextCursor.hasSelection(None self)"""
        return bool()
    def select(self, _selection):
        """None QTextCursor.select(None self, QTextCursor.SelectionType _selection)"""
        return None
    def deletePreviousChar(self):
        """None QTextCursor.deletePreviousChar(None self)"""
        return None
    def deleteChar(self):
        """None QTextCursor.deleteChar(None self)"""
        return None
    def movePosition(self, _op, _mode, _n):
        """bool QTextCursor.movePosition(None self, QTextCursor.MoveOperation _op, QTextCursor.MoveMode _mode, int _n)"""
        return bool()
    def insertText(self, _text):
        """None QTextCursor.insertText(None self, QString _text)"""
        return None
    def insertText(self, _text, _format):
        """None QTextCursor.insertText(None self, QString _text, QTextCharFormat _format)"""
        return None
    def anchor(self):
        """int QTextCursor.anchor(None self)"""
        return int()
    def position(self):
        """int QTextCursor.position(None self)"""
        return int()
    def setPosition(self, _pos, _mode):
        """None QTextCursor.setPosition(None self, int _pos, QTextCursor.MoveMode _mode)"""
        return None
    def isNull(self):
        """bool QTextCursor.isNull(None self)"""
        return bool()


class Qt():
    """"""
    WhiteSpaceNormal = int() # Qt.WhiteSpaceMode enum
    WhiteSpacePre = int() # Qt.WhiteSpaceMode enum
    WhiteSpaceNoWrap = int() # Qt.WhiteSpaceMode enum
    WhiteSpaceModeUndefined = int() # Qt.WhiteSpaceMode enum

    ExactHit = int() # Qt.HitTestAccuracy enum
    FuzzyHit = int() # Qt.HitTestAccuracy enum

    def convertFromPlainText(self, _plain, _mode):
        """QString Qt.convertFromPlainText(None self, QString _plain, Qt.WhiteSpaceMode _mode)"""
        return QString()
    def escape(self, _plain):
        """QString Qt.escape(None self, QString _plain)"""
        return QString()
    def mightBeRichText(self):
        """QString Qt.mightBeRichText(None self)"""
        return QString()


class QTextDocument(QObject):
    """"""
    UndoStack = int() # QTextDocument.Stacks enum
    RedoStack = int() # QTextDocument.Stacks enum
    UndoAndRedoStacks = int() # QTextDocument.Stacks enum

    HtmlResource = int() # QTextDocument.ResourceType enum
    ImageResource = int() # QTextDocument.ResourceType enum
    StyleSheetResource = int() # QTextDocument.ResourceType enum
    UserResource = int() # QTextDocument.ResourceType enum

    FindBackward = int() # QTextDocument.FindFlag enum
    FindCaseSensitively = int() # QTextDocument.FindFlag enum
    FindWholeWords = int() # QTextDocument.FindFlag enum

    DocumentTitle = int() # QTextDocument.MetaInformation enum
    DocumentUrl = int() # QTextDocument.MetaInformation enum

    def __init__(self, _parent):
        """None QTextDocument.__init__(None self, QObject _parent)"""
        return None
    def __init__(self, _text, _parent):
        """None QTextDocument.__init__(None self, QString _text, QObject _parent)"""
        return None
    def clearUndoRedoStacks(self, _stacks):
        """None QTextDocument.clearUndoRedoStacks(None self, QTextDocument.Stacks _stacks)"""
        return None
    def availableRedoSteps(self):
        """int QTextDocument.availableRedoSteps(None self)"""
        return int()
    def availableUndoSteps(self):
        """int QTextDocument.availableUndoSteps(None self)"""
        return int()
    def characterCount(self):
        """int QTextDocument.characterCount(None self)"""
        return int()
    def lineCount(self):
        """int QTextDocument.lineCount(None self)"""
        return int()
    def setDocumentMargin(self, _margin):
        """None QTextDocument.setDocumentMargin(None self, float _margin)"""
        return None
    def documentMargin(self):
        """float QTextDocument.documentMargin(None self)"""
        return float()
    def characterAt(self, _pos):
        """QChar QTextDocument.characterAt(None self, int _pos)"""
        return QChar()
    def setIndentWidth(self, _width):
        """None QTextDocument.setIndentWidth(None self, float _width)"""
        return None
    def indentWidth(self):
        """float QTextDocument.indentWidth(None self)"""
        return float()
    def lastBlock(self):
        """QTextBlock QTextDocument.lastBlock(None self)"""
        return QTextBlock()
    def firstBlock(self):
        """QTextBlock QTextDocument.firstBlock(None self)"""
        return QTextBlock()
    def findBlockByLineNumber(self, _blockNumber):
        """QTextBlock QTextDocument.findBlockByLineNumber(None self, int _blockNumber)"""
        return QTextBlock()
    def findBlockByNumber(self, _blockNumber):
        """QTextBlock QTextDocument.findBlockByNumber(None self, int _blockNumber)"""
        return QTextBlock()
    def revision(self):
        """int QTextDocument.revision(None self)"""
        return int()
    def setDefaultTextOption(self, _option):
        """None QTextDocument.setDefaultTextOption(None self, QTextOption _option)"""
        return None
    def defaultTextOption(self):
        """QTextOption QTextDocument.defaultTextOption(None self)"""
        return QTextOption()
    def setMaximumBlockCount(self, _maximum):
        """None QTextDocument.setMaximumBlockCount(None self, int _maximum)"""
        return None
    def maximumBlockCount(self):
        """int QTextDocument.maximumBlockCount(None self)"""
        return int()
    def defaultStyleSheet(self):
        """QString QTextDocument.defaultStyleSheet(None self)"""
        return QString()
    def setDefaultStyleSheet(self, _sheet):
        """None QTextDocument.setDefaultStyleSheet(None self, QString _sheet)"""
        return None
    def blockCount(self):
        """int QTextDocument.blockCount(None self)"""
        return int()
    def size(self):
        """QSizeF QTextDocument.size(None self)"""
        return QSizeF()
    def adjustSize(self):
        """None QTextDocument.adjustSize(None self)"""
        return None
    def idealWidth(self):
        """float QTextDocument.idealWidth(None self)"""
        return float()
    def textWidth(self):
        """float QTextDocument.textWidth(None self)"""
        return float()
    def setTextWidth(self, _width):
        """None QTextDocument.setTextWidth(None self, float _width)"""
        return None
    def drawContents(self, _p, _rect):
        """None QTextDocument.drawContents(None self, QPainter _p, QRectF _rect)"""
        return None
    def loadResource(self, _type, _name):
        """QVariant QTextDocument.loadResource(None self, int _type, QUrl _name)"""
        return QVariant()
    def createObject(self, _f):
        """QTextObject QTextDocument.createObject(None self, QTextFormat _f)"""
        return QTextObject()
    def setModified(self, _on):
        """None QTextDocument.setModified(None self, bool _on)"""
        return None
    def redo(self):
        """None QTextDocument.redo(None self)"""
        return None
    def redo(self, _cursor):
        """None QTextDocument.redo(None self, QTextCursor _cursor)"""
        return None
    def undo(self):
        """None QTextDocument.undo(None self)"""
        return None
    def undo(self, _cursor):
        """None QTextDocument.undo(None self, QTextCursor _cursor)"""
        return None
    def useDesignMetrics(self):
        """bool QTextDocument.useDesignMetrics(None self)"""
        return bool()
    def setUseDesignMetrics(self, _b):
        """None QTextDocument.setUseDesignMetrics(None self, bool _b)"""
        return None
    def markContentsDirty(self, _from, _length):
        """None QTextDocument.markContentsDirty(None self, int _from, int _length)"""
        return None
    def allFormats(self):
        """list-of-QTextFormat QTextDocument.allFormats(None self)"""
        return [QTextFormat()]
    def addResource(self, _type, _name, _resource):
        """None QTextDocument.addResource(None self, int _type, QUrl _name, QVariant _resource)"""
        return None
    def resource(self, _type, _name):
        """QVariant QTextDocument.resource(None self, int _type, QUrl _name)"""
        return QVariant()
    def print_(self, _printer):
        """None QTextDocument.print_(None self, QPrinter _printer)"""
        return None
    def isModified(self):
        """bool QTextDocument.isModified(None self)"""
        return bool()
    def pageCount(self):
        """int QTextDocument.pageCount(None self)"""
        return int()
    def defaultFont(self):
        """QFont QTextDocument.defaultFont(None self)"""
        return QFont()
    def setDefaultFont(self, _font):
        """None QTextDocument.setDefaultFont(None self, QFont _font)"""
        return None
    def pageSize(self):
        """QSizeF QTextDocument.pageSize(None self)"""
        return QSizeF()
    def setPageSize(self, _size):
        """None QTextDocument.setPageSize(None self, QSizeF _size)"""
        return None
    def end(self):
        """QTextBlock QTextDocument.end(None self)"""
        return QTextBlock()
    def begin(self):
        """QTextBlock QTextDocument.begin(None self)"""
        return QTextBlock()
    def findBlock(self, _pos):
        """QTextBlock QTextDocument.findBlock(None self, int _pos)"""
        return QTextBlock()
    def objectForFormat(self):
        """QTextFormat QTextDocument.objectForFormat(None self)"""
        return QTextFormat()
    def object(self, _objectIndex):
        """QTextObject QTextDocument.object(None self, int _objectIndex)"""
        return QTextObject()
    def rootFrame(self):
        """QTextFrame QTextDocument.rootFrame(None self)"""
        return QTextFrame()
    def find(self, _subString, _position, _options):
        """QTextCursor QTextDocument.find(None self, QString _subString, int _position, QTextDocument.FindFlags _options)"""
        return QTextCursor()
    def find(self, _expr, _position, _options):
        """QTextCursor QTextDocument.find(None self, QRegExp _expr, int _position, QTextDocument.FindFlags _options)"""
        return QTextCursor()
    def find(self, _subString, _cursor, _options):
        """QTextCursor QTextDocument.find(None self, QString _subString, QTextCursor _cursor, QTextDocument.FindFlags _options)"""
        return QTextCursor()
    def find(self, _expr, _cursor, _options):
        """QTextCursor QTextDocument.find(None self, QRegExp _expr, QTextCursor _cursor, QTextDocument.FindFlags _options)"""
        return QTextCursor()
    def setPlainText(self, _text):
        """None QTextDocument.setPlainText(None self, QString _text)"""
        return None
    def toPlainText(self):
        """QString QTextDocument.toPlainText(None self)"""
        return QString()
    def setHtml(self, _html):
        """None QTextDocument.setHtml(None self, QString _html)"""
        return None
    def toHtml(self, _encoding):
        """QString QTextDocument.toHtml(None self, QByteArray _encoding)"""
        return QString()
    def metaInformation(self, _info):
        """QString QTextDocument.metaInformation(None self, QTextDocument.MetaInformation _info)"""
        return QString()
    def setMetaInformation(self, _info):
        """QString QTextDocument.setMetaInformation(None self, QTextDocument.MetaInformation _info)"""
        return QString()
    def documentLayout(self):
        """QAbstractTextDocumentLayout QTextDocument.documentLayout(None self)"""
        return QAbstractTextDocumentLayout()
    def setDocumentLayout(self, _layout):
        """None QTextDocument.setDocumentLayout(None self, QAbstractTextDocumentLayout _layout)"""
        return None
    def isRedoAvailable(self):
        """bool QTextDocument.isRedoAvailable(None self)"""
        return bool()
    def isUndoAvailable(self):
        """bool QTextDocument.isUndoAvailable(None self)"""
        return bool()
    def isUndoRedoEnabled(self):
        """bool QTextDocument.isUndoRedoEnabled(None self)"""
        return bool()
    def setUndoRedoEnabled(self, _enable):
        """None QTextDocument.setUndoRedoEnabled(None self, bool _enable)"""
        return None
    def clear(self):
        """None QTextDocument.clear(None self)"""
        return None
    def isEmpty(self):
        """bool QTextDocument.isEmpty(None self)"""
        return bool()
    def clone(self, _parent):
        """QTextDocument QTextDocument.clone(None self, QObject _parent)"""
        return QTextDocument()


class QTextDocumentFragment():
    """"""
    def __init__(self):
        """None QTextDocumentFragment.__init__(None self)"""
        return None
    def __init__(self, _document):
        """None QTextDocumentFragment.__init__(None self, QTextDocument _document)"""
        return None
    def __init__(self, _range):
        """None QTextDocumentFragment.__init__(None self, QTextCursor _range)"""
        return None
    def __init__(self, _rhs):
        """None QTextDocumentFragment.__init__(None self, QTextDocumentFragment _rhs)"""
        return None
    def fromHtml(self, _html):
        """QTextDocumentFragment QTextDocumentFragment.fromHtml(None self, QString _html)"""
        return QTextDocumentFragment()
    def fromHtml(self, _html, _resourceProvider):
        """QTextDocumentFragment QTextDocumentFragment.fromHtml(None self, QString _html, QTextDocument _resourceProvider)"""
        return QTextDocumentFragment()
    def fromPlainText(self, _plainText):
        """QTextDocumentFragment QTextDocumentFragment.fromPlainText(None self, QString _plainText)"""
        return QTextDocumentFragment()
    def toHtml(self):
        """QString QTextDocumentFragment.toHtml(None self)"""
        return QString()
    def toHtml(self, _encoding):
        """QString QTextDocumentFragment.toHtml(None self, QByteArray _encoding)"""
        return QString()
    def toPlainText(self):
        """QString QTextDocumentFragment.toPlainText(None self)"""
        return QString()
    def isEmpty(self):
        """bool QTextDocumentFragment.isEmpty(None self)"""
        return bool()


class QTextDocumentWriter():
    """"""
    def __init__(self):
        """None QTextDocumentWriter.__init__(None self)"""
        return None
    def __init__(self, _device, _format):
        """None QTextDocumentWriter.__init__(None self, QIODevice _device, QByteArray _format)"""
        return None
    def __init__(self, _fileName, _format):
        """None QTextDocumentWriter.__init__(None self, QString _fileName, QByteArray _format)"""
        return None
    def supportedDocumentFormats(self):
        """list-of-QByteArray QTextDocumentWriter.supportedDocumentFormats(None self)"""
        return [QByteArray()]
    def codec(self):
        """QTextCodec QTextDocumentWriter.codec(None self)"""
        return QTextCodec()
    def setCodec(self, _codec):
        """None QTextDocumentWriter.setCodec(None self, QTextCodec _codec)"""
        return None
    def write(self, _document):
        """bool QTextDocumentWriter.write(None self, QTextDocument _document)"""
        return bool()
    def write(self, _fragment):
        """bool QTextDocumentWriter.write(None self, QTextDocumentFragment _fragment)"""
        return bool()
    def fileName(self):
        """QString QTextDocumentWriter.fileName(None self)"""
        return QString()
    def setFileName(self, _fileName):
        """None QTextDocumentWriter.setFileName(None self, QString _fileName)"""
        return None
    def device(self):
        """QIODevice QTextDocumentWriter.device(None self)"""
        return QIODevice()
    def setDevice(self, _device):
        """None QTextDocumentWriter.setDevice(None self, QIODevice _device)"""
        return None
    def format(self):
        """QByteArray QTextDocumentWriter.format(None self)"""
        return QByteArray()
    def setFormat(self, _format):
        """None QTextDocumentWriter.setFormat(None self, QByteArray _format)"""
        return None


class QTextLength():
    """"""
    VariableLength = int() # QTextLength.Type enum
    FixedLength = int() # QTextLength.Type enum
    PercentageLength = int() # QTextLength.Type enum

    def __init__(self):
        """None QTextLength.__init__(None self)"""
        return None
    def __init__(self, _atype, _avalue):
        """None QTextLength.__init__(None self, QTextLength.Type _atype, float _avalue)"""
        return None
    def __init__(self, _variant):
        """None QTextLength.__init__(None self, QVariant _variant)"""
        return None
    def __init__(self):
        """QTextLength QTextLength.__init__(None self)"""
        return QTextLength()
    def __ne__(self, _other):
        """bool QTextLength.__ne__(None self, QTextLength _other)"""
        return bool()
    def __eq__(self, _other):
        """bool QTextLength.__eq__(None self, QTextLength _other)"""
        return bool()
    def rawValue(self):
        """float QTextLength.rawValue(None self)"""
        return float()
    def value(self, _maximumLength):
        """float QTextLength.value(None self, float _maximumLength)"""
        return float()
    def type(self):
        """QTextLength.Type QTextLength.type(None self)"""
        return QTextLength.Type()


class QTextFormat():
    """"""
    ObjectIndex = int() # QTextFormat.Property enum
    CssFloat = int() # QTextFormat.Property enum
    LayoutDirection = int() # QTextFormat.Property enum
    OutlinePen = int() # QTextFormat.Property enum
    BackgroundBrush = int() # QTextFormat.Property enum
    ForegroundBrush = int() # QTextFormat.Property enum
    BlockAlignment = int() # QTextFormat.Property enum
    BlockTopMargin = int() # QTextFormat.Property enum
    BlockBottomMargin = int() # QTextFormat.Property enum
    BlockLeftMargin = int() # QTextFormat.Property enum
    BlockRightMargin = int() # QTextFormat.Property enum
    TextIndent = int() # QTextFormat.Property enum
    BlockIndent = int() # QTextFormat.Property enum
    BlockNonBreakableLines = int() # QTextFormat.Property enum
    BlockTrailingHorizontalRulerWidth = int() # QTextFormat.Property enum
    FontFamily = int() # QTextFormat.Property enum
    FontPointSize = int() # QTextFormat.Property enum
    FontSizeAdjustment = int() # QTextFormat.Property enum
    FontSizeIncrement = int() # QTextFormat.Property enum
    FontWeight = int() # QTextFormat.Property enum
    FontItalic = int() # QTextFormat.Property enum
    FontUnderline = int() # QTextFormat.Property enum
    FontOverline = int() # QTextFormat.Property enum
    FontStrikeOut = int() # QTextFormat.Property enum
    FontFixedPitch = int() # QTextFormat.Property enum
    FontPixelSize = int() # QTextFormat.Property enum
    TextUnderlineColor = int() # QTextFormat.Property enum
    TextVerticalAlignment = int() # QTextFormat.Property enum
    TextOutline = int() # QTextFormat.Property enum
    IsAnchor = int() # QTextFormat.Property enum
    AnchorHref = int() # QTextFormat.Property enum
    AnchorName = int() # QTextFormat.Property enum
    ObjectType = int() # QTextFormat.Property enum
    ListStyle = int() # QTextFormat.Property enum
    ListIndent = int() # QTextFormat.Property enum
    FrameBorder = int() # QTextFormat.Property enum
    FrameMargin = int() # QTextFormat.Property enum
    FramePadding = int() # QTextFormat.Property enum
    FrameWidth = int() # QTextFormat.Property enum
    FrameHeight = int() # QTextFormat.Property enum
    TableColumns = int() # QTextFormat.Property enum
    TableColumnWidthConstraints = int() # QTextFormat.Property enum
    TableCellSpacing = int() # QTextFormat.Property enum
    TableCellPadding = int() # QTextFormat.Property enum
    TableCellRowSpan = int() # QTextFormat.Property enum
    TableCellColumnSpan = int() # QTextFormat.Property enum
    ImageName = int() # QTextFormat.Property enum
    ImageWidth = int() # QTextFormat.Property enum
    ImageHeight = int() # QTextFormat.Property enum
    TextUnderlineStyle = int() # QTextFormat.Property enum
    TableHeaderRowCount = int() # QTextFormat.Property enum
    FullWidthSelection = int() # QTextFormat.Property enum
    PageBreakPolicy = int() # QTextFormat.Property enum
    TextToolTip = int() # QTextFormat.Property enum
    FrameTopMargin = int() # QTextFormat.Property enum
    FrameBottomMargin = int() # QTextFormat.Property enum
    FrameLeftMargin = int() # QTextFormat.Property enum
    FrameRightMargin = int() # QTextFormat.Property enum
    FrameBorderBrush = int() # QTextFormat.Property enum
    FrameBorderStyle = int() # QTextFormat.Property enum
    BackgroundImageUrl = int() # QTextFormat.Property enum
    TabPositions = int() # QTextFormat.Property enum
    FirstFontProperty = int() # QTextFormat.Property enum
    FontCapitalization = int() # QTextFormat.Property enum
    FontLetterSpacing = int() # QTextFormat.Property enum
    FontWordSpacing = int() # QTextFormat.Property enum
    LastFontProperty = int() # QTextFormat.Property enum
    TableCellTopPadding = int() # QTextFormat.Property enum
    TableCellBottomPadding = int() # QTextFormat.Property enum
    TableCellLeftPadding = int() # QTextFormat.Property enum
    TableCellRightPadding = int() # QTextFormat.Property enum
    FontStyleHint = int() # QTextFormat.Property enum
    FontStyleStrategy = int() # QTextFormat.Property enum
    FontKerning = int() # QTextFormat.Property enum
    UserProperty = int() # QTextFormat.Property enum

    PageBreak_Auto = int() # QTextFormat.PageBreakFlag enum
    PageBreak_AlwaysBefore = int() # QTextFormat.PageBreakFlag enum
    PageBreak_AlwaysAfter = int() # QTextFormat.PageBreakFlag enum

    NoObject = int() # QTextFormat.ObjectTypes enum
    ImageObject = int() # QTextFormat.ObjectTypes enum
    TableObject = int() # QTextFormat.ObjectTypes enum
    TableCellObject = int() # QTextFormat.ObjectTypes enum
    UserObject = int() # QTextFormat.ObjectTypes enum

    InvalidFormat = int() # QTextFormat.FormatType enum
    BlockFormat = int() # QTextFormat.FormatType enum
    CharFormat = int() # QTextFormat.FormatType enum
    ListFormat = int() # QTextFormat.FormatType enum
    TableFormat = int() # QTextFormat.FormatType enum
    FrameFormat = int() # QTextFormat.FormatType enum
    UserFormat = int() # QTextFormat.FormatType enum

    def __init__(self):
        """None QTextFormat.__init__(None self)"""
        return None
    def __init__(self, _type):
        """None QTextFormat.__init__(None self, int _type)"""
        return None
    def __init__(self, _rhs):
        """None QTextFormat.__init__(None self, QTextFormat _rhs)"""
        return None
    def __init__(self, _variant):
        """None QTextFormat.__init__(None self, QVariant _variant)"""
        return None
    def toTableCellFormat(self):
        """QTextTableCellFormat QTextFormat.toTableCellFormat(None self)"""
        return QTextTableCellFormat()
    def isTableCellFormat(self):
        """bool QTextFormat.isTableCellFormat(None self)"""
        return bool()
    def propertyCount(self):
        """int QTextFormat.propertyCount(None self)"""
        return int()
    def setObjectType(self, _atype):
        """None QTextFormat.setObjectType(None self, int _atype)"""
        return None
    def clearForeground(self):
        """None QTextFormat.clearForeground(None self)"""
        return None
    def foreground(self):
        """QBrush QTextFormat.foreground(None self)"""
        return QBrush()
    def setForeground(self, _brush):
        """None QTextFormat.setForeground(None self, QBrush _brush)"""
        return None
    def clearBackground(self):
        """None QTextFormat.clearBackground(None self)"""
        return None
    def background(self):
        """QBrush QTextFormat.background(None self)"""
        return QBrush()
    def setBackground(self, _brush):
        """None QTextFormat.setBackground(None self, QBrush _brush)"""
        return None
    def layoutDirection(self):
        """Qt.LayoutDirection QTextFormat.layoutDirection(None self)"""
        return Qt.LayoutDirection()
    def setLayoutDirection(self, _direction):
        """None QTextFormat.setLayoutDirection(None self, Qt.LayoutDirection _direction)"""
        return None
    def __ne__(self, _rhs):
        """bool QTextFormat.__ne__(None self, QTextFormat _rhs)"""
        return bool()
    def __eq__(self, _rhs):
        """bool QTextFormat.__eq__(None self, QTextFormat _rhs)"""
        return bool()
    def toImageFormat(self):
        """QTextImageFormat QTextFormat.toImageFormat(None self)"""
        return QTextImageFormat()
    def toFrameFormat(self):
        """QTextFrameFormat QTextFormat.toFrameFormat(None self)"""
        return QTextFrameFormat()
    def toTableFormat(self):
        """QTextTableFormat QTextFormat.toTableFormat(None self)"""
        return QTextTableFormat()
    def toListFormat(self):
        """QTextListFormat QTextFormat.toListFormat(None self)"""
        return QTextListFormat()
    def toCharFormat(self):
        """QTextCharFormat QTextFormat.toCharFormat(None self)"""
        return QTextCharFormat()
    def toBlockFormat(self):
        """QTextBlockFormat QTextFormat.toBlockFormat(None self)"""
        return QTextBlockFormat()
    def isTableFormat(self):
        """bool QTextFormat.isTableFormat(None self)"""
        return bool()
    def isImageFormat(self):
        """bool QTextFormat.isImageFormat(None self)"""
        return bool()
    def isFrameFormat(self):
        """bool QTextFormat.isFrameFormat(None self)"""
        return bool()
    def isListFormat(self):
        """bool QTextFormat.isListFormat(None self)"""
        return bool()
    def isBlockFormat(self):
        """bool QTextFormat.isBlockFormat(None self)"""
        return bool()
    def isCharFormat(self):
        """bool QTextFormat.isCharFormat(None self)"""
        return bool()
    def objectType(self):
        """int QTextFormat.objectType(None self)"""
        return int()
    def properties(self):
        """dict-of-int-QVariant QTextFormat.properties(None self)"""
        return dict-of-int-QVariant()
    def lengthVectorProperty(self, _propertyId):
        """list-of-QTextLength QTextFormat.lengthVectorProperty(None self, int _propertyId)"""
        return [QTextLength()]
    def lengthProperty(self, _propertyId):
        """QTextLength QTextFormat.lengthProperty(None self, int _propertyId)"""
        return QTextLength()
    def brushProperty(self, _propertyId):
        """QBrush QTextFormat.brushProperty(None self, int _propertyId)"""
        return QBrush()
    def penProperty(self, _propertyId):
        """QPen QTextFormat.penProperty(None self, int _propertyId)"""
        return QPen()
    def colorProperty(self, _propertyId):
        """QColor QTextFormat.colorProperty(None self, int _propertyId)"""
        return QColor()
    def stringProperty(self, _propertyId):
        """QString QTextFormat.stringProperty(None self, int _propertyId)"""
        return QString()
    def doubleProperty(self, _propertyId):
        """float QTextFormat.doubleProperty(None self, int _propertyId)"""
        return float()
    def intProperty(self, _propertyId):
        """int QTextFormat.intProperty(None self, int _propertyId)"""
        return int()
    def boolProperty(self, _propertyId):
        """bool QTextFormat.boolProperty(None self, int _propertyId)"""
        return bool()
    def hasProperty(self, _propertyId):
        """bool QTextFormat.hasProperty(None self, int _propertyId)"""
        return bool()
    def clearProperty(self, _propertyId):
        """None QTextFormat.clearProperty(None self, int _propertyId)"""
        return None
    def setProperty(self, _propertyId, _value):
        """None QTextFormat.setProperty(None self, int _propertyId, QVariant _value)"""
        return None
    def setProperty(self, _propertyId, _lengths):
        """None QTextFormat.setProperty(None self, int _propertyId, list-of-QTextLength _lengths)"""
        return None
    def property(self, _propertyId):
        """QVariant QTextFormat.property(None self, int _propertyId)"""
        return QVariant()
    def setObjectIndex(self, _object):
        """None QTextFormat.setObjectIndex(None self, int _object)"""
        return None
    def objectIndex(self):
        """int QTextFormat.objectIndex(None self)"""
        return int()
    def type(self):
        """int QTextFormat.type(None self)"""
        return int()
    def isValid(self):
        """bool QTextFormat.isValid(None self)"""
        return bool()
    def merge(self, _other):
        """None QTextFormat.merge(None self, QTextFormat _other)"""
        return None


class QTextCharFormat(QTextFormat):
    """"""
    NoUnderline = int() # QTextCharFormat.UnderlineStyle enum
    SingleUnderline = int() # QTextCharFormat.UnderlineStyle enum
    DashUnderline = int() # QTextCharFormat.UnderlineStyle enum
    DotLine = int() # QTextCharFormat.UnderlineStyle enum
    DashDotLine = int() # QTextCharFormat.UnderlineStyle enum
    DashDotDotLine = int() # QTextCharFormat.UnderlineStyle enum
    WaveUnderline = int() # QTextCharFormat.UnderlineStyle enum
    SpellCheckUnderline = int() # QTextCharFormat.UnderlineStyle enum

    AlignNormal = int() # QTextCharFormat.VerticalAlignment enum
    AlignSuperScript = int() # QTextCharFormat.VerticalAlignment enum
    AlignSubScript = int() # QTextCharFormat.VerticalAlignment enum
    AlignMiddle = int() # QTextCharFormat.VerticalAlignment enum
    AlignTop = int() # QTextCharFormat.VerticalAlignment enum
    AlignBottom = int() # QTextCharFormat.VerticalAlignment enum

    def __init__(self):
        """None QTextCharFormat.__init__(None self)"""
        return None
    def __init__(self):
        """QTextCharFormat QTextCharFormat.__init__(None self)"""
        return QTextCharFormat()
    def fontKerning(self):
        """bool QTextCharFormat.fontKerning(None self)"""
        return bool()
    def setFontKerning(self, _enable):
        """None QTextCharFormat.setFontKerning(None self, bool _enable)"""
        return None
    def fontStyleStrategy(self):
        """QFont.StyleStrategy QTextCharFormat.fontStyleStrategy(None self)"""
        return QFont.StyleStrategy()
    def fontStyleHint(self):
        """QFont.StyleHint QTextCharFormat.fontStyleHint(None self)"""
        return QFont.StyleHint()
    def setFontStyleStrategy(self, _strategy):
        """None QTextCharFormat.setFontStyleStrategy(None self, QFont.StyleStrategy _strategy)"""
        return None
    def setFontStyleHint(self, _hint, _strategy):
        """None QTextCharFormat.setFontStyleHint(None self, QFont.StyleHint _hint, QFont.StyleStrategy _strategy)"""
        return None
    def fontWordSpacing(self):
        """float QTextCharFormat.fontWordSpacing(None self)"""
        return float()
    def setFontWordSpacing(self, _spacing):
        """None QTextCharFormat.setFontWordSpacing(None self, float _spacing)"""
        return None
    def fontLetterSpacing(self):
        """float QTextCharFormat.fontLetterSpacing(None self)"""
        return float()
    def setFontLetterSpacing(self, _spacing):
        """None QTextCharFormat.setFontLetterSpacing(None self, float _spacing)"""
        return None
    def fontCapitalization(self):
        """QFont.Capitalization QTextCharFormat.fontCapitalization(None self)"""
        return QFont.Capitalization()
    def setFontCapitalization(self, _capitalization):
        """None QTextCharFormat.setFontCapitalization(None self, QFont.Capitalization _capitalization)"""
        return None
    def anchorNames(self):
        """QStringList QTextCharFormat.anchorNames(None self)"""
        return QStringList()
    def setAnchorNames(self, _names):
        """None QTextCharFormat.setAnchorNames(None self, QStringList _names)"""
        return None
    def toolTip(self):
        """QString QTextCharFormat.toolTip(None self)"""
        return QString()
    def setToolTip(self, _tip):
        """None QTextCharFormat.setToolTip(None self, QString _tip)"""
        return None
    def underlineStyle(self):
        """QTextCharFormat.UnderlineStyle QTextCharFormat.underlineStyle(None self)"""
        return QTextCharFormat.UnderlineStyle()
    def setUnderlineStyle(self, _style):
        """None QTextCharFormat.setUnderlineStyle(None self, QTextCharFormat.UnderlineStyle _style)"""
        return None
    def textOutline(self):
        """QPen QTextCharFormat.textOutline(None self)"""
        return QPen()
    def setTextOutline(self, _pen):
        """None QTextCharFormat.setTextOutline(None self, QPen _pen)"""
        return None
    def setTableCellColumnSpan(self, _atableCellColumnSpan):
        """None QTextCharFormat.setTableCellColumnSpan(None self, int _atableCellColumnSpan)"""
        return None
    def setTableCellRowSpan(self, _atableCellRowSpan):
        """None QTextCharFormat.setTableCellRowSpan(None self, int _atableCellRowSpan)"""
        return None
    def tableCellColumnSpan(self):
        """int QTextCharFormat.tableCellColumnSpan(None self)"""
        return int()
    def tableCellRowSpan(self):
        """int QTextCharFormat.tableCellRowSpan(None self)"""
        return int()
    def anchorName(self):
        """QString QTextCharFormat.anchorName(None self)"""
        return QString()
    def setAnchorName(self, _name):
        """None QTextCharFormat.setAnchorName(None self, QString _name)"""
        return None
    def anchorHref(self):
        """QString QTextCharFormat.anchorHref(None self)"""
        return QString()
    def setAnchorHref(self, _value):
        """None QTextCharFormat.setAnchorHref(None self, QString _value)"""
        return None
    def isAnchor(self):
        """bool QTextCharFormat.isAnchor(None self)"""
        return bool()
    def setAnchor(self, _anchor):
        """None QTextCharFormat.setAnchor(None self, bool _anchor)"""
        return None
    def verticalAlignment(self):
        """QTextCharFormat.VerticalAlignment QTextCharFormat.verticalAlignment(None self)"""
        return QTextCharFormat.VerticalAlignment()
    def setVerticalAlignment(self, _alignment):
        """None QTextCharFormat.setVerticalAlignment(None self, QTextCharFormat.VerticalAlignment _alignment)"""
        return None
    def fontFixedPitch(self):
        """bool QTextCharFormat.fontFixedPitch(None self)"""
        return bool()
    def setFontFixedPitch(self, _fixedPitch):
        """None QTextCharFormat.setFontFixedPitch(None self, bool _fixedPitch)"""
        return None
    def underlineColor(self):
        """QColor QTextCharFormat.underlineColor(None self)"""
        return QColor()
    def setUnderlineColor(self, _color):
        """None QTextCharFormat.setUnderlineColor(None self, QColor _color)"""
        return None
    def fontStrikeOut(self):
        """bool QTextCharFormat.fontStrikeOut(None self)"""
        return bool()
    def setFontStrikeOut(self, _strikeOut):
        """None QTextCharFormat.setFontStrikeOut(None self, bool _strikeOut)"""
        return None
    def fontOverline(self):
        """bool QTextCharFormat.fontOverline(None self)"""
        return bool()
    def setFontOverline(self, _overline):
        """None QTextCharFormat.setFontOverline(None self, bool _overline)"""
        return None
    def fontUnderline(self):
        """bool QTextCharFormat.fontUnderline(None self)"""
        return bool()
    def setFontUnderline(self, _underline):
        """None QTextCharFormat.setFontUnderline(None self, bool _underline)"""
        return None
    def fontItalic(self):
        """bool QTextCharFormat.fontItalic(None self)"""
        return bool()
    def setFontItalic(self, _italic):
        """None QTextCharFormat.setFontItalic(None self, bool _italic)"""
        return None
    def fontWeight(self):
        """int QTextCharFormat.fontWeight(None self)"""
        return int()
    def setFontWeight(self, _weight):
        """None QTextCharFormat.setFontWeight(None self, int _weight)"""
        return None
    def fontPointSize(self):
        """float QTextCharFormat.fontPointSize(None self)"""
        return float()
    def setFontPointSize(self, _size):
        """None QTextCharFormat.setFontPointSize(None self, float _size)"""
        return None
    def fontFamily(self):
        """QString QTextCharFormat.fontFamily(None self)"""
        return QString()
    def setFontFamily(self, _family):
        """None QTextCharFormat.setFontFamily(None self, QString _family)"""
        return None
    def font(self):
        """QFont QTextCharFormat.font(None self)"""
        return QFont()
    def setFont(self, _font):
        """None QTextCharFormat.setFont(None self, QFont _font)"""
        return None
    def isValid(self):
        """bool QTextCharFormat.isValid(None self)"""
        return bool()


class QTextBlockFormat(QTextFormat):
    """"""
    def __init__(self):
        """None QTextBlockFormat.__init__(None self)"""
        return None
    def __init__(self):
        """QTextBlockFormat QTextBlockFormat.__init__(None self)"""
        return QTextBlockFormat()
    def tabPositions(self):
        """list-of-QTextOption.Tab QTextBlockFormat.tabPositions(None self)"""
        return [QTextOption.Tab()]
    def setTabPositions(self, _tabs):
        """None QTextBlockFormat.setTabPositions(None self, list-of-QTextOption.Tab _tabs)"""
        return None
    def pageBreakPolicy(self):
        """QTextFormat.PageBreakFlags QTextBlockFormat.pageBreakPolicy(None self)"""
        return QTextFormat.PageBreakFlags()
    def setPageBreakPolicy(self, _flags):
        """None QTextBlockFormat.setPageBreakPolicy(None self, QTextFormat.PageBreakFlags _flags)"""
        return None
    def setIndent(self, _aindent):
        """None QTextBlockFormat.setIndent(None self, int _aindent)"""
        return None
    def setAlignment(self, _aalignment):
        """None QTextBlockFormat.setAlignment(None self, Qt.Alignment _aalignment)"""
        return None
    def nonBreakableLines(self):
        """bool QTextBlockFormat.nonBreakableLines(None self)"""
        return bool()
    def setNonBreakableLines(self, _b):
        """None QTextBlockFormat.setNonBreakableLines(None self, bool _b)"""
        return None
    def indent(self):
        """int QTextBlockFormat.indent(None self)"""
        return int()
    def textIndent(self):
        """float QTextBlockFormat.textIndent(None self)"""
        return float()
    def setTextIndent(self, _margin):
        """None QTextBlockFormat.setTextIndent(None self, float _margin)"""
        return None
    def rightMargin(self):
        """float QTextBlockFormat.rightMargin(None self)"""
        return float()
    def setRightMargin(self, _margin):
        """None QTextBlockFormat.setRightMargin(None self, float _margin)"""
        return None
    def leftMargin(self):
        """float QTextBlockFormat.leftMargin(None self)"""
        return float()
    def setLeftMargin(self, _margin):
        """None QTextBlockFormat.setLeftMargin(None self, float _margin)"""
        return None
    def bottomMargin(self):
        """float QTextBlockFormat.bottomMargin(None self)"""
        return float()
    def setBottomMargin(self, _margin):
        """None QTextBlockFormat.setBottomMargin(None self, float _margin)"""
        return None
    def topMargin(self):
        """float QTextBlockFormat.topMargin(None self)"""
        return float()
    def setTopMargin(self, _margin):
        """None QTextBlockFormat.setTopMargin(None self, float _margin)"""
        return None
    def alignment(self):
        """Qt.Alignment QTextBlockFormat.alignment(None self)"""
        return Qt.Alignment()
    def isValid(self):
        """bool QTextBlockFormat.isValid(None self)"""
        return bool()


class QTextListFormat(QTextFormat):
    """"""
    ListDisc = int() # QTextListFormat.Style enum
    ListCircle = int() # QTextListFormat.Style enum
    ListSquare = int() # QTextListFormat.Style enum
    ListDecimal = int() # QTextListFormat.Style enum
    ListLowerAlpha = int() # QTextListFormat.Style enum
    ListUpperAlpha = int() # QTextListFormat.Style enum
    ListLowerRoman = int() # QTextListFormat.Style enum
    ListUpperRoman = int() # QTextListFormat.Style enum

    def __init__(self):
        """None QTextListFormat.__init__(None self)"""
        return None
    def __init__(self):
        """QTextListFormat QTextListFormat.__init__(None self)"""
        return QTextListFormat()
    def setIndent(self, _aindent):
        """None QTextListFormat.setIndent(None self, int _aindent)"""
        return None
    def setStyle(self, _astyle):
        """None QTextListFormat.setStyle(None self, QTextListFormat.Style _astyle)"""
        return None
    def indent(self):
        """int QTextListFormat.indent(None self)"""
        return int()
    def style(self):
        """QTextListFormat.Style QTextListFormat.style(None self)"""
        return QTextListFormat.Style()
    def isValid(self):
        """bool QTextListFormat.isValid(None self)"""
        return bool()


class QTextImageFormat(QTextCharFormat):
    """"""
    def __init__(self):
        """None QTextImageFormat.__init__(None self)"""
        return None
    def __init__(self):
        """QTextImageFormat QTextImageFormat.__init__(None self)"""
        return QTextImageFormat()
    def setHeight(self, _aheight):
        """None QTextImageFormat.setHeight(None self, float _aheight)"""
        return None
    def setWidth(self, _awidth):
        """None QTextImageFormat.setWidth(None self, float _awidth)"""
        return None
    def setName(self, _aname):
        """None QTextImageFormat.setName(None self, QString _aname)"""
        return None
    def height(self):
        """float QTextImageFormat.height(None self)"""
        return float()
    def width(self):
        """float QTextImageFormat.width(None self)"""
        return float()
    def name(self):
        """QString QTextImageFormat.name(None self)"""
        return QString()
    def isValid(self):
        """bool QTextImageFormat.isValid(None self)"""
        return bool()


class QTextFrameFormat(QTextFormat):
    """"""
    BorderStyle_None = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Dotted = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Dashed = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Solid = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Double = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_DotDash = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_DotDotDash = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Groove = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Ridge = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Inset = int() # QTextFrameFormat.BorderStyle enum
    BorderStyle_Outset = int() # QTextFrameFormat.BorderStyle enum

    InFlow = int() # QTextFrameFormat.Position enum
    FloatLeft = int() # QTextFrameFormat.Position enum
    FloatRight = int() # QTextFrameFormat.Position enum

    def __init__(self):
        """None QTextFrameFormat.__init__(None self)"""
        return None
    def __init__(self):
        """QTextFrameFormat QTextFrameFormat.__init__(None self)"""
        return QTextFrameFormat()
    def setRightMargin(self, _amargin):
        """None QTextFrameFormat.setRightMargin(None self, float _amargin)"""
        return None
    def setLeftMargin(self, _amargin):
        """None QTextFrameFormat.setLeftMargin(None self, float _amargin)"""
        return None
    def setBottomMargin(self, _amargin):
        """None QTextFrameFormat.setBottomMargin(None self, float _amargin)"""
        return None
    def setTopMargin(self, _amargin):
        """None QTextFrameFormat.setTopMargin(None self, float _amargin)"""
        return None
    def rightMargin(self):
        """float QTextFrameFormat.rightMargin(None self)"""
        return float()
    def leftMargin(self):
        """float QTextFrameFormat.leftMargin(None self)"""
        return float()
    def bottomMargin(self):
        """float QTextFrameFormat.bottomMargin(None self)"""
        return float()
    def topMargin(self):
        """float QTextFrameFormat.topMargin(None self)"""
        return float()
    def borderStyle(self):
        """QTextFrameFormat.BorderStyle QTextFrameFormat.borderStyle(None self)"""
        return QTextFrameFormat.BorderStyle()
    def setBorderStyle(self, _style):
        """None QTextFrameFormat.setBorderStyle(None self, QTextFrameFormat.BorderStyle _style)"""
        return None
    def borderBrush(self):
        """QBrush QTextFrameFormat.borderBrush(None self)"""
        return QBrush()
    def setBorderBrush(self, _brush):
        """None QTextFrameFormat.setBorderBrush(None self, QBrush _brush)"""
        return None
    def pageBreakPolicy(self):
        """QTextFormat.PageBreakFlags QTextFrameFormat.pageBreakPolicy(None self)"""
        return QTextFormat.PageBreakFlags()
    def setPageBreakPolicy(self, _flags):
        """None QTextFrameFormat.setPageBreakPolicy(None self, QTextFormat.PageBreakFlags _flags)"""
        return None
    def setHeight(self, _aheight):
        """None QTextFrameFormat.setHeight(None self, float _aheight)"""
        return None
    def setHeight(self, _aheight):
        """None QTextFrameFormat.setHeight(None self, QTextLength _aheight)"""
        return None
    def setPadding(self, _apadding):
        """None QTextFrameFormat.setPadding(None self, float _apadding)"""
        return None
    def setMargin(self, _amargin):
        """None QTextFrameFormat.setMargin(None self, float _amargin)"""
        return None
    def setBorder(self, _aborder):
        """None QTextFrameFormat.setBorder(None self, float _aborder)"""
        return None
    def height(self):
        """QTextLength QTextFrameFormat.height(None self)"""
        return QTextLength()
    def width(self):
        """QTextLength QTextFrameFormat.width(None self)"""
        return QTextLength()
    def setWidth(self, _length):
        """None QTextFrameFormat.setWidth(None self, QTextLength _length)"""
        return None
    def setWidth(self, _awidth):
        """None QTextFrameFormat.setWidth(None self, float _awidth)"""
        return None
    def padding(self):
        """float QTextFrameFormat.padding(None self)"""
        return float()
    def margin(self):
        """float QTextFrameFormat.margin(None self)"""
        return float()
    def border(self):
        """float QTextFrameFormat.border(None self)"""
        return float()
    def position(self):
        """QTextFrameFormat.Position QTextFrameFormat.position(None self)"""
        return QTextFrameFormat.Position()
    def setPosition(self, _f):
        """None QTextFrameFormat.setPosition(None self, QTextFrameFormat.Position _f)"""
        return None
    def isValid(self):
        """bool QTextFrameFormat.isValid(None self)"""
        return bool()


class QTextTableFormat(QTextFrameFormat):
    """"""
    def __init__(self):
        """None QTextTableFormat.__init__(None self)"""
        return None
    def __init__(self):
        """QTextTableFormat QTextTableFormat.__init__(None self)"""
        return QTextTableFormat()
    def headerRowCount(self):
        """int QTextTableFormat.headerRowCount(None self)"""
        return int()
    def setHeaderRowCount(self, _count):
        """None QTextTableFormat.setHeaderRowCount(None self, int _count)"""
        return None
    def setAlignment(self, _aalignment):
        """None QTextTableFormat.setAlignment(None self, Qt.Alignment _aalignment)"""
        return None
    def setCellPadding(self, _apadding):
        """None QTextTableFormat.setCellPadding(None self, float _apadding)"""
        return None
    def setColumns(self, _acolumns):
        """None QTextTableFormat.setColumns(None self, int _acolumns)"""
        return None
    def alignment(self):
        """Qt.Alignment QTextTableFormat.alignment(None self)"""
        return Qt.Alignment()
    def cellPadding(self):
        """float QTextTableFormat.cellPadding(None self)"""
        return float()
    def setCellSpacing(self, _spacing):
        """None QTextTableFormat.setCellSpacing(None self, float _spacing)"""
        return None
    def cellSpacing(self):
        """float QTextTableFormat.cellSpacing(None self)"""
        return float()
    def clearColumnWidthConstraints(self):
        """None QTextTableFormat.clearColumnWidthConstraints(None self)"""
        return None
    def columnWidthConstraints(self):
        """list-of-QTextLength QTextTableFormat.columnWidthConstraints(None self)"""
        return [QTextLength()]
    def setColumnWidthConstraints(self, _constraints):
        """None QTextTableFormat.setColumnWidthConstraints(None self, list-of-QTextLength _constraints)"""
        return None
    def columns(self):
        """int QTextTableFormat.columns(None self)"""
        return int()
    def isValid(self):
        """bool QTextTableFormat.isValid(None self)"""
        return bool()


class QTextTableCellFormat(QTextCharFormat):
    """"""
    def __init__(self):
        """None QTextTableCellFormat.__init__(None self)"""
        return None
    def __init__(self):
        """QTextTableCellFormat QTextTableCellFormat.__init__(None self)"""
        return QTextTableCellFormat()
    def setPadding(self, _padding):
        """None QTextTableCellFormat.setPadding(None self, float _padding)"""
        return None
    def rightPadding(self):
        """float QTextTableCellFormat.rightPadding(None self)"""
        return float()
    def setRightPadding(self, _padding):
        """None QTextTableCellFormat.setRightPadding(None self, float _padding)"""
        return None
    def leftPadding(self):
        """float QTextTableCellFormat.leftPadding(None self)"""
        return float()
    def setLeftPadding(self, _padding):
        """None QTextTableCellFormat.setLeftPadding(None self, float _padding)"""
        return None
    def bottomPadding(self):
        """float QTextTableCellFormat.bottomPadding(None self)"""
        return float()
    def setBottomPadding(self, _padding):
        """None QTextTableCellFormat.setBottomPadding(None self, float _padding)"""
        return None
    def topPadding(self):
        """float QTextTableCellFormat.topPadding(None self)"""
        return float()
    def setTopPadding(self, _padding):
        """None QTextTableCellFormat.setTopPadding(None self, float _padding)"""
        return None
    def isValid(self):
        """bool QTextTableCellFormat.isValid(None self)"""
        return bool()


class QTextInlineObject():
    """"""
    def __init__(self):
        """None QTextInlineObject.__init__(None self)"""
        return None
    def __init__(self):
        """QTextInlineObject QTextInlineObject.__init__(None self)"""
        return QTextInlineObject()
    def format(self):
        """QTextFormat QTextInlineObject.format(None self)"""
        return QTextFormat()
    def formatIndex(self):
        """int QTextInlineObject.formatIndex(None self)"""
        return int()
    def textPosition(self):
        """int QTextInlineObject.textPosition(None self)"""
        return int()
    def setDescent(self, _d):
        """None QTextInlineObject.setDescent(None self, float _d)"""
        return None
    def setAscent(self, _a):
        """None QTextInlineObject.setAscent(None self, float _a)"""
        return None
    def setWidth(self, _w):
        """None QTextInlineObject.setWidth(None self, float _w)"""
        return None
    def textDirection(self):
        """Qt.LayoutDirection QTextInlineObject.textDirection(None self)"""
        return Qt.LayoutDirection()
    def height(self):
        """float QTextInlineObject.height(None self)"""
        return float()
    def descent(self):
        """float QTextInlineObject.descent(None self)"""
        return float()
    def ascent(self):
        """float QTextInlineObject.ascent(None self)"""
        return float()
    def width(self):
        """float QTextInlineObject.width(None self)"""
        return float()
    def rect(self):
        """QRectF QTextInlineObject.rect(None self)"""
        return QRectF()
    def isValid(self):
        """bool QTextInlineObject.isValid(None self)"""
        return bool()


class QTextLayout():
    """"""
    SkipCharacters = int() # QTextLayout.CursorMode enum
    SkipWords = int() # QTextLayout.CursorMode enum

    def __init__(self):
        """None QTextLayout.__init__(None self)"""
        return None
    def __init__(self, _text):
        """None QTextLayout.__init__(None self, QString _text)"""
        return None
    def __init__(self, _text, _font, _paintDevice):
        """None QTextLayout.__init__(None self, QString _text, QFont _font, QPaintDevice _paintDevice)"""
        return None
    def __init__(self, _b):
        """None QTextLayout.__init__(None self, QTextBlock _b)"""
        return None
    def clearLayout(self):
        """None QTextLayout.clearLayout(None self)"""
        return None
    def maximumWidth(self):
        """float QTextLayout.maximumWidth(None self)"""
        return float()
    def minimumWidth(self):
        """float QTextLayout.minimumWidth(None self)"""
        return float()
    def boundingRect(self):
        """QRectF QTextLayout.boundingRect(None self)"""
        return QRectF()
    def setPosition(self, _p):
        """None QTextLayout.setPosition(None self, QPointF _p)"""
        return None
    def position(self):
        """QPointF QTextLayout.position(None self)"""
        return QPointF()
    def drawCursor(self, _p, _pos, _cursorPosition):
        """None QTextLayout.drawCursor(None self, QPainter _p, QPointF _pos, int _cursorPosition)"""
        return None
    def drawCursor(self, _p, _pos, _cursorPosition, _width):
        """None QTextLayout.drawCursor(None self, QPainter _p, QPointF _pos, int _cursorPosition, int _width)"""
        return None
    def draw(self, _p, _pos, _selections, _clip):
        """None QTextLayout.draw(None self, QPainter _p, QPointF _pos, list-of-QTextLayout.FormatRange _selections, QRectF _clip)"""
        return None
    def previousCursorPosition(self, _oldPos, _mode):
        """int QTextLayout.previousCursorPosition(None self, int _oldPos, QTextLayout.CursorMode _mode)"""
        return int()
    def nextCursorPosition(self, _oldPos, _mode):
        """int QTextLayout.nextCursorPosition(None self, int _oldPos, QTextLayout.CursorMode _mode)"""
        return int()
    def isValidCursorPosition(self, _pos):
        """bool QTextLayout.isValidCursorPosition(None self, int _pos)"""
        return bool()
    def lineForTextPosition(self, _pos):
        """QTextLine QTextLayout.lineForTextPosition(None self, int _pos)"""
        return QTextLine()
    def lineAt(self, _i):
        """QTextLine QTextLayout.lineAt(None self, int _i)"""
        return QTextLine()
    def lineCount(self):
        """int QTextLayout.lineCount(None self)"""
        return int()
    def createLine(self):
        """QTextLine QTextLayout.createLine(None self)"""
        return QTextLine()
    def endLayout(self):
        """None QTextLayout.endLayout(None self)"""
        return None
    def beginLayout(self):
        """None QTextLayout.beginLayout(None self)"""
        return None
    def cacheEnabled(self):
        """bool QTextLayout.cacheEnabled(None self)"""
        return bool()
    def setCacheEnabled(self, _enable):
        """None QTextLayout.setCacheEnabled(None self, bool _enable)"""
        return None
    def clearAdditionalFormats(self):
        """None QTextLayout.clearAdditionalFormats(None self)"""
        return None
    def additionalFormats(self):
        """list-of-QTextLayout.FormatRange QTextLayout.additionalFormats(None self)"""
        return [QTextLayout.FormatRange()]
    def setAdditionalFormats(self, _overrides):
        """None QTextLayout.setAdditionalFormats(None self, list-of-QTextLayout.FormatRange _overrides)"""
        return None
    def preeditAreaText(self):
        """QString QTextLayout.preeditAreaText(None self)"""
        return QString()
    def preeditAreaPosition(self):
        """int QTextLayout.preeditAreaPosition(None self)"""
        return int()
    def setPreeditArea(self, _position, _text):
        """None QTextLayout.setPreeditArea(None self, int _position, QString _text)"""
        return None
    def textOption(self):
        """QTextOption QTextLayout.textOption(None self)"""
        return QTextOption()
    def setTextOption(self, _option):
        """None QTextLayout.setTextOption(None self, QTextOption _option)"""
        return None
    def text(self):
        """QString QTextLayout.text(None self)"""
        return QString()
    def setText(self, _string):
        """None QTextLayout.setText(None self, QString _string)"""
        return None
    def font(self):
        """QFont QTextLayout.font(None self)"""
        return QFont()
    def setFont(self, _f):
        """None QTextLayout.setFont(None self, QFont _f)"""
        return None


class QTextLine():
    """"""
    CursorBetweenCharacters = int() # QTextLine.CursorPosition enum
    CursorOnCharacter = int() # QTextLine.CursorPosition enum

    Leading = int() # QTextLine.Edge enum
    Trailing = int() # QTextLine.Edge enum

    def __init__(self):
        """None QTextLine.__init__(None self)"""
        return None
    def __init__(self):
        """QTextLine QTextLine.__init__(None self)"""
        return QTextLine()
    def horizontalAdvance(self):
        """float QTextLine.horizontalAdvance(None self)"""
        return float()
    def leadingIncluded(self):
        """bool QTextLine.leadingIncluded(None self)"""
        return bool()
    def setLeadingIncluded(self, _included):
        """None QTextLine.setLeadingIncluded(None self, bool _included)"""
        return None
    def leading(self):
        """float QTextLine.leading(None self)"""
        return float()
    def position(self):
        """QPointF QTextLine.position(None self)"""
        return QPointF()
    def draw(self, _painter, _position, _selection):
        """None QTextLine.draw(None self, QPainter _painter, QPointF _position, QTextLayout.FormatRange _selection)"""
        return None
    def lineNumber(self):
        """int QTextLine.lineNumber(None self)"""
        return int()
    def textLength(self):
        """int QTextLine.textLength(None self)"""
        return int()
    def textStart(self):
        """int QTextLine.textStart(None self)"""
        return int()
    def setPosition(self, _pos):
        """None QTextLine.setPosition(None self, QPointF _pos)"""
        return None
    def setNumColumns(self, _columns):
        """None QTextLine.setNumColumns(None self, int _columns)"""
        return None
    def setNumColumns(self, _columns, _alignmentWidth):
        """None QTextLine.setNumColumns(None self, int _columns, float _alignmentWidth)"""
        return None
    def setLineWidth(self, _width):
        """None QTextLine.setLineWidth(None self, float _width)"""
        return None
    def xToCursor(self, _x, _edge):
        """int QTextLine.xToCursor(None self, float _x, QTextLine.CursorPosition _edge)"""
        return int()
    def cursorToX(self, _cursorPos, _edge):
        """float QTextLine.cursorToX(None self, int _cursorPos, QTextLine.Edge _edge)"""
        return float()
    def naturalTextRect(self):
        """QRectF QTextLine.naturalTextRect(None self)"""
        return QRectF()
    def naturalTextWidth(self):
        """float QTextLine.naturalTextWidth(None self)"""
        return float()
    def height(self):
        """float QTextLine.height(None self)"""
        return float()
    def descent(self):
        """float QTextLine.descent(None self)"""
        return float()
    def ascent(self):
        """float QTextLine.ascent(None self)"""
        return float()
    def width(self):
        """float QTextLine.width(None self)"""
        return float()
    def y(self):
        """float QTextLine.y(None self)"""
        return float()
    def x(self):
        """float QTextLine.x(None self)"""
        return float()
    def rect(self):
        """QRectF QTextLine.rect(None self)"""
        return QRectF()
    def isValid(self):
        """bool QTextLine.isValid(None self)"""
        return bool()


class QTextObject(QObject):
    """"""
    def __init__(self, _doc):
        """None QTextObject.__init__(None self, QTextDocument _doc)"""
        return None
    def objectIndex(self):
        """int QTextObject.objectIndex(None self)"""
        return int()
    def document(self):
        """QTextDocument QTextObject.document(None self)"""
        return QTextDocument()
    def formatIndex(self):
        """int QTextObject.formatIndex(None self)"""
        return int()
    def format(self):
        """QTextFormat QTextObject.format(None self)"""
        return QTextFormat()
    def setFormat(self, _format):
        """None QTextObject.setFormat(None self, QTextFormat _format)"""
        return None


class QTextBlockGroup(QTextObject):
    """"""
    def __init__(self, _doc):
        """None QTextBlockGroup.__init__(None self, QTextDocument _doc)"""
        return None
    def blockList(self):
        """list-of-QTextBlock QTextBlockGroup.blockList(None self)"""
        return [QTextBlock()]
    def blockFormatChanged(self, _block):
        """None QTextBlockGroup.blockFormatChanged(None self, QTextBlock _block)"""
        return None
    def blockRemoved(self, _block):
        """None QTextBlockGroup.blockRemoved(None self, QTextBlock _block)"""
        return None
    def blockInserted(self, _block):
        """None QTextBlockGroup.blockInserted(None self, QTextBlock _block)"""
        return None


class QTextList(QTextBlockGroup):
    """"""
    def __init__(self, _doc):
        """None QTextList.__init__(None self, QTextDocument _doc)"""
        return None
    def setFormat(self, _aformat):
        """None QTextList.setFormat(None self, QTextListFormat _aformat)"""
        return None
    def format(self):
        """QTextListFormat QTextList.format(None self)"""
        return QTextListFormat()
    def add(self, _block):
        """None QTextList.add(None self, QTextBlock _block)"""
        return None
    def remove(self):
        """QTextBlock QTextList.remove(None self)"""
        return QTextBlock()
    def removeItem(self, _i):
        """None QTextList.removeItem(None self, int _i)"""
        return None
    def itemText(self):
        """QTextBlock QTextList.itemText(None self)"""
        return QTextBlock()
    def itemNumber(self):
        """QTextBlock QTextList.itemNumber(None self)"""
        return QTextBlock()
    def item(self, _i):
        """QTextBlock QTextList.item(None self, int _i)"""
        return QTextBlock()
    def isEmpty(self):
        """bool QTextList.isEmpty(None self)"""
        return bool()
    def __len__(self):
        """ QTextList.__len__(None self)"""
        return ()
    def count(self):
        """int QTextList.count(None self)"""
        return int()


class QTextFrame(QTextObject):
    """"""
    def __init__(self, _doc):
        """None QTextFrame.__init__(None self, QTextDocument _doc)"""
        return None
    def setFrameFormat(self, _aformat):
        """None QTextFrame.setFrameFormat(None self, QTextFrameFormat _aformat)"""
        return None
    def end(self):
        """QTextFrame.iterator QTextFrame.end(None self)"""
        return QTextFrame.iterator()
    def begin(self):
        """QTextFrame.iterator QTextFrame.begin(None self)"""
        return QTextFrame.iterator()
    def parentFrame(self):
        """QTextFrame QTextFrame.parentFrame(None self)"""
        return QTextFrame()
    def childFrames(self):
        """list-of-QTextFrame QTextFrame.childFrames(None self)"""
        return [QTextFrame()]
    def lastPosition(self):
        """int QTextFrame.lastPosition(None self)"""
        return int()
    def firstPosition(self):
        """int QTextFrame.firstPosition(None self)"""
        return int()
    def lastCursorPosition(self):
        """QTextCursor QTextFrame.lastCursorPosition(None self)"""
        return QTextCursor()
    def firstCursorPosition(self):
        """QTextCursor QTextFrame.firstCursorPosition(None self)"""
        return QTextCursor()
    def frameFormat(self):
        """QTextFrameFormat QTextFrame.frameFormat(None self)"""
        return QTextFrameFormat()


class QTextBlock():
    """"""
    def __init__(self):
        """None QTextBlock.__init__(None self)"""
        return None
    def __init__(self, _o):
        """None QTextBlock.__init__(None self, QTextBlock _o)"""
        return None
    def __ge__(self, _o):
        """bool QTextBlock.__ge__(None self, QTextBlock _o)"""
        return bool()
    def textDirection(self):
        """Qt.LayoutDirection QTextBlock.textDirection(None self)"""
        return Qt.LayoutDirection()
    def lineCount(self):
        """int QTextBlock.lineCount(None self)"""
        return int()
    def setLineCount(self, _count):
        """None QTextBlock.setLineCount(None self, int _count)"""
        return None
    def firstLineNumber(self):
        """int QTextBlock.firstLineNumber(None self)"""
        return int()
    def blockNumber(self):
        """int QTextBlock.blockNumber(None self)"""
        return int()
    def setVisible(self, _visible):
        """None QTextBlock.setVisible(None self, bool _visible)"""
        return None
    def isVisible(self):
        """bool QTextBlock.isVisible(None self)"""
        return bool()
    def setRevision(self, _rev):
        """None QTextBlock.setRevision(None self, int _rev)"""
        return None
    def revision(self):
        """int QTextBlock.revision(None self)"""
        return int()
    def clearLayout(self):
        """None QTextBlock.clearLayout(None self)"""
        return None
    def setUserState(self, _state):
        """None QTextBlock.setUserState(None self, int _state)"""
        return None
    def userState(self):
        """int QTextBlock.userState(None self)"""
        return int()
    def setUserData(self, _data):
        """None QTextBlock.setUserData(None self, QTextBlockUserData _data)"""
        return None
    def userData(self):
        """QTextBlockUserData QTextBlock.userData(None self)"""
        return QTextBlockUserData()
    def previous(self):
        """QTextBlock QTextBlock.previous(None self)"""
        return QTextBlock()
    def next(self):
        """QTextBlock QTextBlock.next(None self)"""
        return QTextBlock()
    def end(self):
        """QTextBlock.iterator QTextBlock.end(None self)"""
        return QTextBlock.iterator()
    def begin(self):
        """QTextBlock.iterator QTextBlock.begin(None self)"""
        return QTextBlock.iterator()
    def textList(self):
        """QTextList QTextBlock.textList(None self)"""
        return QTextList()
    def document(self):
        """QTextDocument QTextBlock.document(None self)"""
        return QTextDocument()
    def text(self):
        """QString QTextBlock.text(None self)"""
        return QString()
    def charFormatIndex(self):
        """int QTextBlock.charFormatIndex(None self)"""
        return int()
    def charFormat(self):
        """QTextCharFormat QTextBlock.charFormat(None self)"""
        return QTextCharFormat()
    def blockFormatIndex(self):
        """int QTextBlock.blockFormatIndex(None self)"""
        return int()
    def blockFormat(self):
        """QTextBlockFormat QTextBlock.blockFormat(None self)"""
        return QTextBlockFormat()
    def layout(self):
        """QTextLayout QTextBlock.layout(None self)"""
        return QTextLayout()
    def contains(self, _position):
        """bool QTextBlock.contains(None self, int _position)"""
        return bool()
    def length(self):
        """int QTextBlock.length(None self)"""
        return int()
    def position(self):
        """int QTextBlock.position(None self)"""
        return int()
    def __lt__(self, _o):
        """bool QTextBlock.__lt__(None self, QTextBlock _o)"""
        return bool()
    def __ne__(self, _o):
        """bool QTextBlock.__ne__(None self, QTextBlock _o)"""
        return bool()
    def __eq__(self, _o):
        """bool QTextBlock.__eq__(None self, QTextBlock _o)"""
        return bool()
    def isValid(self):
        """bool QTextBlock.isValid(None self)"""
        return bool()


class QTextFragment():
    """"""
    def __init__(self):
        """None QTextFragment.__init__(None self)"""
        return None
    def __init__(self, _o):
        """None QTextFragment.__init__(None self, QTextFragment _o)"""
        return None
    def __ge__(self, _o):
        """bool QTextFragment.__ge__(None self, QTextFragment _o)"""
        return bool()
    def text(self):
        """QString QTextFragment.text(None self)"""
        return QString()
    def charFormatIndex(self):
        """int QTextFragment.charFormatIndex(None self)"""
        return int()
    def charFormat(self):
        """QTextCharFormat QTextFragment.charFormat(None self)"""
        return QTextCharFormat()
    def contains(self, _position):
        """bool QTextFragment.contains(None self, int _position)"""
        return bool()
    def length(self):
        """int QTextFragment.length(None self)"""
        return int()
    def position(self):
        """int QTextFragment.position(None self)"""
        return int()
    def __lt__(self, _o):
        """bool QTextFragment.__lt__(None self, QTextFragment _o)"""
        return bool()
    def __ne__(self, _o):
        """bool QTextFragment.__ne__(None self, QTextFragment _o)"""
        return bool()
    def __eq__(self, _o):
        """bool QTextFragment.__eq__(None self, QTextFragment _o)"""
        return bool()
    def isValid(self):
        """bool QTextFragment.isValid(None self)"""
        return bool()


class QTextBlockUserData():
    """"""
    def __init__(self):
        """None QTextBlockUserData.__init__(None self)"""
        return None
    def __init__(self):
        """QTextBlockUserData QTextBlockUserData.__init__(None self)"""
        return QTextBlockUserData()


class QTextOption():
    """"""
    LeftTab = int() # QTextOption.TabType enum
    RightTab = int() # QTextOption.TabType enum
    CenterTab = int() # QTextOption.TabType enum
    DelimiterTab = int() # QTextOption.TabType enum

    IncludeTrailingSpaces = int() # QTextOption.Flag enum
    ShowTabsAndSpaces = int() # QTextOption.Flag enum
    ShowLineAndParagraphSeparators = int() # QTextOption.Flag enum
    AddSpaceForLineAndParagraphSeparators = int() # QTextOption.Flag enum
    SuppressColors = int() # QTextOption.Flag enum

    NoWrap = int() # QTextOption.WrapMode enum
    WordWrap = int() # QTextOption.WrapMode enum
    ManualWrap = int() # QTextOption.WrapMode enum
    WrapAnywhere = int() # QTextOption.WrapMode enum
    WrapAtWordBoundaryOrAnywhere = int() # QTextOption.WrapMode enum

    def __init__(self):
        """None QTextOption.__init__(None self)"""
        return None
    def __init__(self, _alignment):
        """None QTextOption.__init__(None self, Qt.Alignment _alignment)"""
        return None
    def __init__(self, _o):
        """None QTextOption.__init__(None self, QTextOption _o)"""
        return None
    def tabs(self):
        """list-of-QTextOption.Tab QTextOption.tabs(None self)"""
        return [QTextOption.Tab()]
    def setTabs(self, _tabStops):
        """None QTextOption.setTabs(None self, list-of-QTextOption.Tab _tabStops)"""
        return None
    def setTabStop(self, _atabStop):
        """None QTextOption.setTabStop(None self, float _atabStop)"""
        return None
    def setFlags(self, _aflags):
        """None QTextOption.setFlags(None self, QTextOption.Flags _aflags)"""
        return None
    def setAlignment(self, _aalignment):
        """None QTextOption.setAlignment(None self, Qt.Alignment _aalignment)"""
        return None
    def useDesignMetrics(self):
        """bool QTextOption.useDesignMetrics(None self)"""
        return bool()
    def setUseDesignMetrics(self, _b):
        """None QTextOption.setUseDesignMetrics(None self, bool _b)"""
        return None
    def tabArray(self):
        """list-of-float QTextOption.tabArray(None self)"""
        return [float()]
    def setTabArray(self, _tabStops):
        """None QTextOption.setTabArray(None self, list-of-float _tabStops)"""
        return None
    def tabStop(self):
        """float QTextOption.tabStop(None self)"""
        return float()
    def flags(self):
        """QTextOption.Flags QTextOption.flags(None self)"""
        return QTextOption.Flags()
    def wrapMode(self):
        """QTextOption.WrapMode QTextOption.wrapMode(None self)"""
        return QTextOption.WrapMode()
    def setWrapMode(self, _wrap):
        """None QTextOption.setWrapMode(None self, QTextOption.WrapMode _wrap)"""
        return None
    def textDirection(self):
        """Qt.LayoutDirection QTextOption.textDirection(None self)"""
        return Qt.LayoutDirection()
    def setTextDirection(self, _aDirection):
        """None QTextOption.setTextDirection(None self, Qt.LayoutDirection _aDirection)"""
        return None
    def alignment(self):
        """Qt.Alignment QTextOption.alignment(None self)"""
        return Qt.Alignment()


class QTextTableCell():
    """"""
    def __init__(self):
        """None QTextTableCell.__init__(None self)"""
        return None
    def __init__(self, _o):
        """None QTextTableCell.__init__(None self, QTextTableCell _o)"""
        return None
    def __ne__(self, _other):
        """bool QTextTableCell.__ne__(None self, QTextTableCell _other)"""
        return bool()
    def __eq__(self, _other):
        """bool QTextTableCell.__eq__(None self, QTextTableCell _other)"""
        return bool()
    def tableCellFormatIndex(self):
        """int QTextTableCell.tableCellFormatIndex(None self)"""
        return int()
    def lastCursorPosition(self):
        """QTextCursor QTextTableCell.lastCursorPosition(None self)"""
        return QTextCursor()
    def firstCursorPosition(self):
        """QTextCursor QTextTableCell.firstCursorPosition(None self)"""
        return QTextCursor()
    def isValid(self):
        """bool QTextTableCell.isValid(None self)"""
        return bool()
    def columnSpan(self):
        """int QTextTableCell.columnSpan(None self)"""
        return int()
    def rowSpan(self):
        """int QTextTableCell.rowSpan(None self)"""
        return int()
    def column(self):
        """int QTextTableCell.column(None self)"""
        return int()
    def row(self):
        """int QTextTableCell.row(None self)"""
        return int()
    def setFormat(self, _format):
        """None QTextTableCell.setFormat(None self, QTextCharFormat _format)"""
        return None
    def format(self):
        """QTextCharFormat QTextTableCell.format(None self)"""
        return QTextCharFormat()


class QTextTable(QTextFrame):
    """"""
    def __init__(self, _doc):
        """None QTextTable.__init__(None self, QTextDocument _doc)"""
        return None
    def appendColumns(self, _count):
        """None QTextTable.appendColumns(None self, int _count)"""
        return None
    def appendRows(self, _count):
        """None QTextTable.appendRows(None self, int _count)"""
        return None
    def setFormat(self, _aformat):
        """None QTextTable.setFormat(None self, QTextTableFormat _aformat)"""
        return None
    def format(self):
        """QTextTableFormat QTextTable.format(None self)"""
        return QTextTableFormat()
    def rowEnd(self, _c):
        """QTextCursor QTextTable.rowEnd(None self, QTextCursor _c)"""
        return QTextCursor()
    def rowStart(self, _c):
        """QTextCursor QTextTable.rowStart(None self, QTextCursor _c)"""
        return QTextCursor()
    def cellAt(self, _row, _col):
        """QTextTableCell QTextTable.cellAt(None self, int _row, int _col)"""
        return QTextTableCell()
    def cellAt(self, _position):
        """QTextTableCell QTextTable.cellAt(None self, int _position)"""
        return QTextTableCell()
    def cellAt(self, _c):
        """QTextTableCell QTextTable.cellAt(None self, QTextCursor _c)"""
        return QTextTableCell()
    def columns(self):
        """int QTextTable.columns(None self)"""
        return int()
    def rows(self):
        """int QTextTable.rows(None self)"""
        return int()
    def splitCell(self, _row, _col, _numRows, _numCols):
        """None QTextTable.splitCell(None self, int _row, int _col, int _numRows, int _numCols)"""
        return None
    def mergeCells(self, _row, _col, _numRows, _numCols):
        """None QTextTable.mergeCells(None self, int _row, int _col, int _numRows, int _numCols)"""
        return None
    def mergeCells(self, _cursor):
        """None QTextTable.mergeCells(None self, QTextCursor _cursor)"""
        return None
    def removeColumns(self, _pos, _num):
        """None QTextTable.removeColumns(None self, int _pos, int _num)"""
        return None
    def removeRows(self, _pos, _num):
        """None QTextTable.removeRows(None self, int _pos, int _num)"""
        return None
    def insertColumns(self, _pos, _num):
        """None QTextTable.insertColumns(None self, int _pos, int _num)"""
        return None
    def insertRows(self, _pos, _num):
        """None QTextTable.insertRows(None self, int _pos, int _num)"""
        return None
    def resize(self, _rows, _cols):
        """None QTextTable.resize(None self, int _rows, int _cols)"""
        return None


class QToolBar(QWidget):
    """"""
    def __init__(self, _title, _parent):
        """None QToolBar.__init__(None self, QString _title, QWidget _parent)"""
        return None
    def __init__(self, _parent):
        """None QToolBar.__init__(None self, QWidget _parent)"""
        return None
    def isFloating(self):
        """bool QToolBar.isFloating(None self)"""
        return bool()
    def setFloatable(self, _floatable):
        """None QToolBar.setFloatable(None self, bool _floatable)"""
        return None
    def isFloatable(self):
        """bool QToolBar.isFloatable(None self)"""
        return bool()
    def event(self, _event):
        """bool QToolBar.event(None self, QEvent _event)"""
        return bool()
    def resizeEvent(self, _event):
        """None QToolBar.resizeEvent(None self, QResizeEvent _event)"""
        return None
    def paintEvent(self, _event):
        """None QToolBar.paintEvent(None self, QPaintEvent _event)"""
        return None
    def childEvent(self, _event):
        """None QToolBar.childEvent(None self, QChildEvent _event)"""
        return None
    def changeEvent(self, _event):
        """None QToolBar.changeEvent(None self, QEvent _event)"""
        return None
    def actionEvent(self, _event):
        """None QToolBar.actionEvent(None self, QActionEvent _event)"""
        return None
    def initStyleOption(self, _option):
        """None QToolBar.initStyleOption(None self, QStyleOptionToolBar _option)"""
        return None
    def setToolButtonStyle(self, _toolButtonStyle):
        """None QToolBar.setToolButtonStyle(None self, Qt.ToolButtonStyle _toolButtonStyle)"""
        return None
    def setIconSize(self, _iconSize):
        """None QToolBar.setIconSize(None self, QSize _iconSize)"""
        return None
    def widgetForAction(self, _action):
        """QWidget QToolBar.widgetForAction(None self, QAction _action)"""
        return QWidget()
    def toolButtonStyle(self):
        """Qt.ToolButtonStyle QToolBar.toolButtonStyle(None self)"""
        return Qt.ToolButtonStyle()
    def iconSize(self):
        """QSize QToolBar.iconSize(None self)"""
        return QSize()
    def toggleViewAction(self):
        """QAction QToolBar.toggleViewAction(None self)"""
        return QAction()
    def actionAt(self, _p):
        """QAction QToolBar.actionAt(None self, QPoint _p)"""
        return QAction()
    def actionAt(self, _ax, _ay):
        """QAction QToolBar.actionAt(None self, int _ax, int _ay)"""
        return QAction()
    def actionGeometry(self, _action):
        """QRect QToolBar.actionGeometry(None self, QAction _action)"""
        return QRect()
    def insertWidget(self, _before, _widget):
        """QAction QToolBar.insertWidget(None self, QAction _before, QWidget _widget)"""
        return QAction()
    def addWidget(self, _widget):
        """QAction QToolBar.addWidget(None self, QWidget _widget)"""
        return QAction()
    def insertSeparator(self, _before):
        """QAction QToolBar.insertSeparator(None self, QAction _before)"""
        return QAction()
    def addSeparator(self):
        """QAction QToolBar.addSeparator(None self)"""
        return QAction()
    def addAction(self, _action):
        """None QToolBar.addAction(None self, QAction _action)"""
        return None
    def addAction(self, _text):
        """QAction QToolBar.addAction(None self, QString _text)"""
        return QAction()
    def addAction(self, _icon, _text):
        """QAction QToolBar.addAction(None self, QIcon _icon, QString _text)"""
        return QAction()
    def addAction(self, _text, _receiver, _member):
        """QAction QToolBar.addAction(None self, QString _text, QObject _receiver, SLOT()SLOT() _member)"""
        return QAction()
    def addAction(self, _text, _receiver):
        """QAction QToolBar.addAction(None self, QString _text, callable _receiver)"""
        return QAction()
    def addAction(self, _icon, _text, _receiver, _member):
        """QAction QToolBar.addAction(None self, QIcon _icon, QString _text, QObject _receiver, SLOT()SLOT() _member)"""
        return QAction()
    def addAction(self, _icon, _text, _receiver):
        """QAction QToolBar.addAction(None self, QIcon _icon, QString _text, callable _receiver)"""
        return QAction()
    def clear(self):
        """None QToolBar.clear(None self)"""
        return None
    def orientation(self):
        """Qt.Orientation QToolBar.orientation(None self)"""
        return Qt.Orientation()
    def setOrientation(self, _orientation):
        """None QToolBar.setOrientation(None self, Qt.Orientation _orientation)"""
        return None
    def isAreaAllowed(self, _area):
        """bool QToolBar.isAreaAllowed(None self, Qt.ToolBarArea _area)"""
        return bool()
    def allowedAreas(self):
        """Qt.ToolBarAreas QToolBar.allowedAreas(None self)"""
        return Qt.ToolBarAreas()
    def setAllowedAreas(self, _areas):
        """None QToolBar.setAllowedAreas(None self, Qt.ToolBarAreas _areas)"""
        return None
    def isMovable(self):
        """bool QToolBar.isMovable(None self)"""
        return bool()
    def setMovable(self, _movable):
        """None QToolBar.setMovable(None self, bool _movable)"""
        return None


class QToolBox(QFrame):
    """"""
    def __init__(self, _parent, _flags):
        """None QToolBox.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def changeEvent(self):
        """QEvent QToolBox.changeEvent(None self)"""
        return QEvent()
    def showEvent(self, _e):
        """None QToolBox.showEvent(None self, QShowEvent _e)"""
        return None
    def event(self, _e):
        """bool QToolBox.event(None self, QEvent _e)"""
        return bool()
    def itemRemoved(self, _index):
        """None QToolBox.itemRemoved(None self, int _index)"""
        return None
    def itemInserted(self, _index):
        """None QToolBox.itemInserted(None self, int _index)"""
        return None
    def setCurrentWidget(self, _widget):
        """None QToolBox.setCurrentWidget(None self, QWidget _widget)"""
        return None
    def setCurrentIndex(self, _index):
        """None QToolBox.setCurrentIndex(None self, int _index)"""
        return None
    def __len__(self):
        """ QToolBox.__len__(None self)"""
        return ()
    def count(self):
        """int QToolBox.count(None self)"""
        return int()
    def indexOf(self, _widget):
        """int QToolBox.indexOf(None self, QWidget _widget)"""
        return int()
    def widget(self, _index):
        """QWidget QToolBox.widget(None self, int _index)"""
        return QWidget()
    def currentWidget(self):
        """QWidget QToolBox.currentWidget(None self)"""
        return QWidget()
    def currentIndex(self):
        """int QToolBox.currentIndex(None self)"""
        return int()
    def itemToolTip(self, _index):
        """QString QToolBox.itemToolTip(None self, int _index)"""
        return QString()
    def setItemToolTip(self, _index, _toolTip):
        """None QToolBox.setItemToolTip(None self, int _index, QString _toolTip)"""
        return None
    def itemIcon(self, _index):
        """QIcon QToolBox.itemIcon(None self, int _index)"""
        return QIcon()
    def setItemIcon(self, _index, _icon):
        """None QToolBox.setItemIcon(None self, int _index, QIcon _icon)"""
        return None
    def itemText(self, _index):
        """QString QToolBox.itemText(None self, int _index)"""
        return QString()
    def setItemText(self, _index, _text):
        """None QToolBox.setItemText(None self, int _index, QString _text)"""
        return None
    def isItemEnabled(self, _index):
        """bool QToolBox.isItemEnabled(None self, int _index)"""
        return bool()
    def setItemEnabled(self, _index, _enabled):
        """None QToolBox.setItemEnabled(None self, int _index, bool _enabled)"""
        return None
    def removeItem(self, _index):
        """None QToolBox.removeItem(None self, int _index)"""
        return None
    def insertItem(self, _index, _item, _text):
        """int QToolBox.insertItem(None self, int _index, QWidget _item, QString _text)"""
        return int()
    def insertItem(self, _index, _widget, _icon, _text):
        """int QToolBox.insertItem(None self, int _index, QWidget _widget, QIcon _icon, QString _text)"""
        return int()
    def addItem(self, _item, _text):
        """int QToolBox.addItem(None self, QWidget _item, QString _text)"""
        return int()
    def addItem(self, _item, _iconSet, _text):
        """int QToolBox.addItem(None self, QWidget _item, QIcon _iconSet, QString _text)"""
        return int()


class QToolButton(QAbstractButton):
    """"""
    DelayedPopup = int() # QToolButton.ToolButtonPopupMode enum
    MenuButtonPopup = int() # QToolButton.ToolButtonPopupMode enum
    InstantPopup = int() # QToolButton.ToolButtonPopupMode enum

    def __init__(self, _parent):
        """None QToolButton.__init__(None self, QWidget _parent)"""
        return None
    def hitButton(self, _pos):
        """bool QToolButton.hitButton(None self, QPoint _pos)"""
        return bool()
    def nextCheckState(self):
        """None QToolButton.nextCheckState(None self)"""
        return None
    def mouseReleaseEvent(self):
        """QMouseEvent QToolButton.mouseReleaseEvent(None self)"""
        return QMouseEvent()
    def changeEvent(self):
        """QEvent QToolButton.changeEvent(None self)"""
        return QEvent()
    def timerEvent(self):
        """QTimerEvent QToolButton.timerEvent(None self)"""
        return QTimerEvent()
    def leaveEvent(self):
        """QEvent QToolButton.leaveEvent(None self)"""
        return QEvent()
    def enterEvent(self):
        """QEvent QToolButton.enterEvent(None self)"""
        return QEvent()
    def actionEvent(self):
        """QActionEvent QToolButton.actionEvent(None self)"""
        return QActionEvent()
    def paintEvent(self):
        """QPaintEvent QToolButton.paintEvent(None self)"""
        return QPaintEvent()
    def mousePressEvent(self):
        """QMouseEvent QToolButton.mousePressEvent(None self)"""
        return QMouseEvent()
    def event(self, _e):
        """bool QToolButton.event(None self, QEvent _e)"""
        return bool()
    def initStyleOption(self, _option):
        """None QToolButton.initStyleOption(None self, QStyleOptionToolButton _option)"""
        return None
    def setDefaultAction(self):
        """QAction QToolButton.setDefaultAction(None self)"""
        return QAction()
    def setToolButtonStyle(self, _style):
        """None QToolButton.setToolButtonStyle(None self, Qt.ToolButtonStyle _style)"""
        return None
    def showMenu(self):
        """None QToolButton.showMenu(None self)"""
        return None
    def autoRaise(self):
        """bool QToolButton.autoRaise(None self)"""
        return bool()
    def setAutoRaise(self, _enable):
        """None QToolButton.setAutoRaise(None self, bool _enable)"""
        return None
    def defaultAction(self):
        """QAction QToolButton.defaultAction(None self)"""
        return QAction()
    def popupMode(self):
        """QToolButton.ToolButtonPopupMode QToolButton.popupMode(None self)"""
        return QToolButton.ToolButtonPopupMode()
    def setPopupMode(self, _mode):
        """None QToolButton.setPopupMode(None self, QToolButton.ToolButtonPopupMode _mode)"""
        return None
    def menu(self):
        """QMenu QToolButton.menu(None self)"""
        return QMenu()
    def setMenu(self, _menu):
        """None QToolButton.setMenu(None self, QMenu _menu)"""
        return None
    def setArrowType(self, _type):
        """None QToolButton.setArrowType(None self, Qt.ArrowType _type)"""
        return None
    def arrowType(self):
        """Qt.ArrowType QToolButton.arrowType(None self)"""
        return Qt.ArrowType()
    def toolButtonStyle(self):
        """Qt.ToolButtonStyle QToolButton.toolButtonStyle(None self)"""
        return Qt.ToolButtonStyle()
    def minimumSizeHint(self):
        """QSize QToolButton.minimumSizeHint(None self)"""
        return QSize()
    def sizeHint(self):
        """QSize QToolButton.sizeHint(None self)"""
        return QSize()


class QToolTip():
    """"""
    def __init__(self):
        """QToolTip QToolTip.__init__(None self)"""
        return QToolTip()
    def text(self):
        """QString QToolTip.text(None self)"""
        return QString()
    def isVisible(self):
        """bool QToolTip.isVisible(None self)"""
        return bool()
    def setFont(self):
        """QFont QToolTip.setFont(None self)"""
        return QFont()
    def font(self):
        """QFont QToolTip.font(None self)"""
        return QFont()
    def setPalette(self):
        """QPalette QToolTip.setPalette(None self)"""
        return QPalette()
    def hideText(self):
        """None QToolTip.hideText(None self)"""
        return None
    def palette(self):
        """QPalette QToolTip.palette(None self)"""
        return QPalette()
    def showText(self, _pos, _text, _widget):
        """None QToolTip.showText(None self, QPoint _pos, QString _text, QWidget _widget)"""
        return None
    def showText(self, _pos, _text, _w, _rect):
        """None QToolTip.showText(None self, QPoint _pos, QString _text, QWidget _w, QRect _rect)"""
        return None


class QTransform():
    """"""
    TxNone = int() # QTransform.TransformationType enum
    TxTranslate = int() # QTransform.TransformationType enum
    TxScale = int() # QTransform.TransformationType enum
    TxRotate = int() # QTransform.TransformationType enum
    TxShear = int() # QTransform.TransformationType enum
    TxProject = int() # QTransform.TransformationType enum

    def __init__(self):
        """None QTransform.__init__(None self)"""
        return None
    def __init__(self, _m11, _m12, _m13, _m21, _m22, _m23, _m31, _m32, _m33):
        """None QTransform.__init__(None self, float _m11, float _m12, float _m13, float _m21, float _m22, float _m23, float _m31, float _m32, float _m33)"""
        return None
    def __init__(self, _h11, _h12, _h13, _h21, _h22, _h23):
        """None QTransform.__init__(None self, float _h11, float _h12, float _h13, float _h21, float _h22, float _h23)"""
        return None
    def __init__(self, _mtx):
        """None QTransform.__init__(None self, QMatrix _mtx)"""
        return None
    def __init__(self):
        """QTransform QTransform.__init__(None self)"""
        return QTransform()
    def __div__(self, _n):
        """QTransform QTransform.__div__(None self, float _n)"""
        return QTransform()
    def __add__(self, _n):
        """QTransform QTransform.__add__(None self, float _n)"""
        return QTransform()
    def __sub__(self, _n):
        """QTransform QTransform.__sub__(None self, float _n)"""
        return QTransform()
    def __isub__(self, _num):
        """QTransform QTransform.__isub__(None self, float _num)"""
        return QTransform()
    def __iadd__(self, _num):
        """QTransform QTransform.__iadd__(None self, float _num)"""
        return QTransform()
    def __idiv__(self, _div):
        """QTransform QTransform.__idiv__(None self, float _div)"""
        return QTransform()
    def fromScale(self, _dx, _dy):
        """QTransform QTransform.fromScale(None self, float _dx, float _dy)"""
        return QTransform()
    def fromTranslate(self, _dx, _dy):
        """QTransform QTransform.fromTranslate(None self, float _dx, float _dy)"""
        return QTransform()
    def dy(self):
        """float QTransform.dy(None self)"""
        return float()
    def dx(self):
        """float QTransform.dx(None self)"""
        return float()
    def m33(self):
        """float QTransform.m33(None self)"""
        return float()
    def m32(self):
        """float QTransform.m32(None self)"""
        return float()
    def m31(self):
        """float QTransform.m31(None self)"""
        return float()
    def m23(self):
        """float QTransform.m23(None self)"""
        return float()
    def m22(self):
        """float QTransform.m22(None self)"""
        return float()
    def m21(self):
        """float QTransform.m21(None self)"""
        return float()
    def m13(self):
        """float QTransform.m13(None self)"""
        return float()
    def m12(self):
        """float QTransform.m12(None self)"""
        return float()
    def m11(self):
        """float QTransform.m11(None self)"""
        return float()
    def det(self):
        """float QTransform.det(None self)"""
        return float()
    def determinant(self):
        """float QTransform.determinant(None self)"""
        return float()
    def isTranslating(self):
        """bool QTransform.isTranslating(None self)"""
        return bool()
    def isRotating(self):
        """bool QTransform.isRotating(None self)"""
        return bool()
    def isScaling(self):
        """bool QTransform.isScaling(None self)"""
        return bool()
    def isInvertible(self):
        """bool QTransform.isInvertible(None self)"""
        return bool()
    def isIdentity(self):
        """bool QTransform.isIdentity(None self)"""
        return bool()
    def isAffine(self):
        """bool QTransform.isAffine(None self)"""
        return bool()
    def toAffine(self):
        """QMatrix QTransform.toAffine(None self)"""
        return QMatrix()
    def mapRect(self):
        """QRect QTransform.mapRect(None self)"""
        return QRect()
    def mapRect(self):
        """QRectF QTransform.mapRect(None self)"""
        return QRectF()
    def mapToPolygon(self, _r):
        """QPolygon QTransform.mapToPolygon(None self, QRect _r)"""
        return QPolygon()
    def map(self, _x, _y, _tx, _ty):
        """None QTransform.map(None self, int _x, int _y, int _tx, int _ty)"""
        return None
    def map(self, _x, _y, _tx, _ty):
        """None QTransform.map(None self, float _x, float _y, float _tx, float _ty)"""
        return None
    def map(self, _p):
        """QPoint QTransform.map(None self, QPoint _p)"""
        return QPoint()
    def map(self, _p):
        """QPointF QTransform.map(None self, QPointF _p)"""
        return QPointF()
    def map(self, _l):
        """QLine QTransform.map(None self, QLine _l)"""
        return QLine()
    def map(self, _l):
        """QLineF QTransform.map(None self, QLineF _l)"""
        return QLineF()
    def map(self, _a):
        """QPolygonF QTransform.map(None self, QPolygonF _a)"""
        return QPolygonF()
    def map(self, _a):
        """QPolygon QTransform.map(None self, QPolygon _a)"""
        return QPolygon()
    def map(self, _r):
        """QRegion QTransform.map(None self, QRegion _r)"""
        return QRegion()
    def map(self, _p):
        """QPainterPath QTransform.map(None self, QPainterPath _p)"""
        return QPainterPath()
    def reset(self):
        """None QTransform.reset(None self)"""
        return None
    def __mul__(self, _o):
        """QTransform QTransform.__mul__(None self, QTransform _o)"""
        return QTransform()
    def __mul__(self, _n):
        """QTransform QTransform.__mul__(None self, float _n)"""
        return QTransform()
    def __imul__(self):
        """QTransform QTransform.__imul__(None self)"""
        return QTransform()
    def __imul__(self, _num):
        """QTransform QTransform.__imul__(None self, float _num)"""
        return QTransform()
    def __ne__(self):
        """QTransform QTransform.__ne__(None self)"""
        return QTransform()
    def __eq__(self):
        """QTransform QTransform.__eq__(None self)"""
        return QTransform()
    def quadToQuad(self, _one, _two, _result):
        """bool QTransform.quadToQuad(None self, QPolygonF _one, QPolygonF _two, QTransform _result)"""
        return bool()
    def quadToSquare(self, _quad, _result):
        """bool QTransform.quadToSquare(None self, QPolygonF _quad, QTransform _result)"""
        return bool()
    def squareToQuad(self, _square, _result):
        """bool QTransform.squareToQuad(None self, QPolygonF _square, QTransform _result)"""
        return bool()
    def rotateRadians(self, _angle, _axis):
        """QTransform QTransform.rotateRadians(None self, float _angle, Qt.Axis _axis)"""
        return QTransform()
    def rotate(self, _angle, _axis):
        """QTransform QTransform.rotate(None self, float _angle, Qt.Axis _axis)"""
        return QTransform()
    def shear(self, _sh, _sv):
        """QTransform QTransform.shear(None self, float _sh, float _sv)"""
        return QTransform()
    def scale(self, _sx, _sy):
        """QTransform QTransform.scale(None self, float _sx, float _sy)"""
        return QTransform()
    def translate(self, _dx, _dy):
        """QTransform QTransform.translate(None self, float _dx, float _dy)"""
        return QTransform()
    def transposed(self):
        """QTransform QTransform.transposed(None self)"""
        return QTransform()
    def adjoint(self):
        """QTransform QTransform.adjoint(None self)"""
        return QTransform()
    def inverted(self, _invertible):
        """QTransform QTransform.inverted(None self, bool _invertible)"""
        return QTransform()
    def setMatrix(self, _m11, _m12, _m13, _m21, _m22, _m23, _m31, _m32, _m33):
        """None QTransform.setMatrix(None self, float _m11, float _m12, float _m13, float _m21, float _m22, float _m23, float _m31, float _m32, float _m33)"""
        return None
    def type(self):
        """QTransform.TransformationType QTransform.type(None self)"""
        return QTransform.TransformationType()


class QTreeView(QAbstractItemView):
    """"""
    def __init__(self, _parent):
        """None QTreeView.__init__(None self, QWidget _parent)"""
        return None
    def setHeaderHidden(self, _hide):
        """None QTreeView.setHeaderHidden(None self, bool _hide)"""
        return None
    def isHeaderHidden(self):
        """bool QTreeView.isHeaderHidden(None self)"""
        return bool()
    def setExpandsOnDoubleClick(self, _enable):
        """None QTreeView.setExpandsOnDoubleClick(None self, bool _enable)"""
        return None
    def expandsOnDoubleClick(self):
        """bool QTreeView.expandsOnDoubleClick(None self)"""
        return bool()
    def currentChanged(self, _current, _previous):
        """None QTreeView.currentChanged(None self, QModelIndex _current, QModelIndex _previous)"""
        return None
    def selectionChanged(self, _selected, _deselected):
        """None QTreeView.selectionChanged(None self, QItemSelection _selected, QItemSelection _deselected)"""
        return None
    def rowHeight(self, _index):
        """int QTreeView.rowHeight(None self, QModelIndex _index)"""
        return int()
    def viewportEvent(self, _event):
        """bool QTreeView.viewportEvent(None self, QEvent _event)"""
        return bool()
    def dragMoveEvent(self, _event):
        """None QTreeView.dragMoveEvent(None self, QDragMoveEvent _event)"""
        return None
    def expandToDepth(self, _depth):
        """None QTreeView.expandToDepth(None self, int _depth)"""
        return None
    def wordWrap(self):
        """bool QTreeView.wordWrap(None self)"""
        return bool()
    def setWordWrap(self, _on):
        """None QTreeView.setWordWrap(None self, bool _on)"""
        return None
    def setFirstColumnSpanned(self, _row, _parent, _span):
        """None QTreeView.setFirstColumnSpanned(None self, int _row, QModelIndex _parent, bool _span)"""
        return None
    def isFirstColumnSpanned(self, _row, _parent):
        """bool QTreeView.isFirstColumnSpanned(None self, int _row, QModelIndex _parent)"""
        return bool()
    def setAutoExpandDelay(self, _delay):
        """None QTreeView.setAutoExpandDelay(None self, int _delay)"""
        return None
    def autoExpandDelay(self):
        """int QTreeView.autoExpandDelay(None self)"""
        return int()
    def allColumnsShowFocus(self):
        """bool QTreeView.allColumnsShowFocus(None self)"""
        return bool()
    def setAllColumnsShowFocus(self, _enable):
        """None QTreeView.setAllColumnsShowFocus(None self, bool _enable)"""
        return None
    def isAnimated(self):
        """bool QTreeView.isAnimated(None self)"""
        return bool()
    def setAnimated(self, _enable):
        """None QTreeView.setAnimated(None self, bool _enable)"""
        return None
    def isSortingEnabled(self):
        """bool QTreeView.isSortingEnabled(None self)"""
        return bool()
    def setSortingEnabled(self, _enable):
        """None QTreeView.setSortingEnabled(None self, bool _enable)"""
        return None
    def setColumnWidth(self, _column, _width):
        """None QTreeView.setColumnWidth(None self, int _column, int _width)"""
        return None
    def isIndexHidden(self, _index):
        """bool QTreeView.isIndexHidden(None self, QModelIndex _index)"""
        return bool()
    def horizontalScrollbarAction(self, _action):
        """None QTreeView.horizontalScrollbarAction(None self, int _action)"""
        return None
    def indexRowSizeHint(self, _index):
        """int QTreeView.indexRowSizeHint(None self, QModelIndex _index)"""
        return int()
    def sizeHintForColumn(self, _column):
        """int QTreeView.sizeHintForColumn(None self, int _column)"""
        return int()
    def updateGeometries(self):
        """None QTreeView.updateGeometries(None self)"""
        return None
    def keyPressEvent(self, _event):
        """None QTreeView.keyPressEvent(None self, QKeyEvent _event)"""
        return None
    def mouseDoubleClickEvent(self, _e):
        """None QTreeView.mouseDoubleClickEvent(None self, QMouseEvent _e)"""
        return None
    def mouseMoveEvent(self, _event):
        """None QTreeView.mouseMoveEvent(None self, QMouseEvent _event)"""
        return None
    def mousePressEvent(self, _e):
        """None QTreeView.mousePressEvent(None self, QMouseEvent _e)"""
        return None
    def drawTree(self, _painter, _region):
        """None QTreeView.drawTree(None self, QPainter _painter, QRegion _region)"""
        return None
    def drawBranches(self, _painter, _rect, _index):
        """None QTreeView.drawBranches(None self, QPainter _painter, QRect _rect, QModelIndex _index)"""
        return None
    def drawRow(self, _painter, _options, _index):
        """None QTreeView.drawRow(None self, QPainter _painter, QStyleOptionViewItem _options, QModelIndex _index)"""
        return None
    def mouseReleaseEvent(self, _event):
        """None QTreeView.mouseReleaseEvent(None self, QMouseEvent _event)"""
        return None
    def timerEvent(self, _event):
        """None QTreeView.timerEvent(None self, QTimerEvent _event)"""
        return None
    def paintEvent(self, _e):
        """None QTreeView.paintEvent(None self, QPaintEvent _e)"""
        return None
    def selectedIndexes(self):
        """list-of-QModelIndex QTreeView.selectedIndexes(None self)"""
        return [QModelIndex()]
    def visualRegionForSelection(self, _selection):
        """QRegion QTreeView.visualRegionForSelection(None self, QItemSelection _selection)"""
        return QRegion()
    def setSelection(self, _rect, _command):
        """None QTreeView.setSelection(None self, QRect _rect, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def verticalOffset(self):
        """int QTreeView.verticalOffset(None self)"""
        return int()
    def horizontalOffset(self):
        """int QTreeView.horizontalOffset(None self)"""
        return int()
    def moveCursor(self, _cursorAction, _modifiers):
        """QModelIndex QTreeView.moveCursor(None self, QAbstractItemView.CursorAction _cursorAction, Qt.KeyboardModifiers _modifiers)"""
        return QModelIndex()
    def rowsAboutToBeRemoved(self, _parent, _start, _end):
        """None QTreeView.rowsAboutToBeRemoved(None self, QModelIndex _parent, int _start, int _end)"""
        return None
    def rowsInserted(self, _parent, _start, _end):
        """None QTreeView.rowsInserted(None self, QModelIndex _parent, int _start, int _end)"""
        return None
    def scrollContentsBy(self, _dx, _dy):
        """None QTreeView.scrollContentsBy(None self, int _dx, int _dy)"""
        return None
    def rowsRemoved(self, _parent, _first, _last):
        """None QTreeView.rowsRemoved(None self, QModelIndex _parent, int _first, int _last)"""
        return None
    def reexpand(self):
        """None QTreeView.reexpand(None self)"""
        return None
    def columnMoved(self):
        """None QTreeView.columnMoved(None self)"""
        return None
    def columnCountChanged(self, _oldCount, _newCount):
        """None QTreeView.columnCountChanged(None self, int _oldCount, int _newCount)"""
        return None
    def columnResized(self, _column, _oldSize, _newSize):
        """None QTreeView.columnResized(None self, int _column, int _oldSize, int _newSize)"""
        return None
    def selectAll(self):
        """None QTreeView.selectAll(None self)"""
        return None
    def sortByColumn(self, _column):
        """None QTreeView.sortByColumn(None self, int _column)"""
        return None
    def sortByColumn(self, _column, _order):
        """None QTreeView.sortByColumn(None self, int _column, Qt.SortOrder _order)"""
        return None
    def resizeColumnToContents(self, _column):
        """None QTreeView.resizeColumnToContents(None self, int _column)"""
        return None
    def collapseAll(self):
        """None QTreeView.collapseAll(None self)"""
        return None
    def collapse(self, _index):
        """None QTreeView.collapse(None self, QModelIndex _index)"""
        return None
    def expandAll(self):
        """None QTreeView.expandAll(None self)"""
        return None
    def expand(self, _index):
        """None QTreeView.expand(None self, QModelIndex _index)"""
        return None
    def showColumn(self, _column):
        """None QTreeView.showColumn(None self, int _column)"""
        return None
    def hideColumn(self, _column):
        """None QTreeView.hideColumn(None self, int _column)"""
        return None
    def dataChanged(self, _topLeft, _bottomRight):
        """None QTreeView.dataChanged(None self, QModelIndex _topLeft, QModelIndex _bottomRight)"""
        return None
    def reset(self):
        """None QTreeView.reset(None self)"""
        return None
    def doItemsLayout(self):
        """None QTreeView.doItemsLayout(None self)"""
        return None
    def indexBelow(self, _index):
        """QModelIndex QTreeView.indexBelow(None self, QModelIndex _index)"""
        return QModelIndex()
    def indexAbove(self, _index):
        """QModelIndex QTreeView.indexAbove(None self, QModelIndex _index)"""
        return QModelIndex()
    def indexAt(self, _p):
        """QModelIndex QTreeView.indexAt(None self, QPoint _p)"""
        return QModelIndex()
    def scrollTo(self, _index, _hint):
        """None QTreeView.scrollTo(None self, QModelIndex _index, QAbstractItemView.ScrollHint _hint)"""
        return None
    def visualRect(self, _index):
        """QRect QTreeView.visualRect(None self, QModelIndex _index)"""
        return QRect()
    def keyboardSearch(self, _search):
        """None QTreeView.keyboardSearch(None self, QString _search)"""
        return None
    def setExpanded(self, _index, _expand):
        """None QTreeView.setExpanded(None self, QModelIndex _index, bool _expand)"""
        return None
    def isExpanded(self, _index):
        """bool QTreeView.isExpanded(None self, QModelIndex _index)"""
        return bool()
    def setRowHidden(self, _row, _parent, _hide):
        """None QTreeView.setRowHidden(None self, int _row, QModelIndex _parent, bool _hide)"""
        return None
    def isRowHidden(self, _row, _parent):
        """bool QTreeView.isRowHidden(None self, int _row, QModelIndex _parent)"""
        return bool()
    def setColumnHidden(self, _column, _hide):
        """None QTreeView.setColumnHidden(None self, int _column, bool _hide)"""
        return None
    def isColumnHidden(self, _column):
        """bool QTreeView.isColumnHidden(None self, int _column)"""
        return bool()
    def columnAt(self, _x):
        """int QTreeView.columnAt(None self, int _x)"""
        return int()
    def columnWidth(self, _column):
        """int QTreeView.columnWidth(None self, int _column)"""
        return int()
    def columnViewportPosition(self, _column):
        """int QTreeView.columnViewportPosition(None self, int _column)"""
        return int()
    def setItemsExpandable(self, _enable):
        """None QTreeView.setItemsExpandable(None self, bool _enable)"""
        return None
    def itemsExpandable(self):
        """bool QTreeView.itemsExpandable(None self)"""
        return bool()
    def setUniformRowHeights(self, _uniform):
        """None QTreeView.setUniformRowHeights(None self, bool _uniform)"""
        return None
    def uniformRowHeights(self):
        """bool QTreeView.uniformRowHeights(None self)"""
        return bool()
    def setRootIsDecorated(self, _show):
        """None QTreeView.setRootIsDecorated(None self, bool _show)"""
        return None
    def rootIsDecorated(self):
        """bool QTreeView.rootIsDecorated(None self)"""
        return bool()
    def setIndentation(self, _i):
        """None QTreeView.setIndentation(None self, int _i)"""
        return None
    def indentation(self):
        """int QTreeView.indentation(None self)"""
        return int()
    def setHeader(self, _header):
        """None QTreeView.setHeader(None self, QHeaderView _header)"""
        return None
    def header(self):
        """QHeaderView QTreeView.header(None self)"""
        return QHeaderView()
    def setSelectionModel(self, _selectionModel):
        """None QTreeView.setSelectionModel(None self, QItemSelectionModel _selectionModel)"""
        return None
    def setRootIndex(self, _index):
        """None QTreeView.setRootIndex(None self, QModelIndex _index)"""
        return None
    def setModel(self, _model):
        """None QTreeView.setModel(None self, QAbstractItemModel _model)"""
        return None


class QTreeWidgetItem():
    """"""
    ShowIndicator = int() # QTreeWidgetItem.ChildIndicatorPolicy enum
    DontShowIndicator = int() # QTreeWidgetItem.ChildIndicatorPolicy enum
    DontShowIndicatorWhenChildless = int() # QTreeWidgetItem.ChildIndicatorPolicy enum

    Type = int() # QTreeWidgetItem.ItemType enum
    UserType = int() # QTreeWidgetItem.ItemType enum

    def __init__(self, _type):
        """None QTreeWidgetItem.__init__(None self, int _type)"""
        return None
    def __init__(self, _strings, _type):
        """None QTreeWidgetItem.__init__(None self, QStringList _strings, int _type)"""
        return None
    def __init__(self, _parent, _type):
        """None QTreeWidgetItem.__init__(None self, QTreeWidget _parent, int _type)"""
        return None
    def __init__(self, _parent, _strings, _type):
        """None QTreeWidgetItem.__init__(None self, QTreeWidget _parent, QStringList _strings, int _type)"""
        return None
    def __init__(self, _parent, _preceding, _type):
        """None QTreeWidgetItem.__init__(None self, QTreeWidget _parent, QTreeWidgetItem _preceding, int _type)"""
        return None
    def __init__(self, _parent, _type):
        """None QTreeWidgetItem.__init__(None self, QTreeWidgetItem _parent, int _type)"""
        return None
    def __init__(self, _parent, _strings, _type):
        """None QTreeWidgetItem.__init__(None self, QTreeWidgetItem _parent, QStringList _strings, int _type)"""
        return None
    def __init__(self, _parent, _preceding, _type):
        """None QTreeWidgetItem.__init__(None self, QTreeWidgetItem _parent, QTreeWidgetItem _preceding, int _type)"""
        return None
    def __init__(self, _other):
        """None QTreeWidgetItem.__init__(None self, QTreeWidgetItem _other)"""
        return None
    def __ge__(self, _other):
        """bool QTreeWidgetItem.__ge__(None self, QTreeWidgetItem _other)"""
        return bool()
    def emitDataChanged(self):
        """None QTreeWidgetItem.emitDataChanged(None self)"""
        return None
    def isDisabled(self):
        """bool QTreeWidgetItem.isDisabled(None self)"""
        return bool()
    def setDisabled(self, _disabled):
        """None QTreeWidgetItem.setDisabled(None self, bool _disabled)"""
        return None
    def isFirstColumnSpanned(self):
        """bool QTreeWidgetItem.isFirstColumnSpanned(None self)"""
        return bool()
    def setFirstColumnSpanned(self, _aspan):
        """None QTreeWidgetItem.setFirstColumnSpanned(None self, bool _aspan)"""
        return None
    def removeChild(self, _child):
        """None QTreeWidgetItem.removeChild(None self, QTreeWidgetItem _child)"""
        return None
    def childIndicatorPolicy(self):
        """QTreeWidgetItem.ChildIndicatorPolicy QTreeWidgetItem.childIndicatorPolicy(None self)"""
        return QTreeWidgetItem.ChildIndicatorPolicy()
    def setChildIndicatorPolicy(self, _policy):
        """None QTreeWidgetItem.setChildIndicatorPolicy(None self, QTreeWidgetItem.ChildIndicatorPolicy _policy)"""
        return None
    def isExpanded(self):
        """bool QTreeWidgetItem.isExpanded(None self)"""
        return bool()
    def setExpanded(self, _aexpand):
        """None QTreeWidgetItem.setExpanded(None self, bool _aexpand)"""
        return None
    def isHidden(self):
        """bool QTreeWidgetItem.isHidden(None self)"""
        return bool()
    def setHidden(self, _ahide):
        """None QTreeWidgetItem.setHidden(None self, bool _ahide)"""
        return None
    def isSelected(self):
        """bool QTreeWidgetItem.isSelected(None self)"""
        return bool()
    def setSelected(self, _aselect):
        """None QTreeWidgetItem.setSelected(None self, bool _aselect)"""
        return None
    def sortChildren(self, _column, _order):
        """None QTreeWidgetItem.sortChildren(None self, int _column, Qt.SortOrder _order)"""
        return None
    def setForeground(self, _column, _brush):
        """None QTreeWidgetItem.setForeground(None self, int _column, QBrush _brush)"""
        return None
    def foreground(self, _column):
        """QBrush QTreeWidgetItem.foreground(None self, int _column)"""
        return QBrush()
    def setBackground(self, _column, _brush):
        """None QTreeWidgetItem.setBackground(None self, int _column, QBrush _brush)"""
        return None
    def background(self, _column):
        """QBrush QTreeWidgetItem.background(None self, int _column)"""
        return QBrush()
    def takeChildren(self):
        """list-of-QTreeWidgetItem QTreeWidgetItem.takeChildren(None self)"""
        return [QTreeWidgetItem()]
    def insertChildren(self, _index, _children):
        """None QTreeWidgetItem.insertChildren(None self, int _index, list-of-QTreeWidgetItem _children)"""
        return None
    def addChildren(self, _children):
        """None QTreeWidgetItem.addChildren(None self, list-of-QTreeWidgetItem _children)"""
        return None
    def setSizeHint(self, _column, _size):
        """None QTreeWidgetItem.setSizeHint(None self, int _column, QSize _size)"""
        return None
    def sizeHint(self, _column):
        """QSize QTreeWidgetItem.sizeHint(None self, int _column)"""
        return QSize()
    def indexOfChild(self, _achild):
        """int QTreeWidgetItem.indexOfChild(None self, QTreeWidgetItem _achild)"""
        return int()
    def setFont(self, _column, _afont):
        """None QTreeWidgetItem.setFont(None self, int _column, QFont _afont)"""
        return None
    def setWhatsThis(self, _column, _awhatsThis):
        """None QTreeWidgetItem.setWhatsThis(None self, int _column, QString _awhatsThis)"""
        return None
    def setToolTip(self, _column, _atoolTip):
        """None QTreeWidgetItem.setToolTip(None self, int _column, QString _atoolTip)"""
        return None
    def setStatusTip(self, _column, _astatusTip):
        """None QTreeWidgetItem.setStatusTip(None self, int _column, QString _astatusTip)"""
        return None
    def setIcon(self, _column, _aicon):
        """None QTreeWidgetItem.setIcon(None self, int _column, QIcon _aicon)"""
        return None
    def setText(self, _column, _atext):
        """None QTreeWidgetItem.setText(None self, int _column, QString _atext)"""
        return None
    def setFlags(self, _aflags):
        """None QTreeWidgetItem.setFlags(None self, Qt.ItemFlags _aflags)"""
        return None
    def type(self):
        """int QTreeWidgetItem.type(None self)"""
        return int()
    def takeChild(self, _index):
        """QTreeWidgetItem QTreeWidgetItem.takeChild(None self, int _index)"""
        return QTreeWidgetItem()
    def insertChild(self, _index, _child):
        """None QTreeWidgetItem.insertChild(None self, int _index, QTreeWidgetItem _child)"""
        return None
    def addChild(self, _child):
        """None QTreeWidgetItem.addChild(None self, QTreeWidgetItem _child)"""
        return None
    def columnCount(self):
        """int QTreeWidgetItem.columnCount(None self)"""
        return int()
    def childCount(self):
        """int QTreeWidgetItem.childCount(None self)"""
        return int()
    def child(self, _index):
        """QTreeWidgetItem QTreeWidgetItem.child(None self, int _index)"""
        return QTreeWidgetItem()
    def parent(self):
        """QTreeWidgetItem QTreeWidgetItem.parent(None self)"""
        return QTreeWidgetItem()
    def write(self, _out):
        """None QTreeWidgetItem.write(None self, QDataStream _out)"""
        return None
    def read(self, _in):
        """None QTreeWidgetItem.read(None self, QDataStream _in)"""
        return None
    def __lt__(self, _other):
        """bool QTreeWidgetItem.__lt__(None self, QTreeWidgetItem _other)"""
        return bool()
    def setData(self, _column, _role, _value):
        """None QTreeWidgetItem.setData(None self, int _column, int _role, QVariant _value)"""
        return None
    def data(self, _column, _role):
        """QVariant QTreeWidgetItem.data(None self, int _column, int _role)"""
        return QVariant()
    def setCheckState(self, _column, _state):
        """None QTreeWidgetItem.setCheckState(None self, int _column, Qt.CheckState _state)"""
        return None
    def checkState(self, _column):
        """Qt.CheckState QTreeWidgetItem.checkState(None self, int _column)"""
        return Qt.CheckState()
    def setTextColor(self, _column, _color):
        """None QTreeWidgetItem.setTextColor(None self, int _column, QColor _color)"""
        return None
    def textColor(self, _column):
        """QColor QTreeWidgetItem.textColor(None self, int _column)"""
        return QColor()
    def setBackgroundColor(self, _column, _color):
        """None QTreeWidgetItem.setBackgroundColor(None self, int _column, QColor _color)"""
        return None
    def backgroundColor(self, _column):
        """QColor QTreeWidgetItem.backgroundColor(None self, int _column)"""
        return QColor()
    def setTextAlignment(self, _column, _alignment):
        """None QTreeWidgetItem.setTextAlignment(None self, int _column, int _alignment)"""
        return None
    def textAlignment(self, _column):
        """int QTreeWidgetItem.textAlignment(None self, int _column)"""
        return int()
    def font(self, _column):
        """QFont QTreeWidgetItem.font(None self, int _column)"""
        return QFont()
    def whatsThis(self, _column):
        """QString QTreeWidgetItem.whatsThis(None self, int _column)"""
        return QString()
    def toolTip(self, _column):
        """QString QTreeWidgetItem.toolTip(None self, int _column)"""
        return QString()
    def statusTip(self, _column):
        """QString QTreeWidgetItem.statusTip(None self, int _column)"""
        return QString()
    def icon(self, _column):
        """QIcon QTreeWidgetItem.icon(None self, int _column)"""
        return QIcon()
    def text(self, _column):
        """QString QTreeWidgetItem.text(None self, int _column)"""
        return QString()
    def flags(self):
        """Qt.ItemFlags QTreeWidgetItem.flags(None self)"""
        return Qt.ItemFlags()
    def treeWidget(self):
        """QTreeWidget QTreeWidgetItem.treeWidget(None self)"""
        return QTreeWidget()
    def clone(self):
        """QTreeWidgetItem QTreeWidgetItem.clone(None self)"""
        return QTreeWidgetItem()


class QTreeWidget(QTreeView):
    """"""
    def __init__(self, _parent):
        """None QTreeWidget.__init__(None self, QWidget _parent)"""
        return None
    def setSelectionModel(self, _selectionModel):
        """None QTreeWidget.setSelectionModel(None self, QItemSelectionModel _selectionModel)"""
        return None
    def removeItemWidget(self, _item, _column):
        """None QTreeWidget.removeItemWidget(None self, QTreeWidgetItem _item, int _column)"""
        return None
    def itemBelow(self, _item):
        """QTreeWidgetItem QTreeWidget.itemBelow(None self, QTreeWidgetItem _item)"""
        return QTreeWidgetItem()
    def itemAbove(self, _item):
        """QTreeWidgetItem QTreeWidget.itemAbove(None self, QTreeWidgetItem _item)"""
        return QTreeWidgetItem()
    def setFirstItemColumnSpanned(self, _item, _span):
        """None QTreeWidget.setFirstItemColumnSpanned(None self, QTreeWidgetItem _item, bool _span)"""
        return None
    def isFirstItemColumnSpanned(self, _item):
        """bool QTreeWidget.isFirstItemColumnSpanned(None self, QTreeWidgetItem _item)"""
        return bool()
    def setHeaderLabel(self, _alabel):
        """None QTreeWidget.setHeaderLabel(None self, QString _alabel)"""
        return None
    def invisibleRootItem(self):
        """QTreeWidgetItem QTreeWidget.invisibleRootItem(None self)"""
        return QTreeWidgetItem()
    def dropEvent(self, _event):
        """None QTreeWidget.dropEvent(None self, QDropEvent _event)"""
        return None
    def event(self, _e):
        """bool QTreeWidget.event(None self, QEvent _e)"""
        return bool()
    def itemFromIndex(self, _index):
        """QTreeWidgetItem QTreeWidget.itemFromIndex(None self, QModelIndex _index)"""
        return QTreeWidgetItem()
    def indexFromItem(self, _item, _column):
        """QModelIndex QTreeWidget.indexFromItem(None self, QTreeWidgetItem _item, int _column)"""
        return QModelIndex()
    def items(self, _data):
        """list-of-QTreeWidgetItem QTreeWidget.items(None self, QMimeData _data)"""
        return [QTreeWidgetItem()]
    def supportedDropActions(self):
        """Qt.DropActions QTreeWidget.supportedDropActions(None self)"""
        return Qt.DropActions()
    def dropMimeData(self, _parent, _index, _data, _action):
        """bool QTreeWidget.dropMimeData(None self, QTreeWidgetItem _parent, int _index, QMimeData _data, Qt.DropAction _action)"""
        return bool()
    def mimeData(self, _items):
        """QMimeData QTreeWidget.mimeData(None self, list-of-QTreeWidgetItem _items)"""
        return QMimeData()
    def mimeTypes(self):
        """QStringList QTreeWidget.mimeTypes(None self)"""
        return QStringList()
    def clear(self):
        """None QTreeWidget.clear(None self)"""
        return None
    def collapseItem(self, _item):
        """None QTreeWidget.collapseItem(None self, QTreeWidgetItem _item)"""
        return None
    def expandItem(self, _item):
        """None QTreeWidget.expandItem(None self, QTreeWidgetItem _item)"""
        return None
    def scrollToItem(self, _item, _hint):
        """None QTreeWidget.scrollToItem(None self, QTreeWidgetItem _item, QAbstractItemView.ScrollHint _hint)"""
        return None
    def setItemExpanded(self, _item, _expand):
        """None QTreeWidget.setItemExpanded(None self, QTreeWidgetItem _item, bool _expand)"""
        return None
    def isItemExpanded(self, _item):
        """bool QTreeWidget.isItemExpanded(None self, QTreeWidgetItem _item)"""
        return bool()
    def setItemHidden(self, _item, _hide):
        """None QTreeWidget.setItemHidden(None self, QTreeWidgetItem _item, bool _hide)"""
        return None
    def isItemHidden(self, _item):
        """bool QTreeWidget.isItemHidden(None self, QTreeWidgetItem _item)"""
        return bool()
    def findItems(self, _text, _flags, _column):
        """list-of-QTreeWidgetItem QTreeWidget.findItems(None self, QString _text, Qt.MatchFlags _flags, int _column)"""
        return [QTreeWidgetItem()]
    def selectedItems(self):
        """list-of-QTreeWidgetItem QTreeWidget.selectedItems(None self)"""
        return [QTreeWidgetItem()]
    def setItemSelected(self, _item, _select):
        """None QTreeWidget.setItemSelected(None self, QTreeWidgetItem _item, bool _select)"""
        return None
    def isItemSelected(self, _item):
        """bool QTreeWidget.isItemSelected(None self, QTreeWidgetItem _item)"""
        return bool()
    def setItemWidget(self, _item, _column, _widget):
        """None QTreeWidget.setItemWidget(None self, QTreeWidgetItem _item, int _column, QWidget _widget)"""
        return None
    def itemWidget(self, _item, _column):
        """QWidget QTreeWidget.itemWidget(None self, QTreeWidgetItem _item, int _column)"""
        return QWidget()
    def closePersistentEditor(self, _item, _column):
        """None QTreeWidget.closePersistentEditor(None self, QTreeWidgetItem _item, int _column)"""
        return None
    def openPersistentEditor(self, _item, _column):
        """None QTreeWidget.openPersistentEditor(None self, QTreeWidgetItem _item, int _column)"""
        return None
    def editItem(self, _item, _column):
        """None QTreeWidget.editItem(None self, QTreeWidgetItem _item, int _column)"""
        return None
    def isSortingEnabled(self):
        """bool QTreeWidget.isSortingEnabled(None self)"""
        return bool()
    def setSortingEnabled(self, _enable):
        """None QTreeWidget.setSortingEnabled(None self, bool _enable)"""
        return None
    def sortItems(self, _column, _order):
        """None QTreeWidget.sortItems(None self, int _column, Qt.SortOrder _order)"""
        return None
    def sortColumn(self):
        """int QTreeWidget.sortColumn(None self)"""
        return int()
    def visualItemRect(self, _item):
        """QRect QTreeWidget.visualItemRect(None self, QTreeWidgetItem _item)"""
        return QRect()
    def itemAt(self, _p):
        """QTreeWidgetItem QTreeWidget.itemAt(None self, QPoint _p)"""
        return QTreeWidgetItem()
    def itemAt(self, _ax, _ay):
        """QTreeWidgetItem QTreeWidget.itemAt(None self, int _ax, int _ay)"""
        return QTreeWidgetItem()
    def setCurrentItem(self, _item):
        """None QTreeWidget.setCurrentItem(None self, QTreeWidgetItem _item)"""
        return None
    def setCurrentItem(self, _item, _column):
        """None QTreeWidget.setCurrentItem(None self, QTreeWidgetItem _item, int _column)"""
        return None
    def setCurrentItem(self, _item, _column, _command):
        """None QTreeWidget.setCurrentItem(None self, QTreeWidgetItem _item, int _column, QItemSelectionModel.SelectionFlags _command)"""
        return None
    def currentColumn(self):
        """int QTreeWidget.currentColumn(None self)"""
        return int()
    def currentItem(self):
        """QTreeWidgetItem QTreeWidget.currentItem(None self)"""
        return QTreeWidgetItem()
    def setHeaderLabels(self, _labels):
        """None QTreeWidget.setHeaderLabels(None self, QStringList _labels)"""
        return None
    def setHeaderItem(self, _item):
        """None QTreeWidget.setHeaderItem(None self, QTreeWidgetItem _item)"""
        return None
    def headerItem(self):
        """QTreeWidgetItem QTreeWidget.headerItem(None self)"""
        return QTreeWidgetItem()
    def addTopLevelItems(self, _items):
        """None QTreeWidget.addTopLevelItems(None self, list-of-QTreeWidgetItem _items)"""
        return None
    def insertTopLevelItems(self, _index, _items):
        """None QTreeWidget.insertTopLevelItems(None self, int _index, list-of-QTreeWidgetItem _items)"""
        return None
    def indexOfTopLevelItem(self, _item):
        """int QTreeWidget.indexOfTopLevelItem(None self, QTreeWidgetItem _item)"""
        return int()
    def takeTopLevelItem(self, _index):
        """QTreeWidgetItem QTreeWidget.takeTopLevelItem(None self, int _index)"""
        return QTreeWidgetItem()
    def addTopLevelItem(self, _item):
        """None QTreeWidget.addTopLevelItem(None self, QTreeWidgetItem _item)"""
        return None
    def insertTopLevelItem(self, _index, _item):
        """None QTreeWidget.insertTopLevelItem(None self, int _index, QTreeWidgetItem _item)"""
        return None
    def topLevelItemCount(self):
        """int QTreeWidget.topLevelItemCount(None self)"""
        return int()
    def topLevelItem(self, _index):
        """QTreeWidgetItem QTreeWidget.topLevelItem(None self, int _index)"""
        return QTreeWidgetItem()
    def setColumnCount(self, _columns):
        """None QTreeWidget.setColumnCount(None self, int _columns)"""
        return None
    def columnCount(self):
        """int QTreeWidget.columnCount(None self)"""
        return int()


class QTreeWidgetItemIterator():
    """"""
    All = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Hidden = int() # QTreeWidgetItemIterator.IteratorFlag enum
    NotHidden = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Selected = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Unselected = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Selectable = int() # QTreeWidgetItemIterator.IteratorFlag enum
    NotSelectable = int() # QTreeWidgetItemIterator.IteratorFlag enum
    DragEnabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    DragDisabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    DropEnabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    DropDisabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    HasChildren = int() # QTreeWidgetItemIterator.IteratorFlag enum
    NoChildren = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Checked = int() # QTreeWidgetItemIterator.IteratorFlag enum
    NotChecked = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Enabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Disabled = int() # QTreeWidgetItemIterator.IteratorFlag enum
    Editable = int() # QTreeWidgetItemIterator.IteratorFlag enum
    NotEditable = int() # QTreeWidgetItemIterator.IteratorFlag enum
    UserFlag = int() # QTreeWidgetItemIterator.IteratorFlag enum

    def __init__(self, _it):
        """None QTreeWidgetItemIterator.__init__(None self, QTreeWidgetItemIterator _it)"""
        return None
    def __init__(self, _widget, _flags):
        """None QTreeWidgetItemIterator.__init__(None self, QTreeWidget _widget, QTreeWidgetItemIterator.IteratorFlags _flags)"""
        return None
    def __init__(self, _item, _flags):
        """None QTreeWidgetItemIterator.__init__(None self, QTreeWidgetItem _item, QTreeWidgetItemIterator.IteratorFlags _flags)"""
        return None
    def __isub__(self, _n):
        """QTreeWidgetItemIterator QTreeWidgetItemIterator.__isub__(None self, int _n)"""
        return QTreeWidgetItemIterator()
    def __iadd__(self, _n):
        """QTreeWidgetItemIterator QTreeWidgetItemIterator.__iadd__(None self, int _n)"""
        return QTreeWidgetItemIterator()
    def value(self):
        """QTreeWidgetItem QTreeWidgetItemIterator.value(None self)"""
        return QTreeWidgetItem()


class QUndoGroup(QObject):
    """"""
    def __init__(self, _parent):
        """None QUndoGroup.__init__(None self, QObject _parent)"""
        return None
    def undo(self):
        """None QUndoGroup.undo(None self)"""
        return None
    def setActiveStack(self, _stack):
        """None QUndoGroup.setActiveStack(None self, QUndoStack _stack)"""
        return None
    def redo(self):
        """None QUndoGroup.redo(None self)"""
        return None
    def isClean(self):
        """bool QUndoGroup.isClean(None self)"""
        return bool()
    def redoText(self):
        """QString QUndoGroup.redoText(None self)"""
        return QString()
    def undoText(self):
        """QString QUndoGroup.undoText(None self)"""
        return QString()
    def canRedo(self):
        """bool QUndoGroup.canRedo(None self)"""
        return bool()
    def canUndo(self):
        """bool QUndoGroup.canUndo(None self)"""
        return bool()
    def createUndoAction(self, _parent, _prefix):
        """QAction QUndoGroup.createUndoAction(None self, QObject _parent, QString _prefix)"""
        return QAction()
    def createRedoAction(self, _parent, _prefix):
        """QAction QUndoGroup.createRedoAction(None self, QObject _parent, QString _prefix)"""
        return QAction()
    def activeStack(self):
        """QUndoStack QUndoGroup.activeStack(None self)"""
        return QUndoStack()
    def stacks(self):
        """list-of-QUndoStack QUndoGroup.stacks(None self)"""
        return [QUndoStack()]
    def removeStack(self, _stack):
        """None QUndoGroup.removeStack(None self, QUndoStack _stack)"""
        return None
    def addStack(self, _stack):
        """None QUndoGroup.addStack(None self, QUndoStack _stack)"""
        return None


class QUndoCommand():
    """"""
    def __init__(self, _parent):
        """None QUndoCommand.__init__(None self, QUndoCommand _parent)"""
        return None
    def __init__(self, _text, _parent):
        """None QUndoCommand.__init__(None self, QString _text, QUndoCommand _parent)"""
        return None
    def child(self, _index):
        """QUndoCommand QUndoCommand.child(None self, int _index)"""
        return QUndoCommand()
    def childCount(self):
        """int QUndoCommand.childCount(None self)"""
        return int()
    def undo(self):
        """None QUndoCommand.undo(None self)"""
        return None
    def text(self):
        """QString QUndoCommand.text(None self)"""
        return QString()
    def setText(self, _text):
        """None QUndoCommand.setText(None self, QString _text)"""
        return None
    def redo(self):
        """None QUndoCommand.redo(None self)"""
        return None
    def mergeWith(self, _other):
        """bool QUndoCommand.mergeWith(None self, QUndoCommand _other)"""
        return bool()
    def id(self):
        """int QUndoCommand.id(None self)"""
        return int()


class QUndoStack(QObject):
    """"""
    def __init__(self, _parent):
        """None QUndoStack.__init__(None self, QObject _parent)"""
        return None
    def command(self, _index):
        """QUndoCommand QUndoStack.command(None self, int _index)"""
        return QUndoCommand()
    def undoLimit(self):
        """int QUndoStack.undoLimit(None self)"""
        return int()
    def setUndoLimit(self, _limit):
        """None QUndoStack.setUndoLimit(None self, int _limit)"""
        return None
    def undo(self):
        """None QUndoStack.undo(None self)"""
        return None
    def setIndex(self, _idx):
        """None QUndoStack.setIndex(None self, int _idx)"""
        return None
    def setClean(self):
        """None QUndoStack.setClean(None self)"""
        return None
    def setActive(self, _active):
        """None QUndoStack.setActive(None self, bool _active)"""
        return None
    def redo(self):
        """None QUndoStack.redo(None self)"""
        return None
    def endMacro(self):
        """None QUndoStack.endMacro(None self)"""
        return None
    def beginMacro(self, _text):
        """None QUndoStack.beginMacro(None self, QString _text)"""
        return None
    def cleanIndex(self):
        """int QUndoStack.cleanIndex(None self)"""
        return int()
    def isClean(self):
        """bool QUndoStack.isClean(None self)"""
        return bool()
    def isActive(self):
        """bool QUndoStack.isActive(None self)"""
        return bool()
    def createRedoAction(self, _parent, _prefix):
        """QAction QUndoStack.createRedoAction(None self, QObject _parent, QString _prefix)"""
        return QAction()
    def createUndoAction(self, _parent, _prefix):
        """QAction QUndoStack.createUndoAction(None self, QObject _parent, QString _prefix)"""
        return QAction()
    def text(self, _idx):
        """QString QUndoStack.text(None self, int _idx)"""
        return QString()
    def index(self):
        """int QUndoStack.index(None self)"""
        return int()
    def __len__(self):
        """ QUndoStack.__len__(None self)"""
        return ()
    def count(self):
        """int QUndoStack.count(None self)"""
        return int()
    def redoText(self):
        """QString QUndoStack.redoText(None self)"""
        return QString()
    def undoText(self):
        """QString QUndoStack.undoText(None self)"""
        return QString()
    def canRedo(self):
        """bool QUndoStack.canRedo(None self)"""
        return bool()
    def canUndo(self):
        """bool QUndoStack.canUndo(None self)"""
        return bool()
    def push(self, _cmd):
        """None QUndoStack.push(None self, QUndoCommand _cmd)"""
        return None
    def clear(self):
        """None QUndoStack.clear(None self)"""
        return None


class QUndoView(QListView):
    """"""
    def __init__(self, _parent):
        """None QUndoView.__init__(None self, QWidget _parent)"""
        return None
    def __init__(self, _stack, _parent):
        """None QUndoView.__init__(None self, QUndoStack _stack, QWidget _parent)"""
        return None
    def __init__(self, _group, _parent):
        """None QUndoView.__init__(None self, QUndoGroup _group, QWidget _parent)"""
        return None
    def setGroup(self, _group):
        """None QUndoView.setGroup(None self, QUndoGroup _group)"""
        return None
    def setStack(self, _stack):
        """None QUndoView.setStack(None self, QUndoStack _stack)"""
        return None
    def cleanIcon(self):
        """QIcon QUndoView.cleanIcon(None self)"""
        return QIcon()
    def setCleanIcon(self, _icon):
        """None QUndoView.setCleanIcon(None self, QIcon _icon)"""
        return None
    def emptyLabel(self):
        """QString QUndoView.emptyLabel(None self)"""
        return QString()
    def setEmptyLabel(self, _label):
        """None QUndoView.setEmptyLabel(None self, QString _label)"""
        return None
    def group(self):
        """QUndoGroup QUndoView.group(None self)"""
        return QUndoGroup()
    def stack(self):
        """QUndoStack QUndoView.stack(None self)"""
        return QUndoStack()


class QValidator(QObject):
    """"""
    Invalid = int() # QValidator.State enum
    Intermediate = int() # QValidator.State enum
    Acceptable = int() # QValidator.State enum

    def __init__(self, _parent):
        """None QValidator.__init__(None self, QObject _parent)"""
        return None
    def locale(self):
        """QLocale QValidator.locale(None self)"""
        return QLocale()
    def setLocale(self, _locale):
        """None QValidator.setLocale(None self, QLocale _locale)"""
        return None
    def fixup(self, _input):
        """None QValidator.fixup(None self, QString _input)"""
        return None
    def fixup(self):
        """QString QValidator.fixup(None self)"""
        return QString()
    def validate(self):
        """abstract int QValidator.validate(None self)"""
        return int()
    def validate(self):
        """abstract int QValidator.validate(None self)"""
        return int()


class QIntValidator(QValidator):
    """"""
    def __init__(self, _parent):
        """None QIntValidator.__init__(None self, QObject _parent)"""
        return None
    def __init__(self, _bottom, _top, _parent):
        """None QIntValidator.__init__(None self, int _bottom, int _top, QObject _parent)"""
        return None
    def top(self):
        """int QIntValidator.top(None self)"""
        return int()
    def bottom(self):
        """int QIntValidator.bottom(None self)"""
        return int()
    def setRange(self, _bottom, _top):
        """None QIntValidator.setRange(None self, int _bottom, int _top)"""
        return None
    def setTop(self):
        """int QIntValidator.setTop(None self)"""
        return int()
    def setBottom(self):
        """int QIntValidator.setBottom(None self)"""
        return int()
    def fixup(self, _input):
        """None QIntValidator.fixup(None self, QString _input)"""
        return None
    def fixup(self, _input):
        """None QIntValidator.fixup(None self, QString _input)"""
        return None
    def validate(self):
        """int QIntValidator.validate(None self)"""
        return int()
    def validate(self):
        """int QIntValidator.validate(None self)"""
        return int()


class QDoubleValidator(QValidator):
    """"""
    StandardNotation = int() # QDoubleValidator.Notation enum
    ScientificNotation = int() # QDoubleValidator.Notation enum

    def __init__(self, _parent):
        """None QDoubleValidator.__init__(None self, QObject _parent)"""
        return None
    def __init__(self, _bottom, _top, _decimals, _parent):
        """None QDoubleValidator.__init__(None self, float _bottom, float _top, int _decimals, QObject _parent)"""
        return None
    def notation(self):
        """QDoubleValidator.Notation QDoubleValidator.notation(None self)"""
        return QDoubleValidator.Notation()
    def setNotation(self):
        """QDoubleValidator.Notation QDoubleValidator.setNotation(None self)"""
        return QDoubleValidator.Notation()
    def decimals(self):
        """int QDoubleValidator.decimals(None self)"""
        return int()
    def top(self):
        """float QDoubleValidator.top(None self)"""
        return float()
    def bottom(self):
        """float QDoubleValidator.bottom(None self)"""
        return float()
    def setDecimals(self):
        """int QDoubleValidator.setDecimals(None self)"""
        return int()
    def setTop(self):
        """float QDoubleValidator.setTop(None self)"""
        return float()
    def setBottom(self):
        """float QDoubleValidator.setBottom(None self)"""
        return float()
    def setRange(self, _minimum, _maximum, _decimals):
        """None QDoubleValidator.setRange(None self, float _minimum, float _maximum, int _decimals)"""
        return None
    def validate(self):
        """int QDoubleValidator.validate(None self)"""
        return int()
    def validate(self):
        """int QDoubleValidator.validate(None self)"""
        return int()


class QRegExpValidator(QValidator):
    """"""
    def __init__(self, _parent):
        """None QRegExpValidator.__init__(None self, QObject _parent)"""
        return None
    def __init__(self, _rx, _parent):
        """None QRegExpValidator.__init__(None self, QRegExp _rx, QObject _parent)"""
        return None
    def regExp(self):
        """QRegExp QRegExpValidator.regExp(None self)"""
        return QRegExp()
    def setRegExp(self, _rx):
        """None QRegExpValidator.setRegExp(None self, QRegExp _rx)"""
        return None
    def validate(self, _input, _pos):
        """QValidator.State QRegExpValidator.validate(None self, QString _input, int _pos)"""
        return QValidator.State()
    def validate(self, _input, _pos):
        """QValidator.State QRegExpValidator.validate(None self, QString _input, int _pos)"""
        return QValidator.State()


class QVector2D():
    """"""
    def __init__(self):
        """None QVector2D.__init__(None self)"""
        return None
    def __init__(self, _xpos, _ypos):
        """None QVector2D.__init__(None self, float _xpos, float _ypos)"""
        return None
    def __init__(self, _point):
        """None QVector2D.__init__(None self, QPoint _point)"""
        return None
    def __init__(self, _point):
        """None QVector2D.__init__(None self, QPointF _point)"""
        return None
    def __init__(self, _vector):
        """None QVector2D.__init__(None self, QVector3D _vector)"""
        return None
    def __init__(self, _vector):
        """None QVector2D.__init__(None self, QVector4D _vector)"""
        return None
    def __init__(self):
        """QVector2D QVector2D.__init__(None self)"""
        return QVector2D()
    def __eq__(self, _v2):
        """bool QVector2D.__eq__(None self, QVector2D _v2)"""
        return bool()
    def __mul__(self, _vector):
        """QVector2D QVector2D.__mul__(None self, QVector2D _vector)"""
        return QVector2D()
    def __mul__(self, _factor):
        """QVector2D QVector2D.__mul__(None self, float _factor)"""
        return QVector2D()
    def __mul__(self, _v2):
        """QVector2D QVector2D.__mul__(None self, QVector2D _v2)"""
        return QVector2D()
    def __div__(self, _divisor):
        """QVector2D QVector2D.__div__(None self, float _divisor)"""
        return QVector2D()
    def __add__(self, _v2):
        """QVector2D QVector2D.__add__(None self, QVector2D _v2)"""
        return QVector2D()
    def __sub__(self, _v2):
        """QVector2D QVector2D.__sub__(None self, QVector2D _v2)"""
        return QVector2D()
    def __neg__(self):
        """QVector2D QVector2D.__neg__(None self)"""
        return QVector2D()
    def __ne__(self, _v2):
        """bool QVector2D.__ne__(None self, QVector2D _v2)"""
        return bool()
    def toPointF(self):
        """QPointF QVector2D.toPointF(None self)"""
        return QPointF()
    def toPoint(self):
        """QPoint QVector2D.toPoint(None self)"""
        return QPoint()
    def __idiv__(self, _divisor):
        """QVector2D QVector2D.__idiv__(None self, float _divisor)"""
        return QVector2D()
    def __imul__(self, _factor):
        """QVector2D QVector2D.__imul__(None self, float _factor)"""
        return QVector2D()
    def __imul__(self, _vector):
        """QVector2D QVector2D.__imul__(None self, QVector2D _vector)"""
        return QVector2D()
    def __isub__(self, _vector):
        """QVector2D QVector2D.__isub__(None self, QVector2D _vector)"""
        return QVector2D()
    def __iadd__(self, _vector):
        """QVector2D QVector2D.__iadd__(None self, QVector2D _vector)"""
        return QVector2D()
    def setY(self, _aY):
        """None QVector2D.setY(None self, float _aY)"""
        return None
    def setX(self, _aX):
        """None QVector2D.setX(None self, float _aX)"""
        return None
    def y(self):
        """float QVector2D.y(None self)"""
        return float()
    def x(self):
        """float QVector2D.x(None self)"""
        return float()
    def isNull(self):
        """bool QVector2D.isNull(None self)"""
        return bool()
    def toVector4D(self):
        """QVector4D QVector2D.toVector4D(None self)"""
        return QVector4D()
    def toVector3D(self):
        """QVector3D QVector2D.toVector3D(None self)"""
        return QVector3D()
    def dotProduct(self, _v1, _v2):
        """float QVector2D.dotProduct(None self, QVector2D _v1, QVector2D _v2)"""
        return float()
    def normalize(self):
        """None QVector2D.normalize(None self)"""
        return None
    def normalized(self):
        """QVector2D QVector2D.normalized(None self)"""
        return QVector2D()
    def lengthSquared(self):
        """float QVector2D.lengthSquared(None self)"""
        return float()
    def length(self):
        """float QVector2D.length(None self)"""
        return float()
    def __repr__(self):
        """str QVector2D.__repr__(None self)"""
        return str()


class QVector3D():
    """"""
    def __init__(self):
        """None QVector3D.__init__(None self)"""
        return None
    def __init__(self, _xpos, _ypos, _zpos):
        """None QVector3D.__init__(None self, float _xpos, float _ypos, float _zpos)"""
        return None
    def __init__(self, _point):
        """None QVector3D.__init__(None self, QPoint _point)"""
        return None
    def __init__(self, _point):
        """None QVector3D.__init__(None self, QPointF _point)"""
        return None
    def __init__(self, _vector):
        """None QVector3D.__init__(None self, QVector2D _vector)"""
        return None
    def __init__(self, _vector, _zpos):
        """None QVector3D.__init__(None self, QVector2D _vector, float _zpos)"""
        return None
    def __init__(self, _vector):
        """None QVector3D.__init__(None self, QVector4D _vector)"""
        return None
    def __init__(self):
        """QVector3D QVector3D.__init__(None self)"""
        return QVector3D()
    def __eq__(self, _v2):
        """bool QVector3D.__eq__(None self, QVector3D _v2)"""
        return bool()
    def __mul__(self, _matrix):
        """QVector3D QVector3D.__mul__(None self, QMatrix4x4 _matrix)"""
        return QVector3D()
    def __mul__(self, _vector):
        """QVector3D QVector3D.__mul__(None self, QVector3D _vector)"""
        return QVector3D()
    def __mul__(self, _factor):
        """QVector3D QVector3D.__mul__(None self, float _factor)"""
        return QVector3D()
    def __mul__(self, _v2):
        """QVector3D QVector3D.__mul__(None self, QVector3D _v2)"""
        return QVector3D()
    def __div__(self, _divisor):
        """QVector3D QVector3D.__div__(None self, float _divisor)"""
        return QVector3D()
    def __add__(self, _v2):
        """QVector3D QVector3D.__add__(None self, QVector3D _v2)"""
        return QVector3D()
    def __sub__(self, _v2):
        """QVector3D QVector3D.__sub__(None self, QVector3D _v2)"""
        return QVector3D()
    def __neg__(self):
        """QVector3D QVector3D.__neg__(None self)"""
        return QVector3D()
    def __ne__(self, _v2):
        """bool QVector3D.__ne__(None self, QVector3D _v2)"""
        return bool()
    def toPointF(self):
        """QPointF QVector3D.toPointF(None self)"""
        return QPointF()
    def toPoint(self):
        """QPoint QVector3D.toPoint(None self)"""
        return QPoint()
    def __idiv__(self, _divisor):
        """QVector3D QVector3D.__idiv__(None self, float _divisor)"""
        return QVector3D()
    def __imul__(self, _factor):
        """QVector3D QVector3D.__imul__(None self, float _factor)"""
        return QVector3D()
    def __imul__(self, _vector):
        """QVector3D QVector3D.__imul__(None self, QVector3D _vector)"""
        return QVector3D()
    def __isub__(self, _vector):
        """QVector3D QVector3D.__isub__(None self, QVector3D _vector)"""
        return QVector3D()
    def __iadd__(self, _vector):
        """QVector3D QVector3D.__iadd__(None self, QVector3D _vector)"""
        return QVector3D()
    def setZ(self, _aZ):
        """None QVector3D.setZ(None self, float _aZ)"""
        return None
    def setY(self, _aY):
        """None QVector3D.setY(None self, float _aY)"""
        return None
    def setX(self, _aX):
        """None QVector3D.setX(None self, float _aX)"""
        return None
    def z(self):
        """float QVector3D.z(None self)"""
        return float()
    def y(self):
        """float QVector3D.y(None self)"""
        return float()
    def x(self):
        """float QVector3D.x(None self)"""
        return float()
    def isNull(self):
        """bool QVector3D.isNull(None self)"""
        return bool()
    def toVector4D(self):
        """QVector4D QVector3D.toVector4D(None self)"""
        return QVector4D()
    def toVector2D(self):
        """QVector2D QVector3D.toVector2D(None self)"""
        return QVector2D()
    def distanceToLine(self, _point, _direction):
        """float QVector3D.distanceToLine(None self, QVector3D _point, QVector3D _direction)"""
        return float()
    def distanceToPlane(self, _plane, _normal):
        """float QVector3D.distanceToPlane(None self, QVector3D _plane, QVector3D _normal)"""
        return float()
    def distanceToPlane(self, _plane1, _plane2, _plane3):
        """float QVector3D.distanceToPlane(None self, QVector3D _plane1, QVector3D _plane2, QVector3D _plane3)"""
        return float()
    def normal(self, _v1, _v2):
        """QVector3D QVector3D.normal(None self, QVector3D _v1, QVector3D _v2)"""
        return QVector3D()
    def normal(self, _v1, _v2, _v3):
        """QVector3D QVector3D.normal(None self, QVector3D _v1, QVector3D _v2, QVector3D _v3)"""
        return QVector3D()
    def crossProduct(self, _v1, _v2):
        """QVector3D QVector3D.crossProduct(None self, QVector3D _v1, QVector3D _v2)"""
        return QVector3D()
    def dotProduct(self, _v1, _v2):
        """float QVector3D.dotProduct(None self, QVector3D _v1, QVector3D _v2)"""
        return float()
    def normalize(self):
        """None QVector3D.normalize(None self)"""
        return None
    def normalized(self):
        """QVector3D QVector3D.normalized(None self)"""
        return QVector3D()
    def lengthSquared(self):
        """float QVector3D.lengthSquared(None self)"""
        return float()
    def length(self):
        """float QVector3D.length(None self)"""
        return float()
    def __repr__(self):
        """str QVector3D.__repr__(None self)"""
        return str()


class QVector4D():
    """"""
    def __init__(self):
        """None QVector4D.__init__(None self)"""
        return None
    def __init__(self, _xpos, _ypos, _zpos, _wpos):
        """None QVector4D.__init__(None self, float _xpos, float _ypos, float _zpos, float _wpos)"""
        return None
    def __init__(self, _point):
        """None QVector4D.__init__(None self, QPoint _point)"""
        return None
    def __init__(self, _point):
        """None QVector4D.__init__(None self, QPointF _point)"""
        return None
    def __init__(self, _vector):
        """None QVector4D.__init__(None self, QVector2D _vector)"""
        return None
    def __init__(self, _vector, _zpos, _wpos):
        """None QVector4D.__init__(None self, QVector2D _vector, float _zpos, float _wpos)"""
        return None
    def __init__(self, _vector):
        """None QVector4D.__init__(None self, QVector3D _vector)"""
        return None
    def __init__(self, _vector, _wpos):
        """None QVector4D.__init__(None self, QVector3D _vector, float _wpos)"""
        return None
    def __init__(self):
        """QVector4D QVector4D.__init__(None self)"""
        return QVector4D()
    def __eq__(self, _v2):
        """bool QVector4D.__eq__(None self, QVector4D _v2)"""
        return bool()
    def __mul__(self, _matrix):
        """QVector4D QVector4D.__mul__(None self, QMatrix4x4 _matrix)"""
        return QVector4D()
    def __mul__(self, _vector):
        """QVector4D QVector4D.__mul__(None self, QVector4D _vector)"""
        return QVector4D()
    def __mul__(self, _factor):
        """QVector4D QVector4D.__mul__(None self, float _factor)"""
        return QVector4D()
    def __mul__(self, _v2):
        """QVector4D QVector4D.__mul__(None self, QVector4D _v2)"""
        return QVector4D()
    def __div__(self, _divisor):
        """QVector4D QVector4D.__div__(None self, float _divisor)"""
        return QVector4D()
    def __add__(self, _v2):
        """QVector4D QVector4D.__add__(None self, QVector4D _v2)"""
        return QVector4D()
    def __sub__(self, _v2):
        """QVector4D QVector4D.__sub__(None self, QVector4D _v2)"""
        return QVector4D()
    def __neg__(self):
        """QVector4D QVector4D.__neg__(None self)"""
        return QVector4D()
    def __ne__(self, _v2):
        """bool QVector4D.__ne__(None self, QVector4D _v2)"""
        return bool()
    def toPointF(self):
        """QPointF QVector4D.toPointF(None self)"""
        return QPointF()
    def toPoint(self):
        """QPoint QVector4D.toPoint(None self)"""
        return QPoint()
    def __idiv__(self, _divisor):
        """QVector4D QVector4D.__idiv__(None self, float _divisor)"""
        return QVector4D()
    def __imul__(self, _factor):
        """QVector4D QVector4D.__imul__(None self, float _factor)"""
        return QVector4D()
    def __imul__(self, _vector):
        """QVector4D QVector4D.__imul__(None self, QVector4D _vector)"""
        return QVector4D()
    def __isub__(self, _vector):
        """QVector4D QVector4D.__isub__(None self, QVector4D _vector)"""
        return QVector4D()
    def __iadd__(self, _vector):
        """QVector4D QVector4D.__iadd__(None self, QVector4D _vector)"""
        return QVector4D()
    def setW(self, _aW):
        """None QVector4D.setW(None self, float _aW)"""
        return None
    def setZ(self, _aZ):
        """None QVector4D.setZ(None self, float _aZ)"""
        return None
    def setY(self, _aY):
        """None QVector4D.setY(None self, float _aY)"""
        return None
    def setX(self, _aX):
        """None QVector4D.setX(None self, float _aX)"""
        return None
    def w(self):
        """float QVector4D.w(None self)"""
        return float()
    def z(self):
        """float QVector4D.z(None self)"""
        return float()
    def y(self):
        """float QVector4D.y(None self)"""
        return float()
    def x(self):
        """float QVector4D.x(None self)"""
        return float()
    def isNull(self):
        """bool QVector4D.isNull(None self)"""
        return bool()
    def toVector3DAffine(self):
        """QVector3D QVector4D.toVector3DAffine(None self)"""
        return QVector3D()
    def toVector3D(self):
        """QVector3D QVector4D.toVector3D(None self)"""
        return QVector3D()
    def toVector2DAffine(self):
        """QVector2D QVector4D.toVector2DAffine(None self)"""
        return QVector2D()
    def toVector2D(self):
        """QVector2D QVector4D.toVector2D(None self)"""
        return QVector2D()
    def dotProduct(self, _v1, _v2):
        """float QVector4D.dotProduct(None self, QVector4D _v1, QVector4D _v2)"""
        return float()
    def normalize(self):
        """None QVector4D.normalize(None self)"""
        return None
    def normalized(self):
        """QVector4D QVector4D.normalized(None self)"""
        return QVector4D()
    def lengthSquared(self):
        """float QVector4D.lengthSquared(None self)"""
        return float()
    def length(self):
        """float QVector4D.length(None self)"""
        return float()
    def __repr__(self):
        """str QVector4D.__repr__(None self)"""
        return str()


class QWhatsThis():
    """"""
    def __init__(self):
        """QWhatsThis QWhatsThis.__init__(None self)"""
        return QWhatsThis()
    def createAction(self, _parent):
        """QAction QWhatsThis.createAction(None self, QObject _parent)"""
        return QAction()
    def hideText(self):
        """None QWhatsThis.hideText(None self)"""
        return None
    def showText(self, _pos, _text, _widget):
        """None QWhatsThis.showText(None self, QPoint _pos, QString _text, QWidget _widget)"""
        return None
    def leaveWhatsThisMode(self):
        """None QWhatsThis.leaveWhatsThisMode(None self)"""
        return None
    def inWhatsThisMode(self):
        """bool QWhatsThis.inWhatsThisMode(None self)"""
        return bool()
    def enterWhatsThisMode(self):
        """None QWhatsThis.enterWhatsThisMode(None self)"""
        return None


class QWidgetAction(QAction):
    """"""
    def __init__(self, _parent):
        """None QWidgetAction.__init__(None self, QObject _parent)"""
        return None
    def createdWidgets(self):
        """list-of-QWidget QWidgetAction.createdWidgets(None self)"""
        return [QWidget()]
    def deleteWidget(self, _widget):
        """None QWidgetAction.deleteWidget(None self, QWidget _widget)"""
        return None
    def createWidget(self, _parent):
        """QWidget QWidgetAction.createWidget(None self, QWidget _parent)"""
        return QWidget()
    def eventFilter(self):
        """QEvent QWidgetAction.eventFilter(None self)"""
        return QEvent()
    def event(self):
        """QEvent QWidgetAction.event(None self)"""
        return QEvent()
    def releaseWidget(self, _widget):
        """None QWidgetAction.releaseWidget(None self, QWidget _widget)"""
        return None
    def requestWidget(self, _parent):
        """QWidget QWidgetAction.requestWidget(None self, QWidget _parent)"""
        return QWidget()
    def defaultWidget(self):
        """QWidget QWidgetAction.defaultWidget(None self)"""
        return QWidget()
    def setDefaultWidget(self, _w):
        """None QWidgetAction.setDefaultWidget(None self, QWidget _w)"""
        return None


class QWizard(QDialog):
    """"""
    IndependentPages = int() # QWizard.WizardOption enum
    IgnoreSubTitles = int() # QWizard.WizardOption enum
    ExtendedWatermarkPixmap = int() # QWizard.WizardOption enum
    NoDefaultButton = int() # QWizard.WizardOption enum
    NoBackButtonOnStartPage = int() # QWizard.WizardOption enum
    NoBackButtonOnLastPage = int() # QWizard.WizardOption enum
    DisabledBackButtonOnLastPage = int() # QWizard.WizardOption enum
    HaveNextButtonOnLastPage = int() # QWizard.WizardOption enum
    HaveFinishButtonOnEarlyPages = int() # QWizard.WizardOption enum
    NoCancelButton = int() # QWizard.WizardOption enum
    CancelButtonOnLeft = int() # QWizard.WizardOption enum
    HaveHelpButton = int() # QWizard.WizardOption enum
    HelpButtonOnRight = int() # QWizard.WizardOption enum
    HaveCustomButton1 = int() # QWizard.WizardOption enum
    HaveCustomButton2 = int() # QWizard.WizardOption enum
    HaveCustomButton3 = int() # QWizard.WizardOption enum

    ClassicStyle = int() # QWizard.WizardStyle enum
    ModernStyle = int() # QWizard.WizardStyle enum
    MacStyle = int() # QWizard.WizardStyle enum
    AeroStyle = int() # QWizard.WizardStyle enum

    WatermarkPixmap = int() # QWizard.WizardPixmap enum
    LogoPixmap = int() # QWizard.WizardPixmap enum
    BannerPixmap = int() # QWizard.WizardPixmap enum
    BackgroundPixmap = int() # QWizard.WizardPixmap enum

    BackButton = int() # QWizard.WizardButton enum
    NextButton = int() # QWizard.WizardButton enum
    CommitButton = int() # QWizard.WizardButton enum
    FinishButton = int() # QWizard.WizardButton enum
    CancelButton = int() # QWizard.WizardButton enum
    HelpButton = int() # QWizard.WizardButton enum
    CustomButton1 = int() # QWizard.WizardButton enum
    CustomButton2 = int() # QWizard.WizardButton enum
    CustomButton3 = int() # QWizard.WizardButton enum
    Stretch = int() # QWizard.WizardButton enum

    def __init__(self, _parent, _flags):
        """None QWizard.__init__(None self, QWidget _parent, Qt.WindowFlags _flags)"""
        return None
    def sideWidget(self):
        """QWidget QWizard.sideWidget(None self)"""
        return QWidget()
    def setSideWidget(self, _widget):
        """None QWizard.setSideWidget(None self, QWidget _widget)"""
        return None
    def pageIds(self):
        """list-of-int QWizard.pageIds(None self)"""
        return [int()]
    def removePage(self, _id):
        """None QWizard.removePage(None self, int _id)"""
        return None
    def cleanupPage(self, _id):
        """None QWizard.cleanupPage(None self, int _id)"""
        return None
    def initializePage(self, _id):
        """None QWizard.initializePage(None self, int _id)"""
        return None
    def done(self, _result):
        """None QWizard.done(None self, int _result)"""
        return None
    def paintEvent(self, _event):
        """None QWizard.paintEvent(None self, QPaintEvent _event)"""
        return None
    def resizeEvent(self, _event):
        """None QWizard.resizeEvent(None self, QResizeEvent _event)"""
        return None
    def event(self, _event):
        """bool QWizard.event(None self, QEvent _event)"""
        return bool()
    def restart(self):
        """None QWizard.restart(None self)"""
        return None
    def next(self):
        """None QWizard.next(None self)"""
        return None
    def back(self):
        """None QWizard.back(None self)"""
        return None
    def sizeHint(self):
        """QSize QWizard.sizeHint(None self)"""
        return QSize()
    def setVisible(self, _visible):
        """None QWizard.setVisible(None self, bool _visible)"""
        return None
    def setDefaultProperty(self, _className, _property, _changedSignal):
        """None QWizard.setDefaultProperty(None self, str _className, str _property, str _changedSignal)"""
        return None
    def pixmap(self, _which):
        """QPixmap QWizard.pixmap(None self, QWizard.WizardPixmap _which)"""
        return QPixmap()
    def setPixmap(self, _which, _pixmap):
        """None QWizard.setPixmap(None self, QWizard.WizardPixmap _which, QPixmap _pixmap)"""
        return None
    def subTitleFormat(self):
        """Qt.TextFormat QWizard.subTitleFormat(None self)"""
        return Qt.TextFormat()
    def setSubTitleFormat(self, _format):
        """None QWizard.setSubTitleFormat(None self, Qt.TextFormat _format)"""
        return None
    def titleFormat(self):
        """Qt.TextFormat QWizard.titleFormat(None self)"""
        return Qt.TextFormat()
    def setTitleFormat(self, _format):
        """None QWizard.setTitleFormat(None self, Qt.TextFormat _format)"""
        return None
    def button(self, _which):
        """QAbstractButton QWizard.button(None self, QWizard.WizardButton _which)"""
        return QAbstractButton()
    def setButton(self, _which, _button):
        """None QWizard.setButton(None self, QWizard.WizardButton _which, QAbstractButton _button)"""
        return None
    def setButtonLayout(self, _layout):
        """None QWizard.setButtonLayout(None self, list-of-QWizard.WizardButton _layout)"""
        return None
    def buttonText(self, _which):
        """QString QWizard.buttonText(None self, QWizard.WizardButton _which)"""
        return QString()
    def setButtonText(self, _which, _text):
        """None QWizard.setButtonText(None self, QWizard.WizardButton _which, QString _text)"""
        return None
    def options(self):
        """QWizard.WizardOptions QWizard.options(None self)"""
        return QWizard.WizardOptions()
    def setOptions(self, _options):
        """None QWizard.setOptions(None self, QWizard.WizardOptions _options)"""
        return None
    def testOption(self, _option):
        """bool QWizard.testOption(None self, QWizard.WizardOption _option)"""
        return bool()
    def setOption(self, _option, _on):
        """None QWizard.setOption(None self, QWizard.WizardOption _option, bool _on)"""
        return None
    def wizardStyle(self):
        """QWizard.WizardStyle QWizard.wizardStyle(None self)"""
        return QWizard.WizardStyle()
    def setWizardStyle(self, _style):
        """None QWizard.setWizardStyle(None self, QWizard.WizardStyle _style)"""
        return None
    def field(self, _name):
        """QVariant QWizard.field(None self, QString _name)"""
        return QVariant()
    def setField(self, _name, _value):
        """None QWizard.setField(None self, QString _name, QVariant _value)"""
        return None
    def nextId(self):
        """int QWizard.nextId(None self)"""
        return int()
    def validateCurrentPage(self):
        """bool QWizard.validateCurrentPage(None self)"""
        return bool()
    def currentId(self):
        """int QWizard.currentId(None self)"""
        return int()
    def currentPage(self):
        """QWizardPage QWizard.currentPage(None self)"""
        return QWizardPage()
    def startId(self):
        """int QWizard.startId(None self)"""
        return int()
    def setStartId(self, _id):
        """None QWizard.setStartId(None self, int _id)"""
        return None
    def visitedPages(self):
        """list-of-int QWizard.visitedPages(None self)"""
        return [int()]
    def hasVisitedPage(self, _id):
        """bool QWizard.hasVisitedPage(None self, int _id)"""
        return bool()
    def page(self, _id):
        """QWizardPage QWizard.page(None self, int _id)"""
        return QWizardPage()
    def setPage(self, _id, _page):
        """None QWizard.setPage(None self, int _id, QWizardPage _page)"""
        return None
    def addPage(self, _page):
        """int QWizard.addPage(None self, QWizardPage _page)"""
        return int()


class QWizardPage(QWidget):
    """"""
    def __init__(self, _parent):
        """None QWizardPage.__init__(None self, QWidget _parent)"""
        return None
    def wizard(self):
        """QWizard QWizardPage.wizard(None self)"""
        return QWizard()
    def registerField(self, _name, _widget, _property, _changedSignal):
        """None QWizardPage.registerField(None self, QString _name, QWidget _widget, str _property, signal _changedSignal)"""
        return None
    def registerField(self, _name, _widget, _property, _changedSignal):
        """None QWizardPage.registerField(None self, QString _name, QWidget _widget, str _property, SIGNAL() _changedSignal)"""
        return None
    def field(self, _name):
        """QVariant QWizardPage.field(None self, QString _name)"""
        return QVariant()
    def setField(self, _name, _value):
        """None QWizardPage.setField(None self, QString _name, QVariant _value)"""
        return None
    def nextId(self):
        """int QWizardPage.nextId(None self)"""
        return int()
    def isComplete(self):
        """bool QWizardPage.isComplete(None self)"""
        return bool()
    def validatePage(self):
        """bool QWizardPage.validatePage(None self)"""
        return bool()
    def cleanupPage(self):
        """None QWizardPage.cleanupPage(None self)"""
        return None
    def initializePage(self):
        """None QWizardPage.initializePage(None self)"""
        return None
    def buttonText(self, _which):
        """QString QWizardPage.buttonText(None self, QWizard.WizardButton _which)"""
        return QString()
    def setButtonText(self, _which, _text):
        """None QWizardPage.setButtonText(None self, QWizard.WizardButton _which, QString _text)"""
        return None
    def isCommitPage(self):
        """bool QWizardPage.isCommitPage(None self)"""
        return bool()
    def setCommitPage(self, _commitPage):
        """None QWizardPage.setCommitPage(None self, bool _commitPage)"""
        return None
    def isFinalPage(self):
        """bool QWizardPage.isFinalPage(None self)"""
        return bool()
    def setFinalPage(self, _finalPage):
        """None QWizardPage.setFinalPage(None self, bool _finalPage)"""
        return None
    def pixmap(self, _which):
        """QPixmap QWizardPage.pixmap(None self, QWizard.WizardPixmap _which)"""
        return QPixmap()
    def setPixmap(self, _which, _pixmap):
        """None QWizardPage.setPixmap(None self, QWizard.WizardPixmap _which, QPixmap _pixmap)"""
        return None
    def subTitle(self):
        """QString QWizardPage.subTitle(None self)"""
        return QString()
    def setSubTitle(self, _subTitle):
        """None QWizardPage.setSubTitle(None self, QString _subTitle)"""
        return None
    def title(self):
        """QString QWizardPage.title(None self)"""
        return QString()
    def setTitle(self, _title):
        """None QWizardPage.setTitle(None self, QString _title)"""
        return None


class QWorkspace(QWidget):
    """"""
    CreationOrder = int() # QWorkspace.WindowOrder enum
    StackingOrder = int() # QWorkspace.WindowOrder enum

    def __init__(self, _parent):
        """None QWorkspace.__init__(None self, QWidget _parent)"""
        return None
    def wheelEvent(self, _e):
        """None QWorkspace.wheelEvent(None self, QWheelEvent _e)"""
        return None
    def hideEvent(self, _e):
        """None QWorkspace.hideEvent(None self, QHideEvent _e)"""
        return None
    def showEvent(self, _e):
        """None QWorkspace.showEvent(None self, QShowEvent _e)"""
        return None
    def eventFilter(self):
        """QEvent QWorkspace.eventFilter(None self)"""
        return QEvent()
    def resizeEvent(self):
        """QResizeEvent QWorkspace.resizeEvent(None self)"""
        return QResizeEvent()
    def childEvent(self):
        """QChildEvent QWorkspace.childEvent(None self)"""
        return QChildEvent()
    def changeEvent(self):
        """QEvent QWorkspace.changeEvent(None self)"""
        return QEvent()
    def paintEvent(self, _e):
        """None QWorkspace.paintEvent(None self, QPaintEvent _e)"""
        return None
    def event(self, _e):
        """bool QWorkspace.event(None self, QEvent _e)"""
        return bool()
    def activatePreviousWindow(self):
        """None QWorkspace.activatePreviousWindow(None self)"""
        return None
    def activateNextWindow(self):
        """None QWorkspace.activateNextWindow(None self)"""
        return None
    def closeAllWindows(self):
        """None QWorkspace.closeAllWindows(None self)"""
        return None
    def closeActiveWindow(self):
        """None QWorkspace.closeActiveWindow(None self)"""
        return None
    def arrangeIcons(self):
        """None QWorkspace.arrangeIcons(None self)"""
        return None
    def tile(self):
        """None QWorkspace.tile(None self)"""
        return None
    def cascade(self):
        """None QWorkspace.cascade(None self)"""
        return None
    def setActiveWindow(self, _w):
        """None QWorkspace.setActiveWindow(None self, QWidget _w)"""
        return None
    def background(self):
        """QBrush QWorkspace.background(None self)"""
        return QBrush()
    def setBackground(self, _background):
        """None QWorkspace.setBackground(None self, QBrush _background)"""
        return None
    def setScrollBarsEnabled(self, _enable):
        """None QWorkspace.setScrollBarsEnabled(None self, bool _enable)"""
        return None
    def scrollBarsEnabled(self):
        """bool QWorkspace.scrollBarsEnabled(None self)"""
        return bool()
    def sizeHint(self):
        """QSize QWorkspace.sizeHint(None self)"""
        return QSize()
    def addWindow(self, _w, _flags):
        """QWidget QWorkspace.addWindow(None self, QWidget _w, Qt.WindowFlags _flags)"""
        return QWidget()
    def windowList(self, _order):
        """list-of-QWidget QWorkspace.windowList(None self, QWorkspace.WindowOrder _order)"""
        return [QWidget()]
    def activeWindow(self):
        """QWidget QWorkspace.activeWindow(None self)"""
        return QWidget()


class QX11EmbedWidget(QWidget):
    """"""
    Unknown = int() # QX11EmbedWidget.Error enum
    Internal = int() # QX11EmbedWidget.Error enum
    InvalidWindowID = int() # QX11EmbedWidget.Error enum

    def __init__(self, _parent):
        """None QX11EmbedWidget.__init__(None self, QWidget _parent)"""
        return None
    def resizeEvent(self):
        """QResizeEvent QX11EmbedWidget.resizeEvent(None self)"""
        return QResizeEvent()
    def event(self):
        """QEvent QX11EmbedWidget.event(None self)"""
        return QEvent()
    def eventFilter(self):
        """QEvent QX11EmbedWidget.eventFilter(None self)"""
        return QEvent()
    def error(self):
        """QX11EmbedWidget.Error QX11EmbedWidget.error(None self)"""
        return QX11EmbedWidget.Error()
    def containerWinId(self):
        """int QX11EmbedWidget.containerWinId(None self)"""
        return int()
    def embedInto(self, _id):
        """None QX11EmbedWidget.embedInto(None self, int _id)"""
        return None


class QX11EmbedContainer(QWidget):
    """"""
    Unknown = int() # QX11EmbedContainer.Error enum
    Internal = int() # QX11EmbedContainer.Error enum
    InvalidWindowID = int() # QX11EmbedContainer.Error enum

    def __init__(self, _parent):
        """None QX11EmbedContainer.__init__(None self, QWidget _parent)"""
        return None
    def event(self):
        """QEvent QX11EmbedContainer.event(None self)"""
        return QEvent()
    def hideEvent(self):
        """QHideEvent QX11EmbedContainer.hideEvent(None self)"""
        return QHideEvent()
    def showEvent(self):
        """QShowEvent QX11EmbedContainer.showEvent(None self)"""
        return QShowEvent()
    def resizeEvent(self):
        """QResizeEvent QX11EmbedContainer.resizeEvent(None self)"""
        return QResizeEvent()
    def paintEvent(self, _e):
        """None QX11EmbedContainer.paintEvent(None self, QPaintEvent _e)"""
        return None
    def eventFilter(self):
        """QEvent QX11EmbedContainer.eventFilter(None self)"""
        return QEvent()
    def minimumSizeHint(self):
        """QSize QX11EmbedContainer.minimumSizeHint(None self)"""
        return QSize()
    def error(self):
        """QX11EmbedContainer.Error QX11EmbedContainer.error(None self)"""
        return QX11EmbedContainer.Error()
    def embedClient(self, _id):
        """None QX11EmbedContainer.embedClient(None self, int _id)"""
        return None
    def discardClient(self):
        """None QX11EmbedContainer.discardClient(None self)"""
        return None
    def clientWinId(self):
        """int QX11EmbedContainer.clientWinId(None self)"""
        return int()


class QX11Info():
    """"""
    def __init__(self):
        """None QX11Info.__init__(None self)"""
        return None
    def __init__(self, _other):
        """None QX11Info.__init__(None self, QX11Info _other)"""
        return None
    def isCompositingManagerRunning(self):
        """bool QX11Info.isCompositingManagerRunning(None self)"""
        return bool()
    def setAppUserTime(self, _time):
        """None QX11Info.setAppUserTime(None self, int _time)"""
        return None
    def setAppTime(self, _time):
        """None QX11Info.setAppTime(None self, int _time)"""
        return None
    def appUserTime(self):
        """int QX11Info.appUserTime(None self)"""
        return int()
    def appTime(self):
        """int QX11Info.appTime(None self)"""
        return int()
    def setAppDpiY(self, _screen, _dpi):
        """None QX11Info.setAppDpiY(None self, int _screen, int _dpi)"""
        return None
    def setAppDpiX(self, _screen, _dpi):
        """None QX11Info.setAppDpiX(None self, int _screen, int _dpi)"""
        return None
    def appDpiY(self, _screen):
        """int QX11Info.appDpiY(None self, int _screen)"""
        return int()
    def appDpiX(self, _screen):
        """int QX11Info.appDpiX(None self, int _screen)"""
        return int()
    def appDefaultVisual(self, _screen):
        """bool QX11Info.appDefaultVisual(None self, int _screen)"""
        return bool()
    def appDefaultColormap(self, _screen):
        """bool QX11Info.appDefaultColormap(None self, int _screen)"""
        return bool()
    def appRootWindow(self, _screen):
        """int QX11Info.appRootWindow(None self, int _screen)"""
        return int()
    def appVisual(self, _screen):
        """sip.voidptr QX11Info.appVisual(None self, int _screen)"""
        return sip.voidptr()
    def appColormap(self, _screen):
        """int QX11Info.appColormap(None self, int _screen)"""
        return int()
    def appCells(self, _screen):
        """int QX11Info.appCells(None self, int _screen)"""
        return int()
    def appDepth(self, _screen):
        """int QX11Info.appDepth(None self, int _screen)"""
        return int()
    def appScreen(self):
        """int QX11Info.appScreen(None self)"""
        return int()
    def defaultVisual(self):
        """bool QX11Info.defaultVisual(None self)"""
        return bool()
    def visual(self):
        """sip.voidptr QX11Info.visual(None self)"""
        return sip.voidptr()
    def defaultColormap(self):
        """bool QX11Info.defaultColormap(None self)"""
        return bool()
    def colormap(self):
        """int QX11Info.colormap(None self)"""
        return int()
    def cells(self):
        """int QX11Info.cells(None self)"""
        return int()
    def depth(self):
        """int QX11Info.depth(None self)"""
        return int()
    def screen(self):
        """int QX11Info.screen(None self)"""
        return int()
    def appClass(self):
        """str QX11Info.appClass(None self)"""
        return str()
    def display(self):
        """Display QX11Info.display(None self)"""
        return Display()


class QPyTextObject(QObject, QTextObjectInterface):
    """"""
    def __init__(self, _parent):
        """None QPyTextObject.__init__(None self, QObject _parent)"""
        return None


class QPointF():
    """"""
    def __init__(self):
        """QPainterPath.Element QPointF.__init__(None self)"""
        return QPainterPath.Element()


class QString():
    """"""
    def __init__(self):
        """QKeySequence QString.__init__(None self)"""
        return QKeySequence()


qApp = None # QApplication member

def qIsGray(_rgb):
    """bool .qIsGray(int _rgb)"""
    return bool()

def qGray(_r, _g, _b):
    """int .qGray(int _r, int _g, int _b)"""
    return int()

def qGray(_rgb):
    """int .qGray(int _rgb)"""
    return int()

def qRgba(_r, _g, _b, _a):
    """int .qRgba(int _r, int _g, int _b, int _a)"""
    return int()

def qRgb(_r, _g, _b):
    """int .qRgb(int _r, int _g, int _b)"""
    return int()

def qAlpha(_rgb):
    """int .qAlpha(int _rgb)"""
    return int()

def qBlue(_rgb):
    """int .qBlue(int _rgb)"""
    return int()

def qGreen(_rgb):
    """int .qGreen(int _rgb)"""
    return int()

def qRed(_rgb):
    """int .qRed(int _rgb)"""
    return int()

def qFuzzyCompare(_m1, _m2):
    """bool .qFuzzyCompare(QMatrix _m1, QMatrix _m2)"""
    return bool()

def qFuzzyCompare(_m1, _m2):
    """bool .qFuzzyCompare(QMatrix4x4 _m1, QMatrix4x4 _m2)"""
    return bool()

def qFuzzyCompare(_q1, _q2):
    """bool .qFuzzyCompare(QQuaternion _q1, QQuaternion _q2)"""
    return bool()

def qFuzzyCompare(_t1, _t2):
    """bool .qFuzzyCompare(QTransform _t1, QTransform _t2)"""
    return bool()

def qFuzzyCompare(_v1, _v2):
    """bool .qFuzzyCompare(QVector2D _v1, QVector2D _v2)"""
    return bool()

def qFuzzyCompare(_v1, _v2):
    """bool .qFuzzyCompare(QVector3D _v1, QVector3D _v2)"""
    return bool()

def qFuzzyCompare(_v1, _v2):
    """bool .qFuzzyCompare(QVector4D _v1, QVector4D _v2)"""
    return bool()

def __mul__(_m):
    """QPoint .__mul__(QMatrix _m)"""
    return QPoint()

def __mul__(_m):
    """QPointF .__mul__(QMatrix _m)"""
    return QPointF()

def __mul__(_m):
    """QLineF .__mul__(QMatrix _m)"""
    return QLineF()

def __mul__(_m):
    """QLine .__mul__(QMatrix _m)"""
    return QLine()

def __mul__(_matrix):
    """QPoint .__mul__(QMatrix4x4 _matrix)"""
    return QPoint()

def __mul__(_matrix):
    """QPointF .__mul__(QMatrix4x4 _matrix)"""
    return QPointF()

def __mul__(_m):
    """QPoint .__mul__(QTransform _m)"""
    return QPoint()

def __mul__(_m):
    """QPointF .__mul__(QTransform _m)"""
    return QPointF()

def __mul__(_m):
    """QLineF .__mul__(QTransform _m)"""
    return QLineF()

def __mul__(_m):
    """QLine .__mul__(QTransform _m)"""
    return QLine()

def qDrawBorderPixmap(_painter, _target, _margins, _pixmap):
    """None .qDrawBorderPixmap(QPainter _painter, QRect _target, QMargins _margins, QPixmap _pixmap)"""
    return None

def qDrawPlainRect(_p, _x, _y, _w, _h, _lineWidth, _fill):
    """QColor .qDrawPlainRect(QPainter _p, int _x, int _y, int _w, int _h, int _lineWidth, QBrush _fill)"""
    return QColor()

def qDrawPlainRect(_p, _r, _lineWidth, _fill):
    """QColor .qDrawPlainRect(QPainter _p, QRect _r, int _lineWidth, QBrush _fill)"""
    return QColor()

def qDrawWinPanel(_p, _x, _y, _w, _h, _pal, _sunken, _fill):
    """None .qDrawWinPanel(QPainter _p, int _x, int _y, int _w, int _h, QPalette _pal, bool _sunken, QBrush _fill)"""
    return None

def qDrawWinPanel(_p, _r, _pal, _sunken, _fill):
    """None .qDrawWinPanel(QPainter _p, QRect _r, QPalette _pal, bool _sunken, QBrush _fill)"""
    return None

def qDrawWinButton(_p, _x, _y, _w, _h, _pal, _sunken, _fill):
    """None .qDrawWinButton(QPainter _p, int _x, int _y, int _w, int _h, QPalette _pal, bool _sunken, QBrush _fill)"""
    return None

def qDrawWinButton(_p, _r, _pal, _sunken, _fill):
    """None .qDrawWinButton(QPainter _p, QRect _r, QPalette _pal, bool _sunken, QBrush _fill)"""
    return None

def qDrawShadePanel(_p, _x, _y, _w, _h, _pal, _sunken, _lineWidth, _fill):
    """None .qDrawShadePanel(QPainter _p, int _x, int _y, int _w, int _h, QPalette _pal, bool _sunken, int _lineWidth, QBrush _fill)"""
    return None

def qDrawShadePanel(_p, _r, _pal, _sunken, _lineWidth, _fill):
    """None .qDrawShadePanel(QPainter _p, QRect _r, QPalette _pal, bool _sunken, int _lineWidth, QBrush _fill)"""
    return None

def qDrawShadeRect(_p, _x, _y, _w, _h, _pal, _sunken, _lineWidth, _midLineWidth, _fill):
    """None .qDrawShadeRect(QPainter _p, int _x, int _y, int _w, int _h, QPalette _pal, bool _sunken, int _lineWidth, int _midLineWidth, QBrush _fill)"""
    return None

def qDrawShadeRect(_p, _r, _pal, _sunken, _lineWidth, _midLineWidth, _fill):
    """None .qDrawShadeRect(QPainter _p, QRect _r, QPalette _pal, bool _sunken, int _lineWidth, int _midLineWidth, QBrush _fill)"""
    return None

def qDrawShadeLine(_p, _x1, _y1, _x2, _y2, _pal, _sunken, _lineWidth, _midLineWidth):
    """None .qDrawShadeLine(QPainter _p, int _x1, int _y1, int _x2, int _y2, QPalette _pal, bool _sunken, int _lineWidth, int _midLineWidth)"""
    return None

def qDrawShadeLine(_p, _p1, _p2, _pal, _sunken, _lineWidth, _midLineWidth):
    """None .qDrawShadeLine(QPainter _p, QPoint _p1, QPoint _p2, QPalette _pal, bool _sunken, int _lineWidth, int _midLineWidth)"""
    return None

def __rshift__():
    """QColor .__rshift__()"""
    return QColor()

def __rshift__():
    """QBrush .__rshift__()"""
    return QBrush()

def __rshift__(_cursor):
    """QDataStream .__rshift__(QCursor _cursor)"""
    return QDataStream()

def __rshift__():
    """QFont .__rshift__()"""
    return QFont()

def __rshift__():
    """QIcon .__rshift__()"""
    return QIcon()

def __rshift__():
    """QImage .__rshift__()"""
    return QImage()

def __rshift__(_ks):
    """QDataStream .__rshift__(QKeySequence _ks)"""
    return QDataStream()

def __rshift__(_item):
    """QDataStream .__rshift__(QListWidgetItem _item)"""
    return QDataStream()

def __rshift__():
    """QMatrix .__rshift__()"""
    return QMatrix()

def __rshift__():
    """QMatrix4x4 .__rshift__()"""
    return QMatrix4x4()

def __rshift__():
    """QPainterPath .__rshift__()"""
    return QPainterPath()

def __rshift__(_p):
    """QDataStream .__rshift__(QPalette _p)"""
    return QDataStream()

def __rshift__():
    """QPen .__rshift__()"""
    return QPen()

def __rshift__(_p):
    """QDataStream .__rshift__(QPicture _p)"""
    return QDataStream()

def __rshift__():
    """QPixmap .__rshift__()"""
    return QPixmap()

def __rshift__(_array):
    """QDataStream .__rshift__(QPolygonF _array)"""
    return QDataStream()

def __rshift__(_polygon):
    """QDataStream .__rshift__(QPolygon _polygon)"""
    return QDataStream()

def __rshift__():
    """QQuaternion .__rshift__()"""
    return QQuaternion()

def __rshift__():
    """QRegion .__rshift__()"""
    return QRegion()

def __rshift__():
    """QSizePolicy .__rshift__()"""
    return QSizePolicy()

def __rshift__():
    """QSplitter .__rshift__()"""
    return QSplitter()

def __rshift__(_item):
    """QDataStream .__rshift__(QStandardItem _item)"""
    return QDataStream()

def __rshift__(_item):
    """QDataStream .__rshift__(QTableWidgetItem _item)"""
    return QDataStream()

def __rshift__():
    """QTextLength .__rshift__()"""
    return QTextLength()

def __rshift__():
    """QTextFormat .__rshift__()"""
    return QTextFormat()

def __rshift__():
    """QTransform .__rshift__()"""
    return QTransform()

def __rshift__(_item):
    """QDataStream .__rshift__(QTreeWidgetItem _item)"""
    return QDataStream()

def __rshift__():
    """QVector2D .__rshift__()"""
    return QVector2D()

def __rshift__():
    """QVector3D .__rshift__()"""
    return QVector3D()

def __rshift__():
    """QVector4D .__rshift__()"""
    return QVector4D()

def __lshift__():
    """QColor .__lshift__()"""
    return QColor()

def __lshift__():
    """QBrush .__lshift__()"""
    return QBrush()

def __lshift__(_cursor):
    """QDataStream .__lshift__(QCursor _cursor)"""
    return QDataStream()

def __lshift__():
    """QFont .__lshift__()"""
    return QFont()

def __lshift__():
    """QIcon .__lshift__()"""
    return QIcon()

def __lshift__():
    """QImage .__lshift__()"""
    return QImage()

def __lshift__(_ks):
    """QDataStream .__lshift__(QKeySequence _ks)"""
    return QDataStream()

def __lshift__(_item):
    """QDataStream .__lshift__(QListWidgetItem _item)"""
    return QDataStream()

def __lshift__():
    """QMatrix .__lshift__()"""
    return QMatrix()

def __lshift__():
    """QMatrix4x4 .__lshift__()"""
    return QMatrix4x4()

def __lshift__():
    """QPainterPath .__lshift__()"""
    return QPainterPath()

def __lshift__(_p):
    """QDataStream .__lshift__(QPalette _p)"""
    return QDataStream()

def __lshift__():
    """QPen .__lshift__()"""
    return QPen()

def __lshift__(_p):
    """QDataStream .__lshift__(QPicture _p)"""
    return QDataStream()

def __lshift__():
    """QPixmap .__lshift__()"""
    return QPixmap()

def __lshift__(_array):
    """QDataStream .__lshift__(QPolygonF _array)"""
    return QDataStream()

def __lshift__(_polygon):
    """QDataStream .__lshift__(QPolygon _polygon)"""
    return QDataStream()

def __lshift__():
    """QQuaternion .__lshift__()"""
    return QQuaternion()

def __lshift__():
    """QRegion .__lshift__()"""
    return QRegion()

def __lshift__():
    """QSizePolicy .__lshift__()"""
    return QSizePolicy()

def __lshift__():
    """QSplitter .__lshift__()"""
    return QSplitter()

def __lshift__(_item):
    """QDataStream .__lshift__(QStandardItem _item)"""
    return QDataStream()

def __lshift__(_item):
    """QDataStream .__lshift__(QTableWidgetItem _item)"""
    return QDataStream()

def __lshift__():
    """QTextLength .__lshift__()"""
    return QTextLength()

def __lshift__():
    """QTextFormat .__lshift__()"""
    return QTextFormat()

def __lshift__():
    """QTransform .__lshift__()"""
    return QTransform()

def __lshift__(_item):
    """QDataStream .__lshift__(QTreeWidgetItem _item)"""
    return QDataStream()

def __lshift__():
    """QVector2D .__lshift__()"""
    return QVector2D()

def __lshift__():
    """QVector3D .__lshift__()"""
    return QVector3D()

def __lshift__():
    """QVector4D .__lshift__()"""
    return QVector4D()

def qSwap(_value1, _value2):
    """None .qSwap(QBitmap _value1, QBitmap _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QBrush _value1, QBrush _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QIcon _value1, QIcon _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QImage _value1, QImage _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QKeySequence _value1, QKeySequence _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QPen _value1, QPen _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QPicture _value1, QPicture _value2)"""
    return None

def qSwap(_value1, _value2):
    """None .qSwap(QPixmap _value1, QPixmap _value2)"""
    return None

def qt_x11_wait_for_window_manager(_widget):
    """None .qt_x11_wait_for_window_manager(QWidget _widget)"""
    return None

