#line 2 "python_lexer.cpp"

#line 4 "python_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int python::Lexer::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 95
#define YY_END_OF_BUFFER 96
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[360] =
    {   0,
        6,    6,    0,    0,   96,   94,    6,    1,    9,   94,
       94,    8,   69,   70,   94,   48,   49,   61,   64,   54,
       65,   57,   67,   45,   45,   56,   55,   85,   63,   86,
       59,   44,   44,   44,   52,    3,   53,   92,   58,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   50,   91,   51,   66,
       94,   94,   94,   94,   94,   43,   43,   43,   43,   43,
       43,    6,    5,    7,    4,    0,    9,   90,    0,   40,
        0,    8,   77,   78,    0,   40,    0,   62,   79,   73,
       74,    0,   46,    0,    0,    0,    0,    0,   68,   75,

       46,   45,    0,   46,   47,   45,    0,    0,    0,    0,
        0,    0,   45,    0,    0,    0,    0,    0,   71,   88,
       89,   93,   87,   72,   44,    0,    0,   44,    2,    0,
       44,   39,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   27,   44,   37,   13,   44,   44,   28,   44,
       44,   44,   44,   44,   44,   44,   81,   80,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,   40,   41,   82,   60,   46,    0,    0,
        0,    0,    0,    0,    0,    0,   76,   46,   46,    0,
        0,    0,    0,    0,   45,    0,   46,    0,    0,    0,

        0,    0,   45,    0,    0,    0,    0,    0,    0,    0,
        0,   83,   84,    0,    8,   10,   44,   44,   44,   44,
       35,   11,   44,   44,   44,   44,   44,   12,   44,   44,
       44,   44,   23,   44,   44,   44,   44,   24,   44,   44,
        0,   42,    0,    4,    0,   46,    0,    0,    0,    0,
        0,   46,   46,    0,   46,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   45,   45,   44,   44,
       44,   44,   16,   21,   44,   31,   44,   17,   44,   44,
       44,   33,   44,   44,   44,   44,   44,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   46,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       46,   46,   44,   20,   25,   44,   44,   44,   44,   44,
       44,   38,   14,   44,   29,   34,   46,    0,    0,    0,
        0,    0,    0,    0,    0,   46,   15,   44,   26,   44,
       22,   32,   18,   19,   46,   44,   36,   30,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,    1,   28,   29,   29,   29,   29,   30,   31,
       32,   32,   32,   32,   32,   33,   32,   32,   32,   32,
       32,   34,   32,   32,   35,   32,   32,   36,   32,   32,
       37,   38,   39,   40,   32,   41,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   32,   51,   52,   53,   54,
       55,   56,   32,   57,   58,   59,   60,   32,   61,   62,
       63,   32,   64,   65,   66,   67,    1,   68,   69,   68,
       68,   68,   68,   68,   68,   68,   68,    1,    1,    1,
        1,    1,    1,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,    1,    1,    1,    1,    1,    1,   71,
       71,   71,   71,   71,   72,   73,   74,   75,   76,   77,
       78,   77,   79,   77,   80,   81,   82,   81,   83,   81,
       84,   81,   81,   81,   85,    1,   86,   87,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   88,    1,   89,    1,
        1,    1,    1,   90,   91,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   92,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[93] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    4,    3,    4,    4,    4,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    3,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1

    } ;

static yyconst flex_int16_t yy_base[367] =
    {   0,
        0,    0,   86,   88, 1083, 1261, 1080,   96,   98, 1055,
       87,    0, 1054, 1053,   94, 1261, 1261,   82, 1052, 1261,
     1050,   89,   87,  164,  239, 1261, 1261,   89, 1044,   91,
     1261,    0,  117,  119, 1261, 1066, 1261, 1062, 1261,   73,
     1007,   82,  989,   67,   83,  982,   97,  991,  977,  974,
       97,  145,  973,  155,  947,  944, 1261,  966, 1261,  964,
       96,   76,  145,  914,  895, 1261,  965,  960,  181,  207,
      231,  866, 1261, 1261,    0,  864,  137, 1261,  158,  859,
      862,    0, 1261, 1261,  136,  828,  835,  811, 1261, 1261,
     1261,  804,  246,  130,  151,  222,  749,  729,  788, 1261,

      293,  211,  323,  340, 1261, 1261,  346,  207,  235,  322,
      741,  722,    0,  275,  335,  361,  731,  710,  770, 1261,
     1261, 1261, 1261,  763,    0,  201,  152,  202, 1261,  241,
      743,  729,  734,  736,  723,  146,  125,  176,  722,  718,
      706,  705,    0,  703,    0,    0,  694,  684,    0,  683,
      689,  675,  660,  650,  662,  665, 1261, 1261,  375,  383,
      391,  347,  399,  639,  181,  638,  700,  695,  696,  691,
      251,    0,  478, 1261, 1261, 1261, 1261,  466,  416,  425,
      441,  432,  449,  628,  206,  627, 1261,  513,  530,  465,
      481,  496,  624,  563, 1261,  563,  568,  520,  525,  551,

      580,  545,  238,  565,  588,  596,  603,  611,  558,  241,
      556, 1261, 1261,  609, 1261,    0,  578,  558,  540,  538,
        0,    0,  540,  540,  527,  527,  527,    0,  514,  510,
      494,  505,    0,  488,  488,  474,  471,    0,  478,  432,
      674, 1261,  610, 1261,  626,  679,  656,  652,  666,  373,
      351,  752,  764,  702,  781,  682,  723,  741,  367,  347,
      756,  784,  801,  771,  809,  340,  243,  339,  817,  825,
      833,  840,  848,  333,  253,  329, 1261,    0,  340,  344,
      328,  330,    0,    0,  323,    0,  326,    0,  332,  316,
      327,    0,  306,  318,  306,  310,  307,  856,  864,  872,

      879,  887,  272,  257,  233,  948,  953,  905,  904,  919,
      230,  210,  933,  941,  949,  972,  980,  225,  264,  219,
     1041, 1046,  228,    0,    0,  230,  192,  194,  188,  178,
      173,    0,    0,  153,    0,    0, 1053, 1028, 1036, 1044,
     1072, 1080,  129,  290,  103, 1141,    0,  104,    0,   86,
        0,    0,    0,    0, 1146,   89,    0,    0, 1261, 1238,
     1242, 1246, 1250, 1252, 1256,  109
    } ;

static yyconst flex_int16_t yy_def[367] =
    {   0,
      359,    1,  360,  360,  359,  359,  359,  359,  359,  359,
      361,  362,  359,  359,  363,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  364,  364,  364,  359,  359,  359,  359,  359,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  365,  359,  359,  359,  361,  359,
      361,  362,  359,  359,  363,  359,  363,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,   24,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,   25,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  364,  361,  363,  364,  359,  359,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  365,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  366,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,   25,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  364,  364,  364,  364,
      364,  364,  364,  364,  359,  364,  364,  364,    0,  359,
      359,  359,  359,  359,  359,  359
    } ;

static yyconst flex_int16_t yy_nxt[1354] =
    {   0,
        6,    7,    8,    9,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   25,   26,   27,   28,   29,   30,   31,   32,   32,
       32,   32,   32,   33,   34,   32,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   32,   47,
       32,   48,   32,   49,   50,   51,   52,   32,   53,   54,
       55,   32,   56,   57,   58,   59,   60,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,   61,   62,   63,
       64,   65,   67,   80,   67,   88,   68,   73,   68,   74,

       74,   77,   77,   75,   86,   99,   92,   89,   93,   93,
       93,  203,  100,  119,  120,  121,  123,  124,  137,   69,
       70,   69,   70,  126,   81,  126,  131,  127,  138,  127,
      132,   87,  139,  134,  358,   76,  135,  140,  150,  141,
       77,   77,   69,  143,   69,   71,  174,   71,  357,  144,
      145,  126,  128,  151,  146,  127,  103,  103,  103,  103,
      103,  126,   86,  356,  174,  127,  103,  103,  103,  103,
      103,  103,  307,   87,  223,  128,   94,   95,   96,   97,
       98,  101,  224,  102,  102,  103,  152,  169,  128,   87,
      153,  170,  221,  104,  105,   81,  106,  222,  307,  107,

       93,   93,   93,   93,   93,   93,  354,   80,  126,  104,
      105,  128,  127,  169,  353,  106,  159,  170,  159,  225,
      160,  226,  160,  161,  162,  107,  163,  163,  163,  164,
      164,   93,   93,   93,   93,   93,  352,  169,   81,  351,
      171,  170,  214,  195,  214,  350,  359,  215,  103,  103,
      349,  108,  109,  110,  111,  112,  101,  169,  113,  113,
      113,  170,  195,  171,  171,   93,   93,   93,  104,  105,
      277,  106,  359,   93,   93,  178,  105,  103,  103,  103,
      103,  103,  103,  348,  104,  105,  347,  171,  255,  277,
      106,  178,  105,  179,  255,  179,  345,  180,  344,  180,

      181,  182,  246,  183,  183,  183,  184,  184,  113,  113,
      188,  188,  188,  188,  188,  103,  103,  103,  103,  103,
      197,  197,  189,  105,  246,  246,  114,  115,  116,  117,
      118,  255,  255,   94,   95,   96,   97,   98,  189,  105,
      101,  246,  103,  103,  103,  113,  113,  113,  113,  113,
      113,  336,  104,  105,  196,  335,  196,  307,  307,  197,
      197,  197,  334,  333,  332,  203,  203,  203,  104,  105,
      105,  331,  330,  329,  203,  203,  203,  328,  327,  326,
      190,  191,  192,  193,  194,  325,  105,  203,  203,  203,
      203,  203,  203,  159,  324,  159,  323,  160,  197,  160,

      161,  162,  197,  163,  163,  163,  164,  164,  188,  188,
      108,  109,  110,  111,  112,  113,  113,  113,  113,  113,
      241,  241,  241,  241,  241,  241,  241,  198,  199,  200,
      201,  202,  204,  320,  204,  319,  205,  305,  205,  206,
      207,  304,  208,  208,  208,  209,  209,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  241,  241,  241,  241,  241,  241,  241,
      241,  103,  103,  103,  103,  103,  103,  103,  103,  243,
      245,  243,  245,  297,  244,  246,  246,  246,   93,   93,
       93,   93,   93,   93,   93,   93,  105,   93,   93,   93,

       93,   93,   93,   93,   93,  252,  252,  252,  252,  252,
      252,  252,  105,  252,  252,  252,  252,  252,  252,  252,
      252,   93,   93,   93,   93,   93,   93,   93,   93,  296,
      295,  294,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  293,  253,  105,  254,  292,  254,  291,  290,  255,
      255,  255,  289,  247,  248,  249,  250,  251,  253,  105,
      105,  188,  188,  188,  188,  188,  288,  261,  287,  261,
      286,  262,  285,  262,  263,  264,  105,  265,  265,  265,
      266,  266,  197,  197,  197,  284,  283,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  282,  281,  105,  280,

      190,  191,  192,  193,  194,  197,  197,  197,  197,  197,
      214,  243,  214,  243,  105,  215,  244,  256,  257,  258,
      259,  260,  269,  279,  269,  113,  270,  113,  270,  271,
      272,  276,  273,  273,  273,  274,  274,  113,  113,  113,
      113,  113,  113,  113,  113,  246,  246,  246,  275,  268,
      198,  199,  200,  201,  202,  198,  199,  200,  201,  202,
      113,  113,  113,  113,  113,  113,  113,  113,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  113,  113,  113,  113,  113,  113,  113,
      113,  101,  267,  103,  103,  103,   93,   93,  246,  246,

      246,  168,  167,  104,  105,  242,  242,  103,  103,  105,
      240,  239,  238,  247,  248,  249,  250,  251,  237,  104,
      105,  255,  255,  255,  236,  105,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  298,  235,  298,
      234,  299,  233,  299,  300,  301,  232,  302,  302,  302,
      303,  303,  255,  255,  255,  255,  255,  255,  231,  230,
      229,  108,  109,  110,  111,  112,  247,  248,  249,  250,
      251,   93,   93,   93,  228,  227,  220,  219,  306,  218,
      306,  178,  105,  307,  307,  307,  217,  216,  213,  256,
      257,  258,  259,  260,  105,  212,  211,  178,  105,  210,

      255,  255,  255,  255,  255,  255,  255,  255,  166,  165,
      105,  105,  313,  187,  313,  186,  314,  185,  314,  315,
      316,  177,  317,  317,  317,  318,  318,  105,  188,  188,
      188,  188,  188,  188,  188,  188,  176,   85,  175,   94,
       95,   96,   97,   98,  321,  321,  321,  321,  321,  321,
      321,  308,  309,  310,  311,  312,  188,  188,  188,  188,
      188,  188,  188,  188,   79,  175,  173,   72,  256,  257,
      258,  259,  260,  321,  321,  321,  321,  321,  321,  321,
      321,  188,  188,  188,  188,  188,  188,  188,  188,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  197,  197,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      197,  197,  197,  197,  197,  197,  197,  197,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  246,
      246,  246,  246,  246,  246,  246,  246,  307,  307,  307,
      168,  167,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  166,  165,  105,  307,  307,  307,  307,  307,  158,
      338,  157,  338,  156,  339,  155,  339,  340,  341,  105,

      342,  342,  342,  343,  343,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  346,  346,  346,  346,  346,  346,  346,  346,  154,
      149,  148,  147,  142,  136,  308,  309,  310,  311,  312,
      308,  309,  310,  311,  312,  346,  346,  346,  346,  346,
      346,  346,  255,  255,  255,  255,  255,  255,  255,  255,
      188,  188,  188,  133,  130,  197,  197,  197,  129,  122,
      253,  105,  246,  246,  246,   91,  105,   90,   84,   83,
       78,   72,  359,  105,  359,  359,  253,  105,  359,  359,
      359,  359,  105,  359,  359,  359,  359,  359,  359,  105,

      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  355,  355,  355,  355,
      355,  355,  355,  355,  359,  359,  359,  359,  190,  191,
      192,  193,  194,  198,  199,  200,  201,  202,  359,  359,
      247,  248,  249,  250,  251,  355,  355,  355,  355,  355,
      355,  355,  307,  307,  307,  307,  307,  307,  307,  307,
      255,  255,  255,  359,  359,  307,  307,  307,  359,  359,
      359,  105,  359,  359,  359,  359,  105,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  105,  359,  359,
      359,  359,  105,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  256,  257,
      258,  259,  260,  308,  309,  310,  311,  312,   66,   66,
       66,   66,   79,  359,   79,   79,   82,  359,   82,   82,
       85,  359,   85,   85,  125,  125,  172,  359,  172,  172,
        5,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359
    } ;

static yyconst flex_int16_t yy_chk[1354] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,   11,    4,   18,    3,    8,    4,    8,

        8,    9,    9,    8,   15,   23,   22,   18,   22,   22,
       22,  366,   23,   28,   28,   28,   30,   30,   44,    3,
        3,    4,    4,   33,   11,   34,   40,   33,   44,   34,
       40,   15,   45,   42,  356,    8,   42,   45,   51,   45,
       77,   77,    3,   47,    4,    3,   85,    4,  350,   47,
       47,   52,   34,   51,   47,   52,   62,   62,   62,   62,
       62,   54,  127,  348,   79,   54,   61,   61,   61,   61,
       61,   61,  345,   85,  137,   34,   22,   22,   22,   22,
       22,   24,  137,   24,   24,   24,   52,   69,   54,  127,
       52,   69,  136,   24,   24,   79,   24,  136,  343,   24,

       94,   94,   94,   94,   94,   94,  334,  126,  128,   24,
       24,   54,  128,   70,  331,   24,   63,   70,   63,  138,
       63,  138,   63,   63,   63,   24,   63,   63,   63,   63,
       63,   95,   95,   95,   95,   95,  330,   71,  126,  329,
       70,   71,  130,  102,  130,  328,  102,  130,  165,  165,
      327,   24,   24,   24,   24,   24,   25,  171,   25,   25,
       25,  171,  102,   70,   71,   93,   93,   93,   25,   25,
      203,   25,  102,  185,  185,   93,   93,  108,  108,  108,
      108,  108,  108,  326,   25,   25,  323,   71,  320,  203,
       25,   93,   93,   96,  318,   96,  312,   96,  311,   96,

       96,   96,  305,   96,   96,   96,   96,   96,  210,  210,
      267,  267,  101,  101,  101,  109,  109,  109,  109,  109,
      275,  275,  101,  101,  304,  304,   25,   25,   25,   25,
       25,  319,  319,   93,   93,   93,   93,   93,  101,  101,
      103,  303,  103,  103,  103,  114,  114,  114,  114,  114,
      114,  297,  103,  103,  104,  296,  104,  344,  344,  104,
      104,  104,  295,  294,  293,  107,  107,  107,  103,  103,
      104,  291,  290,  289,  107,  107,  107,  287,  285,  282,
      101,  101,  101,  101,  101,  281,  104,  107,  107,  107,
      107,  107,  107,  110,  280,  110,  279,  110,  276,  110,

      110,  110,  274,  110,  110,  110,  110,  110,  268,  266,
      103,  103,  103,  103,  103,  115,  115,  115,  115,  115,
      162,  162,  162,  162,  162,  162,  162,  104,  104,  104,
      104,  104,  116,  260,  116,  259,  116,  251,  116,  116,
      116,  250,  116,  116,  116,  116,  116,  159,  159,  159,
      159,  159,  159,  159,  159,  160,  160,  160,  160,  160,
      160,  160,  160,  161,  161,  161,  161,  161,  161,  161,
      161,  163,  163,  163,  163,  163,  163,  163,  163,  173,
      178,  173,  178,  240,  173,  178,  178,  178,  179,  179,
      179,  179,  179,  179,  179,  179,  178,  180,  180,  180,

      180,  180,  180,  180,  180,  182,  182,  182,  182,  182,
      182,  182,  178,  181,  181,  181,  181,  181,  181,  181,
      181,  183,  183,  183,  183,  183,  183,  183,  183,  239,
      237,  236,  188,  188,  188,  190,  190,  190,  190,  190,
      190,  235,  188,  188,  189,  234,  189,  232,  231,  189,
      189,  189,  230,  178,  178,  178,  178,  178,  188,  188,
      189,  191,  191,  191,  191,  191,  229,  192,  227,  192,
      226,  192,  225,  192,  192,  192,  189,  192,  192,  192,
      192,  192,  196,  196,  196,  224,  223,  197,  197,  197,
      198,  198,  198,  198,  198,  198,  220,  219,  197,  218,

      188,  188,  188,  188,  188,  199,  199,  199,  199,  199,
      214,  243,  214,  243,  197,  214,  243,  189,  189,  189,
      189,  189,  200,  217,  200,  211,  200,  209,  200,  200,
      200,  202,  200,  200,  200,  200,  200,  204,  204,  204,
      204,  204,  204,  204,  204,  245,  245,  245,  201,  194,
      196,  196,  196,  196,  196,  197,  197,  197,  197,  197,
      205,  205,  205,  205,  205,  205,  205,  205,  206,  206,
      206,  206,  206,  206,  206,  206,  207,  207,  207,  207,
      207,  207,  207,  208,  208,  208,  208,  208,  208,  208,
      208,  241,  193,  241,  241,  241,  186,  184,  246,  246,

      246,  170,  169,  241,  241,  168,  167,  166,  164,  246,
      156,  155,  154,  245,  245,  245,  245,  245,  153,  241,
      241,  254,  254,  254,  152,  246,  247,  247,  247,  247,
      247,  247,  248,  248,  248,  248,  248,  249,  151,  249,
      150,  249,  148,  249,  249,  249,  147,  249,  249,  249,
      249,  249,  256,  256,  256,  256,  256,  256,  144,  142,
      141,  241,  241,  241,  241,  241,  246,  246,  246,  246,
      246,  252,  252,  252,  140,  139,  135,  134,  253,  133,
      253,  252,  252,  253,  253,  253,  132,  131,  124,  254,
      254,  254,  254,  254,  253,  119,  118,  252,  252,  117,

      255,  255,  255,  257,  257,  257,  257,  257,  112,  111,
      253,  255,  258,   99,  258,   98,  258,   97,  258,  258,
      258,   92,  258,  258,  258,  258,  258,  255,  261,  261,
      261,  261,  261,  261,  261,  261,   88,   87,   86,  252,
      252,  252,  252,  252,  264,  264,  264,  264,  264,  264,
      264,  253,  253,  253,  253,  253,  262,  262,  262,  262,
      262,  262,  262,  262,   81,   80,   76,   72,  255,  255,
      255,  255,  255,  263,  263,  263,  263,  263,  263,  263,
      263,  265,  265,  265,  265,  265,  265,  265,  265,  269,
      269,  269,  269,  269,  269,  269,  269,  270,  270,  270,

      270,  270,  270,  270,  270,  271,  271,  271,  271,  271,
      271,  271,  271,  272,  272,  272,  272,  272,  272,  272,
      273,  273,  273,  273,  273,  273,  273,  273,  298,  298,
      298,  298,  298,  298,  298,  298,  299,  299,  299,  299,
      299,  299,  299,  299,  300,  300,  300,  300,  300,  300,
      300,  300,  301,  301,  301,  301,  301,  301,  301,  302,
      302,  302,  302,  302,  302,  302,  302,  306,  306,  306,
       68,   67,  307,  307,  307,  308,  308,  308,  308,  308,
      308,   65,   64,  307,  309,  309,  309,  309,  309,   60,
      310,   58,  310,   56,  310,   55,  310,  310,  310,  307,

      310,  310,  310,  310,  310,  313,  313,  313,  313,  313,
      313,  313,  313,  314,  314,  314,  314,  314,  314,  314,
      314,  315,  315,  315,  315,  315,  315,  315,  315,   53,
       50,   49,   48,   46,   43,  306,  306,  306,  306,  306,
      307,  307,  307,  307,  307,  316,  316,  316,  316,  316,
      316,  316,  317,  317,  317,  317,  317,  317,  317,  317,
      321,  321,  321,   41,   38,  322,  322,  322,   36,   29,
      321,  321,  337,  337,  337,   21,  322,   19,   14,   13,
       10,    7,    5,  337,    0,    0,  321,  321,    0,    0,
        0,    0,  322,    0,    0,    0,    0,    0,    0,  337,

      338,  338,  338,  338,  338,  338,  338,  338,  339,  339,
      339,  339,  339,  339,  339,  339,  340,  340,  340,  340,
      340,  340,  340,  340,    0,    0,    0,    0,  321,  321,
      321,  321,  321,  322,  322,  322,  322,  322,    0,    0,
      337,  337,  337,  337,  337,  341,  341,  341,  341,  341,
      341,  341,  342,  342,  342,  342,  342,  342,  342,  342,
      346,  346,  346,    0,    0,  355,  355,  355,    0,    0,
        0,  346,    0,    0,    0,    0,  355,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  346,    0,    0,
        0,    0,  355,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  346,  346,
      346,  346,  346,  355,  355,  355,  355,  355,  360,  360,
      360,  360,  361,    0,  361,  361,  362,    0,  362,  362,
      363,    0,  363,  363,  364,  364,  365,    0,  365,  365,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359
    } ;

static yyconst flex_int16_t yy_rule_linenum[95] =
    {   0,
      141,  167,  168,  171,  172,  221,  222,  260,  261,  264,
      265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
      275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
      285,  286,  287,  288,  289,  290,  291,  292,  293,  298,
      300,  304,  308,  311,  312,  313,  314,  317,  321,  325,
      329,  333,  337,  341,  342,  343,  347,  348,  349,  352,
      353,  354,  355,  356,  357,  358,  359,  360,  361,  362,
      363,  364,  365,  366,  367,  368,  369,  370,  371,  372,
      373,  374,  375,  376,  380,  381,  382,  383,  384,  385,
      386,  387,  388,  405

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "python_lexer.ll"
#line 2 "python_lexer.ll"
/*****************************************************************************
 * Copyright (c) 2006 Andreas Pakulat <apaku@gmx.de>                         *
 * Copyright (c) 2007 Piyush Verma <piyush.verma@gmail.com>                  *
 *                                                                           *
 * This program is free software; you can redistribute it and/or             *
 * modify it under the terms of the GNU Library General Public               *
 * License as published by the Free Software Foundation; either              *
 * version 2 of the License, or (at your option) any later version.          *
 *                                                                           *
 * This grammar is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Lesser General Public License for more details.                           *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public License *
 * along with this library; see the file COPYING.LIB.  If not, write to      *
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,      *
 * Boston, MA 02110-1301, USA.                                               *
 *****************************************************************************/
#line 30 "python_lexer.ll"

#define DONT_INCLUDE_FLEXLEXER
#include "python_lexer.h"

/* UTF-8 sequences, generated with the Unicode.hs script from
* http://lists.gnu.org/archive/html/help-flex/2005-01/msg00043.html */
/* \u0024, \u0041-\u005a, \u005f, \u0061-\u007a: one byte in UTF-8 */
/* \u00c0-\u00d6, \u00d8-\u00f6, \u00f8-\u00ff */
/* \u0100-\u1fff */
/* \u3040-\u318f */
/* \u3300-\u337f */
/* \u3400-\u3d2d */
/* \u4e00-\u9fff */
/* \uf900-\ufaff */
/* \u0030-\u0039: ISO-LATIN-1 digits */
/* \u0660-\u0669, \u06f0-\u06f9: Arabic-Indic and extended Ar.-Indic digits */
/* \u0966-\u096f, \u09e6-\u09ef: Devanagari digits */
/* \u0a66-\u0a6f, \u0ae6-\u0aef */
/* \u0b66-\u0b6f, \u0be7-\u0bef */
/* \u0c66-\u0c6f, \u0ce6-\u0cef, \u0d66-\u0d6f */
/* \u0e50-\u0e59, \u0ed0-\u0ed9 */
/* \u1040-\u1049 */
/* \uff10-\uff19: Fullwidth digits */
/* \u0080-\uffff */
/* \u10000-\u1fffff */
/* \u200000-\u3ffffff */
/* \u4000000-\u7fffffff */
/* Any multi-byte Unicode character. Single-byte ones are just . in lex. */
/* non-Unicode stuff */

#line 974 "python_lexer.cpp"

#define INITIAL 0
#define longstringlex 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %if-bison-bridge */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 136 "python_lexer.ll"


 /* whitespace, comments, linebreak */


#line 1138 "python_lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 360 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1261 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 95 )
				std::cerr << "--accepting rule at line" << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 95 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 96 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition" << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 141 "python_lexer.ll"
{
    if( !m_paren && !m_bracket && !m_brace )
    {
        int d = m_currentOffset;
        if( m_contents[ d ] != ' ' && m_contents[ d]  != '\t' && m_contents[ d ]  != '\v' && m_contents[ d ] != '\f' && m_contents[ d ] != '#' && m_contents[ d ] != '\n')
        {
            if( m_indent.back() > 0 )
            {
                while( m_indent.back() != 0)
                {
                    dedent_level++;
                    m_indent.pop_back();
                }
                return parser::Token_DEDENT;
            }
            else
            {
                return parser::Token_LINEBREAK;
            }
        }
        else if( m_contents[ d ] == '\n')
        {
            return parser::Token_LINEBREAK;
        }
    }
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 167 "python_lexer.ll"
/*skip */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 168 "python_lexer.ll"
{
        m_currentOffset++;
    }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 171 "python_lexer.ll"

	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 172 "python_lexer.ll"
{
    if (m_suite == 0)
    {
        white_count = 8;
        space_count = 0;
        indent();
        if( white_count > 0)
        {
            std::cerr<<"Unexpected Indent";
            return parser::Token_INVALID;
        }
    }
    if( !m_paren && !m_bracket && !m_brace && m_suite>0)
    {
        white_count = 8;
        space_count = 0;
        indent();
        if( white_count > (m_indent.back()) )
        {
            m_indent.push_back(white_count);
            return parser::Token_INDENT;
        }
        else if( white_count < (m_indent.back()) )
        {
            element = find( m_indent.begin(),m_indent.end(),white_count);
            if( * element )
            {
                while( m_indent.back() != white_count)
                {
                    dedent_level++;
                    m_indent.pop_back();
                }
                return parser::Token_DEDENT;
            }
            else
            {
                if ( ! blank_line)
                std::cerr<<"Inconsistent Spacing";
            }
        }
        else
        {
            if(white_count>0)
            {
                return parser::Token_LINEBREAK;
            }
        }
    }
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 221 "python_lexer.ll"

	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 222 "python_lexer.ll"
{
    if( !m_paren && !m_bracket && !m_brace )
    {
        white_count = 0;
        space_count = 1;
        indent();
        if( white_count > (m_indent.back()) )
        {
            m_indent.push_back(white_count);
            return  parser::Token_INDENT;
        }
        else if( white_count < (m_indent.back()) )
        {
            element = find( m_indent.begin(),m_indent.end(),white_count);
            if( * element )
            {
                while( m_indent.back() != white_count)
                {
                    dedent_level++;
                    m_indent.pop_back();
                }
                return parser::Token_DEDENT;
            }
            else
            {
                if( ! blank_line )
                std::cerr<<"Inconsistent Spacing";
            }
        }
        else
        {
            if(white_count>0)
            {
                return parser::Token_LINEBREAK;
            }
        }
    }
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 260 "python_lexer.ll"
/*skip*/
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 261 "python_lexer.ll"
/* skip */
	YY_BREAK
/* reserved keywords */
case 10:
YY_RULE_SETUP
#line 264 "python_lexer.ll"
return parser::Token_AND;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 265 "python_lexer.ll"
return parser::Token_DEL;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 266 "python_lexer.ll"
return parser::Token_FOR;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 267 "python_lexer.ll"
return parser::Token_IS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 268 "python_lexer.ll"
return parser::Token_RAISE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 269 "python_lexer.ll"
return parser::Token_ASSERT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 270 "python_lexer.ll"
return parser::Token_ELIF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 271 "python_lexer.ll"
return parser::Token_FROM;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 272 "python_lexer.ll"
return parser::Token_LAMBDA;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 273 "python_lexer.ll"
return parser::Token_RETURN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 274 "python_lexer.ll"
return parser::Token_BREAK;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 275 "python_lexer.ll"
return parser::Token_ELSE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 276 "python_lexer.ll"
return parser::Token_GLOBAL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 277 "python_lexer.ll"
return parser::Token_NOT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 278 "python_lexer.ll"
return parser::Token_TRY;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 279 "python_lexer.ll"
return parser::Token_CLASS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 280 "python_lexer.ll"
return parser::Token_EXCEPT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 281 "python_lexer.ll"
return parser::Token_IF;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 282 "python_lexer.ll"
return parser::Token_OR;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 283 "python_lexer.ll"
return parser::Token_WHILE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 284 "python_lexer.ll"
return parser::Token_CONTINUE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 285 "python_lexer.ll"
return parser::Token_EXEC;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 286 "python_lexer.ll"
return parser::Token_IMPORT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 287 "python_lexer.ll"
return parser::Token_PASS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 288 "python_lexer.ll"
return parser::Token_YIELD;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 289 "python_lexer.ll"
return parser::Token_DEF;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 290 "python_lexer.ll"
return parser::Token_FINALLY;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 291 "python_lexer.ll"
return parser::Token_IN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 292 "python_lexer.ll"
return parser::Token_PRINT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 293 "python_lexer.ll"
return parser::Token_AS;
	YY_BREAK
/* String literals */
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 298 "python_lexer.ll"
return parser::Token_STRINGLITERAL;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 300 "python_lexer.ll"
{
    BEGIN(longstringlex);
    return parser::Token_LONGSTRING;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 304 "python_lexer.ll"
{
    BEGIN(INITIAL);
    return parser::Token_LONGSTRING;
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 308 "python_lexer.ll"
return parser::Token_STRINGBODY;
	YY_BREAK
/* Identifiers and Numbers */
case 44:
YY_RULE_SETUP
#line 311 "python_lexer.ll"
return parser::Token_IDENTIFIER;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 312 "python_lexer.ll"
return parser::Token_INTEGER;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 313 "python_lexer.ll"
return parser::Token_FLOAT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 314 "python_lexer.ll"
return parser::Token_IMAGNUM;
	YY_BREAK
/* Separators */
case 48:
YY_RULE_SETUP
#line 317 "python_lexer.ll"
{
    m_paren = m_paren + 1;
    return parser::Token_LPAREN;
    }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 321 "python_lexer.ll"
{
    m_paren = m_paren - 1;
    return parser::Token_RPAREN;
    }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 325 "python_lexer.ll"
{
    m_brace = m_brace + 1;
    return parser::Token_LBRACE;
    }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 329 "python_lexer.ll"
{
    m_brace = m_brace - 1;
    return parser::Token_RBRACE;
    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 333 "python_lexer.ll"
{
    m_bracket = m_bracket + 1;
    return parser::Token_LBRACKET;
    }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 337 "python_lexer.ll"
{
    m_bracket = m_bracket - 1;
    return parser::Token_RBRACKET;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 341 "python_lexer.ll"
return parser::Token_COMMA;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 342 "python_lexer.ll"
return parser::Token_SEMICOLON;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 343 "python_lexer.ll"
{
    m_suite = 1;
    return parser::Token_COLON;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 347 "python_lexer.ll"
return parser::Token_DOT;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 348 "python_lexer.ll"
return parser::Token_BACKTICK;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 349 "python_lexer.ll"
return parser::Token_AT;
	YY_BREAK
/* operators */
case 60:
YY_RULE_SETUP
#line 352 "python_lexer.ll"
return parser::Token_ELLIPSIS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 353 "python_lexer.ll"
return parser::Token_STAR;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 354 "python_lexer.ll"
return parser::Token_DOUBLESTAR;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 355 "python_lexer.ll"
return parser::Token_EQUAL;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 356 "python_lexer.ll"
return parser::Token_PLUS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 357 "python_lexer.ll"
return parser::Token_MINUS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 358 "python_lexer.ll"
return parser::Token_TILDE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 359 "python_lexer.ll"
return parser::Token_SLASH;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 360 "python_lexer.ll"
return parser::Token_DOUBLESLASH;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 361 "python_lexer.ll"
return parser::Token_MODULO;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 362 "python_lexer.ll"
return parser::Token_ANDD;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 363 "python_lexer.ll"
return parser::Token_LSHIFT;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 364 "python_lexer.ll"
return parser::Token_RSHIFT;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 365 "python_lexer.ll"
return parser::Token_PLUSEQ;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 366 "python_lexer.ll"
return parser::Token_MINUSEQ;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 367 "python_lexer.ll"
return parser::Token_SLASHEQ;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 368 "python_lexer.ll"
return parser::Token_DOUBLESLASHEQ;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 369 "python_lexer.ll"
return parser::Token_MODULOEQ;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 370 "python_lexer.ll"
return parser::Token_ANDEQ;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 371 "python_lexer.ll"
return parser::Token_STAREQ;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 372 "python_lexer.ll"
return parser::Token_TILDEEQ;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 373 "python_lexer.ll"
return parser::Token_OREQ;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 374 "python_lexer.ll"
return parser::Token_DOUBLESTAREQ;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 375 "python_lexer.ll"
return parser::Token_LSHIFTEQ;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 376 "python_lexer.ll"
return parser::Token_RSHIFTEQ;
	YY_BREAK
/* comparison */
case 85:
YY_RULE_SETUP
#line 380 "python_lexer.ll"
return parser::Token_LESS;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 381 "python_lexer.ll"
return parser::Token_GREATER;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 382 "python_lexer.ll"
return parser::Token_GREATEREQ;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 383 "python_lexer.ll"
return parser::Token_LESSEQ;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 384 "python_lexer.ll"
return parser::Token_UNEQUAL;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 385 "python_lexer.ll"
return parser::Token_UNEQUAL;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 386 "python_lexer.ll"
return parser::Token_ORR;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 387 "python_lexer.ll"
return parser::Token_HAT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 388 "python_lexer.ll"
return parser::Token_ISEQUAL;
	YY_BREAK
/* End of file */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(longstringlex):
#line 391 "python_lexer.ll"
{
    if( m_indent.back() > 0 )
    {
        while( m_indent.back() != 0)
        {
            m_indent.pop_back();
        }
        return parser::Token_DEDENT;
    }
    return parser::Token_EOF;
}
	YY_BREAK
/* Everything that is not handled up to now is not part of the language. */
case 94:
YY_RULE_SETUP
#line 405 "python_lexer.ll"
return parser::Token_INVALID;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 407 "python_lexer.ll"
ECHO;
	YY_BREAK
#line 1896 "python_lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 360 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 360 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 359);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-or-c++ */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
yyFlexLexer::~yyFlexLexer()
/* %endif */
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

/* %if-c++-only */
	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );
/* %endif */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %endif */
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 407 "python_lexer.ll"




namespace python
{

Lexer::Lexer( parser* parser, char* contents)
{
    restart( parser, contents );
}

void Lexer::restart( parser *parser, char *contents  )
{
    m_parser = parser;
    m_locationTable = parser->token_stream->location_table();
    m_contents = contents;
    m_tokenBegin = m_tokenEnd = 0;
    m_currentOffset = 0;
    m_paren = 0;
    m_brace = 0;
    m_bracket = 0;
    m_suite = 0;
    m_indent.push_back(0);
    indent_level = dedent_level = 0;
    // check for and ignore the UTF-8 byte order mark
    unsigned char *ucontents = (unsigned char *) m_contents;
    if ( ucontents[0] == 0xEF && ucontents[1] == 0xBB && ucontents[2] == 0xBF )
    {
        m_tokenBegin = m_tokenEnd = 3;
        m_currentOffset = 3;
    }

    yyrestart(NULL);
    BEGIN(INITIAL); // is not set automatically by yyrestart()
}

void Lexer::indent()
{
    int d = m_currentOffset;
    for(;;)
    {
        if( m_contents[ d ] == '\t')
        {
            white_count=white_count+8;
            space_count = 0;
            d++;
        }
        else if( m_contents[ d ] == ' ')
        {
            space_count = space_count + 1;
            d++;
        }
        else if( m_contents[ d ] == '#')
        {
            std::cerr<<"Comment"<<std::endl;
            white_count = 0;
            blank_line = 1;
            break;
        }
        else if( m_contents[ d ] == '\n' )
        {
            std::cerr<<"Blank Line"<<std::endl;
            white_count = 0;
            blank_line = 1;
            break;
        }
        else
        {
            white_count = white_count + space_count;
            break;
        }
    }
}


// reads a character, and returns 1 as the number of characters read
// (or 0 when the end of the string is reached)
int Lexer::LexerInput( char *buf, int /*max_size*/ )
{
    int c = m_contents[ m_currentOffset++ ];

    switch(c)
    {
    case '\r':
        c = '\n'; // only have one single line break character: '\n'
        if ( m_contents[m_currentOffset + 1] == '\n' )
        {
            m_currentOffset++;
            m_tokenEnd++;
        }

        // fall through
    case '\n':

        m_locationTable->newline( m_currentOffset );
        break;

    default:
        break;
    }

    return (c == 0) ? 0 : (buf[0] = c, 1);
}

Lexer::~Lexer()
{
}

int Lexer::indentationLevel()
{
    return indent_level;
}

int Lexer::dedentationLevel()
{
    return dedent_level;
}

void Lexer::setIndentationLevel(int l)
{
    indent_level = l;
}

void Lexer::setDedentationLevel(int l)
{
    dedent_level = l;
}
} // end  of namespace python

// kate: space-indent on; indent-width 4; tab-width: 4; replace-tabs on; auto-insert-doxygen on

