/***************************************************************************
 *   This file is part of KDevelop                                         *
 *   Copyright 2007 Andreas Pakulat <apaku@gmx.de>                         *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License as       *
 *   published by the Free Software Foundation; either version 2 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.         *
 ***************************************************************************/

#include "astbuilder.h"

#include <QStringList>

#include "ast.h"

#include <kdebug.h>
#include <QProcess>
#include <QDomDocument>
#include "kurl.h"
#include <klocale.h>
#include <qxmlstream.h>
#include <QXmlStreamReader>
#include <qdir.h>
#include <language/duchain/topducontext.h>
#include <language/interfaces/iproblem.h>
#include <language/duchain/duchain.h>

#include "parserConfig.h"
#include <language/duchain/duchainlock.h>

#include <python2.6/pyport.h>
#include <python2.6/pyconfig.h>
#include <python2.6/node.h>

#include <python2.6/Python.h>

#include <python2.6/Python-ast.h>
#include <python2.6/ast.h>

#include <python2.6/graminit.h>
#include <python2.6/grammar.h>
#include <python2.6/parsetok.h>

#include <python2.6/object.h>

using namespace KDevelop;

extern grammar _PyParser_Grammar;

// remove evil macros from headers which pollute the namespace (grr!)
#undef test
#undef decorators
#undef Attribute

namespace Python
{
/* This code is generated by conversiongenerator.py.
 * I do not recommend editing it.
 */
    
class PythonAstTransformer {
public:
    CodeAst* ast;
    void run(mod_ty syntaxtree) {
        ast = new CodeAst();
        nodeStack.push(ast);
        ast->body = visitNodeList<_stmt, Ast>(syntaxtree->v.Module.body);
    }
private:
    QStack<Ast*> nodeStack;
    
    Ast* parent() {
        return nodeStack.top();
    }
    
    template<typename T, typename K> QList<K*> visitNodeList(asdl_seq* node) {
        QList<K*> nodelist;
        if ( ! node ) return nodelist;
        for ( int i=0; i < node->size; i++ ) {
            T* currentNode = static_cast<T*>(node->elements[i]);
            Q_ASSERT(currentNode);
            K* transformedNode = static_cast<K*>(visitNode(currentNode));
            Q_ASSERT(transformedNode);
            nodelist.append(transformedNode);
        }
        return nodelist;
    }



    Ast* visitNode(_expr* node) {
        if ( ! node ) return 0;
        Ast* result = 0;
        switch ( node->kind ) {
        case BoolOp_kind: {
                BooleanOperationAst* v = new BooleanOperationAst(parent());
                v->type = (ExpressionAst::BooleanOperationTypes) node->v.BoolOp.op;
                v->values = visitNodeList<_expr, ExpressionAst>(node->v.BoolOp.values);
                result = v;
                break;
            }
        case BinOp_kind: {
                BinaryOperationAst* v = new BinaryOperationAst(parent());
                v->type = (ExpressionAst::OperatorTypes) node->v.BinOp.op;
                v->lhs = static_cast<ExpressionAst*>(visitNode(node->v.BinOp.left));
                v->rhs = static_cast<ExpressionAst*>(visitNode(node->v.BinOp.right));
                result = v;
                break;
            }
        case UnaryOp_kind: {
                UnaryOperationAst* v = new UnaryOperationAst(parent());
                v->type = (ExpressionAst::UnaryOperatorTypes) node->v.UnaryOp.op;
                v->operand = static_cast<ExpressionAst*>(visitNode(node->v.UnaryOp.operand));
                result = v;
                break;
            }
        case Lambda_kind: {
                LambdaAst* v = new LambdaAst(parent());
                v->arguments = static_cast<ArgumentsAst*>(visitNode(node->v.Lambda.args));
                v->body = static_cast<ExpressionAst*>(visitNode(node->v.Lambda.body));
                result = v;
                break;
            }
        case IfExp_kind: {
                IfExpressionAst* v = new IfExpressionAst(parent());
                v->condition = static_cast<ExpressionAst*>(visitNode(node->v.IfExp.test));
                v->body = static_cast<ExpressionAst*>(visitNode(node->v.IfExp.body));
                v->orelse = static_cast<ExpressionAst*>(visitNode(node->v.IfExp.orelse));
                result = v;
                break;
            }
        case Dict_kind: {
                DictAst* v = new DictAst(parent());
                v->keys = visitNodeList<_expr, ExpressionAst>(node->v.Dict.keys);
                v->values = visitNodeList<_expr, ExpressionAst>(node->v.Dict.values);
                result = v;
                break;
            }
        case ListComp_kind: {
                ListComprehensionAst* v = new ListComprehensionAst(parent());
                v->element = static_cast<ExpressionAst*>(visitNode(node->v.ListComp.elt));
                v->generators = visitNodeList<_comprehension, ComprehensionAst>(node->v.ListComp.generators);
                result = v;
                break;
            }
        case GeneratorExp_kind: {
                GeneratorExpressionAst* v = new GeneratorExpressionAst(parent());
                v->element = static_cast<ExpressionAst*>(visitNode(node->v.GeneratorExp.elt));
                v->generators = visitNodeList<_comprehension, ComprehensionAst>(node->v.GeneratorExp.generators);
                result = v;
                break;
            }
        case Yield_kind: {
                YieldAst* v = new YieldAst(parent());
                v->value = static_cast<ExpressionAst*>(visitNode(node->v.Yield.value));
                result = v;
                break;
            }
        case Compare_kind: {
                CompareAst* v = new CompareAst(parent());
                v->leftmostElement = static_cast<ExpressionAst*>(visitNode(node->v.Compare.left));

                for ( int _i = 0; _i < node->v.Compare.ops->size; _i++ ) {
                    v->operators.append((ExpressionAst::ComparisonOperatorTypes) node->v.Compare.ops->elements[_i]);
                }

                v->comparands = visitNodeList<_expr, ExpressionAst>(node->v.Compare.comparators);
                result = v;
                break;
            }
        case Call_kind: {
                CallAst* v = new CallAst(parent());
                v->function = static_cast<ExpressionAst*>(visitNode(node->v.Call.func));
                v->arguments = visitNodeList<_expr, ExpressionAst>(node->v.Call.args);
                v->keywords = visitNodeList<_keyword, KeywordAst>(node->v.Call.keywords);
                v->keywordArguments = static_cast<ExpressionAst*>(visitNode(node->v.Call.kwargs));
                v->starArguments = static_cast<ExpressionAst*>(visitNode(node->v.Call.starargs));
                result = v;
                break;
            }
        case Repr_kind: {
                ReprAst* v = new ReprAst(parent());
                v->value = static_cast<ExpressionAst*>(visitNode(node->v.Repr.value));
                result = v;
                break;
            }
        case Num_kind: {
                NumberAst* v = new NumberAst(parent());
                result = v;
                break;
            }
        case Str_kind: {
                StringAst* v = new StringAst(parent());
                result = v;
                break;
            }
        case Attribute_kind: {
                AttributeAst* v = new AttributeAst(parent());
                v->value = static_cast<ExpressionAst*>(visitNode(node->v.Attribute.value));
                v->attribute = new Python::Identifier(PyString_AsString(PyObject_Str(node->v.Attribute.attr)));
                v->attribute->startCol = node->col_offset;
                v->attribute->startLine = node->lineno - 1;
                v->attribute->endCol = node->col_offset + v->attribute->value.length();
                v->attribute->endLine = node->lineno - 1;
                v->context = (ExpressionAst::Context) node->v.Attribute.ctx;
                result = v;
                break;
            }
        case Subscript_kind: {
                SubscriptAst* v = new SubscriptAst(parent());
                v->value = static_cast<ExpressionAst*>(visitNode(node->v.Subscript.value));
                v->slice = static_cast<SliceAst*>(visitNode(node->v.Subscript.slice));
                v->context = (ExpressionAst::Context) node->v.Subscript.ctx;
                result = v;
                break;
            }
        case Name_kind: {
                NameAst* v = new NameAst(parent());
                v->identifier = new Python::Identifier(PyString_AsString(PyObject_Str(node->v.Name.id)));
                v->identifier->startCol = node->col_offset;
                v->identifier->startLine = node->lineno - 1;
                v->identifier->endCol = node->col_offset + v->identifier->value.length();
                v->identifier->endLine = node->lineno - 1;
                v->context = (ExpressionAst::Context) node->v.Name.ctx;
                result = v;
                break;
            }
        case List_kind: {
                ListAst* v = new ListAst(parent());
                v->elements = visitNodeList<_expr, ExpressionAst>(node->v.List.elts);
                v->context = (ExpressionAst::Context) node->v.List.ctx;
                result = v;
                break;
            }
        case Tuple_kind: {
                TupleAst* v = new TupleAst(parent());
                v->elements = visitNodeList<_expr, ExpressionAst>(node->v.Tuple.elts);
                v->context = (ExpressionAst::Context) node->v.Tuple.ctx;
                result = v;
                break;
            }
        default:
            kWarning() << "Unsupported statement AST type: " << node->kind;
            Q_ASSERT(false);
        }

            result->startCol = node->col_offset;
            result->endCol = node->col_offset;
            result->startLine = node->lineno - 1;
            result->endLine = node->lineno - 1;
            result->hasUsefulRangeInformation = true;
        
        // Walk through the tree and set proper end columns and lines, as the python parser sadly does not do this for us
        if ( result->hasUsefulRangeInformation ) {
            Ast* parent = result->parent;
            while ( parent ) {
                if ( parent->endLine < result->endLine ) {
                    parent->endLine = result->endLine;
                    parent->endCol = result->endCol;
                }
                if ( ! parent->hasUsefulRangeInformation && parent->startLine == -5 ) {
                    parent->startLine = result->startLine;
                    parent->startCol = result->startCol;
                }
                parent = parent->parent;
            }
        }
    
        NameAst* r = dynamic_cast<NameAst*>(result);
        if ( r ) {
            r->startCol = r->identifier->startCol;
            r->endCol = r->identifier->endCol;
            r->startLine = r->identifier->startLine;
            r->endLine = r->identifier->endLine;
        }
        return result;
    }


    Ast* visitNode(_excepthandler* node) {
        if ( ! node ) return 0;
        Ast* result = 0;
        switch ( node->kind ) {
        case ExceptHandler_kind: {
                ExceptionHandlerAst* v = new ExceptionHandlerAst(parent());
                v->type = static_cast<ExpressionAst*>(visitNode(node->v.ExceptHandler.type));
                v->name = static_cast<ExpressionAst*>(visitNode(node->v.ExceptHandler.name));
                v->body = visitNodeList<_stmt, Ast>(node->v.ExceptHandler.body);
                result = v;
                break;
            }
        default:
            kWarning() << "Unsupported statement AST type: " << node->kind;
            Q_ASSERT(false);
        }

        // Walk through the tree and set proper end columns and lines, as the python parser sadly does not do this for us
        if ( result->hasUsefulRangeInformation ) {
            Ast* parent = result->parent;
            while ( parent ) {
                if ( parent->endLine < result->endLine ) {
                    parent->endLine = result->endLine;
                    parent->endCol = result->endCol;
                }
                if ( ! parent->hasUsefulRangeInformation && parent->startLine == -5 ) {
                    parent->startLine = result->startLine;
                    parent->startCol = result->startCol;
                }
                parent = parent->parent;
            }
        }
    
        NameAst* r = dynamic_cast<NameAst*>(result);
        if ( r ) {
            r->startCol = r->identifier->startCol;
            r->endCol = r->identifier->endCol;
            r->startLine = r->identifier->startLine;
            r->endLine = r->identifier->endLine;
        }
        return result;
    }


    Ast* visitNode(_comprehension* node) {
        if ( ! node ) return 0; // return a nullpointer if no node is set, that's fine, everyone else will check for that.
                ComprehensionAst* v = new ComprehensionAst(parent());
            v->target = static_cast<ExpressionAst*>(visitNode(node->target));
            v->iterator = static_cast<ExpressionAst*>(visitNode(node->iter));
            v->conditions = visitNodeList<_expr, ExpressionAst>(node->ifs);
        return v;
    }


    Ast* visitNode(_alias* node) {
        if ( ! node ) return 0; // return a nullpointer if no node is set, that's fine, everyone else will check for that.
                AliasAst* v = new AliasAst(parent());
            v->name = new Python::Identifier(PyString_AsString(PyObject_Str(node->name)));
            v->asName = new Python::Identifier(PyString_AsString(PyObject_Str(node->asname)));
        return v;
    }


    Ast* visitNode(_stmt* node) {
        if ( ! node ) return 0;
        Ast* result = 0;
        switch ( node->kind ) {
        case Expr_kind: {
                ExpressionAst* v = new ExpressionAst(parent());
                v->value = static_cast<ExpressionAst*>(visitNode(node->v.Expr.value));
                result = v;
                break;
            }
        case FunctionDef_kind: {
                FunctionDefinitionAst* v = new FunctionDefinitionAst(parent());
                v->arguments = static_cast<ArgumentsAst*>(visitNode(node->v.FunctionDef.args));
                v->body = visitNodeList<_stmt, Ast>(node->v.FunctionDef.body);
                v->decorators = visitNodeList<_expr, NameAst>(node->v.FunctionDef.decorator_list);
                v->name = new Python::Identifier(PyString_AsString(PyObject_Str(node->v.FunctionDef.name)));
                v->name->startCol = node->col_offset;
                v->name->startLine = node->lineno - 1;
                v->name->endCol = node->col_offset + v->name->value.length();
                v->name->endLine = node->lineno - 1;
                result = v;
                break;
            }
        case ClassDef_kind: {
                ClassDefinitionAst* v = new ClassDefinitionAst(parent());
                v->baseClasses = visitNodeList<_expr, ExpressionAst>(node->v.ClassDef.bases);
                v->body = visitNodeList<_stmt, Ast>(node->v.ClassDef.body);
                v->decorators = visitNodeList<_expr, ExpressionAst>(node->v.ClassDef.decorator_list);
                v->name = new Python::Identifier(PyString_AsString(PyObject_Str(node->v.ClassDef.name)));
                v->name->startCol = node->col_offset;
                v->name->startLine = node->lineno - 1;
                v->name->endCol = node->col_offset + v->name->value.length();
                v->name->endLine = node->lineno - 1;
                result = v;
                break;
            }
        case Return_kind: {
                ReturnAst* v = new ReturnAst(parent());
                v->value = static_cast<ExpressionAst*>(visitNode(node->v.Return.value));
                result = v;
                break;
            }
        case Delete_kind: {
                DeleteAst* v = new DeleteAst(parent());
                v->targets = visitNodeList<_expr, ExpressionAst>(node->v.Delete.targets);
                result = v;
                break;
            }
        case Assign_kind: {
                AssignmentAst* v = new AssignmentAst(parent());
                v->targets = visitNodeList<_expr, ExpressionAst>(node->v.Assign.targets);
                v->value = static_cast<ExpressionAst*>(visitNode(node->v.Assign.value));
                result = v;
                break;
            }
        case AugAssign_kind: {
                AugmentedAssignmentAst* v = new AugmentedAssignmentAst(parent());
                v->target = static_cast<ExpressionAst*>(visitNode(node->v.AugAssign.target));
                v->op = (ExpressionAst::OperatorTypes) node->v.AugAssign.op;
                v->value = static_cast<ExpressionAst*>(visitNode(node->v.AugAssign.value));
                result = v;
                break;
            }
        case Print_kind: {
                PrintAst* v = new PrintAst(parent());
                v->destination = static_cast<ExpressionAst*>(visitNode(node->v.Print.dest));
                v->values = visitNodeList<_expr, ExpressionAst>(node->v.Print.values);
                v->newline = node->v.Print.nl;
                result = v;
                break;
            }
        case For_kind: {
                ForAst* v = new ForAst(parent());
                v->target = static_cast<ExpressionAst*>(visitNode(node->v.For.target));
                v->iterator = static_cast<ExpressionAst*>(visitNode(node->v.For.iter));
                v->body = visitNodeList<_stmt, Ast>(node->v.For.body);
                v->orelse = visitNodeList<_stmt, Ast>(node->v.For.orelse);
                result = v;
                break;
            }
        case While_kind: {
                WhileAst* v = new WhileAst(parent());
                v->condition = static_cast<ExpressionAst*>(visitNode(node->v.While.test));
                v->body = visitNodeList<_stmt, Ast>(node->v.While.body);
                v->orelse = visitNodeList<_stmt, Ast>(node->v.While.orelse);
                result = v;
                break;
            }
        case If_kind: {
                IfAst* v = new IfAst(parent());
                v->condition = static_cast<ExpressionAst*>(visitNode(node->v.If.test));
                v->body = visitNodeList<_stmt, Ast>(node->v.If.body);
                v->orelse = visitNodeList<_stmt, Ast>(node->v.If.orelse);
                result = v;
                break;
            }
        case With_kind: {
                WithAst* v = new WithAst(parent());
                v->contextExpression = static_cast<ExpressionAst*>(visitNode(node->v.With.context_expr));
                v->optionalVars = static_cast<ExpressionAst*>(visitNode(node->v.With.optional_vars));
                v->body = visitNodeList<_stmt, Ast>(node->v.With.body);
                result = v;
                break;
            }
        case Raise_kind: {
                RaiseAst* v = new RaiseAst(parent());
                v->type = static_cast<ExpressionAst*>(visitNode(node->v.Raise.type));
                result = v;
                break;
            }
        case TryExcept_kind: {
                TryExceptAst* v = new TryExceptAst(parent());
                v->body = visitNodeList<_stmt, Ast>(node->v.TryExcept.body);
                v->orelse = visitNodeList<_stmt, Ast>(node->v.TryExcept.orelse);
                v->handlers = visitNodeList<_excepthandler, ExceptionHandlerAst>(node->v.TryExcept.handlers);
                result = v;
                break;
            }
        case TryFinally_kind: {
                TryFinallyAst* v = new TryFinallyAst(parent());
                v->body = visitNodeList<_stmt, Ast>(node->v.TryFinally.body);
                v->finalbody = visitNodeList<_stmt, Ast>(node->v.TryFinally.finalbody);
                result = v;
                break;
            }
        case Assert_kind: {
                AssertionAst* v = new AssertionAst(parent());
                v->condition = static_cast<ExpressionAst*>(visitNode(node->v.Assert.test));
                v->message = static_cast<ExpressionAst*>(visitNode(node->v.Assert.msg));
                result = v;
                break;
            }
        case Import_kind: {
                ImportAst* v = new ImportAst(parent());
                v->names = visitNodeList<_alias, AliasAst>(node->v.Import.names);
                result = v;
                break;
            }
        case ImportFrom_kind: {
                ImportFromAst* v = new ImportFromAst(parent());
                v->module = new Python::Identifier(PyString_AsString(PyObject_Str(node->v.ImportFrom.module)));
                v->module->startCol = node->col_offset;
                v->module->startLine = node->lineno - 1;
                v->module->endCol = node->col_offset + v->module->value.length();
                v->module->endLine = node->lineno - 1;
                v->names = visitNodeList<_alias, AliasAst>(node->v.ImportFrom.names);
                v->level = node->v.ImportFrom.level;
                result = v;
                break;
            }
        case Exec_kind: {
                ExecAst* v = new ExecAst(parent());
                v->body = static_cast<ExpressionAst*>(visitNode(node->v.Exec.body));
                v->globals = static_cast<ExpressionAst*>(visitNode(node->v.Exec.globals));
                v->locals = static_cast<ExpressionAst*>(visitNode(node->v.Exec.locals));
                result = v;
                break;
            }
        case Global_kind: {
                GlobalAst* v = new GlobalAst(parent());

                for ( int _i = 0; _i < node->v.Global.names->size; _i++ ) {
                    Python::Identifier* id = new Python::Identifier(PyString_AsString(PyObject_Str(
                                    static_cast<PyObject*>(node->v.Global.names->elements[_i])
                            )));
                    v->names.append(id);
                }

                result = v;
                break;
            }
        case Break_kind: {
                BreakAst* v = new BreakAst(parent());
                result = v;
                break;
            }
        case Continue_kind: {
                ContinueAst* v = new ContinueAst(parent());
                result = v;
                break;
            }
        case Pass_kind: {
                PassAst* v = new PassAst(parent());
                result = v;
                break;
            }
        default:
            kWarning() << "Unsupported statement AST type: " << node->kind;
            Q_ASSERT(false);
        }

            result->startCol = node->col_offset;
            result->endCol = node->col_offset;
            result->startLine = node->lineno - 1;
            result->endLine = node->lineno - 1;
            result->hasUsefulRangeInformation = true;
        
        // Walk through the tree and set proper end columns and lines, as the python parser sadly does not do this for us
        if ( result->hasUsefulRangeInformation ) {
            Ast* parent = result->parent;
            while ( parent ) {
                if ( parent->endLine < result->endLine ) {
                    parent->endLine = result->endLine;
                    parent->endCol = result->endCol;
                }
                if ( ! parent->hasUsefulRangeInformation && parent->startLine == -5 ) {
                    parent->startLine = result->startLine;
                    parent->startCol = result->startCol;
                }
                parent = parent->parent;
            }
        }
    
        NameAst* r = dynamic_cast<NameAst*>(result);
        if ( r ) {
            r->startCol = r->identifier->startCol;
            r->endCol = r->identifier->endCol;
            r->startLine = r->identifier->startLine;
            r->endLine = r->identifier->endLine;
        }
        return result;
    }


    Ast* visitNode(_slice* node) {
        if ( ! node ) return 0;
        Ast* result = 0;
        switch ( node->kind ) {
        case Slice_kind: {
                SliceAst* v = new SliceAst(parent());
                v->lower = static_cast<ExpressionAst*>(visitNode(node->v.Slice.lower));
                v->upper = static_cast<ExpressionAst*>(visitNode(node->v.Slice.upper));
                v->step = static_cast<ExpressionAst*>(visitNode(node->v.Slice.step));
                result = v;
                break;
            }
        case ExtSlice_kind: {
                ExtendedSliceAst* v = new ExtendedSliceAst(parent());
                v->dims = visitNodeList<_slice, SliceAst>(node->v.ExtSlice.dims);
                result = v;
                break;
            }
        case Index_kind: {
                IndexAst* v = new IndexAst(parent());
                v->value = static_cast<ExpressionAst*>(visitNode(node->v.Index.value));
                result = v;
                break;
            }
        case Ellipsis_kind: {
                EllipsisAst* v = new EllipsisAst(parent());
                result = v;
                break;
            }
        default:
            kWarning() << "Unsupported statement AST type: " << node->kind;
            Q_ASSERT(false);
        }

        // Walk through the tree and set proper end columns and lines, as the python parser sadly does not do this for us
        if ( result->hasUsefulRangeInformation ) {
            Ast* parent = result->parent;
            while ( parent ) {
                if ( parent->endLine < result->endLine ) {
                    parent->endLine = result->endLine;
                    parent->endCol = result->endCol;
                }
                if ( ! parent->hasUsefulRangeInformation && parent->startLine == -5 ) {
                    parent->startLine = result->startLine;
                    parent->startCol = result->startCol;
                }
                parent = parent->parent;
            }
        }
    
        NameAst* r = dynamic_cast<NameAst*>(result);
        if ( r ) {
            r->startCol = r->identifier->startCol;
            r->endCol = r->identifier->endCol;
            r->startLine = r->identifier->startLine;
            r->endLine = r->identifier->endLine;
        }
        return result;
    }


    Ast* visitNode(_arguments* node) {
        if ( ! node ) return 0; // return a nullpointer if no node is set, that's fine, everyone else will check for that.
                ArgumentsAst* v = new ArgumentsAst(parent());
            v->arguments = visitNodeList<_expr, ExpressionAst>(node->args);
            v->defaultValues = visitNodeList<_expr, ExpressionAst>(node->defaults);
            v->vararg = new Python::Identifier(PyString_AsString(PyObject_Str(node->vararg)));
            v->kwarg = new Python::Identifier(PyString_AsString(PyObject_Str(node->kwarg)));
        return v;
    }


    Ast* visitNode(_keyword* node) {
        if ( ! node ) return 0; // return a nullpointer if no node is set, that's fine, everyone else will check for that.
                KeywordAst* v = new KeywordAst(parent());
            v->argumentName = new Python::Identifier(PyString_AsString(PyObject_Str(node->arg)));
            v->value = static_cast<ExpressionAst*>(visitNode(node->value));
        return v;
    }

};

/*
 * End generated code
 */

CodeAst* AstBuilder::parse(KUrl filename, const QString& contents)
{
    const char* code = contents.toAscii();
//     const char* code = "Foo = 3\n";
    
    PyArena* arena = PyArena_New();
    Q_ASSERT(arena); // out of memory
    PyCompilerFlags* flags = new PyCompilerFlags();
    flags->cf_flags = 0;
    
    Py_Initialize();
    
    mod_ty syntaxtree = PyParser_ASTFromString(code, "<kdev-editor-contents>", file_input, flags, arena);
    
    if ( ! syntaxtree ) {
        kWarning() << "DID NOT RECEIVE A SYNTAX TREE -- probably parse error.";
        PyObject *exception, *value, *tb;
        PyErr_Fetch(&exception, &value, &tb);
        PyObject_Print(value, stderr, Py_PRINT_RAW);
        return 0;
    }
    kDebug() << syntaxtree->kind << Module_kind;
    kDebug() << reinterpret_cast<_stmt*>(syntaxtree->v.Module.body->elements[2])->kind;
    
    PythonAstTransformer* t = new PythonAstTransformer();
    t->run(syntaxtree);
    kDebug() << t->ast;
    
    return t->ast;
}

}

